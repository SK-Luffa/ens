!function(t, e) {
    "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.foxpsd = e() : t.foxpsd = e()
}(self, (function() {
        return (()=>{
                var t = {
                    1553: t=>{
                        t = function(t) {
                            "use strict";
                            var e, i = Object.prototype, n = i.hasOwnProperty, r = "function" == typeof Symbol ? Symbol : {}, s = r.iterator || "@@iterator", a = r.asyncIterator || "@@asyncIterator", o = r.toStringTag || "@@toStringTag";
                            function h(t, e, i) {
                                return Object.defineProperty(t, e, {
                                    value: i,
                                    enumerable: !0,
                                    configurable: !0,
                                    writable: !0
                                }),
                                    t[e]
                            }
                            try {
                                h({}, "")
                            } catch (i) {
                                h = function(t, e, i) {
                                    return t[e] = i
                                }
                            }
                            function l(t, i, n, r) {
                                var s, a, o, h;
                                i = i && i.prototype instanceof g ? i : g,
                                    i = Object.create(i.prototype),
                                    r = new C(r || []);
                                return i._invoke = (s = t,
                                        a = n,
                                        o = r,
                                        h = c,
                                        function(t, i) {
                                            if (h === p)
                                                throw new Error("Generator is already running");
                                            if (h === f) {
                                                if ("throw" === t)
                                                    throw i;
                                                return T()
                                            }
                                            for (o.method = t,
                                                     o.arg = i; ; ) {
                                                var n = o.delegate;
                                                if (n) {
                                                    var r = function t(i, n) {
                                                        var r;
                                                        if ((r = i.iterator[n.method]) === e) {
                                                            if (n.delegate = null,
                                                            "throw" === n.method) {
                                                                if (i.iterator.return && (n.method = "return",
                                                                    n.arg = e,
                                                                    t(i, n),
                                                                "throw" === n.method))
                                                                    return m;
                                                                n.method = "throw",
                                                                    n.arg = new TypeError("The iterator does not provide a 'throw' method")
                                                            }
                                                            return m
                                                        }
                                                        return "throw" === (r = u(r, i.iterator, n.arg)).type ? (n.method = "throw",
                                                            n.arg = r.arg,
                                                            n.delegate = null,
                                                            m) : (r = r.arg) ? r.done ? (n[i.resultName] = r.value,
                                                            n.next = i.nextLoc,
                                                        "return" !== n.method && (n.method = "next",
                                                            n.arg = e),
                                                            n.delegate = null,
                                                            m) : r : (n.method = "throw",
                                                            n.arg = new TypeError("iterator result is not an object"),
                                                            n.delegate = null,
                                                            m)
                                                    }(n, o);
                                                    if (r) {
                                                        if (r === m)
                                                            continue;
                                                        return r
                                                    }
                                                }
                                                if ("next" === o.method)
                                                    o.sent = o._sent = o.arg;
                                                else if ("throw" === o.method) {
                                                    if (h === c)
                                                        throw h = f,
                                                            o.arg;
                                                    o.dispatchException(o.arg)
                                                } else
                                                    "return" === o.method && o.abrupt("return", o.arg);
                                                if (h = p,
                                                "normal" === (r = u(s, a, o)).type) {
                                                    if (h = o.done ? f : d,
                                                    r.arg !== m)
                                                        return {
                                                            value: r.arg,
                                                            done: o.done
                                                        }
                                                } else
                                                    "throw" === r.type && (h = f,
                                                        o.method = "throw",
                                                        o.arg = r.arg)
                                            }
                                        }
                                ),
                                    i
                            }
                            function u(t, e, i) {
                                try {
                                    return {
                                        type: "normal",
                                        arg: t.call(e, i)
                                    }
                                } catch (t) {
                                    return {
                                        type: "throw",
                                        arg: t
                                    }
                                }
                            }
                            t.wrap = l;
                            var c = "suspendedStart"
                                , d = "suspendedYield"
                                , p = "executing"
                                , f = "completed"
                                , m = {};
                            function g() {}
                            function v() {}
                            function _() {}
                            var y = {};
                            h(y, s, (function() {
                                    return this
                                }
                            )),
                            (r = (r = Object.getPrototypeOf) && r(r(A([])))) && r !== i && n.call(r, s) && (y = r);
                            var x = _.prototype = g.prototype = Object.create(y);
                            function b(t) {
                                ["next", "throw", "return"].forEach((function(e) {
                                        h(t, e, (function(t) {
                                                return this._invoke(e, t)
                                            }
                                        ))
                                    }
                                ))
                            }
                            function w(t, e) {
                                var i;
                                this._invoke = function(r, s) {
                                    function a() {
                                        return new e((function(i, a) {
                                                !function i(r, s, a, o) {
                                                    if ("throw" !== (r = u(t[r], t, s)).type) {
                                                        var h = r.arg;
                                                        return (s = h.value) && "object" == typeof s && n.call(s, "__await") ? e.resolve(s.__await).then((function(t) {
                                                                i("next", t, a, o)
                                                            }
                                                        ), (function(t) {
                                                                i("throw", t, a, o)
                                                            }
                                                        )) : e.resolve(s).then((function(t) {
                                                                h.value = t,
                                                                    a(h)
                                                            }
                                                        ), (function(t) {
                                                                return i("throw", t, a, o)
                                                            }
                                                        ))
                                                    }
                                                    o(r.arg)
                                                }(r, s, i, a)
                                            }
                                        ))
                                    }
                                    return i = i ? i.then(a, a) : a()
                                }
                            }
                            function S(t) {
                                var e = {
                                    tryLoc: t[0]
                                };
                                1 in t && (e.catchLoc = t[1]),
                                2 in t && (e.finallyLoc = t[2],
                                    e.afterLoc = t[3]),
                                    this.tryEntries.push(e)
                            }
                            function M(t) {
                                var e = t.completion || {};
                                e.type = "normal",
                                    delete e.arg,
                                    t.completion = e
                            }
                            function C(t) {
                                this.tryEntries = [{
                                    tryLoc: "root"
                                }],
                                    t.forEach(S, this),
                                    this.reset(!0)
                            }
                            function A(t) {
                                if (t) {
                                    if (i = t[s])
                                        return i.call(t);
                                    if ("function" == typeof t.next)
                                        return t;
                                    if (!isNaN(t.length)) {
                                        var i, r = -1;
                                        return (i = function i() {
                                                for (; ++r < t.length; )
                                                    if (n.call(t, r))
                                                        return i.value = t[r],
                                                            i.done = !1,
                                                            i;
                                                return i.value = e,
                                                    i.done = !0,
                                                    i
                                            }
                                        ).next = i
                                    }
                                }
                                return {
                                    next: T
                                }
                            }
                            function T() {
                                return {
                                    value: e,
                                    done: !0
                                }
                            }
                            return h(x, "constructor", v.prototype = _),
                                h(_, "constructor", v),
                                v.displayName = h(_, o, "GeneratorFunction"),
                                t.isGeneratorFunction = function(t) {
                                    return !!(t = "function" == typeof t && t.constructor) && (t === v || "GeneratorFunction" === (t.displayName || t.name))
                                }
                                ,
                                t.mark = function(t) {
                                    return Object.setPrototypeOf ? Object.setPrototypeOf(t, _) : (t.__proto__ = _,
                                        h(t, o, "GeneratorFunction")),
                                        t.prototype = Object.create(x),
                                        t
                                }
                                ,
                                t.awrap = function(t) {
                                    return {
                                        __await: t
                                    }
                                }
                                ,
                                b(w.prototype),
                                h(w.prototype, a, (function() {
                                        return this
                                    }
                                )),
                                t.AsyncIterator = w,
                                t.async = function(e, i, n, r, s) {
                                    void 0 === s && (s = Promise);
                                    var a = new w(l(e, i, n, r),s);
                                    return t.isGeneratorFunction(i) ? a : a.next().then((function(t) {
                                            return t.done ? t.value : a.next()
                                        }
                                    ))
                                }
                                ,
                                b(x),
                                h(x, o, "Generator"),
                                h(x, s, (function() {
                                        return this
                                    }
                                )),
                                h(x, "toString", (function() {
                                        return "[object Generator]"
                                    }
                                )),
                                t.keys = function(t) {
                                    var e, i = [];
                                    for (e in t)
                                        i.push(e);
                                    return i.reverse(),
                                        function e() {
                                            for (; i.length; ) {
                                                var n = i.pop();
                                                if (n in t)
                                                    return e.value = n,
                                                        e.done = !1,
                                                        e
                                            }
                                            return e.done = !0,
                                                e
                                        }
                                }
                                ,
                                t.values = A,
                                C.prototype = {
                                    constructor: C,
                                    reset: function(t) {
                                        if (this.prev = 0,
                                            this.next = 0,
                                            this.sent = this._sent = e,
                                            this.done = !1,
                                            this.delegate = null,
                                            this.method = "next",
                                            this.arg = e,
                                            this.tryEntries.forEach(M),
                                            !t)
                                            for (var i in this)
                                                "t" === i.charAt(0) && n.call(this, i) && !isNaN(+i.slice(1)) && (this[i] = e)
                                    },
                                    stop: function() {
                                        this.done = !0;
                                        var t = this.tryEntries[0].completion;
                                        if ("throw" === t.type)
                                            throw t.arg;
                                        return this.rval
                                    },
                                    dispatchException: function(t) {
                                        if (this.done)
                                            throw t;
                                        var i = this;
                                        function r(n, r) {
                                            return o.type = "throw",
                                                o.arg = t,
                                                i.next = n,
                                            r && (i.method = "next",
                                                i.arg = e),
                                                !!r
                                        }
                                        for (var s = this.tryEntries.length - 1; 0 <= s; --s) {
                                            var a = this.tryEntries[s]
                                                , o = a.completion;
                                            if ("root" === a.tryLoc)
                                                return r("end");
                                            if (a.tryLoc <= this.prev) {
                                                var h = n.call(a, "catchLoc")
                                                    , l = n.call(a, "finallyLoc");
                                                if (h && l) {
                                                    if (this.prev < a.catchLoc)
                                                        return r(a.catchLoc, !0);
                                                    if (this.prev < a.finallyLoc)
                                                        return r(a.finallyLoc)
                                                } else if (h) {
                                                    if (this.prev < a.catchLoc)
                                                        return r(a.catchLoc, !0)
                                                } else {
                                                    if (!l)
                                                        throw new Error("try statement without catch or finally");
                                                    if (this.prev < a.finallyLoc)
                                                        return r(a.finallyLoc)
                                                }
                                            }
                                        }
                                    },
                                    abrupt: function(t, e) {
                                        for (var i = this.tryEntries.length - 1; 0 <= i; --i) {
                                            var r = this.tryEntries[i];
                                            if (r.tryLoc <= this.prev && n.call(r, "finallyLoc") && this.prev < r.finallyLoc) {
                                                var s = r;
                                                break
                                            }
                                        }
                                        var a = (s = s && ("break" === t || "continue" === t) && s.tryLoc <= e && e <= s.finallyLoc ? null : s) ? s.completion : {};
                                        return a.type = t,
                                            a.arg = e,
                                            s ? (this.method = "next",
                                                this.next = s.finallyLoc,
                                                m) : this.complete(a)
                                    },
                                    complete: function(t, e) {
                                        if ("throw" === t.type)
                                            throw t.arg;
                                        return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg,
                                            this.method = "return",
                                            this.next = "end") : "normal" === t.type && e && (this.next = e),
                                            m
                                    },
                                    finish: function(t) {
                                        for (var e = this.tryEntries.length - 1; 0 <= e; --e) {
                                            var i = this.tryEntries[e];
                                            if (i.finallyLoc === t)
                                                return this.complete(i.completion, i.afterLoc),
                                                    M(i),
                                                    m
                                        }
                                    },
                                    catch: function(t) {
                                        for (var e = this.tryEntries.length - 1; 0 <= e; --e) {
                                            var i = this.tryEntries[e];
                                            if (i.tryLoc === t) {
                                                var n, r = i.completion;
                                                return "throw" === r.type && (n = r.arg,
                                                    M(i)),
                                                    n
                                            }
                                        }
                                        throw new Error("illegal catch attempt")
                                    },
                                    delegateYield: function(t, i, n) {
                                        return this.delegate = {
                                            iterator: A(t),
                                            resultName: i,
                                            nextLoc: n
                                        },
                                        "next" === this.method && (this.arg = e),
                                            m
                                    }
                                },
                                t
                        }(t.exports);
                        try {
                            regeneratorRuntime = t
                        } catch (e) {
                            "object" == typeof globalThis ? globalThis.regeneratorRuntime = t : Function("r", "regeneratorRuntime = r")(t)
                        }
                    }
                    ,
                    7757: (t,e,i)=>{
                        t.exports = i(1553)
                    }
                    ,
                    1234: function(t, e) {
                        !function(t) {
                            "use strict";
                            var e = {
                                3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
                                5: "class enum extends super const export import",
                                6: "enum",
                                strict: "implements interface let package private protected public static yield",
                                strictBind: "eval arguments"
                            }
                                , i = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this"
                                , n = {
                                5: i,
                                "5module": i + " export import",
                                6: i + " const class extends export import super"
                            }
                                , r = /^in(stanceof)?$/
                                , s = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ"
                                , a = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿"
                                , o = new RegExp("[" + s + "]")
                                , h = new RegExp("[" + s + a + "]")
                                , l = (s = a = null,
                                [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938])
                                , u = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
                            function c(t, e) {
                                for (var i = 65536, n = 0; n < e.length; n += 2) {
                                    if ((i += e[n]) > t)
                                        return !1;
                                    if ((i += e[n + 1]) >= t)
                                        return !0
                                }
                            }
                            function d(t, e) {
                                return t < 65 ? 36 === t : t < 91 || (t < 97 ? 95 === t : t < 123 || (t <= 65535 ? t >= 170 && o.test(String.fromCharCode(t)) : !1 !== e && c(t, l)))
                            }
                            function p(t, e) {
                                return t < 48 ? 36 === t : t < 58 || !(t < 65) && (t < 91 || (t < 97 ? 95 === t : t < 123 || (t <= 65535 ? t >= 170 && h.test(String.fromCharCode(t)) : !1 !== e && (c(t, l) || c(t, u)))))
                            }
                            var f = function(t, e) {
                                void 0 === e && (e = {}),
                                    this.label = t,
                                    this.keyword = e.keyword,
                                    this.beforeExpr = !!e.beforeExpr,
                                    this.startsExpr = !!e.startsExpr,
                                    this.isLoop = !!e.isLoop,
                                    this.isAssign = !!e.isAssign,
                                    this.prefix = !!e.prefix,
                                    this.postfix = !!e.postfix,
                                    this.binop = e.binop || null,
                                    this.updateContext = null
                            };
                            function m(t, e) {
                                return new f(t,{
                                    beforeExpr: !0,
                                    binop: e
                                })
                            }
                            var g = {
                                beforeExpr: !0
                            }
                                , v = {
                                startsExpr: !0
                            }
                                , _ = {};
                            function y(t, e) {
                                return void 0 === e && (e = {}),
                                    e.keyword = t,
                                    _[t] = new f(t,e)
                            }
                            var x = {
                                num: new f("num",v),
                                regexp: new f("regexp",v),
                                string: new f("string",v),
                                name: new f("name",v),
                                privateId: new f("privateId",v),
                                eof: new f("eof"),
                                bracketL: new f("[",{
                                    beforeExpr: !0,
                                    startsExpr: !0
                                }),
                                bracketR: new f("]"),
                                braceL: new f("{",{
                                    beforeExpr: !0,
                                    startsExpr: !0
                                }),
                                braceR: new f("}"),
                                parenL: new f("(",{
                                    beforeExpr: !0,
                                    startsExpr: !0
                                }),
                                parenR: new f(")"),
                                comma: new f(",",g),
                                semi: new f(";",g),
                                colon: new f(":",g),
                                dot: new f("."),
                                question: new f("?",g),
                                questionDot: new f("?."),
                                arrow: new f("=>",g),
                                template: new f("template"),
                                invalidTemplate: new f("invalidTemplate"),
                                ellipsis: new f("...",g),
                                backQuote: new f("`",v),
                                dollarBraceL: new f("${",{
                                    beforeExpr: !0,
                                    startsExpr: !0
                                }),
                                eq: new f("=",{
                                    beforeExpr: !0,
                                    isAssign: !0
                                }),
                                assign: new f("_=",{
                                    beforeExpr: !0,
                                    isAssign: !0
                                }),
                                incDec: new f("++/--",{
                                    prefix: !0,
                                    postfix: !0,
                                    startsExpr: !0
                                }),
                                prefix: new f("!/~",{
                                    beforeExpr: !0,
                                    prefix: !0,
                                    startsExpr: !0
                                }),
                                logicalOR: m("||", 1),
                                logicalAND: m("&&", 2),
                                bitwiseOR: m("|", 3),
                                bitwiseXOR: m("^", 4),
                                bitwiseAND: m("&", 5),
                                equality: m("==/!=/===/!==", 6),
                                relational: m("</>/<=/>=", 7),
                                bitShift: m("<</>>/>>>", 8),
                                plusMin: new f("+/-",{
                                    beforeExpr: !0,
                                    binop: 9,
                                    prefix: !0,
                                    startsExpr: !0
                                }),
                                modulo: m("%", 10),
                                star: m("*", 10),
                                slash: m("/", 10),
                                starstar: new f("**",{
                                    beforeExpr: !0
                                }),
                                coalesce: m("??", 1),
                                _break: y("break"),
                                _case: y("case", g),
                                _catch: y("catch"),
                                _continue: y("continue"),
                                _debugger: y("debugger"),
                                _default: y("default", g),
                                _do: y("do", {
                                    isLoop: !0,
                                    beforeExpr: !0
                                }),
                                _else: y("else", g),
                                _finally: y("finally"),
                                _for: y("for", {
                                    isLoop: !0
                                }),
                                _function: y("function", v),
                                _if: y("if"),
                                _return: y("return", g),
                                _switch: y("switch"),
                                _throw: y("throw", g),
                                _try: y("try"),
                                _var: y("var"),
                                _const: y("const"),
                                _while: y("while", {
                                    isLoop: !0
                                }),
                                _with: y("with"),
                                _new: y("new", {
                                    beforeExpr: !0,
                                    startsExpr: !0
                                }),
                                _this: y("this", v),
                                _super: y("super", v),
                                _class: y("class", v),
                                _extends: y("extends", g),
                                _export: y("export"),
                                _import: y("import", v),
                                _null: y("null", v),
                                _true: y("true", v),
                                _false: y("false", v),
                                _in: y("in", {
                                    beforeExpr: !0,
                                    binop: 7
                                }),
                                _instanceof: y("instanceof", {
                                    beforeExpr: !0,
                                    binop: 7
                                }),
                                _typeof: y("typeof", {
                                    beforeExpr: !0,
                                    prefix: !0,
                                    startsExpr: !0
                                }),
                                _void: y("void", {
                                    beforeExpr: !0,
                                    prefix: !0,
                                    startsExpr: !0
                                }),
                                _delete: y("delete", {
                                    beforeExpr: !0,
                                    prefix: !0,
                                    startsExpr: !0
                                })
                            }
                                , b = /\r\n?|\n|\u2028|\u2029/
                                , w = new RegExp(b.source,"g");
                            function S(t) {
                                return 10 === t || 13 === t || 8232 === t || 8233 === t
                            }
                            function M(t, e, i) {
                                void 0 === i && (i = t.length);
                                for (var n = e; n < i; n++) {
                                    var r = t.charCodeAt(n);
                                    if (S(r))
                                        return n < i - 1 && 13 === r && 10 === t.charCodeAt(n + 1) ? n + 2 : n + 1
                                }
                                return -1
                            }
                            var C = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/
                                , A = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g
                                , T = Object.prototype
                                , P = T.hasOwnProperty
                                , E = T.toString
                                , L = Object.hasOwn || function(t, e) {
                                    return P.call(t, e)
                                }
                                , I = Array.isArray || function(t) {
                                    return "[object Array]" === E.call(t)
                                }
                            ;
                            function k(t) {
                                return new RegExp("^(?:" + t.replace(/ /g, "|") + ")$")
                            }
                            var N = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/
                                , O = function(t, e) {
                                this.line = t,
                                    this.column = e
                            };
                            O.prototype.offset = function(t) {
                                return new O(this.line,this.column + t)
                            }
                            ;
                            var D = function(t, e, i) {
                                this.start = e,
                                    this.end = i,
                                null !== t.sourceFile && (this.source = t.sourceFile)
                            };
                            function R(t, e) {
                                for (var i = 1, n = 0; ; ) {
                                    var r = M(t, n, e);
                                    if (r < 0)
                                        return new O(i,e - n);
                                    ++i,
                                        n = r
                                }
                            }
                            var z = {
                                ecmaVersion: null,
                                sourceType: "script",
                                onInsertedSemicolon: null,
                                onTrailingComma: null,
                                allowReserved: null,
                                allowReturnOutsideFunction: !1,
                                allowImportExportEverywhere: !1,
                                allowAwaitOutsideFunction: null,
                                allowSuperOutsideMethod: null,
                                allowHashBang: !1,
                                locations: !1,
                                onToken: null,
                                onComment: null,
                                ranges: !1,
                                program: null,
                                sourceFile: null,
                                directSourceFile: null,
                                preserveParens: !1
                            }
                                , F = !1;
                            function B(t) {
                                var e = {};
                                for (var i in z)
                                    e[i] = t && L(t, i) ? t[i] : z[i];
                                if ("latest" === e.ecmaVersion ? e.ecmaVersion = 1e8 : null == e.ecmaVersion ? (!F && "object" == typeof console && console.warn && (F = !0,
                                    console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.")),
                                    e.ecmaVersion = 11) : e.ecmaVersion >= 2015 && (e.ecmaVersion -= 2009),
                                null == e.allowReserved && (e.allowReserved = e.ecmaVersion < 5),
                                    I(e.onToken)) {
                                    var n = e.onToken;
                                    e.onToken = function(t) {
                                        return n.push(t)
                                    }
                                }
                                return I(e.onComment) && (e.onComment = function(t, e) {
                                    return function(i, n, r, s, a, o) {
                                        var h = {
                                            type: i ? "Block" : "Line",
                                            value: n,
                                            start: r,
                                            end: s
                                        };
                                        t.locations && (h.loc = new D(this,a,o)),
                                        t.ranges && (h.range = [r, s]),
                                            e.push(h)
                                    }
                                }(e, e.onComment)),
                                    e
                            }
                            var V = 256;
                            function U(t, e) {
                                return 2 | (t ? 4 : 0) | (e ? 8 : 0)
                            }
                            var G = function(t, i, r) {
                                this.options = t = B(t),
                                    this.sourceFile = t.sourceFile,
                                    this.keywords = k(n[t.ecmaVersion >= 6 ? 6 : "module" === t.sourceType ? "5module" : 5]);
                                var s = "";
                                !0 !== t.allowReserved && (s = e[t.ecmaVersion >= 6 ? 6 : 5 === t.ecmaVersion ? 5 : 3],
                                "module" === t.sourceType && (s += " await")),
                                    this.reservedWords = k(s);
                                var a = (s ? s + " " : "") + e.strict;
                                this.reservedWordsStrict = k(a),
                                    this.reservedWordsStrictBind = k(a + " " + e.strictBind),
                                    this.input = String(i),
                                    this.containsEsc = !1,
                                    r ? (this.pos = r,
                                        this.lineStart = this.input.lastIndexOf("\n", r - 1) + 1,
                                        this.curLine = this.input.slice(0, this.lineStart).split(b).length) : (this.pos = this.lineStart = 0,
                                        this.curLine = 1),
                                    this.type = x.eof,
                                    this.value = null,
                                    this.start = this.end = this.pos,
                                    this.startLoc = this.endLoc = this.curPosition(),
                                    this.lastTokEndLoc = this.lastTokStartLoc = null,
                                    this.lastTokStart = this.lastTokEnd = this.pos,
                                    this.context = this.initialContext(),
                                    this.exprAllowed = !0,
                                    this.inModule = "module" === t.sourceType,
                                    this.strict = this.inModule || this.strictDirective(this.pos),
                                    this.potentialArrowAt = -1,
                                    this.potentialArrowInForAwait = !1,
                                    this.yieldPos = this.awaitPos = this.awaitIdentPos = 0,
                                    this.labels = [],
                                    this.undefinedExports = Object.create(null),
                                0 === this.pos && t.allowHashBang && "#!" === this.input.slice(0, 2) && this.skipLineComment(2),
                                    this.scopeStack = [],
                                    this.enterScope(1),
                                    this.regexpState = null,
                                    this.privateNameStack = []
                            }
                                , W = {
                                inFunction: {
                                    configurable: !0
                                },
                                inGenerator: {
                                    configurable: !0
                                },
                                inAsync: {
                                    configurable: !0
                                },
                                canAwait: {
                                    configurable: !0
                                },
                                allowSuper: {
                                    configurable: !0
                                },
                                allowDirectSuper: {
                                    configurable: !0
                                },
                                treatFunctionsAsVar: {
                                    configurable: !0
                                },
                                allowNewDotTarget: {
                                    configurable: !0
                                },
                                inClassStaticBlock: {
                                    configurable: !0
                                }
                            };
                            G.prototype.parse = function() {
                                var t = this.options.program || this.startNode();
                                return this.nextToken(),
                                    this.parseTopLevel(t)
                            }
                                ,
                                W.inFunction.get = function() {
                                    return (2 & this.currentVarScope().flags) > 0
                                }
                                ,
                                W.inGenerator.get = function() {
                                    return (8 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit
                                }
                                ,
                                W.inAsync.get = function() {
                                    return (4 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit
                                }
                                ,
                                W.canAwait.get = function() {
                                    for (var t = this.scopeStack.length - 1; t >= 0; t--) {
                                        var e = this.scopeStack[t];
                                        if (e.inClassFieldInit || e.flags & V)
                                            return !1;
                                        if (2 & e.flags)
                                            return (4 & e.flags) > 0
                                    }
                                    return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction
                                }
                                ,
                                W.allowSuper.get = function() {
                                    var t = this.currentThisScope()
                                        , e = t.flags
                                        , i = t.inClassFieldInit;
                                    return (64 & e) > 0 || i || this.options.allowSuperOutsideMethod
                                }
                                ,
                                W.allowDirectSuper.get = function() {
                                    return (128 & this.currentThisScope().flags) > 0
                                }
                                ,
                                W.treatFunctionsAsVar.get = function() {
                                    return this.treatFunctionsAsVarInScope(this.currentScope())
                                }
                                ,
                                W.allowNewDotTarget.get = function() {
                                    var t = this.currentThisScope()
                                        , e = t.flags
                                        , i = t.inClassFieldInit;
                                    return (258 & e) > 0 || i
                                }
                                ,
                                W.inClassStaticBlock.get = function() {
                                    return (this.currentVarScope().flags & V) > 0
                                }
                                ,
                                G.extend = function() {
                                    for (var t = [], e = arguments.length; e--; )
                                        t[e] = arguments[e];
                                    for (var i = this, n = 0; n < t.length; n++)
                                        i = t[n](i);
                                    return i
                                }
                                ,
                                G.parse = function(t, e) {
                                    return new this(e,t).parse()
                                }
                                ,
                                G.parseExpressionAt = function(t, e, i) {
                                    var n = new this(i,t,e);
                                    return n.nextToken(),
                                        n.parseExpression()
                                }
                                ,
                                G.tokenizer = function(t, e) {
                                    return new this(e,t)
                                }
                                ,
                                Object.defineProperties(G.prototype, W);
                            var j = G.prototype
                                , H = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
                            function q() {
                                this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1
                            }
                            j.strictDirective = function(t) {
                                for (; ; ) {
                                    A.lastIndex = t,
                                        t += A.exec(this.input)[0].length;
                                    var e = H.exec(this.input.slice(t));
                                    if (!e)
                                        return !1;
                                    if ("use strict" === (e[1] || e[2])) {
                                        A.lastIndex = t + e[0].length;
                                        var i = A.exec(this.input)
                                            , n = i.index + i[0].length
                                            , r = this.input.charAt(n);
                                        return ";" === r || "}" === r || b.test(i[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(r) || "!" === r && "=" === this.input.charAt(n + 1))
                                    }
                                    t += e[0].length,
                                        A.lastIndex = t,
                                        t += A.exec(this.input)[0].length,
                                    ";" === this.input[t] && t++
                                }
                            }
                                ,
                                j.eat = function(t) {
                                    return this.type === t && (this.next(),
                                        !0)
                                }
                                ,
                                j.isContextual = function(t) {
                                    return this.type === x.name && this.value === t && !this.containsEsc
                                }
                                ,
                                j.eatContextual = function(t) {
                                    return !!this.isContextual(t) && (this.next(),
                                        !0)
                                }
                                ,
                                j.expectContextual = function(t) {
                                    this.eatContextual(t) || this.unexpected()
                                }
                                ,
                                j.canInsertSemicolon = function() {
                                    return this.type === x.eof || this.type === x.braceR || b.test(this.input.slice(this.lastTokEnd, this.start))
                                }
                                ,
                                j.insertSemicolon = function() {
                                    if (this.canInsertSemicolon())
                                        return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc),
                                            !0
                                }
                                ,
                                j.semicolon = function() {
                                    this.eat(x.semi) || this.insertSemicolon() || this.unexpected()
                                }
                                ,
                                j.afterTrailingComma = function(t, e) {
                                    if (this.type === t)
                                        return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc),
                                        e || this.next(),
                                            !0
                                }
                                ,
                                j.expect = function(t) {
                                    this.eat(t) || this.unexpected()
                                }
                                ,
                                j.unexpected = function(t) {
                                    this.raise(null != t ? t : this.start, "Unexpected token")
                                }
                                ,
                                j.checkPatternErrors = function(t, e) {
                                    if (t) {
                                        t.trailingComma > -1 && this.raiseRecoverable(t.trailingComma, "Comma is not permitted after the rest element");
                                        var i = e ? t.parenthesizedAssign : t.parenthesizedBind;
                                        i > -1 && this.raiseRecoverable(i, "Parenthesized pattern")
                                    }
                                }
                                ,
                                j.checkExpressionErrors = function(t, e) {
                                    if (!t)
                                        return !1;
                                    var i = t.shorthandAssign
                                        , n = t.doubleProto;
                                    if (!e)
                                        return i >= 0 || n >= 0;
                                    i >= 0 && this.raise(i, "Shorthand property assignments are valid only in destructuring patterns"),
                                    n >= 0 && this.raiseRecoverable(n, "Redefinition of __proto__ property")
                                }
                                ,
                                j.checkYieldAwaitInDefaultParams = function() {
                                    this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"),
                                    this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value")
                                }
                                ,
                                j.isSimpleAssignTarget = function(t) {
                                    return "ParenthesizedExpression" === t.type ? this.isSimpleAssignTarget(t.expression) : "Identifier" === t.type || "MemberExpression" === t.type
                                }
                            ;
                            var X = G.prototype;
                            X.parseTopLevel = function(t) {
                                var e = Object.create(null);
                                for (t.body || (t.body = []); this.type !== x.eof; ) {
                                    var i = this.parseStatement(null, !0, e);
                                    t.body.push(i)
                                }
                                if (this.inModule)
                                    for (var n = 0, r = Object.keys(this.undefinedExports); n < r.length; n += 1) {
                                        var s = r[n];
                                        this.raiseRecoverable(this.undefinedExports[s].start, "Export '" + s + "' is not defined")
                                    }
                                return this.adaptDirectivePrologue(t.body),
                                    this.next(),
                                    t.sourceType = this.options.sourceType,
                                    this.finishNode(t, "Program")
                            }
                            ;
                            var Z = {
                                kind: "loop"
                            }
                                , J = {
                                kind: "switch"
                            };
                            X.isLet = function(t) {
                                if (this.options.ecmaVersion < 6 || !this.isContextual("let"))
                                    return !1;
                                A.lastIndex = this.pos;
                                var e = A.exec(this.input)
                                    , i = this.pos + e[0].length
                                    , n = this.input.charCodeAt(i);
                                if (91 === n || 92 === n || n > 55295 && n < 56320)
                                    return !0;
                                if (t)
                                    return !1;
                                if (123 === n)
                                    return !0;
                                if (d(n, !0)) {
                                    for (var s = i + 1; p(n = this.input.charCodeAt(s), !0); )
                                        ++s;
                                    if (92 === n || n > 55295 && n < 56320)
                                        return !0;
                                    var a = this.input.slice(i, s);
                                    if (!r.test(a))
                                        return !0
                                }
                                return !1
                            }
                                ,
                                X.isAsyncFunction = function() {
                                    if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
                                        return !1;
                                    A.lastIndex = this.pos;
                                    var t, e = A.exec(this.input), i = this.pos + e[0].length;
                                    return !(b.test(this.input.slice(this.pos, i)) || "function" !== this.input.slice(i, i + 8) || i + 8 !== this.input.length && (p(t = this.input.charCodeAt(i + 8)) || t > 55295 && t < 56320))
                                }
                                ,
                                X.parseStatement = function(t, e, i) {
                                    var n, r = this.type, s = this.startNode();
                                    switch (this.isLet(t) && (r = x._var,
                                        n = "let"),
                                        r) {
                                        case x._break:
                                        case x._continue:
                                            return this.parseBreakContinueStatement(s, r.keyword);
                                        case x._debugger:
                                            return this.parseDebuggerStatement(s);
                                        case x._do:
                                            return this.parseDoStatement(s);
                                        case x._for:
                                            return this.parseForStatement(s);
                                        case x._function:
                                            return t && (this.strict || "if" !== t && "label" !== t) && this.options.ecmaVersion >= 6 && this.unexpected(),
                                                this.parseFunctionStatement(s, !1, !t);
                                        case x._class:
                                            return t && this.unexpected(),
                                                this.parseClass(s, !0);
                                        case x._if:
                                            return this.parseIfStatement(s);
                                        case x._return:
                                            return this.parseReturnStatement(s);
                                        case x._switch:
                                            return this.parseSwitchStatement(s);
                                        case x._throw:
                                            return this.parseThrowStatement(s);
                                        case x._try:
                                            return this.parseTryStatement(s);
                                        case x._const:
                                        case x._var:
                                            return n = n || this.value,
                                            t && "var" !== n && this.unexpected(),
                                                this.parseVarStatement(s, n);
                                        case x._while:
                                            return this.parseWhileStatement(s);
                                        case x._with:
                                            return this.parseWithStatement(s);
                                        case x.braceL:
                                            return this.parseBlock(!0, s);
                                        case x.semi:
                                            return this.parseEmptyStatement(s);
                                        case x._export:
                                        case x._import:
                                            if (this.options.ecmaVersion > 10 && r === x._import) {
                                                A.lastIndex = this.pos;
                                                var a = A.exec(this.input)
                                                    , o = this.pos + a[0].length
                                                    , h = this.input.charCodeAt(o);
                                                if (40 === h || 46 === h)
                                                    return this.parseExpressionStatement(s, this.parseExpression())
                                            }
                                            return this.options.allowImportExportEverywhere || (e || this.raise(this.start, "'import' and 'export' may only appear at the top level"),
                                            this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")),
                                                r === x._import ? this.parseImport(s) : this.parseExport(s, i);
                                        default:
                                            if (this.isAsyncFunction())
                                                return t && this.unexpected(),
                                                    this.next(),
                                                    this.parseFunctionStatement(s, !0, !t);
                                            var l = this.value
                                                , u = this.parseExpression();
                                            return r === x.name && "Identifier" === u.type && this.eat(x.colon) ? this.parseLabeledStatement(s, l, u, t) : this.parseExpressionStatement(s, u)
                                    }
                                }
                                ,
                                X.parseBreakContinueStatement = function(t, e) {
                                    var i = "break" === e;
                                    this.next(),
                                        this.eat(x.semi) || this.insertSemicolon() ? t.label = null : this.type !== x.name ? this.unexpected() : (t.label = this.parseIdent(),
                                            this.semicolon());
                                    for (var n = 0; n < this.labels.length; ++n) {
                                        var r = this.labels[n];
                                        if (null == t.label || r.name === t.label.name) {
                                            if (null != r.kind && (i || "loop" === r.kind))
                                                break;
                                            if (t.label && i)
                                                break
                                        }
                                    }
                                    return n === this.labels.length && this.raise(t.start, "Unsyntactic " + e),
                                        this.finishNode(t, i ? "BreakStatement" : "ContinueStatement")
                                }
                                ,
                                X.parseDebuggerStatement = function(t) {
                                    return this.next(),
                                        this.semicolon(),
                                        this.finishNode(t, "DebuggerStatement")
                                }
                                ,
                                X.parseDoStatement = function(t) {
                                    return this.next(),
                                        this.labels.push(Z),
                                        t.body = this.parseStatement("do"),
                                        this.labels.pop(),
                                        this.expect(x._while),
                                        t.test = this.parseParenExpression(),
                                        this.options.ecmaVersion >= 6 ? this.eat(x.semi) : this.semicolon(),
                                        this.finishNode(t, "DoWhileStatement")
                                }
                                ,
                                X.parseForStatement = function(t) {
                                    this.next();
                                    var e = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
                                    if (this.labels.push(Z),
                                        this.enterScope(0),
                                        this.expect(x.parenL),
                                    this.type === x.semi)
                                        return e > -1 && this.unexpected(e),
                                            this.parseFor(t, null);
                                    var i = this.isLet();
                                    if (this.type === x._var || this.type === x._const || i) {
                                        var n = this.startNode()
                                            , r = i ? "let" : this.value;
                                        return this.next(),
                                            this.parseVar(n, !0, r),
                                            this.finishNode(n, "VariableDeclaration"),
                                            (this.type === x._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && 1 === n.declarations.length ? (this.options.ecmaVersion >= 9 && (this.type === x._in ? e > -1 && this.unexpected(e) : t.await = e > -1),
                                                this.parseForIn(t, n)) : (e > -1 && this.unexpected(e),
                                                this.parseFor(t, n))
                                    }
                                    var s = this.isContextual("let")
                                        , a = !1
                                        , o = new q
                                        , h = this.parseExpression(!(e > -1) || "await", o);
                                    return this.type === x._in || (a = this.options.ecmaVersion >= 6 && this.isContextual("of")) ? (this.options.ecmaVersion >= 9 && (this.type === x._in ? e > -1 && this.unexpected(e) : t.await = e > -1),
                                    s && a && this.raise(h.start, "The left-hand side of a for-of loop may not start with 'let'."),
                                        this.toAssignable(h, !1, o),
                                        this.checkLValPattern(h),
                                        this.parseForIn(t, h)) : (this.checkExpressionErrors(o, !0),
                                    e > -1 && this.unexpected(e),
                                        this.parseFor(t, h))
                                }
                                ,
                                X.parseFunctionStatement = function(t, e, i) {
                                    return this.next(),
                                        this.parseFunction(t, Q | (i ? 0 : K), !1, e)
                                }
                                ,
                                X.parseIfStatement = function(t) {
                                    return this.next(),
                                        t.test = this.parseParenExpression(),
                                        t.consequent = this.parseStatement("if"),
                                        t.alternate = this.eat(x._else) ? this.parseStatement("if") : null,
                                        this.finishNode(t, "IfStatement")
                                }
                                ,
                                X.parseReturnStatement = function(t) {
                                    return this.inFunction || this.options.allowReturnOutsideFunction || this.raise(this.start, "'return' outside of function"),
                                        this.next(),
                                        this.eat(x.semi) || this.insertSemicolon() ? t.argument = null : (t.argument = this.parseExpression(),
                                            this.semicolon()),
                                        this.finishNode(t, "ReturnStatement")
                                }
                                ,
                                X.parseSwitchStatement = function(t) {
                                    var e;
                                    this.next(),
                                        t.discriminant = this.parseParenExpression(),
                                        t.cases = [],
                                        this.expect(x.braceL),
                                        this.labels.push(J),
                                        this.enterScope(0);
                                    for (var i = !1; this.type !== x.braceR; )
                                        if (this.type === x._case || this.type === x._default) {
                                            var n = this.type === x._case;
                                            e && this.finishNode(e, "SwitchCase"),
                                                t.cases.push(e = this.startNode()),
                                                e.consequent = [],
                                                this.next(),
                                                n ? e.test = this.parseExpression() : (i && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"),
                                                    i = !0,
                                                    e.test = null),
                                                this.expect(x.colon)
                                        } else
                                            e || this.unexpected(),
                                                e.consequent.push(this.parseStatement(null));
                                    return this.exitScope(),
                                    e && this.finishNode(e, "SwitchCase"),
                                        this.next(),
                                        this.labels.pop(),
                                        this.finishNode(t, "SwitchStatement")
                                }
                                ,
                                X.parseThrowStatement = function(t) {
                                    return this.next(),
                                    b.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"),
                                        t.argument = this.parseExpression(),
                                        this.semicolon(),
                                        this.finishNode(t, "ThrowStatement")
                                }
                            ;
                            var Y = [];
                            X.parseTryStatement = function(t) {
                                if (this.next(),
                                    t.block = this.parseBlock(),
                                    t.handler = null,
                                this.type === x._catch) {
                                    var e = this.startNode();
                                    if (this.next(),
                                        this.eat(x.parenL)) {
                                        e.param = this.parseBindingAtom();
                                        var i = "Identifier" === e.param.type;
                                        this.enterScope(i ? 32 : 0),
                                            this.checkLValPattern(e.param, i ? 4 : 2),
                                            this.expect(x.parenR)
                                    } else
                                        this.options.ecmaVersion < 10 && this.unexpected(),
                                            e.param = null,
                                            this.enterScope(0);
                                    e.body = this.parseBlock(!1),
                                        this.exitScope(),
                                        t.handler = this.finishNode(e, "CatchClause")
                                }
                                return t.finalizer = this.eat(x._finally) ? this.parseBlock() : null,
                                t.handler || t.finalizer || this.raise(t.start, "Missing catch or finally clause"),
                                    this.finishNode(t, "TryStatement")
                            }
                                ,
                                X.parseVarStatement = function(t, e) {
                                    return this.next(),
                                        this.parseVar(t, !1, e),
                                        this.semicolon(),
                                        this.finishNode(t, "VariableDeclaration")
                                }
                                ,
                                X.parseWhileStatement = function(t) {
                                    return this.next(),
                                        t.test = this.parseParenExpression(),
                                        this.labels.push(Z),
                                        t.body = this.parseStatement("while"),
                                        this.labels.pop(),
                                        this.finishNode(t, "WhileStatement")
                                }
                                ,
                                X.parseWithStatement = function(t) {
                                    return this.strict && this.raise(this.start, "'with' in strict mode"),
                                        this.next(),
                                        t.object = this.parseParenExpression(),
                                        t.body = this.parseStatement("with"),
                                        this.finishNode(t, "WithStatement")
                                }
                                ,
                                X.parseEmptyStatement = function(t) {
                                    return this.next(),
                                        this.finishNode(t, "EmptyStatement")
                                }
                                ,
                                X.parseLabeledStatement = function(t, e, i, n) {
                                    for (var r = 0, s = this.labels; r < s.length; r += 1) {
                                        s[r].name === e && this.raise(i.start, "Label '" + e + "' is already declared")
                                    }
                                    for (var a = this.type.isLoop ? "loop" : this.type === x._switch ? "switch" : null, o = this.labels.length - 1; o >= 0; o--) {
                                        var h = this.labels[o];
                                        if (h.statementStart !== t.start)
                                            break;
                                        h.statementStart = this.start,
                                            h.kind = a
                                    }
                                    return this.labels.push({
                                        name: e,
                                        kind: a,
                                        statementStart: this.start
                                    }),
                                        t.body = this.parseStatement(n ? -1 === n.indexOf("label") ? n + "label" : n : "label"),
                                        this.labels.pop(),
                                        t.label = i,
                                        this.finishNode(t, "LabeledStatement")
                                }
                                ,
                                X.parseExpressionStatement = function(t, e) {
                                    return t.expression = e,
                                        this.semicolon(),
                                        this.finishNode(t, "ExpressionStatement")
                                }
                                ,
                                X.parseBlock = function(t, e, i) {
                                    for (void 0 === t && (t = !0),
                                         void 0 === e && (e = this.startNode()),
                                             e.body = [],
                                             this.expect(x.braceL),
                                         t && this.enterScope(0); this.type !== x.braceR; ) {
                                        var n = this.parseStatement(null);
                                        e.body.push(n)
                                    }
                                    return i && (this.strict = !1),
                                        this.next(),
                                    t && this.exitScope(),
                                        this.finishNode(e, "BlockStatement")
                                }
                                ,
                                X.parseFor = function(t, e) {
                                    return t.init = e,
                                        this.expect(x.semi),
                                        t.test = this.type === x.semi ? null : this.parseExpression(),
                                        this.expect(x.semi),
                                        t.update = this.type === x.parenR ? null : this.parseExpression(),
                                        this.expect(x.parenR),
                                        t.body = this.parseStatement("for"),
                                        this.exitScope(),
                                        this.labels.pop(),
                                        this.finishNode(t, "ForStatement")
                                }
                                ,
                                X.parseForIn = function(t, e) {
                                    var i = this.type === x._in;
                                    return this.next(),
                                    "VariableDeclaration" === e.type && null != e.declarations[0].init && (!i || this.options.ecmaVersion < 8 || this.strict || "var" !== e.kind || "Identifier" !== e.declarations[0].id.type) && this.raise(e.start, (i ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"),
                                        t.left = e,
                                        t.right = i ? this.parseExpression() : this.parseMaybeAssign(),
                                        this.expect(x.parenR),
                                        t.body = this.parseStatement("for"),
                                        this.exitScope(),
                                        this.labels.pop(),
                                        this.finishNode(t, i ? "ForInStatement" : "ForOfStatement")
                                }
                                ,
                                X.parseVar = function(t, e, i) {
                                    for (t.declarations = [],
                                             t.kind = i; ; ) {
                                        var n = this.startNode();
                                        if (this.parseVarId(n, i),
                                            this.eat(x.eq) ? n.init = this.parseMaybeAssign(e) : "const" !== i || this.type === x._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? "Identifier" === n.id.type || e && (this.type === x._in || this.isContextual("of")) ? n.init = null : this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : this.unexpected(),
                                            t.declarations.push(this.finishNode(n, "VariableDeclarator")),
                                            !this.eat(x.comma))
                                            break
                                    }
                                    return t
                                }
                                ,
                                X.parseVarId = function(t, e) {
                                    t.id = this.parseBindingAtom(),
                                        this.checkLValPattern(t.id, "var" === e ? 1 : 2, !1)
                                }
                            ;
                            var Q = 1
                                , K = 2;
                            function $(t, e) {
                                var i = e.key.name
                                    , n = t[i]
                                    , r = "true";
                                return "MethodDefinition" !== e.type || "get" !== e.kind && "set" !== e.kind || (r = (e.static ? "s" : "i") + e.kind),
                                    "iget" === n && "iset" === r || "iset" === n && "iget" === r || "sget" === n && "sset" === r || "sset" === n && "sget" === r ? (t[i] = "true",
                                        !1) : !!n || (t[i] = r,
                                        !1)
                            }
                            function tt(t, e) {
                                var i = t.computed
                                    , n = t.key;
                                return !i && ("Identifier" === n.type && n.name === e || "Literal" === n.type && n.value === e)
                            }
                            X.parseFunction = function(t, e, i, n, r) {
                                this.initFunction(t),
                                (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !n) && (this.type === x.star && e & K && this.unexpected(),
                                    t.generator = this.eat(x.star)),
                                this.options.ecmaVersion >= 8 && (t.async = !!n),
                                e & Q && (t.id = 4 & e && this.type !== x.name ? null : this.parseIdent(),
                                !t.id || e & K || this.checkLValSimple(t.id, this.strict || t.generator || t.async ? this.treatFunctionsAsVar ? 1 : 2 : 3));
                                var s = this.yieldPos
                                    , a = this.awaitPos
                                    , o = this.awaitIdentPos;
                                return this.yieldPos = 0,
                                    this.awaitPos = 0,
                                    this.awaitIdentPos = 0,
                                    this.enterScope(U(t.async, t.generator)),
                                e & Q || (t.id = this.type === x.name ? this.parseIdent() : null),
                                    this.parseFunctionParams(t),
                                    this.parseFunctionBody(t, i, !1, r),
                                    this.yieldPos = s,
                                    this.awaitPos = a,
                                    this.awaitIdentPos = o,
                                    this.finishNode(t, e & Q ? "FunctionDeclaration" : "FunctionExpression")
                            }
                                ,
                                X.parseFunctionParams = function(t) {
                                    this.expect(x.parenL),
                                        t.params = this.parseBindingList(x.parenR, !1, this.options.ecmaVersion >= 8),
                                        this.checkYieldAwaitInDefaultParams()
                                }
                                ,
                                X.parseClass = function(t, e) {
                                    this.next();
                                    var i = this.strict;
                                    this.strict = !0,
                                        this.parseClassId(t, e),
                                        this.parseClassSuper(t);
                                    var n = this.enterClassBody()
                                        , r = this.startNode()
                                        , s = !1;
                                    for (r.body = [],
                                             this.expect(x.braceL); this.type !== x.braceR; ) {
                                        var a = this.parseClassElement(null !== t.superClass);
                                        a && (r.body.push(a),
                                            "MethodDefinition" === a.type && "constructor" === a.kind ? (s && this.raise(a.start, "Duplicate constructor in the same class"),
                                                s = !0) : a.key && "PrivateIdentifier" === a.key.type && $(n, a) && this.raiseRecoverable(a.key.start, "Identifier '#" + a.key.name + "' has already been declared"))
                                    }
                                    return this.strict = i,
                                        this.next(),
                                        t.body = this.finishNode(r, "ClassBody"),
                                        this.exitClassBody(),
                                        this.finishNode(t, e ? "ClassDeclaration" : "ClassExpression")
                                }
                                ,
                                X.parseClassElement = function(t) {
                                    if (this.eat(x.semi))
                                        return null;
                                    var e = this.options.ecmaVersion
                                        , i = this.startNode()
                                        , n = ""
                                        , r = !1
                                        , s = !1
                                        , a = "method"
                                        , o = !1;
                                    if (this.eatContextual("static")) {
                                        if (e >= 13 && this.eat(x.braceL))
                                            return this.parseClassStaticBlock(i),
                                                i;
                                        this.isClassElementNameStart() || this.type === x.star ? o = !0 : n = "static"
                                    }
                                    if (i.static = o,
                                    !n && e >= 8 && this.eatContextual("async") && (!this.isClassElementNameStart() && this.type !== x.star || this.canInsertSemicolon() ? n = "async" : s = !0),
                                    !n && (e >= 9 || !s) && this.eat(x.star) && (r = !0),
                                    !n && !s && !r) {
                                        var h = this.value;
                                        (this.eatContextual("get") || this.eatContextual("set")) && (this.isClassElementNameStart() ? a = h : n = h)
                                    }
                                    if (n ? (i.computed = !1,
                                        i.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc),
                                        i.key.name = n,
                                        this.finishNode(i.key, "Identifier")) : this.parseClassElementName(i),
                                    e < 13 || this.type === x.parenL || "method" !== a || r || s) {
                                        var l = !i.static && tt(i, "constructor")
                                            , u = l && t;
                                        l && "method" !== a && this.raise(i.key.start, "Constructor can't have get/set modifier"),
                                            i.kind = l ? "constructor" : a,
                                            this.parseClassMethod(i, r, s, u)
                                    } else
                                        this.parseClassField(i);
                                    return i
                                }
                                ,
                                X.isClassElementNameStart = function() {
                                    return this.type === x.name || this.type === x.privateId || this.type === x.num || this.type === x.string || this.type === x.bracketL || this.type.keyword
                                }
                                ,
                                X.parseClassElementName = function(t) {
                                    this.type === x.privateId ? ("constructor" === this.value && this.raise(this.start, "Classes can't have an element named '#constructor'"),
                                        t.computed = !1,
                                        t.key = this.parsePrivateIdent()) : this.parsePropertyName(t)
                                }
                                ,
                                X.parseClassMethod = function(t, e, i, n) {
                                    var r = t.key;
                                    "constructor" === t.kind ? (e && this.raise(r.start, "Constructor can't be a generator"),
                                    i && this.raise(r.start, "Constructor can't be an async method")) : t.static && tt(t, "prototype") && this.raise(r.start, "Classes may not have a static property named prototype");
                                    var s = t.value = this.parseMethod(e, i, n);
                                    return "get" === t.kind && 0 !== s.params.length && this.raiseRecoverable(s.start, "getter should have no params"),
                                    "set" === t.kind && 1 !== s.params.length && this.raiseRecoverable(s.start, "setter should have exactly one param"),
                                    "set" === t.kind && "RestElement" === s.params[0].type && this.raiseRecoverable(s.params[0].start, "Setter cannot use rest params"),
                                        this.finishNode(t, "MethodDefinition")
                                }
                                ,
                                X.parseClassField = function(t) {
                                    if (tt(t, "constructor") ? this.raise(t.key.start, "Classes can't have a field named 'constructor'") : t.static && tt(t, "prototype") && this.raise(t.key.start, "Classes can't have a static field named 'prototype'"),
                                        this.eat(x.eq)) {
                                        var e = this.currentThisScope()
                                            , i = e.inClassFieldInit;
                                        e.inClassFieldInit = !0,
                                            t.value = this.parseMaybeAssign(),
                                            e.inClassFieldInit = i
                                    } else
                                        t.value = null;
                                    return this.semicolon(),
                                        this.finishNode(t, "PropertyDefinition")
                                }
                                ,
                                X.parseClassStaticBlock = function(t) {
                                    t.body = [];
                                    var e = this.labels;
                                    for (this.labels = [],
                                             this.enterScope(320); this.type !== x.braceR; ) {
                                        var i = this.parseStatement(null);
                                        t.body.push(i)
                                    }
                                    return this.next(),
                                        this.exitScope(),
                                        this.labels = e,
                                        this.finishNode(t, "StaticBlock")
                                }
                                ,
                                X.parseClassId = function(t, e) {
                                    this.type === x.name ? (t.id = this.parseIdent(),
                                    e && this.checkLValSimple(t.id, 2, !1)) : (!0 === e && this.unexpected(),
                                        t.id = null)
                                }
                                ,
                                X.parseClassSuper = function(t) {
                                    t.superClass = this.eat(x._extends) ? this.parseExprSubscripts(!1) : null
                                }
                                ,
                                X.enterClassBody = function() {
                                    var t = {
                                        declared: Object.create(null),
                                        used: []
                                    };
                                    return this.privateNameStack.push(t),
                                        t.declared
                                }
                                ,
                                X.exitClassBody = function() {
                                    for (var t = this.privateNameStack.pop(), e = t.declared, i = t.used, n = this.privateNameStack.length, r = 0 === n ? null : this.privateNameStack[n - 1], s = 0; s < i.length; ++s) {
                                        var a = i[s];
                                        L(e, a.name) || (r ? r.used.push(a) : this.raiseRecoverable(a.start, "Private field '#" + a.name + "' must be declared in an enclosing class"))
                                    }
                                }
                                ,
                                X.parseExport = function(t, e) {
                                    if (this.next(),
                                        this.eat(x.star))
                                        return this.options.ecmaVersion >= 11 && (this.eatContextual("as") ? (t.exported = this.parseModuleExportName(),
                                            this.checkExport(e, t.exported.name, this.lastTokStart)) : t.exported = null),
                                            this.expectContextual("from"),
                                        this.type !== x.string && this.unexpected(),
                                            t.source = this.parseExprAtom(),
                                            this.semicolon(),
                                            this.finishNode(t, "ExportAllDeclaration");
                                    if (this.eat(x._default)) {
                                        var i;
                                        if (this.checkExport(e, "default", this.lastTokStart),
                                        this.type === x._function || (i = this.isAsyncFunction())) {
                                            var n = this.startNode();
                                            this.next(),
                                            i && this.next(),
                                                t.declaration = this.parseFunction(n, 4 | Q, !1, i)
                                        } else if (this.type === x._class) {
                                            var r = this.startNode();
                                            t.declaration = this.parseClass(r, "nullableID")
                                        } else
                                            t.declaration = this.parseMaybeAssign(),
                                                this.semicolon();
                                        return this.finishNode(t, "ExportDefaultDeclaration")
                                    }
                                    if (this.shouldParseExportStatement())
                                        t.declaration = this.parseStatement(null),
                                            "VariableDeclaration" === t.declaration.type ? this.checkVariableExport(e, t.declaration.declarations) : this.checkExport(e, t.declaration.id.name, t.declaration.id.start),
                                            t.specifiers = [],
                                            t.source = null;
                                    else {
                                        if (t.declaration = null,
                                            t.specifiers = this.parseExportSpecifiers(e),
                                            this.eatContextual("from"))
                                            this.type !== x.string && this.unexpected(),
                                                t.source = this.parseExprAtom();
                                        else {
                                            for (var s = 0, a = t.specifiers; s < a.length; s += 1) {
                                                var o = a[s];
                                                this.checkUnreserved(o.local),
                                                    this.checkLocalExport(o.local),
                                                "Literal" === o.local.type && this.raise(o.local.start, "A string literal cannot be used as an exported binding without `from`.")
                                            }
                                            t.source = null
                                        }
                                        this.semicolon()
                                    }
                                    return this.finishNode(t, "ExportNamedDeclaration")
                                }
                                ,
                                X.checkExport = function(t, e, i) {
                                    t && (L(t, e) && this.raiseRecoverable(i, "Duplicate export '" + e + "'"),
                                        t[e] = !0)
                                }
                                ,
                                X.checkPatternExport = function(t, e) {
                                    var i = e.type;
                                    if ("Identifier" === i)
                                        this.checkExport(t, e.name, e.start);
                                    else if ("ObjectPattern" === i)
                                        for (var n = 0, r = e.properties; n < r.length; n += 1) {
                                            var s = r[n];
                                            this.checkPatternExport(t, s)
                                        }
                                    else if ("ArrayPattern" === i)
                                        for (var a = 0, o = e.elements; a < o.length; a += 1) {
                                            var h = o[a];
                                            h && this.checkPatternExport(t, h)
                                        }
                                    else
                                        "Property" === i ? this.checkPatternExport(t, e.value) : "AssignmentPattern" === i ? this.checkPatternExport(t, e.left) : "RestElement" === i ? this.checkPatternExport(t, e.argument) : "ParenthesizedExpression" === i && this.checkPatternExport(t, e.expression)
                                }
                                ,
                                X.checkVariableExport = function(t, e) {
                                    if (t)
                                        for (var i = 0, n = e; i < n.length; i += 1) {
                                            var r = n[i];
                                            this.checkPatternExport(t, r.id)
                                        }
                                }
                                ,
                                X.shouldParseExportStatement = function() {
                                    return "var" === this.type.keyword || "const" === this.type.keyword || "class" === this.type.keyword || "function" === this.type.keyword || this.isLet() || this.isAsyncFunction()
                                }
                                ,
                                X.parseExportSpecifiers = function(t) {
                                    var e = []
                                        , i = !0;
                                    for (this.expect(x.braceL); !this.eat(x.braceR); ) {
                                        if (i)
                                            i = !1;
                                        else if (this.expect(x.comma),
                                            this.afterTrailingComma(x.braceR))
                                            break;
                                        var n = this.startNode();
                                        n.local = this.parseModuleExportName(),
                                            n.exported = this.eatContextual("as") ? this.parseModuleExportName() : n.local,
                                            this.checkExport(t, n.exported["Identifier" === n.exported.type ? "name" : "value"], n.exported.start),
                                            e.push(this.finishNode(n, "ExportSpecifier"))
                                    }
                                    return e
                                }
                                ,
                                X.parseImport = function(t) {
                                    return this.next(),
                                        this.type === x.string ? (t.specifiers = Y,
                                            t.source = this.parseExprAtom()) : (t.specifiers = this.parseImportSpecifiers(),
                                            this.expectContextual("from"),
                                            t.source = this.type === x.string ? this.parseExprAtom() : this.unexpected()),
                                        this.semicolon(),
                                        this.finishNode(t, "ImportDeclaration")
                                }
                                ,
                                X.parseImportSpecifiers = function() {
                                    var t = []
                                        , e = !0;
                                    if (this.type === x.name) {
                                        var i = this.startNode();
                                        if (i.local = this.parseIdent(),
                                            this.checkLValSimple(i.local, 2),
                                            t.push(this.finishNode(i, "ImportDefaultSpecifier")),
                                            !this.eat(x.comma))
                                            return t
                                    }
                                    if (this.type === x.star) {
                                        var n = this.startNode();
                                        return this.next(),
                                            this.expectContextual("as"),
                                            n.local = this.parseIdent(),
                                            this.checkLValSimple(n.local, 2),
                                            t.push(this.finishNode(n, "ImportNamespaceSpecifier")),
                                            t
                                    }
                                    for (this.expect(x.braceL); !this.eat(x.braceR); ) {
                                        if (e)
                                            e = !1;
                                        else if (this.expect(x.comma),
                                            this.afterTrailingComma(x.braceR))
                                            break;
                                        var r = this.startNode();
                                        r.imported = this.parseModuleExportName(),
                                            this.eatContextual("as") ? r.local = this.parseIdent() : (this.checkUnreserved(r.imported),
                                                r.local = r.imported),
                                            this.checkLValSimple(r.local, 2),
                                            t.push(this.finishNode(r, "ImportSpecifier"))
                                    }
                                    return t
                                }
                                ,
                                X.parseModuleExportName = function() {
                                    if (this.options.ecmaVersion >= 13 && this.type === x.string) {
                                        var t = this.parseLiteral(this.value);
                                        return N.test(t.value) && this.raise(t.start, "An export name cannot include a lone surrogate."),
                                            t
                                    }
                                    return this.parseIdent(!0)
                                }
                                ,
                                X.adaptDirectivePrologue = function(t) {
                                    for (var e = 0; e < t.length && this.isDirectiveCandidate(t[e]); ++e)
                                        t[e].directive = t[e].expression.raw.slice(1, -1)
                                }
                                ,
                                X.isDirectiveCandidate = function(t) {
                                    return "ExpressionStatement" === t.type && "Literal" === t.expression.type && "string" == typeof t.expression.value && ('"' === this.input[t.start] || "'" === this.input[t.start])
                                }
                            ;
                            var et = G.prototype;
                            et.toAssignable = function(t, e, i) {
                                if (this.options.ecmaVersion >= 6 && t)
                                    switch (t.type) {
                                        case "Identifier":
                                            this.inAsync && "await" === t.name && this.raise(t.start, "Cannot use 'await' as identifier inside an async function");
                                            break;
                                        case "ObjectPattern":
                                        case "ArrayPattern":
                                        case "AssignmentPattern":
                                        case "RestElement":
                                            break;
                                        case "ObjectExpression":
                                            t.type = "ObjectPattern",
                                            i && this.checkPatternErrors(i, !0);
                                            for (var n = 0, r = t.properties; n < r.length; n += 1) {
                                                var s = r[n];
                                                this.toAssignable(s, e),
                                                "RestElement" !== s.type || "ArrayPattern" !== s.argument.type && "ObjectPattern" !== s.argument.type || this.raise(s.argument.start, "Unexpected token")
                                            }
                                            break;
                                        case "Property":
                                            "init" !== t.kind && this.raise(t.key.start, "Object pattern can't contain getter or setter"),
                                                this.toAssignable(t.value, e);
                                            break;
                                        case "ArrayExpression":
                                            t.type = "ArrayPattern",
                                            i && this.checkPatternErrors(i, !0),
                                                this.toAssignableList(t.elements, e);
                                            break;
                                        case "SpreadElement":
                                            t.type = "RestElement",
                                                this.toAssignable(t.argument, e),
                                            "AssignmentPattern" === t.argument.type && this.raise(t.argument.start, "Rest elements cannot have a default value");
                                            break;
                                        case "AssignmentExpression":
                                            "=" !== t.operator && this.raise(t.left.end, "Only '=' operator can be used for specifying default value."),
                                                t.type = "AssignmentPattern",
                                                delete t.operator,
                                                this.toAssignable(t.left, e);
                                            break;
                                        case "ParenthesizedExpression":
                                            this.toAssignable(t.expression, e, i);
                                            break;
                                        case "ChainExpression":
                                            this.raiseRecoverable(t.start, "Optional chaining cannot appear in left-hand side");
                                            break;
                                        case "MemberExpression":
                                            if (!e)
                                                break;
                                        default:
                                            this.raise(t.start, "Assigning to rvalue")
                                    }
                                else
                                    i && this.checkPatternErrors(i, !0);
                                return t
                            }
                                ,
                                et.toAssignableList = function(t, e) {
                                    for (var i = t.length, n = 0; n < i; n++) {
                                        var r = t[n];
                                        r && this.toAssignable(r, e)
                                    }
                                    if (i) {
                                        var s = t[i - 1];
                                        6 === this.options.ecmaVersion && e && s && "RestElement" === s.type && "Identifier" !== s.argument.type && this.unexpected(s.argument.start)
                                    }
                                    return t
                                }
                                ,
                                et.parseSpread = function(t) {
                                    var e = this.startNode();
                                    return this.next(),
                                        e.argument = this.parseMaybeAssign(!1, t),
                                        this.finishNode(e, "SpreadElement")
                                }
                                ,
                                et.parseRestBinding = function() {
                                    var t = this.startNode();
                                    return this.next(),
                                    6 === this.options.ecmaVersion && this.type !== x.name && this.unexpected(),
                                        t.argument = this.parseBindingAtom(),
                                        this.finishNode(t, "RestElement")
                                }
                                ,
                                et.parseBindingAtom = function() {
                                    if (this.options.ecmaVersion >= 6)
                                        switch (this.type) {
                                            case x.bracketL:
                                                var t = this.startNode();
                                                return this.next(),
                                                    t.elements = this.parseBindingList(x.bracketR, !0, !0),
                                                    this.finishNode(t, "ArrayPattern");
                                            case x.braceL:
                                                return this.parseObj(!0)
                                        }
                                    return this.parseIdent()
                                }
                                ,
                                et.parseBindingList = function(t, e, i) {
                                    for (var n = [], r = !0; !this.eat(t); )
                                        if (r ? r = !1 : this.expect(x.comma),
                                        e && this.type === x.comma)
                                            n.push(null);
                                        else {
                                            if (i && this.afterTrailingComma(t))
                                                break;
                                            if (this.type === x.ellipsis) {
                                                var s = this.parseRestBinding();
                                                this.parseBindingListItem(s),
                                                    n.push(s),
                                                this.type === x.comma && this.raise(this.start, "Comma is not permitted after the rest element"),
                                                    this.expect(t);
                                                break
                                            }
                                            var a = this.parseMaybeDefault(this.start, this.startLoc);
                                            this.parseBindingListItem(a),
                                                n.push(a)
                                        }
                                    return n
                                }
                                ,
                                et.parseBindingListItem = function(t) {
                                    return t
                                }
                                ,
                                et.parseMaybeDefault = function(t, e, i) {
                                    if (i = i || this.parseBindingAtom(),
                                    this.options.ecmaVersion < 6 || !this.eat(x.eq))
                                        return i;
                                    var n = this.startNodeAt(t, e);
                                    return n.left = i,
                                        n.right = this.parseMaybeAssign(),
                                        this.finishNode(n, "AssignmentPattern")
                                }
                                ,
                                et.checkLValSimple = function(t, e, i) {
                                    void 0 === e && (e = 0);
                                    var n = 0 !== e;
                                    switch (t.type) {
                                        case "Identifier":
                                            this.strict && this.reservedWordsStrictBind.test(t.name) && this.raiseRecoverable(t.start, (n ? "Binding " : "Assigning to ") + t.name + " in strict mode"),
                                            n && (2 === e && "let" === t.name && this.raiseRecoverable(t.start, "let is disallowed as a lexically bound name"),
                                            i && (L(i, t.name) && this.raiseRecoverable(t.start, "Argument name clash"),
                                                i[t.name] = !0),
                                            5 !== e && this.declareName(t.name, e, t.start));
                                            break;
                                        case "ChainExpression":
                                            this.raiseRecoverable(t.start, "Optional chaining cannot appear in left-hand side");
                                            break;
                                        case "MemberExpression":
                                            n && this.raiseRecoverable(t.start, "Binding member expression");
                                            break;
                                        case "ParenthesizedExpression":
                                            return n && this.raiseRecoverable(t.start, "Binding parenthesized expression"),
                                                this.checkLValSimple(t.expression, e, i);
                                        default:
                                            this.raise(t.start, (n ? "Binding" : "Assigning to") + " rvalue")
                                    }
                                }
                                ,
                                et.checkLValPattern = function(t, e, i) {
                                    switch (void 0 === e && (e = 0),
                                        t.type) {
                                        case "ObjectPattern":
                                            for (var n = 0, r = t.properties; n < r.length; n += 1) {
                                                var s = r[n];
                                                this.checkLValInnerPattern(s, e, i)
                                            }
                                            break;
                                        case "ArrayPattern":
                                            for (var a = 0, o = t.elements; a < o.length; a += 1) {
                                                var h = o[a];
                                                h && this.checkLValInnerPattern(h, e, i)
                                            }
                                            break;
                                        default:
                                            this.checkLValSimple(t, e, i)
                                    }
                                }
                                ,
                                et.checkLValInnerPattern = function(t, e, i) {
                                    switch (void 0 === e && (e = 0),
                                        t.type) {
                                        case "Property":
                                            this.checkLValInnerPattern(t.value, e, i);
                                            break;
                                        case "AssignmentPattern":
                                            this.checkLValPattern(t.left, e, i);
                                            break;
                                        case "RestElement":
                                            this.checkLValPattern(t.argument, e, i);
                                            break;
                                        default:
                                            this.checkLValPattern(t, e, i)
                                    }
                                }
                            ;
                            var it = function(t, e, i, n, r) {
                                this.token = t,
                                    this.isExpr = !!e,
                                    this.preserveSpace = !!i,
                                    this.override = n,
                                    this.generator = !!r
                            }
                                , nt = {
                                b_stat: new it("{",!1),
                                b_expr: new it("{",!0),
                                b_tmpl: new it("${",!1),
                                p_stat: new it("(",!1),
                                p_expr: new it("(",!0),
                                q_tmpl: new it("`",!0,!0,(function(t) {
                                        return t.tryReadTemplateToken()
                                    }
                                )),
                                f_stat: new it("function",!1),
                                f_expr: new it("function",!0),
                                f_expr_gen: new it("function",!0,!1,null,!0),
                                f_gen: new it("function",!1,!1,null,!0)
                            }
                                , rt = G.prototype;
                            rt.initialContext = function() {
                                return [nt.b_stat]
                            }
                                ,
                                rt.curContext = function() {
                                    return this.context[this.context.length - 1]
                                }
                                ,
                                rt.braceIsBlock = function(t) {
                                    var e = this.curContext();
                                    return e === nt.f_expr || e === nt.f_stat || (t !== x.colon || e !== nt.b_stat && e !== nt.b_expr ? t === x._return || t === x.name && this.exprAllowed ? b.test(this.input.slice(this.lastTokEnd, this.start)) : t === x._else || t === x.semi || t === x.eof || t === x.parenR || t === x.arrow || (t === x.braceL ? e === nt.b_stat : t !== x._var && t !== x._const && t !== x.name && !this.exprAllowed) : !e.isExpr)
                                }
                                ,
                                rt.inGeneratorContext = function() {
                                    for (var t = this.context.length - 1; t >= 1; t--) {
                                        var e = this.context[t];
                                        if ("function" === e.token)
                                            return e.generator
                                    }
                                    return !1
                                }
                                ,
                                rt.updateContext = function(t) {
                                    var e, i = this.type;
                                    i.keyword && t === x.dot ? this.exprAllowed = !1 : (e = i.updateContext) ? e.call(this, t) : this.exprAllowed = i.beforeExpr
                                }
                                ,
                                rt.overrideContext = function(t) {
                                    this.curContext() !== t && (this.context[this.context.length - 1] = t)
                                }
                                ,
                                x.parenR.updateContext = x.braceR.updateContext = function() {
                                    if (1 !== this.context.length) {
                                        var t = this.context.pop();
                                        t === nt.b_stat && "function" === this.curContext().token && (t = this.context.pop()),
                                            this.exprAllowed = !t.isExpr
                                    } else
                                        this.exprAllowed = !0
                                }
                                ,
                                x.braceL.updateContext = function(t) {
                                    this.context.push(this.braceIsBlock(t) ? nt.b_stat : nt.b_expr),
                                        this.exprAllowed = !0
                                }
                                ,
                                x.dollarBraceL.updateContext = function() {
                                    this.context.push(nt.b_tmpl),
                                        this.exprAllowed = !0
                                }
                                ,
                                x.parenL.updateContext = function(t) {
                                    var e = t === x._if || t === x._for || t === x._with || t === x._while;
                                    this.context.push(e ? nt.p_stat : nt.p_expr),
                                        this.exprAllowed = !0
                                }
                                ,
                                x.incDec.updateContext = function() {}
                                ,
                                x._function.updateContext = x._class.updateContext = function(t) {
                                    !t.beforeExpr || t === x._else || t === x.semi && this.curContext() !== nt.p_stat || t === x._return && b.test(this.input.slice(this.lastTokEnd, this.start)) || (t === x.colon || t === x.braceL) && this.curContext() === nt.b_stat ? this.context.push(nt.f_stat) : this.context.push(nt.f_expr),
                                        this.exprAllowed = !1
                                }
                                ,
                                x.backQuote.updateContext = function() {
                                    this.curContext() === nt.q_tmpl ? this.context.pop() : this.context.push(nt.q_tmpl),
                                        this.exprAllowed = !1
                                }
                                ,
                                x.star.updateContext = function(t) {
                                    if (t === x._function) {
                                        var e = this.context.length - 1;
                                        this.context[e] === nt.f_expr ? this.context[e] = nt.f_expr_gen : this.context[e] = nt.f_gen
                                    }
                                    this.exprAllowed = !0
                                }
                                ,
                                x.name.updateContext = function(t) {
                                    var e = !1;
                                    this.options.ecmaVersion >= 6 && t !== x.dot && ("of" === this.value && !this.exprAllowed || "yield" === this.value && this.inGeneratorContext()) && (e = !0),
                                        this.exprAllowed = e
                                }
                            ;
                            var st = G.prototype;
                            function at(t) {
                                return "MemberExpression" === t.type && "PrivateIdentifier" === t.property.type || "ChainExpression" === t.type && at(t.expression)
                            }
                            st.checkPropClash = function(t, e, i) {
                                if (!(this.options.ecmaVersion >= 9 && "SpreadElement" === t.type || this.options.ecmaVersion >= 6 && (t.computed || t.method || t.shorthand))) {
                                    var n, r = t.key;
                                    switch (r.type) {
                                        case "Identifier":
                                            n = r.name;
                                            break;
                                        case "Literal":
                                            n = String(r.value);
                                            break;
                                        default:
                                            return
                                    }
                                    var s = t.kind;
                                    if (this.options.ecmaVersion >= 6)
                                        "__proto__" === n && "init" === s && (e.proto && (i ? i.doubleProto < 0 && (i.doubleProto = r.start) : this.raiseRecoverable(r.start, "Redefinition of __proto__ property")),
                                            e.proto = !0);
                                    else {
                                        var a = e[n = "$" + n];
                                        if (a)
                                            ("init" === s ? this.strict && a.init || a.get || a.set : a.init || a[s]) && this.raiseRecoverable(r.start, "Redefinition of property");
                                        else
                                            a = e[n] = {
                                                init: !1,
                                                get: !1,
                                                set: !1
                                            };
                                        a[s] = !0
                                    }
                                }
                            }
                                ,
                                st.parseExpression = function(t, e) {
                                    var i = this.start
                                        , n = this.startLoc
                                        , r = this.parseMaybeAssign(t, e);
                                    if (this.type === x.comma) {
                                        var s = this.startNodeAt(i, n);
                                        for (s.expressions = [r]; this.eat(x.comma); )
                                            s.expressions.push(this.parseMaybeAssign(t, e));
                                        return this.finishNode(s, "SequenceExpression")
                                    }
                                    return r
                                }
                                ,
                                st.parseMaybeAssign = function(t, e, i) {
                                    if (this.isContextual("yield")) {
                                        if (this.inGenerator)
                                            return this.parseYield(t);
                                        this.exprAllowed = !1
                                    }
                                    var n = !1
                                        , r = -1
                                        , s = -1
                                        , a = -1;
                                    e ? (r = e.parenthesizedAssign,
                                        s = e.trailingComma,
                                        a = e.doubleProto,
                                        e.parenthesizedAssign = e.trailingComma = -1) : (e = new q,
                                        n = !0);
                                    var o = this.start
                                        , h = this.startLoc;
                                    this.type !== x.parenL && this.type !== x.name || (this.potentialArrowAt = this.start,
                                        this.potentialArrowInForAwait = "await" === t);
                                    var l = this.parseMaybeConditional(t, e);
                                    if (i && (l = i.call(this, l, o, h)),
                                        this.type.isAssign) {
                                        var u = this.startNodeAt(o, h);
                                        return u.operator = this.value,
                                        this.type === x.eq && (l = this.toAssignable(l, !1, e)),
                                        n || (e.parenthesizedAssign = e.trailingComma = e.doubleProto = -1),
                                        e.shorthandAssign >= l.start && (e.shorthandAssign = -1),
                                            this.type === x.eq ? this.checkLValPattern(l) : this.checkLValSimple(l),
                                            u.left = l,
                                            this.next(),
                                            u.right = this.parseMaybeAssign(t),
                                        a > -1 && (e.doubleProto = a),
                                            this.finishNode(u, "AssignmentExpression")
                                    }
                                    return n && this.checkExpressionErrors(e, !0),
                                    r > -1 && (e.parenthesizedAssign = r),
                                    s > -1 && (e.trailingComma = s),
                                        l
                                }
                                ,
                                st.parseMaybeConditional = function(t, e) {
                                    var i = this.start
                                        , n = this.startLoc
                                        , r = this.parseExprOps(t, e);
                                    if (this.checkExpressionErrors(e))
                                        return r;
                                    if (this.eat(x.question)) {
                                        var s = this.startNodeAt(i, n);
                                        return s.test = r,
                                            s.consequent = this.parseMaybeAssign(),
                                            this.expect(x.colon),
                                            s.alternate = this.parseMaybeAssign(t),
                                            this.finishNode(s, "ConditionalExpression")
                                    }
                                    return r
                                }
                                ,
                                st.parseExprOps = function(t, e) {
                                    var i = this.start
                                        , n = this.startLoc
                                        , r = this.parseMaybeUnary(e, !1, !1, t);
                                    return this.checkExpressionErrors(e) || r.start === i && "ArrowFunctionExpression" === r.type ? r : this.parseExprOp(r, i, n, -1, t)
                                }
                                ,
                                st.parseExprOp = function(t, e, i, n, r) {
                                    var s = this.type.binop;
                                    if (null != s && (!r || this.type !== x._in) && s > n) {
                                        var a = this.type === x.logicalOR || this.type === x.logicalAND
                                            , o = this.type === x.coalesce;
                                        o && (s = x.logicalAND.binop);
                                        var h = this.value;
                                        this.next();
                                        var l = this.start
                                            , u = this.startLoc
                                            , c = this.parseExprOp(this.parseMaybeUnary(null, !1, !1, r), l, u, s, r)
                                            , d = this.buildBinary(e, i, t, c, h, a || o);
                                        return (a && this.type === x.coalesce || o && (this.type === x.logicalOR || this.type === x.logicalAND)) && this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"),
                                            this.parseExprOp(d, e, i, n, r)
                                    }
                                    return t
                                }
                                ,
                                st.buildBinary = function(t, e, i, n, r, s) {
                                    "PrivateIdentifier" === n.type && this.raise(n.start, "Private identifier can only be left side of binary expression");
                                    var a = this.startNodeAt(t, e);
                                    return a.left = i,
                                        a.operator = r,
                                        a.right = n,
                                        this.finishNode(a, s ? "LogicalExpression" : "BinaryExpression")
                                }
                                ,
                                st.parseMaybeUnary = function(t, e, i, n) {
                                    var r, s = this.start, a = this.startLoc;
                                    if (this.isContextual("await") && this.canAwait)
                                        r = this.parseAwait(n),
                                            e = !0;
                                    else if (this.type.prefix) {
                                        var o = this.startNode()
                                            , h = this.type === x.incDec;
                                        o.operator = this.value,
                                            o.prefix = !0,
                                            this.next(),
                                            o.argument = this.parseMaybeUnary(null, !0, h, n),
                                            this.checkExpressionErrors(t, !0),
                                            h ? this.checkLValSimple(o.argument) : this.strict && "delete" === o.operator && "Identifier" === o.argument.type ? this.raiseRecoverable(o.start, "Deleting local variable in strict mode") : "delete" === o.operator && at(o.argument) ? this.raiseRecoverable(o.start, "Private fields can not be deleted") : e = !0,
                                            r = this.finishNode(o, h ? "UpdateExpression" : "UnaryExpression")
                                    } else if (e || this.type !== x.privateId) {
                                        if (r = this.parseExprSubscripts(t, n),
                                            this.checkExpressionErrors(t))
                                            return r;
                                        for (; this.type.postfix && !this.canInsertSemicolon(); ) {
                                            var l = this.startNodeAt(s, a);
                                            l.operator = this.value,
                                                l.prefix = !1,
                                                l.argument = r,
                                                this.checkLValSimple(r),
                                                this.next(),
                                                r = this.finishNode(l, "UpdateExpression")
                                        }
                                    } else
                                        (n || 0 === this.privateNameStack.length) && this.unexpected(),
                                            r = this.parsePrivateIdent(),
                                        this.type !== x._in && this.unexpected();
                                    return i || !this.eat(x.starstar) ? r : e ? void this.unexpected(this.lastTokStart) : this.buildBinary(s, a, r, this.parseMaybeUnary(null, !1, !1, n), "**", !1)
                                }
                                ,
                                st.parseExprSubscripts = function(t, e) {
                                    var i = this.start
                                        , n = this.startLoc
                                        , r = this.parseExprAtom(t, e);
                                    if ("ArrowFunctionExpression" === r.type && ")" !== this.input.slice(this.lastTokStart, this.lastTokEnd))
                                        return r;
                                    var s = this.parseSubscripts(r, i, n, !1, e);
                                    return t && "MemberExpression" === s.type && (t.parenthesizedAssign >= s.start && (t.parenthesizedAssign = -1),
                                    t.parenthesizedBind >= s.start && (t.parenthesizedBind = -1),
                                    t.trailingComma >= s.start && (t.trailingComma = -1)),
                                        s
                                }
                                ,
                                st.parseSubscripts = function(t, e, i, n, r) {
                                    for (var s = this.options.ecmaVersion >= 8 && "Identifier" === t.type && "async" === t.name && this.lastTokEnd === t.end && !this.canInsertSemicolon() && t.end - t.start == 5 && this.potentialArrowAt === t.start, a = !1; ; ) {
                                        var o = this.parseSubscript(t, e, i, n, s, a, r);
                                        if (o.optional && (a = !0),
                                        o === t || "ArrowFunctionExpression" === o.type) {
                                            if (a) {
                                                var h = this.startNodeAt(e, i);
                                                h.expression = o,
                                                    o = this.finishNode(h, "ChainExpression")
                                            }
                                            return o
                                        }
                                        t = o
                                    }
                                }
                                ,
                                st.parseSubscript = function(t, e, i, n, r, s, a) {
                                    var o = this.options.ecmaVersion >= 11
                                        , h = o && this.eat(x.questionDot);
                                    n && h && this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
                                    var l = this.eat(x.bracketL);
                                    if (l || h && this.type !== x.parenL && this.type !== x.backQuote || this.eat(x.dot)) {
                                        var u = this.startNodeAt(e, i);
                                        u.object = t,
                                            l ? (u.property = this.parseExpression(),
                                                this.expect(x.bracketR)) : this.type === x.privateId && "Super" !== t.type ? u.property = this.parsePrivateIdent() : u.property = this.parseIdent("never" !== this.options.allowReserved),
                                            u.computed = !!l,
                                        o && (u.optional = h),
                                            t = this.finishNode(u, "MemberExpression")
                                    } else if (!n && this.eat(x.parenL)) {
                                        var c = new q
                                            , d = this.yieldPos
                                            , p = this.awaitPos
                                            , f = this.awaitIdentPos;
                                        this.yieldPos = 0,
                                            this.awaitPos = 0,
                                            this.awaitIdentPos = 0;
                                        var m = this.parseExprList(x.parenR, this.options.ecmaVersion >= 8, !1, c);
                                        if (r && !h && !this.canInsertSemicolon() && this.eat(x.arrow))
                                            return this.checkPatternErrors(c, !1),
                                                this.checkYieldAwaitInDefaultParams(),
                                            this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"),
                                                this.yieldPos = d,
                                                this.awaitPos = p,
                                                this.awaitIdentPos = f,
                                                this.parseArrowExpression(this.startNodeAt(e, i), m, !0, a);
                                        this.checkExpressionErrors(c, !0),
                                            this.yieldPos = d || this.yieldPos,
                                            this.awaitPos = p || this.awaitPos,
                                            this.awaitIdentPos = f || this.awaitIdentPos;
                                        var g = this.startNodeAt(e, i);
                                        g.callee = t,
                                            g.arguments = m,
                                        o && (g.optional = h),
                                            t = this.finishNode(g, "CallExpression")
                                    } else if (this.type === x.backQuote) {
                                        (h || s) && this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
                                        var v = this.startNodeAt(e, i);
                                        v.tag = t,
                                            v.quasi = this.parseTemplate({
                                                isTagged: !0
                                            }),
                                            t = this.finishNode(v, "TaggedTemplateExpression")
                                    }
                                    return t
                                }
                                ,
                                st.parseExprAtom = function(t, e) {
                                    this.type === x.slash && this.readRegexp();
                                    var i, n = this.potentialArrowAt === this.start;
                                    switch (this.type) {
                                        case x._super:
                                            return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"),
                                                i = this.startNode(),
                                                this.next(),
                                            this.type !== x.parenL || this.allowDirectSuper || this.raise(i.start, "super() call outside constructor of a subclass"),
                                            this.type !== x.dot && this.type !== x.bracketL && this.type !== x.parenL && this.unexpected(),
                                                this.finishNode(i, "Super");
                                        case x._this:
                                            return i = this.startNode(),
                                                this.next(),
                                                this.finishNode(i, "ThisExpression");
                                        case x.name:
                                            var r = this.start
                                                , s = this.startLoc
                                                , a = this.containsEsc
                                                , o = this.parseIdent(!1);
                                            if (this.options.ecmaVersion >= 8 && !a && "async" === o.name && !this.canInsertSemicolon() && this.eat(x._function))
                                                return this.overrideContext(nt.f_expr),
                                                    this.parseFunction(this.startNodeAt(r, s), 0, !1, !0, e);
                                            if (n && !this.canInsertSemicolon()) {
                                                if (this.eat(x.arrow))
                                                    return this.parseArrowExpression(this.startNodeAt(r, s), [o], !1, e);
                                                if (this.options.ecmaVersion >= 8 && "async" === o.name && this.type === x.name && !a && (!this.potentialArrowInForAwait || "of" !== this.value || this.containsEsc))
                                                    return o = this.parseIdent(!1),
                                                    !this.canInsertSemicolon() && this.eat(x.arrow) || this.unexpected(),
                                                        this.parseArrowExpression(this.startNodeAt(r, s), [o], !0, e)
                                            }
                                            return o;
                                        case x.regexp:
                                            var h = this.value;
                                            return (i = this.parseLiteral(h.value)).regex = {
                                                pattern: h.pattern,
                                                flags: h.flags
                                            },
                                                i;
                                        case x.num:
                                        case x.string:
                                            return this.parseLiteral(this.value);
                                        case x._null:
                                        case x._true:
                                        case x._false:
                                            return (i = this.startNode()).value = this.type === x._null ? null : this.type === x._true,
                                                i.raw = this.type.keyword,
                                                this.next(),
                                                this.finishNode(i, "Literal");
                                        case x.parenL:
                                            var l = this.start
                                                , u = this.parseParenAndDistinguishExpression(n, e);
                                            return t && (t.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(u) && (t.parenthesizedAssign = l),
                                            t.parenthesizedBind < 0 && (t.parenthesizedBind = l)),
                                                u;
                                        case x.bracketL:
                                            return i = this.startNode(),
                                                this.next(),
                                                i.elements = this.parseExprList(x.bracketR, !0, !0, t),
                                                this.finishNode(i, "ArrayExpression");
                                        case x.braceL:
                                            return this.overrideContext(nt.b_expr),
                                                this.parseObj(!1, t);
                                        case x._function:
                                            return i = this.startNode(),
                                                this.next(),
                                                this.parseFunction(i, 0);
                                        case x._class:
                                            return this.parseClass(this.startNode(), !1);
                                        case x._new:
                                            return this.parseNew();
                                        case x.backQuote:
                                            return this.parseTemplate();
                                        case x._import:
                                            return this.options.ecmaVersion >= 11 ? this.parseExprImport() : this.unexpected();
                                        default:
                                            this.unexpected()
                                    }
                                }
                                ,
                                st.parseExprImport = function() {
                                    var t = this.startNode();
                                    this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword import");
                                    var e = this.parseIdent(!0);
                                    switch (this.type) {
                                        case x.parenL:
                                            return this.parseDynamicImport(t);
                                        case x.dot:
                                            return t.meta = e,
                                                this.parseImportMeta(t);
                                        default:
                                            this.unexpected()
                                    }
                                }
                                ,
                                st.parseDynamicImport = function(t) {
                                    if (this.next(),
                                        t.source = this.parseMaybeAssign(),
                                        !this.eat(x.parenR)) {
                                        var e = this.start;
                                        this.eat(x.comma) && this.eat(x.parenR) ? this.raiseRecoverable(e, "Trailing comma is not allowed in import()") : this.unexpected(e)
                                    }
                                    return this.finishNode(t, "ImportExpression")
                                }
                                ,
                                st.parseImportMeta = function(t) {
                                    this.next();
                                    var e = this.containsEsc;
                                    return t.property = this.parseIdent(!0),
                                    "meta" !== t.property.name && this.raiseRecoverable(t.property.start, "The only valid meta property for import is 'import.meta'"),
                                    e && this.raiseRecoverable(t.start, "'import.meta' must not contain escaped characters"),
                                    "module" === this.options.sourceType || this.options.allowImportExportEverywhere || this.raiseRecoverable(t.start, "Cannot use 'import.meta' outside a module"),
                                        this.finishNode(t, "MetaProperty")
                                }
                                ,
                                st.parseLiteral = function(t) {
                                    var e = this.startNode();
                                    return e.value = t,
                                        e.raw = this.input.slice(this.start, this.end),
                                    110 === e.raw.charCodeAt(e.raw.length - 1) && (e.bigint = e.raw.slice(0, -1).replace(/_/g, "")),
                                        this.next(),
                                        this.finishNode(e, "Literal")
                                }
                                ,
                                st.parseParenExpression = function() {
                                    this.expect(x.parenL);
                                    var t = this.parseExpression();
                                    return this.expect(x.parenR),
                                        t
                                }
                                ,
                                st.parseParenAndDistinguishExpression = function(t, e) {
                                    var i, n = this.start, r = this.startLoc, s = this.options.ecmaVersion >= 8;
                                    if (this.options.ecmaVersion >= 6) {
                                        this.next();
                                        var a, o = this.start, h = this.startLoc, l = [], u = !0, c = !1, d = new q, p = this.yieldPos, f = this.awaitPos;
                                        for (this.yieldPos = 0,
                                                 this.awaitPos = 0; this.type !== x.parenR; ) {
                                            if (u ? u = !1 : this.expect(x.comma),
                                            s && this.afterTrailingComma(x.parenR, !0)) {
                                                c = !0;
                                                break
                                            }
                                            if (this.type === x.ellipsis) {
                                                a = this.start,
                                                    l.push(this.parseParenItem(this.parseRestBinding())),
                                                this.type === x.comma && this.raise(this.start, "Comma is not permitted after the rest element");
                                                break
                                            }
                                            l.push(this.parseMaybeAssign(!1, d, this.parseParenItem))
                                        }
                                        var m = this.lastTokEnd
                                            , g = this.lastTokEndLoc;
                                        if (this.expect(x.parenR),
                                        t && !this.canInsertSemicolon() && this.eat(x.arrow))
                                            return this.checkPatternErrors(d, !1),
                                                this.checkYieldAwaitInDefaultParams(),
                                                this.yieldPos = p,
                                                this.awaitPos = f,
                                                this.parseParenArrowList(n, r, l, e);
                                        l.length && !c || this.unexpected(this.lastTokStart),
                                        a && this.unexpected(a),
                                            this.checkExpressionErrors(d, !0),
                                            this.yieldPos = p || this.yieldPos,
                                            this.awaitPos = f || this.awaitPos,
                                            l.length > 1 ? ((i = this.startNodeAt(o, h)).expressions = l,
                                                this.finishNodeAt(i, "SequenceExpression", m, g)) : i = l[0]
                                    } else
                                        i = this.parseParenExpression();
                                    if (this.options.preserveParens) {
                                        var v = this.startNodeAt(n, r);
                                        return v.expression = i,
                                            this.finishNode(v, "ParenthesizedExpression")
                                    }
                                    return i
                                }
                                ,
                                st.parseParenItem = function(t) {
                                    return t
                                }
                                ,
                                st.parseParenArrowList = function(t, e, i, n) {
                                    return this.parseArrowExpression(this.startNodeAt(t, e), i, !1, n)
                                }
                            ;
                            var ot = [];
                            st.parseNew = function() {
                                this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword new");
                                var t = this.startNode()
                                    , e = this.parseIdent(!0);
                                if (this.options.ecmaVersion >= 6 && this.eat(x.dot)) {
                                    t.meta = e;
                                    var i = this.containsEsc;
                                    return t.property = this.parseIdent(!0),
                                    "target" !== t.property.name && this.raiseRecoverable(t.property.start, "The only valid meta property for new is 'new.target'"),
                                    i && this.raiseRecoverable(t.start, "'new.target' must not contain escaped characters"),
                                    this.allowNewDotTarget || this.raiseRecoverable(t.start, "'new.target' can only be used in functions and class static block"),
                                        this.finishNode(t, "MetaProperty")
                                }
                                var n = this.start
                                    , r = this.startLoc
                                    , s = this.type === x._import;
                                return t.callee = this.parseSubscripts(this.parseExprAtom(), n, r, !0, !1),
                                s && "ImportExpression" === t.callee.type && this.raise(n, "Cannot use new with import()"),
                                    this.eat(x.parenL) ? t.arguments = this.parseExprList(x.parenR, this.options.ecmaVersion >= 8, !1) : t.arguments = ot,
                                    this.finishNode(t, "NewExpression")
                            }
                                ,
                                st.parseTemplateElement = function(t) {
                                    var e = t.isTagged
                                        , i = this.startNode();
                                    return this.type === x.invalidTemplate ? (e || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"),
                                        i.value = {
                                            raw: this.value,
                                            cooked: null
                                        }) : i.value = {
                                        raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
                                        cooked: this.value
                                    },
                                        this.next(),
                                        i.tail = this.type === x.backQuote,
                                        this.finishNode(i, "TemplateElement")
                                }
                                ,
                                st.parseTemplate = function(t) {
                                    void 0 === t && (t = {});
                                    var e = t.isTagged;
                                    void 0 === e && (e = !1);
                                    var i = this.startNode();
                                    this.next(),
                                        i.expressions = [];
                                    var n = this.parseTemplateElement({
                                        isTagged: e
                                    });
                                    for (i.quasis = [n]; !n.tail; )
                                        this.type === x.eof && this.raise(this.pos, "Unterminated template literal"),
                                            this.expect(x.dollarBraceL),
                                            i.expressions.push(this.parseExpression()),
                                            this.expect(x.braceR),
                                            i.quasis.push(n = this.parseTemplateElement({
                                                isTagged: e
                                            }));
                                    return this.next(),
                                        this.finishNode(i, "TemplateLiteral")
                                }
                                ,
                                st.isAsyncProp = function(t) {
                                    return !t.computed && "Identifier" === t.key.type && "async" === t.key.name && (this.type === x.name || this.type === x.num || this.type === x.string || this.type === x.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === x.star) && !b.test(this.input.slice(this.lastTokEnd, this.start))
                                }
                                ,
                                st.parseObj = function(t, e) {
                                    var i = this.startNode()
                                        , n = !0
                                        , r = {};
                                    for (i.properties = [],
                                             this.next(); !this.eat(x.braceR); ) {
                                        if (n)
                                            n = !1;
                                        else if (this.expect(x.comma),
                                        this.options.ecmaVersion >= 5 && this.afterTrailingComma(x.braceR))
                                            break;
                                        var s = this.parseProperty(t, e);
                                        t || this.checkPropClash(s, r, e),
                                            i.properties.push(s)
                                    }
                                    return this.finishNode(i, t ? "ObjectPattern" : "ObjectExpression")
                                }
                                ,
                                st.parseProperty = function(t, e) {
                                    var i, n, r, s, a = this.startNode();
                                    if (this.options.ecmaVersion >= 9 && this.eat(x.ellipsis))
                                        return t ? (a.argument = this.parseIdent(!1),
                                        this.type === x.comma && this.raise(this.start, "Comma is not permitted after the rest element"),
                                            this.finishNode(a, "RestElement")) : (this.type === x.parenL && e && (e.parenthesizedAssign < 0 && (e.parenthesizedAssign = this.start),
                                        e.parenthesizedBind < 0 && (e.parenthesizedBind = this.start)),
                                            a.argument = this.parseMaybeAssign(!1, e),
                                        this.type === x.comma && e && e.trailingComma < 0 && (e.trailingComma = this.start),
                                            this.finishNode(a, "SpreadElement"));
                                    this.options.ecmaVersion >= 6 && (a.method = !1,
                                        a.shorthand = !1,
                                    (t || e) && (r = this.start,
                                        s = this.startLoc),
                                    t || (i = this.eat(x.star)));
                                    var o = this.containsEsc;
                                    return this.parsePropertyName(a),
                                        !t && !o && this.options.ecmaVersion >= 8 && !i && this.isAsyncProp(a) ? (n = !0,
                                            i = this.options.ecmaVersion >= 9 && this.eat(x.star),
                                            this.parsePropertyName(a, e)) : n = !1,
                                        this.parsePropertyValue(a, t, i, n, r, s, e, o),
                                        this.finishNode(a, "Property")
                                }
                                ,
                                st.parsePropertyValue = function(t, e, i, n, r, s, a, o) {
                                    if ((i || n) && this.type === x.colon && this.unexpected(),
                                        this.eat(x.colon))
                                        t.value = e ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(!1, a),
                                            t.kind = "init";
                                    else if (this.options.ecmaVersion >= 6 && this.type === x.parenL)
                                        e && this.unexpected(),
                                            t.kind = "init",
                                            t.method = !0,
                                            t.value = this.parseMethod(i, n);
                                    else if (e || o || !(this.options.ecmaVersion >= 5) || t.computed || "Identifier" !== t.key.type || "get" !== t.key.name && "set" !== t.key.name || this.type === x.comma || this.type === x.braceR || this.type === x.eq)
                                        this.options.ecmaVersion >= 6 && !t.computed && "Identifier" === t.key.type ? ((i || n) && this.unexpected(),
                                            this.checkUnreserved(t.key),
                                        "await" !== t.key.name || this.awaitIdentPos || (this.awaitIdentPos = r),
                                            t.kind = "init",
                                            e ? t.value = this.parseMaybeDefault(r, s, this.copyNode(t.key)) : this.type === x.eq && a ? (a.shorthandAssign < 0 && (a.shorthandAssign = this.start),
                                                t.value = this.parseMaybeDefault(r, s, this.copyNode(t.key))) : t.value = this.copyNode(t.key),
                                            t.shorthand = !0) : this.unexpected();
                                    else {
                                        (i || n) && this.unexpected(),
                                            t.kind = t.key.name,
                                            this.parsePropertyName(t),
                                            t.value = this.parseMethod(!1);
                                        var h = "get" === t.kind ? 0 : 1;
                                        if (t.value.params.length !== h) {
                                            var l = t.value.start;
                                            "get" === t.kind ? this.raiseRecoverable(l, "getter should have no params") : this.raiseRecoverable(l, "setter should have exactly one param")
                                        } else
                                            "set" === t.kind && "RestElement" === t.value.params[0].type && this.raiseRecoverable(t.value.params[0].start, "Setter cannot use rest params")
                                    }
                                }
                                ,
                                st.parsePropertyName = function(t) {
                                    if (this.options.ecmaVersion >= 6) {
                                        if (this.eat(x.bracketL))
                                            return t.computed = !0,
                                                t.key = this.parseMaybeAssign(),
                                                this.expect(x.bracketR),
                                                t.key;
                                        t.computed = !1
                                    }
                                    return t.key = this.type === x.num || this.type === x.string ? this.parseExprAtom() : this.parseIdent("never" !== this.options.allowReserved)
                                }
                                ,
                                st.initFunction = function(t) {
                                    t.id = null,
                                    this.options.ecmaVersion >= 6 && (t.generator = t.expression = !1),
                                    this.options.ecmaVersion >= 8 && (t.async = !1)
                                }
                                ,
                                st.parseMethod = function(t, e, i) {
                                    var n = this.startNode()
                                        , r = this.yieldPos
                                        , s = this.awaitPos
                                        , a = this.awaitIdentPos;
                                    return this.initFunction(n),
                                    this.options.ecmaVersion >= 6 && (n.generator = t),
                                    this.options.ecmaVersion >= 8 && (n.async = !!e),
                                        this.yieldPos = 0,
                                        this.awaitPos = 0,
                                        this.awaitIdentPos = 0,
                                        this.enterScope(64 | U(e, n.generator) | (i ? 128 : 0)),
                                        this.expect(x.parenL),
                                        n.params = this.parseBindingList(x.parenR, !1, this.options.ecmaVersion >= 8),
                                        this.checkYieldAwaitInDefaultParams(),
                                        this.parseFunctionBody(n, !1, !0, !1),
                                        this.yieldPos = r,
                                        this.awaitPos = s,
                                        this.awaitIdentPos = a,
                                        this.finishNode(n, "FunctionExpression")
                                }
                                ,
                                st.parseArrowExpression = function(t, e, i, n) {
                                    var r = this.yieldPos
                                        , s = this.awaitPos
                                        , a = this.awaitIdentPos;
                                    return this.enterScope(16 | U(i, !1)),
                                        this.initFunction(t),
                                    this.options.ecmaVersion >= 8 && (t.async = !!i),
                                        this.yieldPos = 0,
                                        this.awaitPos = 0,
                                        this.awaitIdentPos = 0,
                                        t.params = this.toAssignableList(e, !0),
                                        this.parseFunctionBody(t, !0, !1, n),
                                        this.yieldPos = r,
                                        this.awaitPos = s,
                                        this.awaitIdentPos = a,
                                        this.finishNode(t, "ArrowFunctionExpression")
                                }
                                ,
                                st.parseFunctionBody = function(t, e, i, n) {
                                    var r = e && this.type !== x.braceL
                                        , s = this.strict
                                        , a = !1;
                                    if (r)
                                        t.body = this.parseMaybeAssign(n),
                                            t.expression = !0,
                                            this.checkParams(t, !1);
                                    else {
                                        var o = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(t.params);
                                        s && !o || (a = this.strictDirective(this.end)) && o && this.raiseRecoverable(t.start, "Illegal 'use strict' directive in function with non-simple parameter list");
                                        var h = this.labels;
                                        this.labels = [],
                                        a && (this.strict = !0),
                                            this.checkParams(t, !s && !a && !e && !i && this.isSimpleParamList(t.params)),
                                        this.strict && t.id && this.checkLValSimple(t.id, 5),
                                            t.body = this.parseBlock(!1, void 0, a && !s),
                                            t.expression = !1,
                                            this.adaptDirectivePrologue(t.body.body),
                                            this.labels = h
                                    }
                                    this.exitScope()
                                }
                                ,
                                st.isSimpleParamList = function(t) {
                                    for (var e = 0, i = t; e < i.length; e += 1) {
                                        if ("Identifier" !== i[e].type)
                                            return !1
                                    }
                                    return !0
                                }
                                ,
                                st.checkParams = function(t, e) {
                                    for (var i = Object.create(null), n = 0, r = t.params; n < r.length; n += 1) {
                                        var s = r[n];
                                        this.checkLValInnerPattern(s, 1, e ? null : i)
                                    }
                                }
                                ,
                                st.parseExprList = function(t, e, i, n) {
                                    for (var r = [], s = !0; !this.eat(t); ) {
                                        if (s)
                                            s = !1;
                                        else if (this.expect(x.comma),
                                        e && this.afterTrailingComma(t))
                                            break;
                                        var a = void 0;
                                        i && this.type === x.comma ? a = null : this.type === x.ellipsis ? (a = this.parseSpread(n),
                                        n && this.type === x.comma && n.trailingComma < 0 && (n.trailingComma = this.start)) : a = this.parseMaybeAssign(!1, n),
                                            r.push(a)
                                    }
                                    return r
                                }
                                ,
                                st.checkUnreserved = function(t) {
                                    var e = t.start
                                        , i = t.end
                                        , n = t.name;
                                    (this.inGenerator && "yield" === n && this.raiseRecoverable(e, "Cannot use 'yield' as identifier inside a generator"),
                                    this.inAsync && "await" === n && this.raiseRecoverable(e, "Cannot use 'await' as identifier inside an async function"),
                                    this.currentThisScope().inClassFieldInit && "arguments" === n && this.raiseRecoverable(e, "Cannot use 'arguments' in class field initializer"),
                                    !this.inClassStaticBlock || "arguments" !== n && "await" !== n || this.raise(e, "Cannot use " + n + " in class static initialization block"),
                                    this.keywords.test(n) && this.raise(e, "Unexpected keyword '" + n + "'"),
                                    this.options.ecmaVersion < 6 && -1 !== this.input.slice(e, i).indexOf("\\")) || (this.strict ? this.reservedWordsStrict : this.reservedWords).test(n) && (this.inAsync || "await" !== n || this.raiseRecoverable(e, "Cannot use keyword 'await' outside an async function"),
                                        this.raiseRecoverable(e, "The keyword '" + n + "' is reserved"))
                                }
                                ,
                                st.parseIdent = function(t, e) {
                                    var i = this.startNode();
                                    return this.type === x.name ? i.name = this.value : this.type.keyword ? (i.name = this.type.keyword,
                                    "class" !== i.name && "function" !== i.name || this.lastTokEnd === this.lastTokStart + 1 && 46 === this.input.charCodeAt(this.lastTokStart) || this.context.pop()) : this.unexpected(),
                                        this.next(!!t),
                                        this.finishNode(i, "Identifier"),
                                    t || (this.checkUnreserved(i),
                                    "await" !== i.name || this.awaitIdentPos || (this.awaitIdentPos = i.start)),
                                        i
                                }
                                ,
                                st.parsePrivateIdent = function() {
                                    var t = this.startNode();
                                    return this.type === x.privateId ? t.name = this.value : this.unexpected(),
                                        this.next(),
                                        this.finishNode(t, "PrivateIdentifier"),
                                        0 === this.privateNameStack.length ? this.raise(t.start, "Private field '#" + t.name + "' must be declared in an enclosing class") : this.privateNameStack[this.privateNameStack.length - 1].used.push(t),
                                        t
                                }
                                ,
                                st.parseYield = function(t) {
                                    this.yieldPos || (this.yieldPos = this.start);
                                    var e = this.startNode();
                                    return this.next(),
                                        this.type === x.semi || this.canInsertSemicolon() || this.type !== x.star && !this.type.startsExpr ? (e.delegate = !1,
                                            e.argument = null) : (e.delegate = this.eat(x.star),
                                            e.argument = this.parseMaybeAssign(t)),
                                        this.finishNode(e, "YieldExpression")
                                }
                                ,
                                st.parseAwait = function(t) {
                                    this.awaitPos || (this.awaitPos = this.start);
                                    var e = this.startNode();
                                    return this.next(),
                                        e.argument = this.parseMaybeUnary(null, !0, !1, t),
                                        this.finishNode(e, "AwaitExpression")
                                }
                            ;
                            var ht = G.prototype;
                            ht.raise = function(t, e) {
                                var i = R(this.input, t);
                                e += " (" + i.line + ":" + i.column + ")";
                                var n = new SyntaxError(e);
                                throw n.pos = t,
                                    n.loc = i,
                                    n.raisedAt = this.pos,
                                    n
                            }
                                ,
                                ht.raiseRecoverable = ht.raise,
                                ht.curPosition = function() {
                                    if (this.options.locations)
                                        return new O(this.curLine,this.pos - this.lineStart)
                                }
                            ;
                            var lt = G.prototype
                                , ut = function(t) {
                                this.flags = t,
                                    this.var = [],
                                    this.lexical = [],
                                    this.functions = [],
                                    this.inClassFieldInit = !1
                            };
                            lt.enterScope = function(t) {
                                this.scopeStack.push(new ut(t))
                            }
                                ,
                                lt.exitScope = function() {
                                    this.scopeStack.pop()
                                }
                                ,
                                lt.treatFunctionsAsVarInScope = function(t) {
                                    return 2 & t.flags || !this.inModule && 1 & t.flags
                                }
                                ,
                                lt.declareName = function(t, e, i) {
                                    var n = !1;
                                    if (2 === e) {
                                        var r = this.currentScope();
                                        n = r.lexical.indexOf(t) > -1 || r.functions.indexOf(t) > -1 || r.var.indexOf(t) > -1,
                                            r.lexical.push(t),
                                        this.inModule && 1 & r.flags && delete this.undefinedExports[t]
                                    } else if (4 === e) {
                                        this.currentScope().lexical.push(t)
                                    } else if (3 === e) {
                                        var s = this.currentScope();
                                        n = this.treatFunctionsAsVar ? s.lexical.indexOf(t) > -1 : s.lexical.indexOf(t) > -1 || s.var.indexOf(t) > -1,
                                            s.functions.push(t)
                                    } else
                                        for (var a = this.scopeStack.length - 1; a >= 0; --a) {
                                            var o = this.scopeStack[a];
                                            if (o.lexical.indexOf(t) > -1 && !(32 & o.flags && o.lexical[0] === t) || !this.treatFunctionsAsVarInScope(o) && o.functions.indexOf(t) > -1) {
                                                n = !0;
                                                break
                                            }
                                            if (o.var.push(t),
                                            this.inModule && 1 & o.flags && delete this.undefinedExports[t],
                                            259 & o.flags)
                                                break
                                        }
                                    n && this.raiseRecoverable(i, "Identifier '" + t + "' has already been declared")
                                }
                                ,
                                lt.checkLocalExport = function(t) {
                                    -1 === this.scopeStack[0].lexical.indexOf(t.name) && -1 === this.scopeStack[0].var.indexOf(t.name) && (this.undefinedExports[t.name] = t)
                                }
                                ,
                                lt.currentScope = function() {
                                    return this.scopeStack[this.scopeStack.length - 1]
                                }
                                ,
                                lt.currentVarScope = function() {
                                    for (var t = this.scopeStack.length - 1; ; t--) {
                                        var e = this.scopeStack[t];
                                        if (259 & e.flags)
                                            return e
                                    }
                                }
                                ,
                                lt.currentThisScope = function() {
                                    for (var t = this.scopeStack.length - 1; ; t--) {
                                        var e = this.scopeStack[t];
                                        if (259 & e.flags && !(16 & e.flags))
                                            return e
                                    }
                                }
                            ;
                            var ct = function(t, e, i) {
                                this.type = "",
                                    this.start = e,
                                    this.end = 0,
                                t.options.locations && (this.loc = new D(t,i)),
                                t.options.directSourceFile && (this.sourceFile = t.options.directSourceFile),
                                t.options.ranges && (this.range = [e, 0])
                            }
                                , dt = G.prototype;
                            function pt(t, e, i, n) {
                                return t.type = e,
                                    t.end = i,
                                this.options.locations && (t.loc.end = n),
                                this.options.ranges && (t.range[1] = i),
                                    t
                            }
                            dt.startNode = function() {
                                return new ct(this,this.start,this.startLoc)
                            }
                                ,
                                dt.startNodeAt = function(t, e) {
                                    return new ct(this,t,e)
                                }
                                ,
                                dt.finishNode = function(t, e) {
                                    return pt.call(this, t, e, this.lastTokEnd, this.lastTokEndLoc)
                                }
                                ,
                                dt.finishNodeAt = function(t, e, i, n) {
                                    return pt.call(this, t, e, i, n)
                                }
                                ,
                                dt.copyNode = function(t) {
                                    var e = new ct(this,t.start,this.startLoc);
                                    for (var i in t)
                                        e[i] = t[i];
                                    return e
                                }
                            ;
                            var ft = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS"
                                , mt = ft + " Extended_Pictographic"
                                , gt = mt + " EBase EComp EMod EPres ExtPict"
                                , vt = {
                                9: ft,
                                10: mt,
                                11: mt,
                                12: gt,
                                13: gt
                            }
                                , _t = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu"
                                , yt = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb"
                                , xt = yt + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd"
                                , bt = xt + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho"
                                , wt = bt + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi"
                                , St = {
                                9: yt,
                                10: xt,
                                11: bt,
                                12: wt,
                                13: wt + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith"
                            }
                                , Mt = {};
                            function Ct(t) {
                                var e = Mt[t] = {
                                    binary: k(vt[t] + " " + _t),
                                    nonBinary: {
                                        General_Category: k(_t),
                                        Script: k(St[t])
                                    }
                                };
                                e.nonBinary.Script_Extensions = e.nonBinary.Script,
                                    e.nonBinary.gc = e.nonBinary.General_Category,
                                    e.nonBinary.sc = e.nonBinary.Script,
                                    e.nonBinary.scx = e.nonBinary.Script_Extensions
                            }
                            for (var At = 0, Tt = [9, 10, 11, 12, 13]; At < Tt.length; At += 1) {
                                Ct(Tt[At])
                            }
                            var Pt = G.prototype
                                , Et = function(t) {
                                this.parser = t,
                                    this.validFlags = "gim" + (t.options.ecmaVersion >= 6 ? "uy" : "") + (t.options.ecmaVersion >= 9 ? "s" : "") + (t.options.ecmaVersion >= 13 ? "d" : ""),
                                    this.unicodeProperties = Mt[t.options.ecmaVersion >= 13 ? 13 : t.options.ecmaVersion],
                                    this.source = "",
                                    this.flags = "",
                                    this.start = 0,
                                    this.switchU = !1,
                                    this.switchN = !1,
                                    this.pos = 0,
                                    this.lastIntValue = 0,
                                    this.lastStringValue = "",
                                    this.lastAssertionIsQuantifiable = !1,
                                    this.numCapturingParens = 0,
                                    this.maxBackReference = 0,
                                    this.groupNames = [],
                                    this.backReferenceNames = []
                            };
                            function Lt(t) {
                                return t <= 65535 ? String.fromCharCode(t) : (t -= 65536,
                                    String.fromCharCode(55296 + (t >> 10), 56320 + (1023 & t)))
                            }
                            function It(t) {
                                return 36 === t || t >= 40 && t <= 43 || 46 === t || 63 === t || t >= 91 && t <= 94 || t >= 123 && t <= 125
                            }
                            function kt(t) {
                                return t >= 65 && t <= 90 || t >= 97 && t <= 122
                            }
                            function Nt(t) {
                                return kt(t) || 95 === t
                            }
                            function Ot(t) {
                                return Nt(t) || Dt(t)
                            }
                            function Dt(t) {
                                return t >= 48 && t <= 57
                            }
                            function Rt(t) {
                                return t >= 48 && t <= 57 || t >= 65 && t <= 70 || t >= 97 && t <= 102
                            }
                            function zt(t) {
                                return t >= 65 && t <= 70 ? t - 65 + 10 : t >= 97 && t <= 102 ? t - 97 + 10 : t - 48
                            }
                            function Ft(t) {
                                return t >= 48 && t <= 55
                            }
                            Et.prototype.reset = function(t, e, i) {
                                var n = -1 !== i.indexOf("u");
                                this.start = 0 | t,
                                    this.source = e + "",
                                    this.flags = i,
                                    this.switchU = n && this.parser.options.ecmaVersion >= 6,
                                    this.switchN = n && this.parser.options.ecmaVersion >= 9
                            }
                                ,
                                Et.prototype.raise = function(t) {
                                    this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + t)
                                }
                                ,
                                Et.prototype.at = function(t, e) {
                                    void 0 === e && (e = !1);
                                    var i = this.source
                                        , n = i.length;
                                    if (t >= n)
                                        return -1;
                                    var r = i.charCodeAt(t);
                                    if (!e && !this.switchU || r <= 55295 || r >= 57344 || t + 1 >= n)
                                        return r;
                                    var s = i.charCodeAt(t + 1);
                                    return s >= 56320 && s <= 57343 ? (r << 10) + s - 56613888 : r
                                }
                                ,
                                Et.prototype.nextIndex = function(t, e) {
                                    void 0 === e && (e = !1);
                                    var i = this.source
                                        , n = i.length;
                                    if (t >= n)
                                        return n;
                                    var r, s = i.charCodeAt(t);
                                    return !e && !this.switchU || s <= 55295 || s >= 57344 || t + 1 >= n || (r = i.charCodeAt(t + 1)) < 56320 || r > 57343 ? t + 1 : t + 2
                                }
                                ,
                                Et.prototype.current = function(t) {
                                    return void 0 === t && (t = !1),
                                        this.at(this.pos, t)
                                }
                                ,
                                Et.prototype.lookahead = function(t) {
                                    return void 0 === t && (t = !1),
                                        this.at(this.nextIndex(this.pos, t), t)
                                }
                                ,
                                Et.prototype.advance = function(t) {
                                    void 0 === t && (t = !1),
                                        this.pos = this.nextIndex(this.pos, t)
                                }
                                ,
                                Et.prototype.eat = function(t, e) {
                                    return void 0 === e && (e = !1),
                                    this.current(e) === t && (this.advance(e),
                                        !0)
                                }
                                ,
                                Pt.validateRegExpFlags = function(t) {
                                    for (var e = t.validFlags, i = t.flags, n = 0; n < i.length; n++) {
                                        var r = i.charAt(n);
                                        -1 === e.indexOf(r) && this.raise(t.start, "Invalid regular expression flag"),
                                        i.indexOf(r, n + 1) > -1 && this.raise(t.start, "Duplicate regular expression flag")
                                    }
                                }
                                ,
                                Pt.validateRegExpPattern = function(t) {
                                    this.regexp_pattern(t),
                                    !t.switchN && this.options.ecmaVersion >= 9 && t.groupNames.length > 0 && (t.switchN = !0,
                                        this.regexp_pattern(t))
                                }
                                ,
                                Pt.regexp_pattern = function(t) {
                                    t.pos = 0,
                                        t.lastIntValue = 0,
                                        t.lastStringValue = "",
                                        t.lastAssertionIsQuantifiable = !1,
                                        t.numCapturingParens = 0,
                                        t.maxBackReference = 0,
                                        t.groupNames.length = 0,
                                        t.backReferenceNames.length = 0,
                                        this.regexp_disjunction(t),
                                    t.pos !== t.source.length && (t.eat(41) && t.raise("Unmatched ')'"),
                                    (t.eat(93) || t.eat(125)) && t.raise("Lone quantifier brackets")),
                                    t.maxBackReference > t.numCapturingParens && t.raise("Invalid escape");
                                    for (var e = 0, i = t.backReferenceNames; e < i.length; e += 1) {
                                        var n = i[e];
                                        -1 === t.groupNames.indexOf(n) && t.raise("Invalid named capture referenced")
                                    }
                                }
                                ,
                                Pt.regexp_disjunction = function(t) {
                                    for (this.regexp_alternative(t); t.eat(124); )
                                        this.regexp_alternative(t);
                                    this.regexp_eatQuantifier(t, !0) && t.raise("Nothing to repeat"),
                                    t.eat(123) && t.raise("Lone quantifier brackets")
                                }
                                ,
                                Pt.regexp_alternative = function(t) {
                                    for (; t.pos < t.source.length && this.regexp_eatTerm(t); )
                                        ;
                                }
                                ,
                                Pt.regexp_eatTerm = function(t) {
                                    return this.regexp_eatAssertion(t) ? (t.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(t) && t.switchU && t.raise("Invalid quantifier"),
                                        !0) : !!(t.switchU ? this.regexp_eatAtom(t) : this.regexp_eatExtendedAtom(t)) && (this.regexp_eatQuantifier(t),
                                        !0)
                                }
                                ,
                                Pt.regexp_eatAssertion = function(t) {
                                    var e = t.pos;
                                    if (t.lastAssertionIsQuantifiable = !1,
                                    t.eat(94) || t.eat(36))
                                        return !0;
                                    if (t.eat(92)) {
                                        if (t.eat(66) || t.eat(98))
                                            return !0;
                                        t.pos = e
                                    }
                                    if (t.eat(40) && t.eat(63)) {
                                        var i = !1;
                                        if (this.options.ecmaVersion >= 9 && (i = t.eat(60)),
                                        t.eat(61) || t.eat(33))
                                            return this.regexp_disjunction(t),
                                            t.eat(41) || t.raise("Unterminated group"),
                                                t.lastAssertionIsQuantifiable = !i,
                                                !0
                                    }
                                    return t.pos = e,
                                        !1
                                }
                                ,
                                Pt.regexp_eatQuantifier = function(t, e) {
                                    return void 0 === e && (e = !1),
                                    !!this.regexp_eatQuantifierPrefix(t, e) && (t.eat(63),
                                        !0)
                                }
                                ,
                                Pt.regexp_eatQuantifierPrefix = function(t, e) {
                                    return t.eat(42) || t.eat(43) || t.eat(63) || this.regexp_eatBracedQuantifier(t, e)
                                }
                                ,
                                Pt.regexp_eatBracedQuantifier = function(t, e) {
                                    var i = t.pos;
                                    if (t.eat(123)) {
                                        var n = 0
                                            , r = -1;
                                        if (this.regexp_eatDecimalDigits(t) && (n = t.lastIntValue,
                                        t.eat(44) && this.regexp_eatDecimalDigits(t) && (r = t.lastIntValue),
                                            t.eat(125)))
                                            return -1 !== r && r < n && !e && t.raise("numbers out of order in {} quantifier"),
                                                !0;
                                        t.switchU && !e && t.raise("Incomplete quantifier"),
                                            t.pos = i
                                    }
                                    return !1
                                }
                                ,
                                Pt.regexp_eatAtom = function(t) {
                                    return this.regexp_eatPatternCharacters(t) || t.eat(46) || this.regexp_eatReverseSolidusAtomEscape(t) || this.regexp_eatCharacterClass(t) || this.regexp_eatUncapturingGroup(t) || this.regexp_eatCapturingGroup(t)
                                }
                                ,
                                Pt.regexp_eatReverseSolidusAtomEscape = function(t) {
                                    var e = t.pos;
                                    if (t.eat(92)) {
                                        if (this.regexp_eatAtomEscape(t))
                                            return !0;
                                        t.pos = e
                                    }
                                    return !1
                                }
                                ,
                                Pt.regexp_eatUncapturingGroup = function(t) {
                                    var e = t.pos;
                                    if (t.eat(40)) {
                                        if (t.eat(63) && t.eat(58)) {
                                            if (this.regexp_disjunction(t),
                                                t.eat(41))
                                                return !0;
                                            t.raise("Unterminated group")
                                        }
                                        t.pos = e
                                    }
                                    return !1
                                }
                                ,
                                Pt.regexp_eatCapturingGroup = function(t) {
                                    if (t.eat(40)) {
                                        if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(t) : 63 === t.current() && t.raise("Invalid group"),
                                            this.regexp_disjunction(t),
                                            t.eat(41))
                                            return t.numCapturingParens += 1,
                                                !0;
                                        t.raise("Unterminated group")
                                    }
                                    return !1
                                }
                                ,
                                Pt.regexp_eatExtendedAtom = function(t) {
                                    return t.eat(46) || this.regexp_eatReverseSolidusAtomEscape(t) || this.regexp_eatCharacterClass(t) || this.regexp_eatUncapturingGroup(t) || this.regexp_eatCapturingGroup(t) || this.regexp_eatInvalidBracedQuantifier(t) || this.regexp_eatExtendedPatternCharacter(t)
                                }
                                ,
                                Pt.regexp_eatInvalidBracedQuantifier = function(t) {
                                    return this.regexp_eatBracedQuantifier(t, !0) && t.raise("Nothing to repeat"),
                                        !1
                                }
                                ,
                                Pt.regexp_eatSyntaxCharacter = function(t) {
                                    var e = t.current();
                                    return !!It(e) && (t.lastIntValue = e,
                                        t.advance(),
                                        !0)
                                }
                                ,
                                Pt.regexp_eatPatternCharacters = function(t) {
                                    for (var e = t.pos, i = 0; -1 !== (i = t.current()) && !It(i); )
                                        t.advance();
                                    return t.pos !== e
                                }
                                ,
                                Pt.regexp_eatExtendedPatternCharacter = function(t) {
                                    var e = t.current();
                                    return !(-1 === e || 36 === e || e >= 40 && e <= 43 || 46 === e || 63 === e || 91 === e || 94 === e || 124 === e) && (t.advance(),
                                        !0)
                                }
                                ,
                                Pt.regexp_groupSpecifier = function(t) {
                                    if (t.eat(63)) {
                                        if (this.regexp_eatGroupName(t))
                                            return -1 !== t.groupNames.indexOf(t.lastStringValue) && t.raise("Duplicate capture group name"),
                                                void t.groupNames.push(t.lastStringValue);
                                        t.raise("Invalid group")
                                    }
                                }
                                ,
                                Pt.regexp_eatGroupName = function(t) {
                                    if (t.lastStringValue = "",
                                        t.eat(60)) {
                                        if (this.regexp_eatRegExpIdentifierName(t) && t.eat(62))
                                            return !0;
                                        t.raise("Invalid capture group name")
                                    }
                                    return !1
                                }
                                ,
                                Pt.regexp_eatRegExpIdentifierName = function(t) {
                                    if (t.lastStringValue = "",
                                        this.regexp_eatRegExpIdentifierStart(t)) {
                                        for (t.lastStringValue += Lt(t.lastIntValue); this.regexp_eatRegExpIdentifierPart(t); )
                                            t.lastStringValue += Lt(t.lastIntValue);
                                        return !0
                                    }
                                    return !1
                                }
                                ,
                                Pt.regexp_eatRegExpIdentifierStart = function(t) {
                                    var e = t.pos
                                        , i = this.options.ecmaVersion >= 11
                                        , n = t.current(i);
                                    return t.advance(i),
                                    92 === n && this.regexp_eatRegExpUnicodeEscapeSequence(t, i) && (n = t.lastIntValue),
                                        function(t) {
                                            return d(t, !0) || 36 === t || 95 === t
                                        }(n) ? (t.lastIntValue = n,
                                            !0) : (t.pos = e,
                                            !1)
                                }
                                ,
                                Pt.regexp_eatRegExpIdentifierPart = function(t) {
                                    var e = t.pos
                                        , i = this.options.ecmaVersion >= 11
                                        , n = t.current(i);
                                    return t.advance(i),
                                    92 === n && this.regexp_eatRegExpUnicodeEscapeSequence(t, i) && (n = t.lastIntValue),
                                        function(t) {
                                            return p(t, !0) || 36 === t || 95 === t || 8204 === t || 8205 === t
                                        }(n) ? (t.lastIntValue = n,
                                            !0) : (t.pos = e,
                                            !1)
                                }
                                ,
                                Pt.regexp_eatAtomEscape = function(t) {
                                    return !!(this.regexp_eatBackReference(t) || this.regexp_eatCharacterClassEscape(t) || this.regexp_eatCharacterEscape(t) || t.switchN && this.regexp_eatKGroupName(t)) || (t.switchU && (99 === t.current() && t.raise("Invalid unicode escape"),
                                        t.raise("Invalid escape")),
                                        !1)
                                }
                                ,
                                Pt.regexp_eatBackReference = function(t) {
                                    var e = t.pos;
                                    if (this.regexp_eatDecimalEscape(t)) {
                                        var i = t.lastIntValue;
                                        if (t.switchU)
                                            return i > t.maxBackReference && (t.maxBackReference = i),
                                                !0;
                                        if (i <= t.numCapturingParens)
                                            return !0;
                                        t.pos = e
                                    }
                                    return !1
                                }
                                ,
                                Pt.regexp_eatKGroupName = function(t) {
                                    if (t.eat(107)) {
                                        if (this.regexp_eatGroupName(t))
                                            return t.backReferenceNames.push(t.lastStringValue),
                                                !0;
                                        t.raise("Invalid named reference")
                                    }
                                    return !1
                                }
                                ,
                                Pt.regexp_eatCharacterEscape = function(t) {
                                    return this.regexp_eatControlEscape(t) || this.regexp_eatCControlLetter(t) || this.regexp_eatZero(t) || this.regexp_eatHexEscapeSequence(t) || this.regexp_eatRegExpUnicodeEscapeSequence(t, !1) || !t.switchU && this.regexp_eatLegacyOctalEscapeSequence(t) || this.regexp_eatIdentityEscape(t)
                                }
                                ,
                                Pt.regexp_eatCControlLetter = function(t) {
                                    var e = t.pos;
                                    if (t.eat(99)) {
                                        if (this.regexp_eatControlLetter(t))
                                            return !0;
                                        t.pos = e
                                    }
                                    return !1
                                }
                                ,
                                Pt.regexp_eatZero = function(t) {
                                    return 48 === t.current() && !Dt(t.lookahead()) && (t.lastIntValue = 0,
                                        t.advance(),
                                        !0)
                                }
                                ,
                                Pt.regexp_eatControlEscape = function(t) {
                                    var e = t.current();
                                    return 116 === e ? (t.lastIntValue = 9,
                                        t.advance(),
                                        !0) : 110 === e ? (t.lastIntValue = 10,
                                        t.advance(),
                                        !0) : 118 === e ? (t.lastIntValue = 11,
                                        t.advance(),
                                        !0) : 102 === e ? (t.lastIntValue = 12,
                                        t.advance(),
                                        !0) : 114 === e && (t.lastIntValue = 13,
                                        t.advance(),
                                        !0)
                                }
                                ,
                                Pt.regexp_eatControlLetter = function(t) {
                                    var e = t.current();
                                    return !!kt(e) && (t.lastIntValue = e % 32,
                                        t.advance(),
                                        !0)
                                }
                                ,
                                Pt.regexp_eatRegExpUnicodeEscapeSequence = function(t, e) {
                                    void 0 === e && (e = !1);
                                    var i = t.pos
                                        , n = e || t.switchU;
                                    if (t.eat(117)) {
                                        if (this.regexp_eatFixedHexDigits(t, 4)) {
                                            var r = t.lastIntValue;
                                            if (n && r >= 55296 && r <= 56319) {
                                                var s = t.pos;
                                                if (t.eat(92) && t.eat(117) && this.regexp_eatFixedHexDigits(t, 4)) {
                                                    var a = t.lastIntValue;
                                                    if (a >= 56320 && a <= 57343)
                                                        return t.lastIntValue = 1024 * (r - 55296) + (a - 56320) + 65536,
                                                            !0
                                                }
                                                t.pos = s,
                                                    t.lastIntValue = r
                                            }
                                            return !0
                                        }
                                        if (n && t.eat(123) && this.regexp_eatHexDigits(t) && t.eat(125) && function(t) {
                                            return t >= 0 && t <= 1114111
                                        }(t.lastIntValue))
                                            return !0;
                                        n && t.raise("Invalid unicode escape"),
                                            t.pos = i
                                    }
                                    return !1
                                }
                                ,
                                Pt.regexp_eatIdentityEscape = function(t) {
                                    if (t.switchU)
                                        return !!this.regexp_eatSyntaxCharacter(t) || !!t.eat(47) && (t.lastIntValue = 47,
                                            !0);
                                    var e = t.current();
                                    return !(99 === e || t.switchN && 107 === e) && (t.lastIntValue = e,
                                        t.advance(),
                                        !0)
                                }
                                ,
                                Pt.regexp_eatDecimalEscape = function(t) {
                                    t.lastIntValue = 0;
                                    var e = t.current();
                                    if (e >= 49 && e <= 57) {
                                        do {
                                            t.lastIntValue = 10 * t.lastIntValue + (e - 48),
                                                t.advance()
                                        } while ((e = t.current()) >= 48 && e <= 57);
                                        return !0
                                    }
                                    return !1
                                }
                                ,
                                Pt.regexp_eatCharacterClassEscape = function(t) {
                                    var e = t.current();
                                    if (function(t) {
                                        return 100 === t || 68 === t || 115 === t || 83 === t || 119 === t || 87 === t
                                    }(e))
                                        return t.lastIntValue = -1,
                                            t.advance(),
                                            !0;
                                    if (t.switchU && this.options.ecmaVersion >= 9 && (80 === e || 112 === e)) {
                                        if (t.lastIntValue = -1,
                                            t.advance(),
                                        t.eat(123) && this.regexp_eatUnicodePropertyValueExpression(t) && t.eat(125))
                                            return !0;
                                        t.raise("Invalid property name")
                                    }
                                    return !1
                                }
                                ,
                                Pt.regexp_eatUnicodePropertyValueExpression = function(t) {
                                    var e = t.pos;
                                    if (this.regexp_eatUnicodePropertyName(t) && t.eat(61)) {
                                        var i = t.lastStringValue;
                                        if (this.regexp_eatUnicodePropertyValue(t)) {
                                            var n = t.lastStringValue;
                                            return this.regexp_validateUnicodePropertyNameAndValue(t, i, n),
                                                !0
                                        }
                                    }
                                    if (t.pos = e,
                                        this.regexp_eatLoneUnicodePropertyNameOrValue(t)) {
                                        var r = t.lastStringValue;
                                        return this.regexp_validateUnicodePropertyNameOrValue(t, r),
                                            !0
                                    }
                                    return !1
                                }
                                ,
                                Pt.regexp_validateUnicodePropertyNameAndValue = function(t, e, i) {
                                    L(t.unicodeProperties.nonBinary, e) || t.raise("Invalid property name"),
                                    t.unicodeProperties.nonBinary[e].test(i) || t.raise("Invalid property value")
                                }
                                ,
                                Pt.regexp_validateUnicodePropertyNameOrValue = function(t, e) {
                                    t.unicodeProperties.binary.test(e) || t.raise("Invalid property name")
                                }
                                ,
                                Pt.regexp_eatUnicodePropertyName = function(t) {
                                    var e = 0;
                                    for (t.lastStringValue = ""; Nt(e = t.current()); )
                                        t.lastStringValue += Lt(e),
                                            t.advance();
                                    return "" !== t.lastStringValue
                                }
                                ,
                                Pt.regexp_eatUnicodePropertyValue = function(t) {
                                    var e = 0;
                                    for (t.lastStringValue = ""; Ot(e = t.current()); )
                                        t.lastStringValue += Lt(e),
                                            t.advance();
                                    return "" !== t.lastStringValue
                                }
                                ,
                                Pt.regexp_eatLoneUnicodePropertyNameOrValue = function(t) {
                                    return this.regexp_eatUnicodePropertyValue(t)
                                }
                                ,
                                Pt.regexp_eatCharacterClass = function(t) {
                                    if (t.eat(91)) {
                                        if (t.eat(94),
                                            this.regexp_classRanges(t),
                                            t.eat(93))
                                            return !0;
                                        t.raise("Unterminated character class")
                                    }
                                    return !1
                                }
                                ,
                                Pt.regexp_classRanges = function(t) {
                                    for (; this.regexp_eatClassAtom(t); ) {
                                        var e = t.lastIntValue;
                                        if (t.eat(45) && this.regexp_eatClassAtom(t)) {
                                            var i = t.lastIntValue;
                                            !t.switchU || -1 !== e && -1 !== i || t.raise("Invalid character class"),
                                            -1 !== e && -1 !== i && e > i && t.raise("Range out of order in character class")
                                        }
                                    }
                                }
                                ,
                                Pt.regexp_eatClassAtom = function(t) {
                                    var e = t.pos;
                                    if (t.eat(92)) {
                                        if (this.regexp_eatClassEscape(t))
                                            return !0;
                                        if (t.switchU) {
                                            var i = t.current();
                                            (99 === i || Ft(i)) && t.raise("Invalid class escape"),
                                                t.raise("Invalid escape")
                                        }
                                        t.pos = e
                                    }
                                    var n = t.current();
                                    return 93 !== n && (t.lastIntValue = n,
                                        t.advance(),
                                        !0)
                                }
                                ,
                                Pt.regexp_eatClassEscape = function(t) {
                                    var e = t.pos;
                                    if (t.eat(98))
                                        return t.lastIntValue = 8,
                                            !0;
                                    if (t.switchU && t.eat(45))
                                        return t.lastIntValue = 45,
                                            !0;
                                    if (!t.switchU && t.eat(99)) {
                                        if (this.regexp_eatClassControlLetter(t))
                                            return !0;
                                        t.pos = e
                                    }
                                    return this.regexp_eatCharacterClassEscape(t) || this.regexp_eatCharacterEscape(t)
                                }
                                ,
                                Pt.regexp_eatClassControlLetter = function(t) {
                                    var e = t.current();
                                    return !(!Dt(e) && 95 !== e) && (t.lastIntValue = e % 32,
                                        t.advance(),
                                        !0)
                                }
                                ,
                                Pt.regexp_eatHexEscapeSequence = function(t) {
                                    var e = t.pos;
                                    if (t.eat(120)) {
                                        if (this.regexp_eatFixedHexDigits(t, 2))
                                            return !0;
                                        t.switchU && t.raise("Invalid escape"),
                                            t.pos = e
                                    }
                                    return !1
                                }
                                ,
                                Pt.regexp_eatDecimalDigits = function(t) {
                                    var e = t.pos
                                        , i = 0;
                                    for (t.lastIntValue = 0; Dt(i = t.current()); )
                                        t.lastIntValue = 10 * t.lastIntValue + (i - 48),
                                            t.advance();
                                    return t.pos !== e
                                }
                                ,
                                Pt.regexp_eatHexDigits = function(t) {
                                    var e = t.pos
                                        , i = 0;
                                    for (t.lastIntValue = 0; Rt(i = t.current()); )
                                        t.lastIntValue = 16 * t.lastIntValue + zt(i),
                                            t.advance();
                                    return t.pos !== e
                                }
                                ,
                                Pt.regexp_eatLegacyOctalEscapeSequence = function(t) {
                                    if (this.regexp_eatOctalDigit(t)) {
                                        var e = t.lastIntValue;
                                        if (this.regexp_eatOctalDigit(t)) {
                                            var i = t.lastIntValue;
                                            e <= 3 && this.regexp_eatOctalDigit(t) ? t.lastIntValue = 64 * e + 8 * i + t.lastIntValue : t.lastIntValue = 8 * e + i
                                        } else
                                            t.lastIntValue = e;
                                        return !0
                                    }
                                    return !1
                                }
                                ,
                                Pt.regexp_eatOctalDigit = function(t) {
                                    var e = t.current();
                                    return Ft(e) ? (t.lastIntValue = e - 48,
                                        t.advance(),
                                        !0) : (t.lastIntValue = 0,
                                        !1)
                                }
                                ,
                                Pt.regexp_eatFixedHexDigits = function(t, e) {
                                    var i = t.pos;
                                    t.lastIntValue = 0;
                                    for (var n = 0; n < e; ++n) {
                                        var r = t.current();
                                        if (!Rt(r))
                                            return t.pos = i,
                                                !1;
                                        t.lastIntValue = 16 * t.lastIntValue + zt(r),
                                            t.advance()
                                    }
                                    return !0
                                }
                            ;
                            var Bt = function(t) {
                                this.type = t.type,
                                    this.value = t.value,
                                    this.start = t.start,
                                    this.end = t.end,
                                t.options.locations && (this.loc = new D(t,t.startLoc,t.endLoc)),
                                t.options.ranges && (this.range = [t.start, t.end])
                            }
                                , Vt = G.prototype;
                            function Ut(t) {
                                return "function" != typeof BigInt ? null : BigInt(t.replace(/_/g, ""))
                            }
                            function Gt(t) {
                                return t <= 65535 ? String.fromCharCode(t) : (t -= 65536,
                                    String.fromCharCode(55296 + (t >> 10), 56320 + (1023 & t)))
                            }
                            Vt.next = function(t) {
                                !t && this.type.keyword && this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword),
                                this.options.onToken && this.options.onToken(new Bt(this)),
                                    this.lastTokEnd = this.end,
                                    this.lastTokStart = this.start,
                                    this.lastTokEndLoc = this.endLoc,
                                    this.lastTokStartLoc = this.startLoc,
                                    this.nextToken()
                            }
                                ,
                                Vt.getToken = function() {
                                    return this.next(),
                                        new Bt(this)
                                }
                                ,
                            "undefined" != typeof Symbol && (Vt[Symbol.iterator] = function() {
                                    var t = this;
                                    return {
                                        next: function() {
                                            var e = t.getToken();
                                            return {
                                                done: e.type === x.eof,
                                                value: e
                                            }
                                        }
                                    }
                                }
                            ),
                                Vt.nextToken = function() {
                                    var t = this.curContext();
                                    return t && t.preserveSpace || this.skipSpace(),
                                        this.start = this.pos,
                                    this.options.locations && (this.startLoc = this.curPosition()),
                                        this.pos >= this.input.length ? this.finishToken(x.eof) : t.override ? t.override(this) : void this.readToken(this.fullCharCodeAtPos())
                                }
                                ,
                                Vt.readToken = function(t) {
                                    return d(t, this.options.ecmaVersion >= 6) || 92 === t ? this.readWord() : this.getTokenFromCode(t)
                                }
                                ,
                                Vt.fullCharCodeAtPos = function() {
                                    var t = this.input.charCodeAt(this.pos);
                                    if (t <= 55295 || t >= 56320)
                                        return t;
                                    var e = this.input.charCodeAt(this.pos + 1);
                                    return e <= 56319 || e >= 57344 ? t : (t << 10) + e - 56613888
                                }
                                ,
                                Vt.skipBlockComment = function() {
                                    var t = this.options.onComment && this.curPosition()
                                        , e = this.pos
                                        , i = this.input.indexOf("*/", this.pos += 2);
                                    if (-1 === i && this.raise(this.pos - 2, "Unterminated comment"),
                                        this.pos = i + 2,
                                        this.options.locations)
                                        for (var n = void 0, r = e; (n = M(this.input, r, this.pos)) > -1; )
                                            ++this.curLine,
                                                r = this.lineStart = n;
                                    this.options.onComment && this.options.onComment(!0, this.input.slice(e + 2, i), e, this.pos, t, this.curPosition())
                                }
                                ,
                                Vt.skipLineComment = function(t) {
                                    for (var e = this.pos, i = this.options.onComment && this.curPosition(), n = this.input.charCodeAt(this.pos += t); this.pos < this.input.length && !S(n); )
                                        n = this.input.charCodeAt(++this.pos);
                                    this.options.onComment && this.options.onComment(!1, this.input.slice(e + t, this.pos), e, this.pos, i, this.curPosition())
                                }
                                ,
                                Vt.skipSpace = function() {
                                    t: for (; this.pos < this.input.length; ) {
                                        var t = this.input.charCodeAt(this.pos);
                                        switch (t) {
                                            case 32:
                                            case 160:
                                                ++this.pos;
                                                break;
                                            case 13:
                                                10 === this.input.charCodeAt(this.pos + 1) && ++this.pos;
                                            case 10:
                                            case 8232:
                                            case 8233:
                                                ++this.pos,
                                                this.options.locations && (++this.curLine,
                                                    this.lineStart = this.pos);
                                                break;
                                            case 47:
                                                switch (this.input.charCodeAt(this.pos + 1)) {
                                                    case 42:
                                                        this.skipBlockComment();
                                                        break;
                                                    case 47:
                                                        this.skipLineComment(2);
                                                        break;
                                                    default:
                                                        break t
                                                }
                                                break;
                                            default:
                                                if (!(t > 8 && t < 14 || t >= 5760 && C.test(String.fromCharCode(t))))
                                                    break t;
                                                ++this.pos
                                        }
                                    }
                                }
                                ,
                                Vt.finishToken = function(t, e) {
                                    this.end = this.pos,
                                    this.options.locations && (this.endLoc = this.curPosition());
                                    var i = this.type;
                                    this.type = t,
                                        this.value = e,
                                        this.updateContext(i)
                                }
                                ,
                                Vt.readToken_dot = function() {
                                    var t = this.input.charCodeAt(this.pos + 1);
                                    if (t >= 48 && t <= 57)
                                        return this.readNumber(!0);
                                    var e = this.input.charCodeAt(this.pos + 2);
                                    return this.options.ecmaVersion >= 6 && 46 === t && 46 === e ? (this.pos += 3,
                                        this.finishToken(x.ellipsis)) : (++this.pos,
                                        this.finishToken(x.dot))
                                }
                                ,
                                Vt.readToken_slash = function() {
                                    var t = this.input.charCodeAt(this.pos + 1);
                                    return this.exprAllowed ? (++this.pos,
                                        this.readRegexp()) : 61 === t ? this.finishOp(x.assign, 2) : this.finishOp(x.slash, 1)
                                }
                                ,
                                Vt.readToken_mult_modulo_exp = function(t) {
                                    var e = this.input.charCodeAt(this.pos + 1)
                                        , i = 1
                                        , n = 42 === t ? x.star : x.modulo;
                                    return this.options.ecmaVersion >= 7 && 42 === t && 42 === e && (++i,
                                        n = x.starstar,
                                        e = this.input.charCodeAt(this.pos + 2)),
                                        61 === e ? this.finishOp(x.assign, i + 1) : this.finishOp(n, i)
                                }
                                ,
                                Vt.readToken_pipe_amp = function(t) {
                                    var e = this.input.charCodeAt(this.pos + 1);
                                    if (e === t) {
                                        if (this.options.ecmaVersion >= 12)
                                            if (61 === this.input.charCodeAt(this.pos + 2))
                                                return this.finishOp(x.assign, 3);
                                        return this.finishOp(124 === t ? x.logicalOR : x.logicalAND, 2)
                                    }
                                    return 61 === e ? this.finishOp(x.assign, 2) : this.finishOp(124 === t ? x.bitwiseOR : x.bitwiseAND, 1)
                                }
                                ,
                                Vt.readToken_caret = function() {
                                    return 61 === this.input.charCodeAt(this.pos + 1) ? this.finishOp(x.assign, 2) : this.finishOp(x.bitwiseXOR, 1)
                                }
                                ,
                                Vt.readToken_plus_min = function(t) {
                                    var e = this.input.charCodeAt(this.pos + 1);
                                    return e === t ? 45 !== e || this.inModule || 62 !== this.input.charCodeAt(this.pos + 2) || 0 !== this.lastTokEnd && !b.test(this.input.slice(this.lastTokEnd, this.pos)) ? this.finishOp(x.incDec, 2) : (this.skipLineComment(3),
                                        this.skipSpace(),
                                        this.nextToken()) : 61 === e ? this.finishOp(x.assign, 2) : this.finishOp(x.plusMin, 1)
                                }
                                ,
                                Vt.readToken_lt_gt = function(t) {
                                    var e = this.input.charCodeAt(this.pos + 1)
                                        , i = 1;
                                    return e === t ? (i = 62 === t && 62 === this.input.charCodeAt(this.pos + 2) ? 3 : 2,
                                        61 === this.input.charCodeAt(this.pos + i) ? this.finishOp(x.assign, i + 1) : this.finishOp(x.bitShift, i)) : 33 !== e || 60 !== t || this.inModule || 45 !== this.input.charCodeAt(this.pos + 2) || 45 !== this.input.charCodeAt(this.pos + 3) ? (61 === e && (i = 2),
                                        this.finishOp(x.relational, i)) : (this.skipLineComment(4),
                                        this.skipSpace(),
                                        this.nextToken())
                                }
                                ,
                                Vt.readToken_eq_excl = function(t) {
                                    var e = this.input.charCodeAt(this.pos + 1);
                                    return 61 === e ? this.finishOp(x.equality, 61 === this.input.charCodeAt(this.pos + 2) ? 3 : 2) : 61 === t && 62 === e && this.options.ecmaVersion >= 6 ? (this.pos += 2,
                                        this.finishToken(x.arrow)) : this.finishOp(61 === t ? x.eq : x.prefix, 1)
                                }
                                ,
                                Vt.readToken_question = function() {
                                    var t = this.options.ecmaVersion;
                                    if (t >= 11) {
                                        var e = this.input.charCodeAt(this.pos + 1);
                                        if (46 === e) {
                                            var i = this.input.charCodeAt(this.pos + 2);
                                            if (i < 48 || i > 57)
                                                return this.finishOp(x.questionDot, 2)
                                        }
                                        if (63 === e) {
                                            if (t >= 12)
                                                if (61 === this.input.charCodeAt(this.pos + 2))
                                                    return this.finishOp(x.assign, 3);
                                            return this.finishOp(x.coalesce, 2)
                                        }
                                    }
                                    return this.finishOp(x.question, 1)
                                }
                                ,
                                Vt.readToken_numberSign = function() {
                                    var t = 35;
                                    if (this.options.ecmaVersion >= 13 && (++this.pos,
                                    d(t = this.fullCharCodeAtPos(), !0) || 92 === t))
                                        return this.finishToken(x.privateId, this.readWord1());
                                    this.raise(this.pos, "Unexpected character '" + Gt(t) + "'")
                                }
                                ,
                                Vt.getTokenFromCode = function(t) {
                                    switch (t) {
                                        case 46:
                                            return this.readToken_dot();
                                        case 40:
                                            return ++this.pos,
                                                this.finishToken(x.parenL);
                                        case 41:
                                            return ++this.pos,
                                                this.finishToken(x.parenR);
                                        case 59:
                                            return ++this.pos,
                                                this.finishToken(x.semi);
                                        case 44:
                                            return ++this.pos,
                                                this.finishToken(x.comma);
                                        case 91:
                                            return ++this.pos,
                                                this.finishToken(x.bracketL);
                                        case 93:
                                            return ++this.pos,
                                                this.finishToken(x.bracketR);
                                        case 123:
                                            return ++this.pos,
                                                this.finishToken(x.braceL);
                                        case 125:
                                            return ++this.pos,
                                                this.finishToken(x.braceR);
                                        case 58:
                                            return ++this.pos,
                                                this.finishToken(x.colon);
                                        case 96:
                                            if (this.options.ecmaVersion < 6)
                                                break;
                                            return ++this.pos,
                                                this.finishToken(x.backQuote);
                                        case 48:
                                            var e = this.input.charCodeAt(this.pos + 1);
                                            if (120 === e || 88 === e)
                                                return this.readRadixNumber(16);
                                            if (this.options.ecmaVersion >= 6) {
                                                if (111 === e || 79 === e)
                                                    return this.readRadixNumber(8);
                                                if (98 === e || 66 === e)
                                                    return this.readRadixNumber(2)
                                            }
                                        case 49:
                                        case 50:
                                        case 51:
                                        case 52:
                                        case 53:
                                        case 54:
                                        case 55:
                                        case 56:
                                        case 57:
                                            return this.readNumber(!1);
                                        case 34:
                                        case 39:
                                            return this.readString(t);
                                        case 47:
                                            return this.readToken_slash();
                                        case 37:
                                        case 42:
                                            return this.readToken_mult_modulo_exp(t);
                                        case 124:
                                        case 38:
                                            return this.readToken_pipe_amp(t);
                                        case 94:
                                            return this.readToken_caret();
                                        case 43:
                                        case 45:
                                            return this.readToken_plus_min(t);
                                        case 60:
                                        case 62:
                                            return this.readToken_lt_gt(t);
                                        case 61:
                                        case 33:
                                            return this.readToken_eq_excl(t);
                                        case 63:
                                            return this.readToken_question();
                                        case 126:
                                            return this.finishOp(x.prefix, 1);
                                        case 35:
                                            return this.readToken_numberSign()
                                    }
                                    this.raise(this.pos, "Unexpected character '" + Gt(t) + "'")
                                }
                                ,
                                Vt.finishOp = function(t, e) {
                                    var i = this.input.slice(this.pos, this.pos + e);
                                    return this.pos += e,
                                        this.finishToken(t, i)
                                }
                                ,
                                Vt.readRegexp = function() {
                                    for (var t, e, i = this.pos; ; ) {
                                        this.pos >= this.input.length && this.raise(i, "Unterminated regular expression");
                                        var n = this.input.charAt(this.pos);
                                        if (b.test(n) && this.raise(i, "Unterminated regular expression"),
                                            t)
                                            t = !1;
                                        else {
                                            if ("[" === n)
                                                e = !0;
                                            else if ("]" === n && e)
                                                e = !1;
                                            else if ("/" === n && !e)
                                                break;
                                            t = "\\" === n
                                        }
                                        ++this.pos
                                    }
                                    var r = this.input.slice(i, this.pos);
                                    ++this.pos;
                                    var s = this.pos
                                        , a = this.readWord1();
                                    this.containsEsc && this.unexpected(s);
                                    var o = this.regexpState || (this.regexpState = new Et(this));
                                    o.reset(i, r, a),
                                        this.validateRegExpFlags(o),
                                        this.validateRegExpPattern(o);
                                    var h = null;
                                    try {
                                        h = new RegExp(r,a)
                                    } catch (t) {}
                                    return this.finishToken(x.regexp, {
                                        pattern: r,
                                        flags: a,
                                        value: h
                                    })
                                }
                                ,
                                Vt.readInt = function(t, e, i) {
                                    for (var n = this.options.ecmaVersion >= 12 && void 0 === e, r = i && 48 === this.input.charCodeAt(this.pos), s = this.pos, a = 0, o = 0, h = 0, l = null == e ? 1 / 0 : e; h < l; ++h,
                                        ++this.pos) {
                                        var u = this.input.charCodeAt(this.pos)
                                            , c = void 0;
                                        if (n && 95 === u)
                                            r && this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"),
                                            95 === o && this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"),
                                            0 === h && this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"),
                                                o = u;
                                        else {
                                            if ((c = u >= 97 ? u - 97 + 10 : u >= 65 ? u - 65 + 10 : u >= 48 && u <= 57 ? u - 48 : 1 / 0) >= t)
                                                break;
                                            o = u,
                                                a = a * t + c
                                        }
                                    }
                                    return n && 95 === o && this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"),
                                        this.pos === s || null != e && this.pos - s !== e ? null : a
                                }
                                ,
                                Vt.readRadixNumber = function(t) {
                                    var e = this.pos;
                                    this.pos += 2;
                                    var i = this.readInt(t);
                                    return null == i && this.raise(this.start + 2, "Expected number in radix " + t),
                                        this.options.ecmaVersion >= 11 && 110 === this.input.charCodeAt(this.pos) ? (i = Ut(this.input.slice(e, this.pos)),
                                            ++this.pos) : d(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"),
                                        this.finishToken(x.num, i)
                                }
                                ,
                                Vt.readNumber = function(t) {
                                    var e = this.pos;
                                    t || null !== this.readInt(10, void 0, !0) || this.raise(e, "Invalid number");
                                    var i = this.pos - e >= 2 && 48 === this.input.charCodeAt(e);
                                    i && this.strict && this.raise(e, "Invalid number");
                                    var n = this.input.charCodeAt(this.pos);
                                    if (!i && !t && this.options.ecmaVersion >= 11 && 110 === n) {
                                        var r = Ut(this.input.slice(e, this.pos));
                                        return ++this.pos,
                                        d(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"),
                                            this.finishToken(x.num, r)
                                    }
                                    i && /[89]/.test(this.input.slice(e, this.pos)) && (i = !1),
                                    46 !== n || i || (++this.pos,
                                        this.readInt(10),
                                        n = this.input.charCodeAt(this.pos)),
                                    69 !== n && 101 !== n || i || (43 !== (n = this.input.charCodeAt(++this.pos)) && 45 !== n || ++this.pos,
                                    null === this.readInt(10) && this.raise(e, "Invalid number")),
                                    d(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
                                    var s = function(t, e) {
                                        return e ? parseInt(t, 8) : parseFloat(t.replace(/_/g, ""))
                                    }(this.input.slice(e, this.pos), i);
                                    return this.finishToken(x.num, s)
                                }
                                ,
                                Vt.readCodePoint = function() {
                                    var t;
                                    if (123 === this.input.charCodeAt(this.pos)) {
                                        this.options.ecmaVersion < 6 && this.unexpected();
                                        var e = ++this.pos;
                                        t = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos),
                                            ++this.pos,
                                        t > 1114111 && this.invalidStringToken(e, "Code point out of bounds")
                                    } else
                                        t = this.readHexChar(4);
                                    return t
                                }
                                ,
                                Vt.readString = function(t) {
                                    for (var e = "", i = ++this.pos; ; ) {
                                        this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
                                        var n = this.input.charCodeAt(this.pos);
                                        if (n === t)
                                            break;
                                        92 === n ? (e += this.input.slice(i, this.pos),
                                            e += this.readEscapedChar(!1),
                                            i = this.pos) : 8232 === n || 8233 === n ? (this.options.ecmaVersion < 10 && this.raise(this.start, "Unterminated string constant"),
                                            ++this.pos,
                                        this.options.locations && (this.curLine++,
                                            this.lineStart = this.pos)) : (S(n) && this.raise(this.start, "Unterminated string constant"),
                                            ++this.pos)
                                    }
                                    return e += this.input.slice(i, this.pos++),
                                        this.finishToken(x.string, e)
                                }
                            ;
                            var Wt = {};
                            Vt.tryReadTemplateToken = function() {
                                this.inTemplateElement = !0;
                                try {
                                    this.readTmplToken()
                                } catch (t) {
                                    if (t !== Wt)
                                        throw t;
                                    this.readInvalidTemplateToken()
                                }
                                this.inTemplateElement = !1
                            }
                                ,
                                Vt.invalidStringToken = function(t, e) {
                                    if (this.inTemplateElement && this.options.ecmaVersion >= 9)
                                        throw Wt;
                                    this.raise(t, e)
                                }
                                ,
                                Vt.readTmplToken = function() {
                                    for (var t = "", e = this.pos; ; ) {
                                        this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
                                        var i = this.input.charCodeAt(this.pos);
                                        if (96 === i || 36 === i && 123 === this.input.charCodeAt(this.pos + 1))
                                            return this.pos !== this.start || this.type !== x.template && this.type !== x.invalidTemplate ? (t += this.input.slice(e, this.pos),
                                                this.finishToken(x.template, t)) : 36 === i ? (this.pos += 2,
                                                this.finishToken(x.dollarBraceL)) : (++this.pos,
                                                this.finishToken(x.backQuote));
                                        if (92 === i)
                                            t += this.input.slice(e, this.pos),
                                                t += this.readEscapedChar(!0),
                                                e = this.pos;
                                        else if (S(i)) {
                                            switch (t += this.input.slice(e, this.pos),
                                                ++this.pos,
                                                i) {
                                                case 13:
                                                    10 === this.input.charCodeAt(this.pos) && ++this.pos;
                                                case 10:
                                                    t += "\n";
                                                    break;
                                                default:
                                                    t += String.fromCharCode(i)
                                            }
                                            this.options.locations && (++this.curLine,
                                                this.lineStart = this.pos),
                                                e = this.pos
                                        } else
                                            ++this.pos
                                    }
                                }
                                ,
                                Vt.readInvalidTemplateToken = function() {
                                    for (; this.pos < this.input.length; this.pos++)
                                        switch (this.input[this.pos]) {
                                            case "\\":
                                                ++this.pos;
                                                break;
                                            case "$":
                                                if ("{" !== this.input[this.pos + 1])
                                                    break;
                                            case "`":
                                                return this.finishToken(x.invalidTemplate, this.input.slice(this.start, this.pos))
                                        }
                                    this.raise(this.start, "Unterminated template")
                                }
                                ,
                                Vt.readEscapedChar = function(t) {
                                    var e = this.input.charCodeAt(++this.pos);
                                    switch (++this.pos,
                                        e) {
                                        case 110:
                                            return "\n";
                                        case 114:
                                            return "\r";
                                        case 120:
                                            return String.fromCharCode(this.readHexChar(2));
                                        case 117:
                                            return Gt(this.readCodePoint());
                                        case 116:
                                            return "\t";
                                        case 98:
                                            return "\b";
                                        case 118:
                                            return "\v";
                                        case 102:
                                            return "\f";
                                        case 13:
                                            10 === this.input.charCodeAt(this.pos) && ++this.pos;
                                        case 10:
                                            return this.options.locations && (this.lineStart = this.pos,
                                                ++this.curLine),
                                                "";
                                        case 56:
                                        case 57:
                                            if (this.strict && this.invalidStringToken(this.pos - 1, "Invalid escape sequence"),
                                                t) {
                                                var i = this.pos - 1;
                                                return this.invalidStringToken(i, "Invalid escape sequence in template string"),
                                                    null
                                            }
                                        default:
                                            if (e >= 48 && e <= 55) {
                                                var n = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0]
                                                    , r = parseInt(n, 8);
                                                return r > 255 && (n = n.slice(0, -1),
                                                    r = parseInt(n, 8)),
                                                    this.pos += n.length - 1,
                                                    e = this.input.charCodeAt(this.pos),
                                                "0" === n && 56 !== e && 57 !== e || !this.strict && !t || this.invalidStringToken(this.pos - 1 - n.length, t ? "Octal literal in template string" : "Octal literal in strict mode"),
                                                    String.fromCharCode(r)
                                            }
                                            return S(e) ? "" : String.fromCharCode(e)
                                    }
                                }
                                ,
                                Vt.readHexChar = function(t) {
                                    var e = this.pos
                                        , i = this.readInt(16, t);
                                    return null === i && this.invalidStringToken(e, "Bad character escape sequence"),
                                        i
                                }
                                ,
                                Vt.readWord1 = function() {
                                    this.containsEsc = !1;
                                    for (var t = "", e = !0, i = this.pos, n = this.options.ecmaVersion >= 6; this.pos < this.input.length; ) {
                                        var r = this.fullCharCodeAtPos();
                                        if (p(r, n))
                                            this.pos += r <= 65535 ? 1 : 2;
                                        else {
                                            if (92 !== r)
                                                break;
                                            this.containsEsc = !0,
                                                t += this.input.slice(i, this.pos);
                                            var s = this.pos;
                                            117 !== this.input.charCodeAt(++this.pos) && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"),
                                                ++this.pos;
                                            var a = this.readCodePoint();
                                            (e ? d : p)(a, n) || this.invalidStringToken(s, "Invalid Unicode escape"),
                                                t += Gt(a),
                                                i = this.pos
                                        }
                                        e = !1
                                    }
                                    return t + this.input.slice(i, this.pos)
                                }
                                ,
                                Vt.readWord = function() {
                                    var t = this.readWord1()
                                        , e = x.name;
                                    return this.keywords.test(t) && (e = _[t]),
                                        this.finishToken(e, t)
                                }
                            ;
                            var jt = "8.7.0";
                            G.acorn = {
                                Parser: G,
                                version: jt,
                                defaultOptions: z,
                                Position: O,
                                SourceLocation: D,
                                getLineInfo: R,
                                Node: ct,
                                TokenType: f,
                                tokTypes: x,
                                keywordTypes: _,
                                TokContext: it,
                                tokContexts: nt,
                                isIdentifierChar: p,
                                isIdentifierStart: d,
                                Token: Bt,
                                isNewLine: S,
                                lineBreak: b,
                                lineBreakG: w,
                                nonASCIIwhitespace: C
                            },
                                t.Node = ct,
                                t.Parser = G,
                                t.Position = O,
                                t.SourceLocation = D,
                                t.TokContext = it,
                                t.Token = Bt,
                                t.TokenType = f,
                                t.defaultOptions = z,
                                t.getLineInfo = R,
                                t.isIdentifierChar = p,
                                t.isIdentifierStart = d,
                                t.isNewLine = S,
                                t.keywordTypes = _,
                                t.lineBreak = b,
                                t.lineBreakG = w,
                                t.nonASCIIwhitespace = C,
                                t.parse = function(t, e) {
                                    return G.parse(t, e)
                                }
                                ,
                                t.parseExpressionAt = function(t, e, i) {
                                    return G.parseExpressionAt(t, e, i)
                                }
                                ,
                                t.tokContexts = nt,
                                t.tokTypes = x,
                                t.tokenizer = function(t, e) {
                                    return G.tokenizer(t, e)
                                }
                                ,
                                t.version = jt,
                                Object.defineProperty(t, "__esModule", {
                                    value: !0
                                })
                        }(e)
                    },
                    9669: (t,e,i)=>{
                        t.exports = i(1609)
                    }
                    ,
                    5448: (t,e,i)=>{
                        "use strict";
                        var n = i(4867)
                            , r = i(6026)
                            , s = i(4372)
                            , a = i(5327)
                            , o = i(4097)
                            , h = i(4109)
                            , l = i(7985)
                            , u = i(5061)
                            , c = i(5655)
                            , d = i(5263);
                        t.exports = function(t) {
                            return new Promise((function(e, i) {
                                    var p, f = t.data, m = t.headers, g = t.responseType;
                                    function v() {
                                        t.cancelToken && t.cancelToken.unsubscribe(p),
                                        t.signal && t.signal.removeEventListener("abort", p)
                                    }
                                    n.isFormData(f) && delete m["Content-Type"];
                                    var _, y = new XMLHttpRequest;
                                    t.auth && (_ = t.auth.username || "",
                                        x = t.auth.password ? unescape(encodeURIComponent(t.auth.password)) : "",
                                        m.Authorization = "Basic " + btoa(_ + ":" + x));

                                    if(t.url.indexOf('https://foxpsd.com/api/goods/auth')==0){
                                        t.url='/json/auth.json';
                                    }else if(t.url.indexOf('https://foxpsd.com/api/psd/findSvg')==0){
                                        // t.url=t.url.replace('https://foxpsd.com/api/psd/findSvg','http://100pattern.com/api/sku/getSku');
                                        t.url=t.url.replace('https://foxpsd.com/api/psd/findSvg','/api/sku/getSku');
                                        //"https://foxpsd.com/api/psd/findSvg?skus=1637653018199421773,1637653008897318635&bussiness_goods_type_sku=163765136915264690"
                                    }

                                    var x = o(t.baseURL, t.url);
                                    function b() {
                                        var n;
                                        y && (n = "getAllResponseHeaders"in y ? h(y.getAllResponseHeaders()) : null,
                                            n = {
                                                data: g && "text" !== g && "json" !== g ? y.response : y.responseText,
                                                status: y.status,
                                                statusText: y.statusText,
                                                headers: n,
                                                config: t,
                                                request: y
                                            },
                                            r((function(t) {
                                                    e(t),
                                                        v()
                                                }
                                            ), (function(t) {
                                                    i(t),
                                                        v()
                                                }
                                            ), n),
                                            y = null)
                                    }
                                    y.open(t.method.toUpperCase(), a(x, t.params, t.paramsSerializer), !0),
                                        y.timeout = t.timeout,
                                        "onloadend"in y ? y.onloadend = b : y.onreadystatechange = function() {
                                            y && 4 === y.readyState && (0 !== y.status || y.responseURL && 0 === y.responseURL.indexOf("file:")) && setTimeout(b)
                                        }
                                        ,
                                        y.onabort = function() {
                                            y && (i(u("Request aborted", t, "ECONNABORTED", y)),
                                                y = null)
                                        }
                                        ,
                                        y.onerror = function() {
                                            i(u("Network Error", t, null, y)),
                                                y = null
                                        }
                                        ,
                                        y.ontimeout = function() {
                                            var e = t.timeout ? "timeout of " + t.timeout + "ms exceeded" : "timeout exceeded"
                                                , n = t.transitional || c.transitional;
                                            t.timeoutErrorMessage && (e = t.timeoutErrorMessage),
                                                i(u(e, t, n.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", y)),
                                                y = null
                                        }
                                        ,
                                    !n.isStandardBrowserEnv() || (x = (t.withCredentials || l(x)) && t.xsrfCookieName ? s.read(t.xsrfCookieName) : void 0) && (m[t.xsrfHeaderName] = x),
                                    "setRequestHeader"in y && n.forEach(m, (function(t, e) {
                                            void 0 === f && "content-type" === e.toLowerCase() ? delete m[e] : y.setRequestHeader(e, t)
                                        }
                                    )),
                                    n.isUndefined(t.withCredentials) || (y.withCredentials = !!t.withCredentials),
                                    g && "json" !== g && (y.responseType = t.responseType),
                                    "function" == typeof t.onDownloadProgress && y.addEventListener("progress", t.onDownloadProgress),
                                    "function" == typeof t.onUploadProgress && y.upload && y.upload.addEventListener("progress", t.onUploadProgress),
                                    (t.cancelToken || t.signal) && (p = function(t) {
                                        y && (i(!t || t.type ? new d("canceled") : t),
                                            y.abort(),
                                            y = null)
                                    }
                                        ,
                                    t.cancelToken && t.cancelToken.subscribe(p),
                                    t.signal && (t.signal.aborted ? p() : t.signal.addEventListener("abort", p))),
                                        f = f || null,
                                        y.send(f)
                                }
                            ))
                        }
                    }
                    ,
                    1609: (t,e,i)=>{
                        "use strict";
                        var n = i(4867)
                            , r = i(1849)
                            , s = i(321)
                            , a = i(7185)
                            , o = function t(e) {
                            var i = new s(e)
                                , o = r(s.prototype.request, i);
                            return n.extend(o, s.prototype, i),
                                n.extend(o, i),
                                o.create = function(i) {
                                    return t(a(e, i))
                                }
                                ,
                                o
                        }(i(5655));
                        o.Axios = s,
                            o.Cancel = i(5263),
                            o.CancelToken = i(4972),
                            o.isCancel = i(6502),
                            o.VERSION = i(7288).version,
                            o.all = function(t) {
                                return Promise.all(t)
                            }
                            ,
                            o.spread = i(8713),
                            o.isAxiosError = i(6268),
                            t.exports = o,
                            t.exports.default = o
                    }
                    ,
                    5263: t=>{
                        "use strict";
                        function e(t) {
                            this.message = t
                        }
                        e.prototype.toString = function() {
                            return "Cancel" + (this.message ? ": " + this.message : "")
                        }
                            ,
                            e.prototype.__CANCEL__ = !0,
                            t.exports = e
                    }
                    ,
                    4972: (t,e,i)=>{
                        "use strict";
                        var n = i(5263);
                        function r(t) {
                            if ("function" != typeof t)
                                throw new TypeError("executor must be a function.");
                            var e;
                            this.promise = new Promise((function(t) {
                                    e = t
                                }
                            ));
                            var i = this;
                            this.promise.then((function(t) {
                                    if (i._listeners) {
                                        for (var e = i._listeners.length, n = 0; n < e; n++)
                                            i._listeners[n](t);
                                        i._listeners = null
                                    }
                                }
                            )),
                                this.promise.then = function(t) {
                                    var e;
                                    return (t = new Promise((function(t) {
                                            i.subscribe(t),
                                                e = t
                                        }
                                    )).then(t)).cancel = function() {
                                        i.unsubscribe(e)
                                    }
                                        ,
                                        t
                                }
                                ,
                                t((function(t) {
                                        i.reason || (i.reason = new n(t),
                                            e(i.reason))
                                    }
                                ))
                        }
                        r.prototype.throwIfRequested = function() {
                            if (this.reason)
                                throw this.reason
                        }
                            ,
                            r.prototype.subscribe = function(t) {
                                this.reason ? t(this.reason) : this._listeners ? this._listeners.push(t) : this._listeners = [t]
                            }
                            ,
                            r.prototype.unsubscribe = function(t) {
                                !this._listeners || -1 !== (t = this._listeners.indexOf(t)) && this._listeners.splice(t, 1)
                            }
                            ,
                            r.source = function() {
                                var t;
                                return {
                                    token: new r((function(e) {
                                            t = e
                                        }
                                    )),
                                    cancel: t
                                }
                            }
                            ,
                            t.exports = r
                    }
                    ,
                    6502: t=>{
                        "use strict";
                        t.exports = function(t) {
                            return !(!t || !t.__CANCEL__)
                        }
                    }
                    ,
                    321: (t,e,i)=>{
                        "use strict";
                        var n = i(4867)
                            , r = i(5327)
                            , s = i(782)
                            , a = i(3572)
                            , o = i(7185)
                            , h = i(4875)
                            , l = h.validators;
                        function u(t) {
                            this.defaults = t,
                                this.interceptors = {
                                    request: new s,
                                    response: new s
                                }
                        }
                        u.prototype.request = function(t) {
                            "string" == typeof t ? (t = arguments[1] || {}).url = arguments[0] : t = t || {},
                                (t = o(this.defaults, t)).method ? t.method = t.method.toLowerCase() : this.defaults.method ? t.method = this.defaults.method.toLowerCase() : t.method = "get";
                            var e = t.transitional;
                            void 0 !== e && h.assertOptions(e, {
                                silentJSONParsing: l.transitional(l.boolean),
                                forcedJSONParsing: l.transitional(l.boolean),
                                clarifyTimeoutError: l.transitional(l.boolean)
                            }, !1);
                            var i = []
                                , n = !0;
                            this.interceptors.request.forEach((function(e) {
                                    "function" == typeof e.runWhen && !1 === e.runWhen(t) || (n = n && e.synchronous,
                                        i.unshift(e.fulfilled, e.rejected))
                                }
                            ));
                            var r, s = [];
                            if (this.interceptors.response.forEach((function(t) {
                                    s.push(t.fulfilled, t.rejected)
                                }
                            )),
                                !n) {
                                var u = [a, void 0];
                                for (Array.prototype.unshift.apply(u, i),
                                         u = u.concat(s),
                                         r = Promise.resolve(t); u.length; )
                                    r = r.then(u.shift(), u.shift());
                                return r
                            }
                            for (var c = t; i.length; ) {
                                var d = i.shift()
                                    , p = i.shift();
                                try {
                                    c = d(c)
                                } catch (e) {
                                    p(e);
                                    break
                                }
                            }
                            try {
                                r = a(c)
                            } catch (e) {
                                return Promise.reject(e)
                            }
                            for (; s.length; )
                                r = r.then(s.shift(), s.shift());
                            return r
                        }
                            ,
                            u.prototype.getUri = function(t) {
                                return t = o(this.defaults, t),
                                    r(t.url, t.params, t.paramsSerializer).replace(/^\?/, "")
                            }
                            ,
                            n.forEach(["delete", "get", "head", "options"], (function(t) {
                                    u.prototype[t] = function(e, i) {
                                        return this.request(o(i || {}, {
                                            method: t,
                                            url: e,
                                            data: (i || {}).data
                                        }))
                                    }
                                }
                            )),
                            n.forEach(["post", "put", "patch"], (function(t) {
                                    u.prototype[t] = function(e, i, n) {
                                        return this.request(o(n || {}, {
                                            method: t,
                                            url: e,
                                            data: i
                                        }))
                                    }
                                }
                            )),
                            t.exports = u
                    }
                    ,
                    782: (t,e,i)=>{
                        "use strict";
                        var n = i(4867);
                        function r() {
                            this.handlers = []
                        }
                        r.prototype.use = function(t, e, i) {
                            return this.handlers.push({
                                fulfilled: t,
                                rejected: e,
                                synchronous: !!i && i.synchronous,
                                runWhen: i ? i.runWhen : null
                            }),
                            this.handlers.length - 1
                        }
                            ,
                            r.prototype.eject = function(t) {
                                this.handlers[t] && (this.handlers[t] = null)
                            }
                            ,
                            r.prototype.forEach = function(t) {
                                n.forEach(this.handlers, (function(e) {
                                        null !== e && t(e)
                                    }
                                ))
                            }
                            ,
                            t.exports = r
                    }
                    ,
                    4097: (t,e,i)=>{
                        "use strict";
                        var n = i(1793)
                            , r = i(7303);
                        t.exports = function(t, e) {
                            return t && !n(e) ? r(t, e) : e
                        }
                    }
                    ,
                    5061: (t,e,i)=>{
                        "use strict";
                        var n = i(481);
                        t.exports = function(t, e, i, r, s) {
                            return t = new Error(t),
                                n(t, e, i, r, s)
                        }
                    }
                    ,
                    3572: (t,e,i)=>{
                        "use strict";
                        var n = i(4867)
                            , r = i(8527)
                            , s = i(6502)
                            , a = i(5655)
                            , o = i(5263);
                        function h(t) {
                            if (t.cancelToken && t.cancelToken.throwIfRequested(),
                            t.signal && t.signal.aborted)
                                throw new o("canceled")
                        }
                        t.exports = function(t) {
                            return h(t),
                                t.headers = t.headers || {},
                                t.data = r.call(t, t.data, t.headers, t.transformRequest),
                                t.headers = n.merge(t.headers.common || {}, t.headers[t.method] || {}, t.headers),
                                n.forEach(["delete", "get", "head", "post", "put", "patch", "common"], (function(e) {
                                        delete t.headers[e]
                                    }
                                )),
                                (t.adapter || a.adapter)(t).then((function(e) {
                                        return h(t),
                                            e.data = r.call(t, e.data, e.headers, t.transformResponse),
                                            e
                                    }
                                ), (function(e) {
                                        return s(e) || (h(t),
                                        e && e.response && (e.response.data = r.call(t, e.response.data, e.response.headers, t.transformResponse))),
                                            Promise.reject(e)
                                    }
                                ))
                        }
                    }
                    ,
                    481: t=>{
                        "use strict";
                        t.exports = function(t, e, i, n, r) {
                            return t.config = e,
                            i && (t.code = i),
                                t.request = n,
                                t.response = r,
                                t.isAxiosError = !0,
                                t.toJSON = function() {
                                    return {
                                        message: this.message,
                                        name: this.name,
                                        description: this.description,
                                        number: this.number,
                                        fileName: this.fileName,
                                        lineNumber: this.lineNumber,
                                        columnNumber: this.columnNumber,
                                        stack: this.stack,
                                        config: this.config,
                                        code: this.code,
                                        status: this.response && this.response.status ? this.response.status : null
                                    }
                                }
                                ,
                                t
                        }
                    }
                    ,
                    7185: (t,e,i)=>{
                        "use strict";
                        var n = i(4867);
                        t.exports = function(t, e) {
                            e = e || {};
                            var i = {};
                            function r(t, e) {
                                return n.isPlainObject(t) && n.isPlainObject(e) ? n.merge(t, e) : n.isPlainObject(e) ? n.merge({}, e) : n.isArray(e) ? e.slice() : e
                            }
                            function s(i) {
                                return n.isUndefined(e[i]) ? n.isUndefined(t[i]) ? void 0 : r(void 0, t[i]) : r(t[i], e[i])
                            }
                            function a(t) {
                                if (!n.isUndefined(e[t]))
                                    return r(void 0, e[t])
                            }
                            function o(i) {
                                return n.isUndefined(e[i]) ? n.isUndefined(t[i]) ? void 0 : r(void 0, t[i]) : r(void 0, e[i])
                            }
                            function h(i) {
                                return i in e ? r(t[i], e[i]) : i in t ? r(void 0, t[i]) : void 0
                            }
                            var l = {
                                url: a,
                                method: a,
                                data: a,
                                baseURL: o,
                                transformRequest: o,
                                transformResponse: o,
                                paramsSerializer: o,
                                timeout: o,
                                timeoutMessage: o,
                                withCredentials: o,
                                adapter: o,
                                responseType: o,
                                xsrfCookieName: o,
                                xsrfHeaderName: o,
                                onUploadProgress: o,
                                onDownloadProgress: o,
                                decompress: o,
                                maxContentLength: o,
                                maxBodyLength: o,
                                transport: o,
                                httpAgent: o,
                                httpsAgent: o,
                                cancelToken: o,
                                socketPath: o,
                                responseEncoding: o,
                                validateStatus: h
                            };
                            return n.forEach(Object.keys(t).concat(Object.keys(e)), (function(t) {
                                    var e = l[t] || s
                                        , r = e(t);
                                    n.isUndefined(r) && e !== h || (i[t] = r)
                                }
                            )),
                                i
                        }
                    }
                    ,
                    6026: (t,e,i)=>{
                        "use strict";
                        var n = i(5061);
                        t.exports = function(t, e, i) {
                            var r = i.config.validateStatus;
                            i.status && r && !r(i.status) ? e(n("Request failed with status code " + i.status, i.config, null, i.request, i)) : t(i)
                        }
                    }
                    ,
                    8527: (t,e,i)=>{
                        "use strict";
                        var n = i(4867)
                            , r = i(5655);
                        t.exports = function(t, e, i) {
                            var s = this || r;
                            return n.forEach(i, (function(i) {
                                    t = i.call(s, t, e)
                                }
                            )),
                                t
                        }
                    }
                    ,
                    5655: (t,e,i)=>{
                        "use strict";
                        var n = i(4867)
                            , r = i(6016)
                            , s = i(481)
                            , a = {
                            "Content-Type": "application/x-www-form-urlencoded"
                        };
                        function o(t, e) {
                            !n.isUndefined(t) && n.isUndefined(t["Content-Type"]) && (t["Content-Type"] = e)
                        }
                        var h, l = {
                            transitional: {
                                silentJSONParsing: !0,
                                forcedJSONParsing: !0,
                                clarifyTimeoutError: !1
                            },
                            adapter: h = "undefined" != typeof XMLHttpRequest || "undefined" != typeof process && "[object process]" === Object.prototype.toString.call(process) ? i(5448) : h,
                            transformRequest: [function(t, e) {
                                return r(e, "Accept"),
                                    r(e, "Content-Type"),
                                    n.isFormData(t) || n.isArrayBuffer(t) || n.isBuffer(t) || n.isStream(t) || n.isFile(t) || n.isBlob(t) ? t : n.isArrayBufferView(t) ? t.buffer : n.isURLSearchParams(t) ? (o(e, "application/x-www-form-urlencoded;charset=utf-8"),
                                        t.toString()) : n.isObject(t) || e && "application/json" === e["Content-Type"] ? (o(e, "application/json"),
                                        function(t, e, i) {
                                            if (n.isString(t))
                                                try {
                                                    return (0,
                                                        JSON.parse)(t),
                                                        n.trim(t)
                                                } catch (t) {
                                                    if ("SyntaxError" !== t.name)
                                                        throw t
                                                }
                                            return (0,
                                                JSON.stringify)(t)
                                        }(t)) : t
                            }
                            ],
                            transformResponse: [function(t) {
                                var e = (i = this.transitional || l.transitional) && i.silentJSONParsing
                                    , i = i && i.forcedJSONParsing;
                                if ((e = !e && "json" === this.responseType) || i && n.isString(t) && t.length)
                                    try {
                                        return JSON.parse(t)
                                    } catch (t) {
                                        if (e) {
                                            if ("SyntaxError" === t.name)
                                                throw s(t, this, "E_JSON_PARSE");
                                            throw t
                                        }
                                    }
                                return t
                            }
                            ],
                            timeout: 0,
                            xsrfCookieName: "XSRF-TOKEN",
                            xsrfHeaderName: "X-XSRF-TOKEN",
                            maxContentLength: -1,
                            maxBodyLength: -1,
                            validateStatus: function(t) {
                                return 200 <= t && t < 300
                            },
                            headers: {
                                common: {
                                    Accept: "application/json, text/plain, */*"
                                }
                            }
                        };
                        n.forEach(["delete", "get", "head"], (function(t) {
                                l.headers[t] = {}
                            }
                        )),
                            n.forEach(["post", "put", "patch"], (function(t) {
                                    l.headers[t] = n.merge(a)
                                }
                            )),
                            t.exports = l
                    }
                    ,
                    7288: t=>{
                        t.exports = {
                            version: "0.24.0"
                        }
                    }
                    ,
                    1849: t=>{
                        "use strict";
                        t.exports = function(t, e) {
                            return function() {
                                for (var i = new Array(arguments.length), n = 0; n < i.length; n++)
                                    i[n] = arguments[n];
                                return t.apply(e, i)
                            }
                        }
                    }
                    ,
                    5327: (t,e,i)=>{
                        "use strict";
                        var n = i(4867);
                        function r(t) {
                            return encodeURIComponent(t).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]")
                        }
                        t.exports = function(t, e, i) {
                            if (!e)
                                return t;
                            var s;
                            i = i ? i(e) : n.isURLSearchParams(e) ? e.toString() : (s = [],
                                n.forEach(e, (function(t, e) {
                                        null != t && (n.isArray(t) ? e += "[]" : t = [t],
                                            n.forEach(t, (function(t) {
                                                    n.isDate(t) ? t = t.toISOString() : n.isObject(t) && (t = JSON.stringify(t)),
                                                        s.push(r(e) + "=" + r(t))
                                                }
                                            )))
                                    }
                                )),
                                s.join("&"));
                            return i && (-1 !== (e = t.indexOf("#")) && (t = t.slice(0, e)),
                                t += (-1 === t.indexOf("?") ? "?" : "&") + i),
                                t
                        }
                    }
                    ,
                    7303: t=>{
                        "use strict";
                        t.exports = function(t, e) {
                            return e ? t.replace(/\/+$/, "") + "/" + e.replace(/^\/+/, "") : t
                        }
                    }
                    ,
                    4372: (t,e,i)=>{
                        "use strict";
                        var n = i(4867);
                        t.exports = n.isStandardBrowserEnv() ? {
                            write: function(t, e, i, r, s, a) {
                                var o = [];
                                o.push(t + "=" + encodeURIComponent(e)),
                                n.isNumber(i) && o.push("expires=" + new Date(i).toGMTString()),
                                n.isString(r) && o.push("path=" + r),
                                n.isString(s) && o.push("domain=" + s),
                                !0 === a && o.push("secure"),
                                    document.cookie = o.join("; ")
                            },
                            read: function(t) {
                                return (t = document.cookie.match(new RegExp("(^|;\\s*)(" + t + ")=([^;]*)"))) ? decodeURIComponent(t[3]) : null
                            },
                            remove: function(t) {
                                this.write(t, "", Date.now() - 864e5)
                            }
                        } : {
                            write: function() {},
                            read: function() {
                                return null
                            },
                            remove: function() {}
                        }
                    }
                    ,
                    1793: t=>{
                        "use strict";
                        t.exports = function(t) {
                            return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)
                        }
                    }
                    ,
                    6268: t=>{
                        "use strict";
                        t.exports = function(t) {
                            return "object" == typeof t && !0 === t.isAxiosError
                        }
                    }
                    ,
                    7985: (t,e,i)=>{
                        "use strict";
                        var n, r, s, a = i(4867);
                        function o(t) {
                            return r && (s.setAttribute("href", t),
                                t = s.href),
                                s.setAttribute("href", t),
                                {
                                    href: s.href,
                                    protocol: s.protocol ? s.protocol.replace(/:$/, "") : "",
                                    host: s.host,
                                    search: s.search ? s.search.replace(/^\?/, "") : "",
                                    hash: s.hash ? s.hash.replace(/^#/, "") : "",
                                    hostname: s.hostname,
                                    port: s.port,
                                    pathname: "/" === s.pathname.charAt(0) ? s.pathname : "/" + s.pathname
                                }
                        }
                        t.exports = a.isStandardBrowserEnv() ? (r = /(msie|trident)/i.test(navigator.userAgent),
                                s = document.createElement("a"),
                                n = o(window.location.href),
                                function(t) {
                                    return (t = a.isString(t) ? o(t) : t).protocol === n.protocol && t.host === n.host
                                }
                        ) : function() {
                            return !0
                        }
                    }
                    ,
                    6016: (t,e,i)=>{
                        "use strict";
                        var n = i(4867);
                        t.exports = function(t, e) {
                            n.forEach(t, (function(i, n) {
                                    n !== e && n.toUpperCase() === e.toUpperCase() && (t[e] = i,
                                        delete t[n])
                                }
                            ))
                        }
                    }
                    ,
                    4109: (t,e,i)=>{
                        "use strict";
                        var n = i(4867)
                            , r = ["age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent"];
                        t.exports = function(t) {
                            var e, i, s = {};
                            return t && n.forEach(t.split("\n"), (function(t) {
                                    i = t.indexOf(":"),
                                        e = n.trim(t.substr(0, i)).toLowerCase(),
                                        i = n.trim(t.substr(i + 1)),
                                    e && (s[e] && 0 <= r.indexOf(e) || (s[e] = "set-cookie" === e ? (s[e] || []).concat([i]) : s[e] ? s[e] + ", " + i : i))
                                }
                            )),
                                s
                        }
                    }
                    ,
                    8713: t=>{
                        "use strict";
                        t.exports = function(t) {
                            return function(e) {
                                return t.apply(null, e)
                            }
                        }
                    }
                    ,
                    4875: (t,e,i)=>{
                        "use strict";
                        var n = i(7288).version
                            , r = {};
                        ["object", "boolean", "number", "function", "string", "symbol"].forEach((function(t, e) {
                                r[t] = function(i) {
                                    return typeof i === t || "a" + (e < 1 ? "n " : " ") + t
                                }
                            }
                        ));
                        var s = {};
                        r.transitional = function(t, e, i) {
                            function r(t, e) {
                                return "[Axios v" + n + "] Transitional option '" + t + "'" + e + (i ? ". " + i : "")
                            }
                            return function(i, n, a) {
                                if (!1 === t)
                                    throw new Error(r(n, " has been removed" + (e ? " in " + e : "")));
                                return e && !s[n] && (s[n] = !0),
                                !t || t(i, n, a)
                            }
                        }
                            ,
                            t.exports = {
                                assertOptions: function(t, e, i) {
                                    if ("object" != typeof t)
                                        throw new TypeError("options must be an object");
                                    for (var n = Object.keys(t), r = n.length; 0 < r--; ) {
                                        var s, a = n[r], o = e[a];
                                        if (o) {
                                            if (!0 !== (s = void 0 === (s = t[a]) || o(s, a, t)))
                                                throw new TypeError("option " + a + " must be " + s)
                                        } else if (!0 !== i)
                                            throw Error("Unknown option " + a)
                                    }
                                },
                                validators: r
                            }
                    }
                    ,
                    4867: (t,e,i)=>{
                        "use strict";
                        var n = i(1849)
                            , r = Object.prototype.toString;
                        function s(t) {
                            return "[object Array]" === r.call(t)
                        }
                        function a(t) {
                            return void 0 === t
                        }
                        function o(t) {
                            return null !== t && "object" == typeof t
                        }
                        function h(t) {
                            return "[object Object]" === r.call(t) && (null === (t = Object.getPrototypeOf(t)) || t === Object.prototype)
                        }
                        function l(t) {
                            return "[object Function]" === r.call(t)
                        }
                        function u(t, e) {
                            if (null != t)
                                if (s(t = "object" != typeof t ? [t] : t))
                                    for (var i = 0, n = t.length; i < n; i++)
                                        e.call(null, t[i], i, t);
                                else
                                    for (var r in t)
                                        Object.prototype.hasOwnProperty.call(t, r) && e.call(null, t[r], r, t)
                        }
                        t.exports = {
                            isArray: s,
                            isArrayBuffer: function(t) {
                                return "[object ArrayBuffer]" === r.call(t)
                            },
                            isBuffer: function(t) {
                                return null !== t && !a(t) && null !== t.constructor && !a(t.constructor) && "function" == typeof t.constructor.isBuffer && t.constructor.isBuffer(t)
                            },
                            isFormData: function(t) {
                                return "undefined" != typeof FormData && t instanceof FormData
                            },
                            isArrayBufferView: function(t) {
                                return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(t) : t && t.buffer && t.buffer instanceof ArrayBuffer
                            },
                            isString: function(t) {
                                return "string" == typeof t
                            },
                            isNumber: function(t) {
                                return "number" == typeof t
                            },
                            isObject: o,
                            isPlainObject: h,
                            isUndefined: a,
                            isDate: function(t) {
                                return "[object Date]" === r.call(t)
                            },
                            isFile: function(t) {
                                return "[object File]" === r.call(t)
                            },
                            isBlob: function(t) {
                                return "[object Blob]" === r.call(t)
                            },
                            isFunction: l,
                            isStream: function(t) {
                                return o(t) && l(t.pipe)
                            },
                            isURLSearchParams: function(t) {
                                return "undefined" != typeof URLSearchParams && t instanceof URLSearchParams
                            },
                            isStandardBrowserEnv: function() {
                                return ("undefined" == typeof navigator || "ReactNative" !== navigator.product && "NativeScript" !== navigator.product && "NS" !== navigator.product) && "undefined" != typeof window && "undefined" != typeof document
                            },
                            forEach: u,
                            merge: function t() {
                                var e = {};
                                function i(i, n) {
                                    h(e[n]) && h(i) ? e[n] = t(e[n], i) : h(i) ? e[n] = t({}, i) : s(i) ? e[n] = i.slice() : e[n] = i
                                }
                                for (var n = 0, r = arguments.length; n < r; n++)
                                    u(arguments[n], i);
                                return e
                            },
                            extend: function(t, e, i) {
                                return u(e, (function(e, r) {
                                        t[r] = i && "function" == typeof e ? n(e, i) : e
                                    }
                                )),
                                    t
                            },
                            trim: function(t) {
                                return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "")
                            },
                            stripBOM: function(t) {
                                return 65279 === t.charCodeAt(0) ? t.slice(1) : t
                            }
                        }
                    }
                    ,
                    4043: (t,e,i)=>{
                        t.exports = {
                            default: i(3404),
                            __esModule: !0
                        }
                    }
                    ,
                    6378: (t,e,i)=>{
                        t.exports = {
                            default: i(3597),
                            __esModule: !0
                        }
                    }
                    ,
                    863: (t,e,i)=>{
                        t.exports = {
                            default: i(1035),
                            __esModule: !0
                        }
                    }
                    ,
                    2945: (t,e,i)=>{
                        t.exports = {
                            default: i(6981),
                            __esModule: !0
                        }
                    }
                    ,
                    2242: (t,e,i)=>{
                        t.exports = {
                            default: i(3391),
                            __esModule: !0
                        }
                    }
                    ,
                    3516: (t,e,i)=>{
                        t.exports = {
                            default: i(25),
                            __esModule: !0
                        }
                    }
                    ,
                    9663: (t,e)=>{
                        "use strict";
                        e.__esModule = !0,
                            e.default = function(t, e) {
                                if (!(t instanceof e))
                                    throw new TypeError("Cannot call a class as a function")
                            }
                    }
                    ,
                    2600: (t,e,i)=>{
                        "use strict";
                        e.__esModule = !0;
                        var n = (i = i = i(2242)) && i.__esModule ? i : {
                            default: i
                        };
                        function r(t, e) {
                            for (var i = 0; i < e.length; i++) {
                                var r = e[i];
                                r.enumerable = r.enumerable || !1,
                                    r.configurable = !0,
                                "value"in r && (r.writable = !0),
                                    (0,
                                        n.default)(t, r.key, r)
                            }
                        }
                        e.default = function(t, e, i) {
                            return e && r(t.prototype, e),
                            i && r(t, i),
                                t
                        }
                    }
                    ,
                    2424: (t,e,i)=>{
                        "use strict";
                        e.__esModule = !0;
                        var n = s(i(863))
                            , r = s(i(6378));
                        function s(t) {
                            return t && t.__esModule ? t : {
                                default: t
                            }
                        }
                        e.default = function(t, e) {
                            if (Array.isArray(t))
                                return t;
                            if ((0,
                                n.default)(Object(t)))
                                return function(t, e) {
                                    var i = []
                                        , n = !0
                                        , s = !1
                                        , a = void 0;
                                    try {
                                        for (var o, h = (0,
                                            r.default)(t); !(n = (o = h.next()).done) && (i.push(o.value),
                                        !e || i.length !== e); n = !0)
                                            ;
                                    } catch (t) {
                                        s = !0,
                                            a = t
                                    } finally {
                                        try {
                                            !n && h.return && h.return()
                                        } finally {
                                            if (s)
                                                throw a
                                        }
                                    }
                                    return i
                                }(t, e);
                            throw new TypeError("Invalid attempt to destructure non-iterable instance")
                        }
                    }
                    ,
                    542: (t,e,i)=>{
                        "use strict";
                        e.__esModule = !0;
                        var n = (i = i = i(4043)) && i.__esModule ? i : {
                            default: i
                        };
                        e.default = function(t) {
                            return Array.isArray(t) ? t : (0,
                                n.default)(t)
                        }
                    }
                    ,
                    5315: (t,e,i)=>{
                        "use strict";
                        e.__esModule = !0;
                        var n = (i = i = i(4043)) && i.__esModule ? i : {
                            default: i
                        };
                        e.default = function(t) {
                            if (Array.isArray(t)) {
                                for (var e = 0, i = Array(t.length); e < t.length; e++)
                                    i[e] = t[e];
                                return i
                            }
                            return (0,
                                n.default)(t)
                        }
                    }
                    ,
                    3404: (t,e,i)=>{
                        i(1867),
                            i(2586),
                            t.exports = i(4579).Array.from
                    }
                    ,
                    3597: (t,e,i)=>{
                        i(3871),
                            i(1867),
                            t.exports = i(6459)
                    }
                    ,
                    1035: (t,e,i)=>{
                        i(3871),
                            i(1867),
                            t.exports = i(9553)
                    }
                    ,
                    6981: (t,e,i)=>{
                        i(2699),
                            t.exports = i(4579).Object.assign
                    }
                    ,
                    3391: (t,e,i)=>{
                        i(1477);
                        var n = i(4579).Object;
                        t.exports = function(t, e, i) {
                            return n.defineProperty(t, e, i)
                        }
                    }
                    ,
                    25: (t,e,i)=>{
                        i(6840),
                            i(4058),
                            i(8174),
                            i(6461),
                            t.exports = i(4579).Symbol
                    }
                    ,
                    5663: t=>{
                        t.exports = function(t) {
                            if ("function" != typeof t)
                                throw TypeError(t + " is not a function!");
                            return t
                        }
                    }
                    ,
                    9003: t=>{
                        t.exports = function() {}
                    }
                    ,
                    2159: (t,e,i)=>{
                        var n = i(6727);
                        t.exports = function(t) {
                            if (!n(t))
                                throw TypeError(t + " is not an object!");
                            return t
                        }
                    }
                    ,
                    7428: (t,e,i)=>{
                        var n = i(7932)
                            , r = i(8728)
                            , s = i(6531);
                        t.exports = function(t) {
                            return function(e, i, a) {
                                var o, h = n(e), l = r(h.length), u = s(a, l);
                                if (t && i != i) {
                                    for (; u < l; )
                                        if ((o = h[u++]) != o)
                                            return !0
                                } else
                                    for (; u < l; u++)
                                        if ((t || u in h) && h[u] === i)
                                            return t || u || 0;
                                return !t && -1
                            }
                        }
                    }
                    ,
                    4677: (t,e,i)=>{
                        var n = i(2894)
                            , r = i(2939)("toStringTag")
                            , s = "Arguments" == n(function() {
                            return arguments
                        }());
                        t.exports = function(t) {
                            var e;
                            return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof (t = function(t, e) {
                                try {
                                    return t[e]
                                } catch (t) {}
                            }(e = Object(t), r)) ? t : s ? n(e) : "Object" == (t = n(e)) && "function" == typeof e.callee ? "Arguments" : t
                        }
                    }
                    ,
                    2894: t=>{
                        var e = {}.toString;
                        t.exports = function(t) {
                            return e.call(t).slice(8, -1)
                        }
                    }
                    ,
                    4579: t=>{
                        t = t.exports = {
                            version: "2.6.12"
                        },
                        "number" == typeof __e && (__e = t)
                    }
                    ,
                    2445: (t,e,i)=>{
                        "use strict";
                        var n = i(4743)
                            , r = i(3101);
                        t.exports = function(t, e, i) {
                            e in t ? n.f(t, e, r(0, i)) : t[e] = i
                        }
                    }
                    ,
                    9216: (t,e,i)=>{
                        var n = i(5663);
                        t.exports = function(t, e, i) {
                            if (n(t),
                            void 0 === e)
                                return t;
                            switch (i) {
                                case 1:
                                    return function(i) {
                                        return t.call(e, i)
                                    }
                                        ;
                                case 2:
                                    return function(i, n) {
                                        return t.call(e, i, n)
                                    }
                                        ;
                                case 3:
                                    return function(i, n, r) {
                                        return t.call(e, i, n, r)
                                    }
                            }
                            return function() {
                                return t.apply(e, arguments)
                            }
                        }
                    }
                    ,
                    8333: t=>{
                        t.exports = function(t) {
                            if (null == t)
                                throw TypeError("Can't call method on  " + t);
                            return t
                        }
                    }
                    ,
                    9666: (t,e,i)=>{
                        t.exports = !i(7929)((function() {
                                return 7 != Object.defineProperty({}, "a", {
                                    get: function() {
                                        return 7
                                    }
                                }).a
                            }
                        ))
                    }
                    ,
                    7467: (t,e,i)=>{
                        var n = i(6727)
                            , r = i(3938).document
                            , s = n(r) && n(r.createElement);
                        t.exports = function(t) {
                            return s ? r.createElement(t) : {}
                        }
                    }
                    ,
                    3338: t=>{
                        t.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")
                    }
                    ,
                    337: (t,e,i)=>{
                        var n = i(6162)
                            , r = i(8195)
                            , s = i(6274);
                        t.exports = function(t) {
                            var e = n(t)
                                , i = r.f;
                            if (i)
                                for (var a, o = i(t), h = s.f, l = 0; o.length > l; )
                                    h.call(t, a = o[l++]) && e.push(a);
                            return e
                        }
                    }
                    ,
                    3856: (t,e,i)=>{
                        function n(t, e, i) {
                            var u, c, d, p = t & n.F, f = t & n.G, m = t & n.S, g = t & n.P, v = t & n.B, _ = t & n.W, y = f ? s : s[e] || (s[e] = {}), x = y[l], b = f ? r : m ? r[e] : (r[e] || {})[l];
                            for (u in i = f ? e : i)
                                (c = !p && b && void 0 !== b[u]) && h(y, u) || (d = (c ? b : i)[u],
                                    y[u] = f && "function" != typeof b[u] ? i[u] : v && c ? a(d, r) : _ && b[u] == d ? function(t) {
                                        function e(e, i, n) {
                                            if (this instanceof t) {
                                                switch (arguments.length) {
                                                    case 0:
                                                        return new t;
                                                    case 1:
                                                        return new t(e);
                                                    case 2:
                                                        return new t(e,i)
                                                }
                                                return new t(e,i,n)
                                            }
                                            return t.apply(this, arguments)
                                        }
                                        return e[l] = t[l],
                                            e
                                    }(d) : g && "function" == typeof d ? a(Function.call, d) : d,
                                g && ((y.virtual || (y.virtual = {}))[u] = d,
                                t & n.R && x && !x[u] && o(x, u, d)))
                        }
                        var r = i(3938)
                            , s = i(4579)
                            , a = i(9216)
                            , o = i(1818)
                            , h = i(7069)
                            , l = "prototype";
                        n.F = 1,
                            n.G = 2,
                            n.S = 4,
                            n.P = 8,
                            n.B = 16,
                            n.W = 32,
                            n.U = 64,
                            n.R = 128,
                            t.exports = n
                    }
                    ,
                    7929: t=>{
                        t.exports = function(t) {
                            try {
                                return !!t()
                            } catch (t) {
                                return !0
                            }
                        }
                    }
                    ,
                    3938: t=>{
                        t = t.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")(),
                        "number" == typeof __g && (__g = t)
                    }
                    ,
                    7069: t=>{
                        var e = {}.hasOwnProperty;
                        t.exports = function(t, i) {
                            return e.call(t, i)
                        }
                    }
                    ,
                    1818: (t,e,i)=>{
                        var n = i(4743)
                            , r = i(3101);
                        t.exports = i(9666) ? function(t, e, i) {
                                return n.f(t, e, r(1, i))
                            }
                            : function(t, e, i) {
                                return t[e] = i,
                                    t
                            }
                    }
                    ,
                    4881: (t,e,i)=>{
                        i = i(3938).document,
                            t.exports = i && i.documentElement
                    }
                    ,
                    3758: (t,e,i)=>{
                        t.exports = !i(9666) && !i(7929)((function() {
                                return 7 != Object.defineProperty(i(7467)("div"), "a", {
                                    get: function() {
                                        return 7
                                    }
                                }).a
                            }
                        ))
                    }
                    ,
                    799: (t,e,i)=>{
                        var n = i(2894);
                        t.exports = Object("z").propertyIsEnumerable(0) ? Object : function(t) {
                            return "String" == n(t) ? t.split("") : Object(t)
                        }
                    }
                    ,
                    5991: (t,e,i)=>{
                        var n = i(5449)
                            , r = i(2939)("iterator")
                            , s = Array.prototype;
                        t.exports = function(t) {
                            return void 0 !== t && (n.Array === t || s[r] === t)
                        }
                    }
                    ,
                    1421: (t,e,i)=>{
                        var n = i(2894);
                        t.exports = Array.isArray || function(t) {
                            return "Array" == n(t)
                        }
                    }
                    ,
                    6727: t=>{
                        t.exports = function(t) {
                            return "object" == typeof t ? null !== t : "function" == typeof t
                        }
                    }
                    ,
                    5602: (t,e,i)=>{
                        var n = i(2159);
                        t.exports = function(t, e, i, r) {
                            try {
                                return r ? e(n(i)[0], i[1]) : e(i)
                            } catch (e) {
                                throw void 0 !== (i = t.return) && n(i.call(t)),
                                    e
                            }
                        }
                    }
                    ,
                    3945: (t,e,i)=>{
                        "use strict";
                        var n = i(8989)
                            , r = i(3101)
                            , s = i(5378)
                            , a = {};
                        i(1818)(a, i(2939)("iterator"), (function() {
                                return this
                            }
                        )),
                            t.exports = function(t, e, i) {
                                t.prototype = n(a, {
                                    next: r(1, i)
                                }),
                                    s(t, e + " Iterator")
                            }
                    }
                    ,
                    5700: (t,e,i)=>{
                        "use strict";
                        function n() {
                            return this
                        }
                        var r = i(6227)
                            , s = i(3856)
                            , a = i(7470)
                            , o = i(1818)
                            , h = i(5449)
                            , l = i(3945)
                            , u = i(5378)
                            , c = i(5089)
                            , d = i(2939)("iterator")
                            , p = !([].keys && "next"in [].keys())
                            , f = "values";
                        t.exports = function(t, e, i, m, g, v, _) {
                            function y(t) {
                                if (!p && t in A)
                                    return A[t];
                                switch (t) {
                                    case "keys":
                                    case f:
                                        return function() {
                                            return new i(this,t)
                                        }
                                }
                                return function() {
                                    return new i(this,t)
                                }
                            }
                            l(i, e, m);
                            var x, b, w, S = e + " Iterator", M = g == f, C = !1, A = t.prototype, T = A[d] || A["@@iterator"] || g && A[g], P = T || y(g), E = g ? M ? y("entries") : P : void 0;
                            if ((m = "Array" == e && A.entries || T) && (w = c(m.call(new t))) !== Object.prototype && w.next && (u(w, S, !0),
                            r || "function" == typeof w[d] || o(w, d, n)),
                            M && T && T.name !== f && (C = !0,
                                    P = function() {
                                        return T.call(this)
                                    }
                            ),
                            r && !_ || !p && !C && A[d] || o(A, d, P),
                                h[e] = P,
                                h[S] = n,
                                g)
                                if (x = {
                                    values: M ? P : y(f),
                                    keys: v ? P : y("keys"),
                                    entries: E
                                },
                                    _)
                                    for (b in x)
                                        b in A || a(A, b, x[b]);
                                else
                                    s(s.P + s.F * (p || C), e, x);
                            return x
                        }
                    }
                    ,
                    6630: (t,e,i)=>{
                        var n = i(2939)("iterator")
                            , r = !1;
                        try {
                            var s = [7][n]();
                            s.return = function() {
                                r = !0
                            }
                                ,
                                Array.from(s, (function() {
                                        throw 2
                                    }
                                ))
                        } catch (t) {}
                        t.exports = function(t, e) {
                            if (!e && !r)
                                return !1;
                            var i = !1;
                            try {
                                var s = [7]
                                    , a = s[n]();
                                a.next = function() {
                                    return {
                                        done: i = !0
                                    }
                                }
                                    ,
                                    s[n] = function() {
                                        return a
                                    }
                                    ,
                                    t(s)
                            } catch (t) {}
                            return i
                        }
                    }
                    ,
                    5084: t=>{
                        t.exports = function(t, e) {
                            return {
                                value: e,
                                done: !!t
                            }
                        }
                    }
                    ,
                    5449: t=>{
                        t.exports = {}
                    }
                    ,
                    6227: t=>{
                        t.exports = !0
                    }
                    ,
                    7177: (t,e,i)=>{
                        function n(t) {
                            o(t, r, {
                                value: {
                                    i: "O" + ++h,
                                    w: {}
                                }
                            })
                        }
                        var r = i(5730)("meta")
                            , s = i(6727)
                            , a = i(7069)
                            , o = i(4743).f
                            , h = 0
                            , l = Object.isExtensible || function() {
                            return !0
                        }
                            , u = !i(7929)((function() {
                                return l(Object.preventExtensions({}))
                            }
                        ))
                            , c = t.exports = {
                            KEY: r,
                            NEED: !1,
                            fastKey: function(t, e) {
                                if (!s(t))
                                    return "symbol" == typeof t ? t : ("string" == typeof t ? "S" : "P") + t;
                                if (!a(t, r)) {
                                    if (!l(t))
                                        return "F";
                                    if (!e)
                                        return "E";
                                    n(t)
                                }
                                return t[r].i
                            },
                            getWeak: function(t, e) {
                                if (!a(t, r)) {
                                    if (!l(t))
                                        return !0;
                                    if (!e)
                                        return !1;
                                    n(t)
                                }
                                return t[r].w
                            },
                            onFreeze: function(t) {
                                return u && c.NEED && l(t) && !a(t, r) && n(t),
                                    t
                            }
                        }
                    }
                    ,
                    8082: (t,e,i)=>{
                        "use strict";
                        var n = i(9666)
                            , r = i(6162)
                            , s = i(8195)
                            , a = i(6274)
                            , o = i(6530)
                            , h = i(799)
                            , l = Object.assign;
                        t.exports = !l || i(7929)((function() {
                                var t = {}
                                    , e = {}
                                    , i = Symbol()
                                    , n = "abcdefghijklmnopqrst";
                                return t[i] = 7,
                                    n.split("").forEach((function(t) {
                                            e[t] = t
                                        }
                                    )),
                                7 != l({}, t)[i] || Object.keys(l({}, e)).join("") != n
                            }
                        )) ? function(t, e) {
                                for (var i = o(t), l = arguments.length, u = 1, c = s.f, d = a.f; u < l; )
                                    for (var p, f = h(arguments[u++]), m = c ? r(f).concat(c(f)) : r(f), g = m.length, v = 0; v < g; )
                                        p = m[v++],
                                        n && !d.call(f, p) || (i[p] = f[p]);
                                return i
                            }
                            : l
                    }
                    ,
                    8989: (t,e,i)=>{
                        function n() {}
                        var r = i(2159)
                            , s = i(7856)
                            , a = i(3338)
                            , o = i(7281)("IE_PROTO")
                            , h = "prototype"
                            , l = function() {
                            var t = i(7467)("iframe")
                                , e = a.length;
                            for (t.style.display = "none",
                                     i(4881).appendChild(t),
                                     t.src = "javascript:",
                                     (t = t.contentWindow.document).open(),
                                     t.write("<script>document.F=Object<\/script>"),
                                     t.close(),
                                     l = t.F; e--; )
                                delete l[h][a[e]];
                            return l()
                        };
                        t.exports = Object.create || function(t, e) {
                            var i;
                            return null !== t ? (n[h] = r(t),
                                i = new n,
                                n[h] = null,
                                i[o] = t) : i = l(),
                                void 0 === e ? i : s(i, e)
                        }
                    }
                    ,
                    4743: (t,e,i)=>{
                        var n = i(2159)
                            , r = i(3758)
                            , s = i(3206)
                            , a = Object.defineProperty;
                        e.f = i(9666) ? Object.defineProperty : function(t, e, i) {
                            if (n(t),
                                e = s(e, !0),
                                n(i),
                                r)
                                try {
                                    return a(t, e, i)
                                } catch (t) {}
                            if ("get"in i || "set"in i)
                                throw TypeError("Accessors not supported!");
                            return "value"in i && (t[e] = i.value),
                                t
                        }
                    }
                    ,
                    7856: (t,e,i)=>{
                        var n = i(4743)
                            , r = i(2159)
                            , s = i(6162);
                        t.exports = i(9666) ? Object.defineProperties : function(t, e) {
                            r(t);
                            for (var i, a = s(e), o = a.length, h = 0; h < o; )
                                n.f(t, i = a[h++], e[i]);
                            return t
                        }
                    }
                    ,
                    6183: (t,e,i)=>{
                        var n = i(6274)
                            , r = i(3101)
                            , s = i(7932)
                            , a = i(3206)
                            , o = i(7069)
                            , h = i(3758)
                            , l = Object.getOwnPropertyDescriptor;
                        e.f = i(9666) ? l : function(t, e) {
                            if (t = s(t),
                                e = a(e, !0),
                                h)
                                try {
                                    return l(t, e)
                                } catch (t) {}
                            if (o(t, e))
                                return r(!n.f.call(t, e), t[e])
                        }
                    }
                    ,
                    4368: (t,e,i)=>{
                        var n = i(7932)
                            , r = i(3230).f
                            , s = {}.toString
                            , a = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
                        t.exports.f = function(t) {
                            return a && "[object Window]" == s.call(t) ? function(t) {
                                try {
                                    return r(t)
                                } catch (t) {
                                    return a.slice()
                                }
                            }(t) : r(n(t))
                        }
                    }
                    ,
                    3230: (t,e,i)=>{
                        var n = i(2963)
                            , r = i(3338).concat("length", "prototype");
                        e.f = Object.getOwnPropertyNames || function(t) {
                            return n(t, r)
                        }
                    }
                    ,
                    8195: (t,e)=>{
                        e.f = Object.getOwnPropertySymbols
                    }
                    ,
                    5089: (t,e,i)=>{
                        var n = i(7069)
                            , r = i(6530)
                            , s = i(7281)("IE_PROTO")
                            , a = Object.prototype;
                        t.exports = Object.getPrototypeOf || function(t) {
                            return t = r(t),
                                n(t, s) ? t[s] : "function" == typeof t.constructor && t instanceof t.constructor ? t.constructor.prototype : t instanceof Object ? a : null
                        }
                    }
                    ,
                    2963: (t,e,i)=>{
                        var n = i(7069)
                            , r = i(7932)
                            , s = i(7428)(!1)
                            , a = i(7281)("IE_PROTO");
                        t.exports = function(t, e) {
                            var i, o = r(t), h = 0, l = [];
                            for (i in o)
                                i != a && n(o, i) && l.push(i);
                            for (; e.length > h; )
                                n(o, i = e[h++]) && (~s(l, i) || l.push(i));
                            return l
                        }
                    }
                    ,
                    6162: (t,e,i)=>{
                        var n = i(2963)
                            , r = i(3338);
                        t.exports = Object.keys || function(t) {
                            return n(t, r)
                        }
                    }
                    ,
                    6274: (t,e)=>{
                        e.f = {}.propertyIsEnumerable
                    }
                    ,
                    3101: t=>{
                        t.exports = function(t, e) {
                            return {
                                enumerable: !(1 & t),
                                configurable: !(2 & t),
                                writable: !(4 & t),
                                value: e
                            }
                        }
                    }
                    ,
                    7470: (t,e,i)=>{
                        t.exports = i(1818)
                    }
                    ,
                    5378: (t,e,i)=>{
                        var n = i(4743).f
                            , r = i(7069)
                            , s = i(2939)("toStringTag");
                        t.exports = function(t, e, i) {
                            t && !r(t = i ? t : t.prototype, s) && n(t, s, {
                                configurable: !0,
                                value: e
                            })
                        }
                    }
                    ,
                    7281: (t,e,i)=>{
                        var n = i(250)("keys")
                            , r = i(5730);
                        t.exports = function(t) {
                            return n[t] || (n[t] = r(t))
                        }
                    }
                    ,
                    250: (t,e,i)=>{
                        var n = i(4579)
                            , r = i(3938)
                            , s = "__core-js_shared__"
                            , a = r[s] || (r[s] = {});
                        (t.exports = function(t, e) {
                                return a[t] || (a[t] = void 0 !== e ? e : {})
                            }
                        )("versions", []).push({
                            version: n.version,
                            mode: i(6227) ? "pure" : "global",
                            copyright: "© 2020 Denis Pushkarev (zloirock.ru)"
                        })
                    }
                    ,
                    510: (t,e,i)=>{
                        var n = i(1052)
                            , r = i(8333);
                        t.exports = function(t) {
                            return function(e, i) {
                                var s, a = String(r(e)), o = n(i);
                                e = a.length;
                                return o < 0 || e <= o ? t ? "" : void 0 : (i = a.charCodeAt(o)) < 55296 || 56319 < i || o + 1 === e || (s = a.charCodeAt(o + 1)) < 56320 || 57343 < s ? t ? a.charAt(o) : i : t ? a.slice(o, o + 2) : s - 56320 + (i - 55296 << 10) + 65536
                            }
                        }
                    }
                    ,
                    6531: (t,e,i)=>{
                        var n = i(1052)
                            , r = Math.max
                            , s = Math.min;
                        t.exports = function(t, e) {
                            return (t = n(t)) < 0 ? r(t + e, 0) : s(t, e)
                        }
                    }
                    ,
                    1052: t=>{
                        var e = Math.ceil
                            , i = Math.floor;
                        t.exports = function(t) {
                            return isNaN(t = +t) ? 0 : (0 < t ? i : e)(t)
                        }
                    }
                    ,
                    7932: (t,e,i)=>{
                        var n = i(799)
                            , r = i(8333);
                        t.exports = function(t) {
                            return n(r(t))
                        }
                    }
                    ,
                    8728: (t,e,i)=>{
                        var n = i(1052)
                            , r = Math.min;
                        t.exports = function(t) {
                            return 0 < t ? r(n(t), 9007199254740991) : 0
                        }
                    }
                    ,
                    6530: (t,e,i)=>{
                        var n = i(8333);
                        t.exports = function(t) {
                            return Object(n(t))
                        }
                    }
                    ,
                    3206: (t,e,i)=>{
                        var n = i(6727);
                        t.exports = function(t, e) {
                            if (!n(t))
                                return t;
                            var i, r;
                            if (e && "function" == typeof (i = t.toString) && !n(r = i.call(t)))
                                return r;
                            if ("function" == typeof (i = t.valueOf) && !n(r = i.call(t)))
                                return r;
                            if (!e && "function" == typeof (i = t.toString) && !n(r = i.call(t)))
                                return r;
                            throw TypeError("Can't convert object to primitive value")
                        }
                    }
                    ,
                    5730: t=>{
                        var e = 0
                            , i = Math.random();
                        t.exports = function(t) {
                            return "Symbol(".concat(void 0 === t ? "" : t, ")_", (++e + i).toString(36))
                        }
                    }
                    ,
                    6347: (t,e,i)=>{
                        var n = i(3938)
                            , r = i(4579)
                            , s = i(6227)
                            , a = i(5103)
                            , o = i(4743).f;
                        t.exports = function(t) {
                            var e = r.Symbol || (r.Symbol = !s && n.Symbol || {});
                            "_" == t.charAt(0) || t in e || o(e, t, {
                                value: a.f(t)
                            })
                        }
                    }
                    ,
                    5103: (t,e,i)=>{
                        e.f = i(2939)
                    }
                    ,
                    2939: (t,e,i)=>{
                        var n = i(250)("wks")
                            , r = i(5730)
                            , s = i(3938).Symbol
                            , a = "function" == typeof s;
                        (t.exports = function(t) {
                                return n[t] || (n[t] = a && s[t] || (a ? s : r)("Symbol." + t))
                            }
                        ).store = n
                    }
                    ,
                    3728: (t,e,i)=>{
                        var n = i(4677)
                            , r = i(2939)("iterator")
                            , s = i(5449);
                        t.exports = i(4579).getIteratorMethod = function(t) {
                            if (null != t)
                                return t[r] || t["@@iterator"] || s[n(t)]
                        }
                    }
                    ,
                    6459: (t,e,i)=>{
                        var n = i(2159)
                            , r = i(3728);
                        t.exports = i(4579).getIterator = function(t) {
                            var e = r(t);
                            if ("function" != typeof e)
                                throw TypeError(t + " is not iterable!");
                            return n(e.call(t))
                        }
                    }
                    ,
                    9553: (t,e,i)=>{
                        var n = i(4677)
                            , r = i(2939)("iterator")
                            , s = i(5449);
                        t.exports = i(4579).isIterable = function(t) {
                            return void 0 !== (t = Object(t))[r] || "@@iterator"in t || s.hasOwnProperty(n(t))
                        }
                    }
                    ,
                    2586: (t,e,i)=>{
                        "use strict";
                        var n = i(9216)
                            , r = i(3856)
                            , s = i(6530)
                            , a = i(5602)
                            , o = i(5991)
                            , h = i(8728)
                            , l = i(2445)
                            , u = i(3728);
                        r(r.S + r.F * !i(6630)((function(t) {
                                Array.from(t)
                            }
                        )), "Array", {
                            from: function(t) {
                                var e, i, r, c, d = s(t), p = "function" == typeof this ? this : Array, f = arguments.length, m = 1 < f ? arguments[1] : void 0, g = void 0 !== m, v = 0;
                                t = u(d);
                                if (g && (m = n(m, 2 < f ? arguments[2] : void 0, 2)),
                                null == t || p == Array && o(t))
                                    for (i = new p(e = h(d.length)); v < e; v++)
                                        l(i, v, g ? m(d[v], v) : d[v]);
                                else
                                    for (c = t.call(d),
                                             i = new p; !(r = c.next()).done; v++)
                                        l(i, v, g ? a(c, m, [r.value, v], !0) : r.value);
                                return i.length = v,
                                    i
                            }
                        })
                    }
                    ,
                    3882: (t,e,i)=>{
                        "use strict";
                        var n = i(9003)
                            , r = i(5084)
                            , s = i(5449)
                            , a = i(7932);
                        t.exports = i(5700)(Array, "Array", (function(t, e) {
                                this._t = a(t),
                                    this._i = 0,
                                    this._k = e
                            }
                        ), (function() {
                                var t = this._t
                                    , e = this._k
                                    , i = this._i++;
                                return !t || i >= t.length ? (this._t = void 0,
                                    r(1)) : r(0, "keys" == e ? i : "values" == e ? t[i] : [i, t[i]])
                            }
                        ), "values"),
                            s.Arguments = s.Array,
                            n("keys"),
                            n("values"),
                            n("entries")
                    }
                    ,
                    2699: (t,e,i)=>{
                        var n = i(3856);
                        n(n.S + n.F, "Object", {
                            assign: i(8082)
                        })
                    }
                    ,
                    1477: (t,e,i)=>{
                        var n = i(3856);
                        n(n.S + n.F * !i(9666), "Object", {
                            defineProperty: i(4743).f
                        })
                    }
                    ,
                    4058: ()=>{}
                    ,
                    1867: (t,e,i)=>{
                        "use strict";
                        var n = i(510)(!0);
                        i(5700)(String, "String", (function(t) {
                                this._t = String(t),
                                    this._i = 0
                            }
                        ), (function() {
                                var t = this._t
                                    , e = this._i;
                                return e >= t.length ? {
                                    value: void 0,
                                    done: !0
                                } : (e = n(t, e),
                                    this._i += e.length,
                                    {
                                        value: e,
                                        done: !1
                                    })
                            }
                        ))
                    }
                    ,
                    6840: (t,e,i)=>{
                        "use strict";
                        function n(t) {
                            var e = X[t] = L(B[G]);
                            return e._k = t,
                                e
                        }
                        function r(t, e) {
                            M(t);
                            for (var i, n = w(e = T(e)), r = 0, s = n.length; r < s; )
                                tt(t, i = n[r++], e[i]);
                            return t
                        }
                        function s(t) {
                            var e = H.call(this, t = P(t, !0));
                            return !(this === J && u(X, t) && !u(Z, t)) && (!(e || !u(this, t) || !u(X, t) || u(this, W) && this[W][t]) || e)
                        }
                        function a(t, e) {
                            if (t = T(t),
                                e = P(e, !0),
                            t !== J || !u(X, e) || u(Z, e)) {
                                var i = R(t, e);
                                return !i || !u(X, e) || u(t, W) && t[W][e] || (i.enumerable = !0),
                                    i
                            }
                        }
                        function o(t) {
                            for (var e, i = F(T(t)), n = [], r = 0; i.length > r; )
                                u(X, e = i[r++]) || e == W || e == f || n.push(e);
                            return n
                        }
                        function h(t) {
                            for (var e, i = t === J, n = F(i ? Z : T(t)), r = [], s = 0; n.length > s; )
                                !u(X, e = n[s++]) || i && !u(J, e) || r.push(X[e]);
                            return r
                        }
                        var l = i(3938)
                            , u = i(7069)
                            , c = i(9666)
                            , d = i(3856)
                            , p = i(7470)
                            , f = i(7177).KEY
                            , m = i(7929)
                            , g = i(250)
                            , v = i(5378)
                            , _ = i(5730)
                            , y = i(2939)
                            , x = i(5103)
                            , b = i(6347)
                            , w = i(337)
                            , S = i(1421)
                            , M = i(2159)
                            , C = i(6727)
                            , A = i(6530)
                            , T = i(7932)
                            , P = i(3206)
                            , E = i(3101)
                            , L = i(8989)
                            , I = i(4368)
                            , k = i(6183)
                            , N = i(8195)
                            , O = i(4743)
                            , D = i(6162)
                            , R = k.f
                            , z = O.f
                            , F = I.f
                            , B = l.Symbol
                            , V = l.JSON
                            , U = V && V.stringify
                            , G = "prototype"
                            , W = y("_hidden")
                            , j = y("toPrimitive")
                            , H = {}.propertyIsEnumerable
                            , q = g("symbol-registry")
                            , X = g("symbols")
                            , Z = g("op-symbols")
                            , J = Object[G]
                            , Y = "function" == typeof B && !!N.f
                            , Q = !(g = l.QObject) || !g[G] || !g[G].findChild
                            , K = c && m((function() {
                                return 7 != L(z({}, "a", {
                                    get: function() {
                                        return z(this, "a", {
                                            value: 7
                                        }).a
                                    }
                                })).a
                            }
                        )) ? function(t, e, i) {
                                var n = R(J, e);
                                n && delete J[e],
                                    z(t, e, i),
                                n && t !== J && z(J, e, n)
                            }
                            : z
                            , $ = Y && "symbol" == typeof B.iterator ? function(t) {
                                return "symbol" == typeof t
                            }
                            : function(t) {
                                return t instanceof B
                            }
                            , tt = function(t, e, i) {
                            return t === J && tt(Z, e, i),
                                M(t),
                                e = P(e, !0),
                                M(i),
                                u(X, e) ? (i.enumerable ? (u(t, W) && t[W][e] && (t[W][e] = !1),
                                    i = L(i, {
                                        enumerable: E(0, !1)
                                    })) : (u(t, W) || z(t, W, E(1, {})),
                                    t[W][e] = !0),
                                    K(t, e, i)) : z(t, e, i)
                        };
                        Y || (p((B = function() {
                                    if (this instanceof B)
                                        throw TypeError("Symbol is not a constructor!");
                                    var t = _(0 < arguments.length ? arguments[0] : void 0)
                                        , e = function(i) {
                                        this === J && e.call(Z, i),
                                        u(this, W) && u(this[W], t) && (this[W][t] = !1),
                                            K(this, t, E(1, i))
                                    };
                                    return c && Q && K(J, t, {
                                        configurable: !0,
                                        set: e
                                    }),
                                        n(t)
                                }
                            )[G], "toString", (function() {
                                    return this._k
                                }
                            )),
                                k.f = a,
                                O.f = tt,
                                i(3230).f = I.f = o,
                                i(6274).f = s,
                                N.f = h,
                            c && !i(6227) && p(J, "propertyIsEnumerable", s, !0),
                                x.f = function(t) {
                                    return n(y(t))
                                }
                        ),
                            d(d.G + d.W + d.F * !Y, {
                                Symbol: B
                            });
                        for (var et = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), it = 0; et.length > it; )
                            y(et[it++]);
                        for (var nt = D(y.store), rt = 0; nt.length > rt; )
                            b(nt[rt++]);
                        d(d.S + d.F * !Y, "Symbol", {
                            for: function(t) {
                                return u(q, t += "") ? q[t] : q[t] = B(t)
                            },
                            keyFor: function(t) {
                                if (!$(t))
                                    throw TypeError(t + " is not a symbol!");
                                for (var e in q)
                                    if (q[e] === t)
                                        return e
                            },
                            useSetter: function() {
                                Q = !0
                            },
                            useSimple: function() {
                                Q = !1
                            }
                        }),
                            d(d.S + d.F * !Y, "Object", {
                                create: function(t, e) {
                                    return void 0 === e ? L(t) : r(L(t), e)
                                },
                                defineProperty: tt,
                                defineProperties: r,
                                getOwnPropertyDescriptor: a,
                                getOwnPropertyNames: o,
                                getOwnPropertySymbols: h
                            }),
                            D = m((function() {
                                    N.f(1)
                                }
                            )),
                            d(d.S + d.F * D, "Object", {
                                getOwnPropertySymbols: function(t) {
                                    return N.f(A(t))
                                }
                            }),
                        V && d(d.S + d.F * (!Y || m((function() {
                                var t = B();
                                return "[null]" != U([t]) || "{}" != U({
                                    a: t
                                }) || "{}" != U(Object(t))
                            }
                        ))), "JSON", {
                            stringify: function(t) {
                                for (var e, i, n = [t], r = 1; r < arguments.length; )
                                    n.push(arguments[r++]);
                                if (i = e = n[1],
                                (C(e) || void 0 !== t) && !$(t))
                                    return S(e) || (e = function(t, e) {
                                            if ("function" == typeof i && (e = i.call(this, t, e)),
                                                !$(e))
                                                return e
                                        }
                                    ),
                                        n[1] = e,
                                        U.apply(V, n)
                            }
                        }),
                        B[G][j] || i(1818)(B[G], j, B[G].valueOf),
                            v(B, "Symbol"),
                            v(Math, "Math", !0),
                            v(l.JSON, "JSON", !0)
                    }
                    ,
                    8174: (t,e,i)=>{
                        i(6347)("asyncIterator")
                    }
                    ,
                    6461: (t,e,i)=>{
                        i(6347)("observable")
                    }
                    ,
                    3871: (t,e,i)=>{
                        i(3882);
                        for (var n = i(3938), r = i(1818), s = i(5449), a = i(2939)("toStringTag"), o = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","), h = 0; h < o.length; h++) {
                            var l, u = o[h];
                            (l = (l = n[u]) && l.prototype) && !l[a] && r(l, a, u),
                                s[u] = s.Array
                        }
                    }
                    ,
                    5809: function(t) {
                        var e;
                        e = function() {
                            "use strict";
                            return function(t, e) {
                                function i() {}
                                function n(t) {
                                    setTimeout(t || i, 0)
                                }
                                var r = !!window.addEventListener
                                    , s = "ontouchstart"in window || window.DocumentTouch && document instanceof window.DocumentTouch
                                    , a = function(t) {
                                    var e, i = ["transitionProperty", "WebkitTransition", "MozTransition", "OTransition", "msTransition"];
                                    for (e in i)
                                        if (void 0 !== t.style[i[e]])
                                            return !0;
                                    return !1
                                }(document.createElement("swipe"));
                                if (t) {
                                    var o, h, l, u = t.children[0];
                                    e = e || {};
                                    var c = u.children.length
                                        , d = t.getBoundingClientRect().width || t.offsetWidth
                                        , p = parseInt(e.startSlide, 10) || 0
                                        , f = e.speed || 300
                                        , m = e.offset || 0
                                        , g = e.continuous = void 0 !== e.continuous && e.continuous;
                                    g && function() {
                                        var t = u.children.length;
                                        if (2 == t || 3 == t)
                                            for (var e = 0; e < t; e++) {
                                                var i = u.children[e]
                                                    , n = i.cloneNode(!0);
                                                !function(t, e) {
                                                    e.addEventListener("click", (function(e) {
                                                            for (var i = e.target.nodeName, n = e.target.attributes, r = i, s = 0; s < n.length; s++) {
                                                                var a = n[s];
                                                                0 < s && (r += ","),
                                                                    r += `[${a.nodeName}='${a.nodeValue}']`
                                                            }
                                                            !function t(e) {
                                                                var i = e.hasAttribute("onclick");
                                                                if (i)
                                                                    return !0;
                                                                for (var n = 0; n < e.children.length; n++)
                                                                    if (i = t(e.children[n]))
                                                                        return !0;
                                                                return i
                                                            }(t) && t.querySelector(r).click()
                                                        }
                                                    ), !1),
                                                        u.appendChild(e)
                                                }(i, n)
                                            }
                                    }();
                                    var v, _, y = e.auto || 0, x = {}, b = {}, w = {
                                        handleEvent: function(t) {
                                            switch (t.type) {
                                                case "touchstart":
                                                    this.start(t);
                                                    break;
                                                case "touchmove":
                                                    this.move(t);
                                                    break;
                                                case "touchend":
                                                    n(this.end(t));
                                                    break;
                                                case "webkitTransitionEnd":
                                                case "msTransitionEnd":
                                                case "oTransitionEnd":
                                                case "otransitionend":
                                                case "transitionend":
                                                    n(this.transitionEnd(t));
                                                    break;
                                                case "resize":
                                                    n(S)
                                            }
                                            e.stopPropagation && t.stopPropagation()
                                        },
                                        start: function(t) {
                                            t = t.touches[0],
                                                x = {
                                                    x: t.pageX,
                                                    y: t.pageY,
                                                    time: +new Date
                                                },
                                                _ = void 0,
                                                b = {},
                                                u.addEventListener("touchmove", this, !1),
                                                u.addEventListener("touchend", this, !1)
                                        },
                                        move: function(t) {
                                            var i;
                                            1 < t.touches.length || t.scale && 1 !== t.scale || e.disableScroll || (i = t.touches[0],
                                                i = (b = {
                                                    x: i.pageX - x.x,
                                                    y: i.pageY - x.y
                                                }).x < 0,
                                            (_ = void 0 === _ ? !!(_ || Math.abs(b.x) < Math.abs(b.y)) : _) || (t.preventDefault(),
                                                I(),
                                                g ? (P(C(p - 1), b.x + h[C(p - 1)], 0),
                                                    P(p, b.x + h[p], 0),
                                                    P(C(p + 1), b.x + h[C(p + 1)], 0),
                                                    i ? P(C(p + 2), b.x + 2 * l, 0) : P(C(p - 2), -b.x - 2 * l, 0)) : (b.x = b.x / (!p && 0 < b.x || p == o.length - 1 && b.x < 0 ? Math.abs(b.x) / l + 1 : 1),
                                                    P(p - 1, b.x + h[p - 1], 0),
                                                    P(p, b.x + h[p], 0),
                                                    P(p + 1, b.x + h[p + 1], 0)),
                                            e.swiping && e.swiping(-b.x / l)))
                                        },
                                        end: function(t) {
                                            var i = +new Date - x.time
                                                , n = Number(i) < 250 && 20 < Math.abs(b.x) || Math.abs(b.x) > l / 2
                                                , r = !p && 0 < b.x || p == o.length - 1 && b.x < 0;
                                            if (g && (r = !1),
                                                i = b.x < 0,
                                                !_)
                                                if (n && !r) {
                                                    if (i)
                                                        if (g)
                                                            T(C(p - 1), -l, f),
                                                                T(C(p + 2), l, f),
                                                                T(p, h[p] - l, f),
                                                                T(C(p + 1), h[C(p + 1)] - l, f),
                                                                p = C(p + 1);
                                                        else {
                                                            p = C(p + 1);
                                                            for (var s = 0; s < h.length; s++)
                                                                T(s, l * (s - p), 1 < Math.round(s - p) ? 0 : f)
                                                        }
                                                    else if (g)
                                                        T(C(p + 1), l, f),
                                                            T(C(p - 2), -l, f),
                                                            T(p, h[p] + l, f),
                                                            T(C(p - 1), h[C(p - 1)] + l, f),
                                                            p = C(p - 1);
                                                    else
                                                        for (p = C(p - 1),
                                                                 s = 0; s < h.length; s++)
                                                            T(s, s <= p ? -l * (p - s) : l * (s - p), f);
                                                    E(),
                                                    e.callback && e.callback(p % c, o[p])
                                                } else
                                                    g ? (T(C(p - 1), -l, f),
                                                        T(p, 0, f),
                                                        T(C(p + 1), l, f)) : (u.click(),
                                                        T(p - 1, -l, f),
                                                        T(p, 0, f),
                                                        T(p + 1, l, f));
                                            u.removeEventListener("touchmove", w, !1),
                                                u.removeEventListener("touchend", w, !1),
                                                u.removeEventListener("touchforcechange", (function() {}
                                                ), !1)
                                        },
                                        transitionEnd: function(t) {
                                            parseInt(t.target.getAttribute("data-index"), 10) == p && (y && L(),
                                            e.transitionEnd && e.transitionEnd.call(t, p % c, o[p]))
                                        }
                                    };
                                    return S(),
                                    y && L(),
                                        r ? (s && (u.addEventListener("touchstart", w, !1),
                                            u.addEventListener("touchforcechange", (function() {}
                                            ), !1)),
                                        a && (u.addEventListener("webkitTransitionEnd", w, !1),
                                            u.addEventListener("msTransitionEnd", w, !1),
                                            u.addEventListener("oTransitionEnd", w, !1),
                                            u.addEventListener("otransitionend", w, !1),
                                            u.addEventListener("transitionend", w, !1)),
                                            window.addEventListener("resize", w, !1)) : window.onresize = function() {
                                            S()
                                        }
                                        ,
                                        {
                                            setup: function() {
                                                S()
                                            },
                                            slide: function(t, e) {
                                                I(),
                                                    A(t, e)
                                            },
                                            prev: function() {
                                                I(),
                                                g && P(C(p - 2), 2 * -l, 0),
                                                    setTimeout((function() {
                                                            (g || p) && A(p - 1)
                                                        }
                                                    ), 20)
                                            },
                                            next: function() {
                                                I(),
                                                    M()
                                            },
                                            stop: function() {
                                                I(!0)
                                            },
                                            getPos: function() {
                                                return p % c
                                            },
                                            getNumSlides: function() {
                                                return c
                                            },
                                            kill: function() {
                                                I(!0),
                                                    u.style.width = "",
                                                    u.style.left = "";
                                                for (var t = o.length; t--; ) {
                                                    var e = o[t];
                                                    e.style.width = "",
                                                        e.style.left = "",
                                                    a && P(t, 0, 0)
                                                }
                                                r ? (u.removeEventListener("touchstart", w, !1),
                                                    u.removeEventListener("webkitTransitionEnd", w, !1),
                                                    u.removeEventListener("msTransitionEnd", w, !1),
                                                    u.removeEventListener("oTransitionEnd", w, !1),
                                                    u.removeEventListener("otransitionend", w, !1),
                                                    u.removeEventListener("transitionend", w, !1),
                                                    window.removeEventListener("resize", w, !1)) : window.onresize = null
                                            }
                                        }
                                }
                                function S() {
                                    (o = u.children).length,
                                        g = !(o.length < 2) && e.continuous,
                                        h = new Array(o.length),
                                        l = Math.round(e.width || d),
                                        u.style.width = o.length * l + "px";
                                    for (var i = o.length; i--; ) {
                                        var n = o[i];
                                        n.style.width = l + "px",
                                            n.style.zIndex = p == i ? 1 : 0,
                                            n.setAttribute("data-index", i),
                                        a && (n.style.left = i * -l + m + "px",
                                            T(i, i < p ? -l * i : p < i ? l * i : 0, 0))
                                    }
                                    g && a && (T(C(p - 1), -l, 0),
                                        T(C(p + 1), l, 0)),
                                    a || (u.style.left = p * -l + m + "px"),
                                        t.style.visibility = "visible",
                                        E()
                                }
                                function M() {
                                    g && P(C(p + 2), 2 * l, 0),
                                        setTimeout((function() {
                                                (g || p < o.length - 1) && A(p + 1)
                                            }
                                        ), 20)
                                }
                                function C(t) {
                                    return (o.length + t % o.length) % o.length
                                }
                                function A(t, i) {
                                    if (p != t) {
                                        if (i = i || f,
                                            a) {
                                            var r = Math.abs(p - t) / (t - p);
                                            if (g)
                                                T(C((t -= r) - r), -l * r, i / 3),
                                                    T(C(t + 2 * r), l * r, i),
                                                    T(t, h[t] - l * r, i),
                                                    T(C(t + r), h[C(t + r)] - l * r, i),
                                                    t = C(t + r);
                                            else {
                                                t = C(t);
                                                for (var s = 0; s < h.length; s++)
                                                    T(s, l * (s - t), 1 < Math.abs(s - t) ? 0 : i)
                                            }
                                        } else
                                            t = C(t),
                                                d = p * -l,
                                                m = t * -l,
                                                (v = i) ? (_ = +new Date,
                                                    x = setInterval((function() {
                                                            var t = +new Date - _;
                                                            if (v < t)
                                                                return u.style.left = m + "px",
                                                                y && L(),
                                                                e.transitionEnd && e.transitionEnd.call(event, p % c, o[p]),
                                                                    void clearInterval(x);
                                                            u.style.left = (m - d) * (Math.floor(t / v * 100) / 100) + d + "px"
                                                        }
                                                    ), 4)) : u.style.left = m + "px";
                                        var d, m, v, _, x;
                                        p = t,
                                            E(),
                                            n(e.callback && e.callback(p % c, o[p]))
                                    }
                                }
                                function T(t, e, i) {
                                    P(t, e, i),
                                        h[t] = e
                                }
                                function P(t, e, i) {
                                    var n;
                                    (n = (n = o[t]) && n.style) && (n.zIndex = p == t ? 1 : 0,
                                        n.webkitTransitionDuration = n.MozTransitionDuration = n.msTransitionDuration = n.OTransitionDuration = n.transitionDuration = i + "ms",
                                        n.webkitTransform = "translate(" + e + "px,0)translateZ(0)",
                                        n.msTransform = n.MozTransform = n.OTransform = "translateX(" + e + "px)")
                                }
                                function E() {
                                    if (g)
                                        for (var t = 0; t < o.length; t++)
                                            t == C(p - 1) || t == p || t == C(p + 1) ? o[t].style.visibility = "visible" : o[t].style.visibility = "hidden"
                                }
                                function L() {
                                    clearTimeout(v),
                                        v = setTimeout(M, y)
                                }
                                function I(t) {
                                    t && (y = 0),
                                        clearTimeout(v)
                                }
                            }
                        }
                            ,
                            t.exports ? t.exports = e() : this.lightSwiper = e()
                    },
                    3267: function(t, e, i) {
                        var n, r, s;
                        (function(a, o) {
                                var h = (a = a || i(4158)).window
                                    , l = a.document
                                    , u = new function() {
                                        function t(t, e) {
                                            for (var i in this)
                                                this.hasOwnProperty(i) && t.call(e, this[i], i, this)
                                        }
                                        function e(e, i, n) {
                                            var r;
                                            return e && ((r = a(e, "length")) && "number" == typeof r.value ? l : t).call(e, i, n = n || e),
                                                n
                                        }
                                        var i = /^(statics|enumerable|beans|preserve)$/
                                            , n = []
                                            , r = n.slice
                                            , s = Object.create
                                            , a = Object.getOwnPropertyDescriptor
                                            , h = Object.defineProperty
                                            , l = n.forEach || function(t, e) {
                                                for (var i = 0, n = this.length; i < n; i++)
                                                    t.call(e, this[i], i, this)
                                            }
                                            , u = Object.assign || function(t) {
                                                for (var e = 1, i = arguments.length; e < i; e++) {
                                                    var n, r = arguments[e];
                                                    for (n in r)
                                                        r.hasOwnProperty(n) && (t[n] = r[n])
                                                }
                                                return t
                                            }
                                        ;
                                        function c(t, e, n, r, s) {
                                            var o = {};
                                            function l(i, l) {
                                                var u, c = "function" == typeof (l = "string" == typeof (l = l || (l = a(e, i)) && (l.get ? l : l.value)) && "#" === l[0] && t[l.substring(1)] || l), p = l, f = s || c && !l.base ? l && l.get ? i in t : t[i] : null;
                                                s && f || (c && f && (l.base = f),
                                                c && !1 !== r && (u = i.match(/^([gs]et|is)(([A-Z])(.*))$/)) && (o[u[3].toLowerCase() + u[4]] = u[2]),
                                                p && !c && p.get && "function" == typeof p.get && d.isPlainObject(p) || (p = {
                                                    value: p,
                                                    writable: !0
                                                }),
                                                (a(t, i) || {
                                                    configurable: !0
                                                }).configurable && (p.configurable = !0,
                                                    p.enumerable = null != n ? n : !u),
                                                    h(t, i, p))
                                            }
                                            if (e) {
                                                for (var u in e)
                                                    e.hasOwnProperty(u) && !i.test(u) && l(u);
                                                for (var u in o) {
                                                    var c = o[u]
                                                        , p = t["set" + c];
                                                    !(c = t["get" + c] || p && t["is" + c]) || !0 !== r && 0 !== c.length || l(u, {
                                                        get: c,
                                                        set: p
                                                    })
                                                }
                                            }
                                            return t
                                        }
                                        function d() {
                                            for (var t = 0, e = arguments.length; t < e; t++) {
                                                var i = arguments[t];
                                                i && u(this, i)
                                            }
                                            return this
                                        }
                                        return c(d, {
                                            inject: function(t) {
                                                var e, i, n;
                                                t && (e = !0 === t.statics ? t : t.statics,
                                                    i = t.beans,
                                                    n = t.preserve,
                                                e !== t && c(this.prototype, t, t.enumerable, i, n),
                                                    c(this, e, null, i, n));
                                                for (var r = 1, s = arguments.length; r < s; r++)
                                                    this.inject(arguments[r]);
                                                return this
                                            },
                                            extend: function() {
                                                for (var t, e, i, n = this, r = 0, a = arguments.length; r < a && (!t || !e); r++)
                                                    i = arguments[r],
                                                        t = t || i.initialize,
                                                        e = e || i.prototype;
                                                return e = (t = t || function() {
                                                        n.apply(this, arguments)
                                                    }
                                                ).prototype = e || s(this.prototype),
                                                    h(e, "constructor", {
                                                        value: t,
                                                        writable: !0,
                                                        configurable: !0
                                                    }),
                                                    c(t, this),
                                                arguments.length && this.inject.apply(t, arguments),
                                                    t.base = n,
                                                    t
                                            }
                                        }).inject({
                                            enumerable: !1,
                                            initialize: d,
                                            set: d,
                                            inject: function() {
                                                for (var t = 0, e = arguments.length; t < e; t++) {
                                                    var i = arguments[t];
                                                    i && c(this, i, i.enumerable, i.beans, i.preserve)
                                                }
                                                return this
                                            },
                                            extend: function() {
                                                var t = s(this);
                                                return t.inject.apply(t, arguments)
                                            },
                                            each: function(t, i) {
                                                return e(this, t, i)
                                            },
                                            clone: function() {
                                                return new this.constructor(this)
                                            },
                                            statics: {
                                                set: u,
                                                each: e,
                                                create: s,
                                                define: h,
                                                describe: a,
                                                clone: function(t) {
                                                    return u(new t.constructor, t)
                                                },
                                                isPlainObject: function(t) {
                                                    return (t = null != t && t.constructor) && (t === Object || t === d || "Object" === t.name)
                                                },
                                                pick: function(t, e) {
                                                    return t !== o ? t : e
                                                },
                                                slice: function(t, e, i) {
                                                    return r.call(t, e, i)
                                                }
                                            }
                                        })
                                    }
                                ;
                                (t.exports = u).inject({
                                    enumerable: !1,
                                    toString: function() {
                                        return null != this._id ? (this._class || "Object") + (this._name ? " '" + this._name + "'" : " @" + this._id) : "{ " + u.each(this, (function(t, e) {
                                                /^_/.test(e) || this.push(e + ": " + ("number" == (e = typeof t) ? m.instance.number(t) : "string" == e ? "'" + t + "'" : t))
                                            }
                                        ), []).join(", ") + " }"
                                    },
                                    getClassName: function() {
                                        return this._class || ""
                                    },
                                    importJSON: function(t) {
                                        return u.importJSON(t, this)
                                    },
                                    exportJSON: function(t) {
                                        return u.exportJSON(this, t)
                                    },
                                    toJSON: function() {
                                        return u.serialize(this)
                                    },
                                    set: function(t, e) {
                                        return t && u.filter(this, t, e, this._prioritize),
                                            this
                                    }
                                }, {
                                    beans: !1,
                                    statics: {
                                        exports: {},
                                        extend: function t() {
                                            var e = t.base.apply(this, arguments)
                                                , i = e.prototype._class;
                                            return i && !u.exports[i] && (u.exports[i] = e),
                                                e
                                        },
                                        equals: function(t, e) {
                                            if (t === e)
                                                return !0;
                                            if (t && t.equals)
                                                return t.equals(e);
                                            if (e && e.equals)
                                                return e.equals(t);
                                            if (t && e && "object" == typeof t && "object" == typeof e) {
                                                if (Array.isArray(t) && Array.isArray(e)) {
                                                    if ((i = t.length) !== e.length)
                                                        return !1;
                                                    for (; i--; )
                                                        if (!u.equals(t[i], e[i]))
                                                            return !1
                                                } else {
                                                    var i, n = Object.keys(t);
                                                    if ((i = n.length) !== Object.keys(e).length)
                                                        return !1;
                                                    for (; i--; ) {
                                                        var r = n[i];
                                                        if (!e.hasOwnProperty(r) || !u.equals(t[r], e[r]))
                                                            return !1
                                                    }
                                                }
                                                return !0
                                            }
                                            return !1
                                        },
                                        read: function(t, e, i, n) {
                                            if (this === u) {
                                                var r = this.peek(t, e);
                                                return t.__index++,
                                                    r
                                            }
                                            var s = this.prototype
                                                , a = s._readIndex
                                                , h = e || a && t.__index || 0;
                                            r = t.length;
                                            return n = n || r - h,
                                                (e = t[h])instanceof this || i && i.readNull && null == e && n <= 1 ? (a && (t.__index = h + 1),
                                                    e && i && i.clone ? e.clone() : e) : (e = u.create(s),
                                                a && (e.__read = !0),
                                                    e = e.initialize.apply(e, 0 < h || h + n < r ? u.slice(t, h, h + n) : t) || e,
                                                a && (t.__index = h + e.__read,
                                                (h = e.__filtered) && (t.__filtered = h,
                                                    e.__filtered = o),
                                                    e.__read = o),
                                                    e)
                                        },
                                        peek: function(t, e) {
                                            return t[t.__index = e || t.__index || 0]
                                        },
                                        remain: function(t) {
                                            return t.length - (t.__index || 0)
                                        },
                                        readList: function(t, e, i, n) {
                                            for (var r, s = [], a = (e = e || 0,
                                                n ? e + n : t.length), o = e; o < a; o++)
                                                s.push(Array.isArray(r = t[o]) ? this.read(r, 0, i) : this.read(t, o, i, 1));
                                            return s
                                        },
                                        readNamed: function(t, e, i, n, r) {
                                            var s, a, h = this.getNamed(t, e), l = h !== o;
                                            return l && ((a = t.__filtered) || (s = this.getSource(t),
                                                (a = t.__filtered = u.create(s)).__unfiltered = s),
                                                a[e] = o),
                                                this.read(l ? [h] : t, i, n, r)
                                        },
                                        readSupported: function(t, e) {
                                            var i = this.getSource(t)
                                                , n = this
                                                , r = !1;
                                            return i && Object.keys(i).forEach((function(i) {
                                                    var s;
                                                    i in e && ((s = n.readNamed(t, i)) !== o && (e[i] = s),
                                                        r = !0)
                                                }
                                            )),
                                                r
                                        },
                                        getSource: function(t) {
                                            var e, i = t.__source;
                                            return i === o && (e = 1 === t.length && t[0],
                                                i = t.__source = e && u.isPlainObject(e) ? e : null),
                                                i
                                        },
                                        getNamed: function(t, e) {
                                            var i = this.getSource(t);
                                            if (i)
                                                return e ? i[e] : t.__filtered || i
                                        },
                                        hasNamed: function(t, e) {
                                            return !!this.getNamed(t, e)
                                        },
                                        filter: function(t, e, i, n) {
                                            var r;
                                            function s(n) {
                                                var s;
                                                i && n in i || r && n in r || (s = e[n]) !== o && (t[n] = s)
                                            }
                                            if (n) {
                                                for (var a, h = {}, l = 0, u = n.length; l < u; l++)
                                                    (a = n[l])in e && (s(a),
                                                        h[a] = !0);
                                                r = h
                                            }
                                            return Object.keys(e.__unfiltered || e).forEach(s),
                                                t
                                        },
                                        isPlainValue: function(t, e) {
                                            return u.isPlainObject(t) || Array.isArray(t) || e && "string" == typeof t
                                        },
                                        serialize: function(t, e, i, n) {
                                            e = e || {};
                                            var r = !n;
                                            if (r && (e.formatter = new m(e.precision),
                                                n = {
                                                    length: 0,
                                                    definitions: {},
                                                    references: {},
                                                    add: function(t, e) {
                                                        var i = "#" + t._id
                                                            , n = this.references[i];
                                                        return n || (this.length++,
                                                            e = e.call(t),
                                                        (t = t._class) && e[0] !== t && e.unshift(t),
                                                            this.definitions[i] = e,
                                                            n = this.references[i] = [i]),
                                                            n
                                                    }
                                                }),
                                            t && t._serialize) {
                                                var s = t._serialize(e, n)
                                                    , a = t._class;
                                                !a || t._compactSerialize || !r && i || s[0] === a || s.unshift(a)
                                            } else if (Array.isArray(t)) {
                                                s = [];
                                                for (var o = 0, h = t.length; o < h; o++)
                                                    s[o] = u.serialize(t[o], e, i, n)
                                            } else if (u.isPlainObject(t)) {
                                                s = {};
                                                var l = Object.keys(t);
                                                for (o = 0,
                                                         h = l.length; o < h; o++) {
                                                    var c = l[o];
                                                    s[c] = u.serialize(t[c], e, i, n)
                                                }
                                            } else
                                                s = "number" == typeof t ? e.formatter.number(t, e.precision) : t;
                                            return r && 0 < n.length ? [["dictionary", n.definitions], s] : s
                                        },
                                        deserialize: function(t, e, i, n, r) {
                                            var s = t
                                                , a = !i
                                                , o = a && t && t.length && "dictionary" === t[0][0];
                                            if (i = i || {},
                                                Array.isArray(t)) {
                                                var h = t[0]
                                                    , l = "dictionary" === h;
                                                if (1 == t.length && /^#/.test(h))
                                                    return i.dictionary[h];
                                                s = [];
                                                for (var c, d = (h = u.exports[h]) ? 1 : 0, p = t.length; d < p; d++)
                                                    s.push(u.deserialize(t[d], e, i, l, o));
                                                h && (c = s,
                                                    s = e ? e(h, c, a || r) : new h(c))
                                            } else if (u.isPlainObject(t))
                                                for (var f in s = {},
                                                n && (i.dictionary = s),
                                                    t)
                                                    s[f] = u.deserialize(t[f], e, i);
                                            return o ? s[1] : s
                                        },
                                        exportJSON: function(t, e) {
                                            return t = u.serialize(t, e),
                                                e && 0 == e.asString ? t : JSON.stringify(t)
                                        },
                                        importJSON: function(t, e) {
                                            return u.deserialize("string" == typeof t ? JSON.parse(t) : t, (function(t, i, n) {
                                                    var r = n && e && e.constructor === t
                                                        , s = r ? e : u.create(t.prototype);
                                                    return !(1 === i.length && s instanceof T) || !r && s instanceof E || (n = i[0],
                                                    u.isPlainObject(n) && (n.insert = !1,
                                                    r && (i = i.concat([{
                                                        insert: !0
                                                    }])))),
                                                        (r ? s.set : t).apply(s, i),
                                                    r && (e = null),
                                                        s
                                                }
                                            ))
                                        },
                                        push: function(t, e) {
                                            var i = e.length;
                                            if (i < 4096)
                                                t.push.apply(t, e);
                                            else {
                                                var n = t.length;
                                                t.length += i;
                                                for (var r = 0; r < i; r++)
                                                    t[n + r] = e[r]
                                            }
                                            return t
                                        },
                                        splice: function(t, e, i, n) {
                                            var r = e && e.length
                                                , s = i === o;
                                            (i = s ? t.length : i) > t.length && (i = t.length);
                                            for (var a = 0; a < r; a++)
                                                e[a]._index = i + a;
                                            if (s)
                                                return u.push(t, e),
                                                    [];
                                            n = [i, n],
                                            e && u.push(n, e);
                                            for (var h = t.splice.apply(t, n), l = (a = 0,
                                                h.length); a < l; a++)
                                                h[a]._index = o;
                                            for (a = i + r,
                                                     l = t.length; a < l; a++)
                                                t[a]._index = a;
                                            return h
                                        },
                                        capitalize: function(t) {
                                            return t.replace(/\b[a-z]/g, (function(t) {
                                                    return t.toUpperCase()
                                                }
                                            ))
                                        },
                                        camelize: function(t) {
                                            return t.replace(/-(.)/g, (function(t, e) {
                                                    return e.toUpperCase()
                                                }
                                            ))
                                        },
                                        hyphenate: function(t) {
                                            return t.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase()
                                        }
                                    }
                                });
                                var c = {
                                    on: function(t, e) {
                                        var i, n;
                                        return "string" != typeof t ? u.each(t, (function(t, e) {
                                                this.on(e, t)
                                            }
                                        ), this) : (i = (n = this._eventTypes) && n[t],
                                        -1 === (n = (n = this._callbacks = this._callbacks || {})[t] = n[t] || []).indexOf(e) && (n.push(e),
                                        i && i.install && 1 === n.length && i.install.call(this, t))),
                                            this
                                    },
                                    off: function(t, e) {
                                        if ("string" == typeof t) {
                                            var i, n, r = (n = this._eventTypes) && n[t];
                                            return (n = this._callbacks && this._callbacks[t]) && (!e || -1 !== (i = n.indexOf(e)) && 1 === n.length ? (r && r.uninstall && r.uninstall.call(this, t),
                                                delete this._callbacks[t]) : -1 !== i && n.splice(i, 1)),
                                                this
                                        }
                                        u.each(t, (function(t, e) {
                                                this.off(e, t)
                                            }
                                        ), this)
                                    },
                                    once: function(t, e) {
                                        return this.on(t, (function i() {
                                                e.apply(this, arguments),
                                                    this.off(t, i)
                                            }
                                        ))
                                    },
                                    emit: function(t, e) {
                                        if (!(r = this._callbacks && this._callbacks[t]))
                                            return !1;
                                        var i = u.slice(arguments, 1)
                                            , n = e && e.target && !e.currentTarget
                                            , r = r.slice();
                                        n && (e.currentTarget = this);
                                        for (var s = 0, a = r.length; s < a; s++)
                                            if (0 == r[s].apply(this, i)) {
                                                e && e.stop && e.stop();
                                                break
                                            }
                                        return n && delete e.currentTarget,
                                            !0
                                    },
                                    responds: function(t) {
                                        return !(!this._callbacks || !this._callbacks[t])
                                    },
                                    attach: "#on",
                                    detach: "#off",
                                    fire: "#emit",
                                    _installEvents: function(t) {
                                        var e, i = this._eventTypes, n = this._callbacks, r = t ? "install" : "uninstall";
                                        if (i)
                                            for (var s in n)
                                                0 < n[s].length && (e = (e = i[s]) && e[r]) && e.call(this, s)
                                    },
                                    statics: {
                                        inject: function t(e) {
                                            var i, n = e._events;
                                            return n && (i = {},
                                                u.each(n, (function(t, n) {
                                                        var r = "string" == typeof t
                                                            , s = r ? t : n
                                                            , a = (n = u.capitalize(s),
                                                            s.substring(2).toLowerCase());
                                                        i[a] = r ? {} : t,
                                                            s = "_" + s,
                                                            e["get" + n] = function() {
                                                                return this[s]
                                                            }
                                                            ,
                                                            e["set" + n] = function(t) {
                                                                var e = this[s];
                                                                e && this.off(a, e),
                                                                t && this.on(a, t),
                                                                    this[s] = t
                                                            }
                                                    }
                                                )),
                                                e._eventTypes = i),
                                                t.base.apply(this, arguments)
                                        }
                                    }
                                }
                                    , d = u.extend({
                                    _class: "PaperScope",
                                    initialize: function t() {
                                        (Ut = this).settings = new u({
                                            applyMatrix: !0,
                                            insertItems: !0,
                                            handleSize: 4,
                                            hitTolerance: 0
                                        }),
                                            this.project = null,
                                            this.projects = [],
                                            this.tools = [],
                                            this._id = t._id++,
                                            t._scopes[this._id] = this;
                                        var e, i, n, r = t.prototype;
                                        this.support || (i = mt.getContext(1, 1) || {},
                                            r.support = {
                                                nativeDash: "setLineDash"in i || "mozDash"in i,
                                                nativeBlendModes: gt.nativeModes
                                            },
                                            mt.release(i)),
                                        this.agent || (e = a.navigator.userAgent.toLowerCase(),
                                            i = (/(darwin|win|mac|linux|freebsd|sunos)/.exec(e) || [])[0],
                                            n = r.agent = r.browser = {
                                                platform: i = "darwin" === i ? "mac" : i
                                            },
                                        i && (n[i] = !0),
                                            e.replace(/(opera|chrome|safari|webkit|firefox|msie|trident|atom|node|jsdom)\/?\s*([.\d]+)(?:.*version\/([.\d]+))?(?:.*rv\:v?([.\d]+))?/g, (function(t, e, i, r, s) {
                                                    n.chrome || (i = "opera" === e ? r : /^(node|trident)$/.test(e) ? s : i,
                                                        n.version = i,
                                                        n.versionNumber = parseFloat(i),
                                                        n.name = e = {
                                                            trident: "msie",
                                                            jsdom: "node"
                                                        }[e] || e,
                                                        n[e] = !0)
                                                }
                                            )),
                                        n.chrome && delete n.webkit,
                                        n.atom && delete n.chrome)
                                    },
                                    version: "0.12.15",
                                    getView: function() {
                                        var t = this.project;
                                        return t && t._view
                                    },
                                    getPaper: function() {
                                        return this
                                    },
                                    execute: function(t, e) {
                                        return e = Ut.PaperScript.execute(t, this, e),
                                            st.updateFocus(),
                                            e
                                    },
                                    install: function(t) {
                                        var e, i = this;
                                        for (e in u.each(["project", "view", "tool"], (function(e) {
                                                u.define(t, e, {
                                                    configurable: !0,
                                                    get: function() {
                                                        return i[e]
                                                    }
                                                })
                                            }
                                        )),
                                            this)
                                            !/^_/.test(e) && this[e] && (t[e] = this[e])
                                    },
                                    setup: function(t) {
                                        return (Ut = this).project = new A(t),
                                            this
                                    },
                                    createCanvas: function(t, e) {
                                        return mt.getCanvas(t, e)
                                    },
                                    activate: function() {
                                        Ut = this
                                    },
                                    clear: function() {
                                        for (var t = this.projects, e = this.tools, i = t.length - 1; 0 <= i; i--)
                                            t[i].remove();
                                        for (i = e.length - 1; 0 <= i; i--)
                                            e[i].remove()
                                    },
                                    remove: function() {
                                        this.clear(),
                                            delete d._scopes[this._id]
                                    },
                                    statics: new function() {
                                        function t(t) {
                                            return t += "Attribute",
                                                function(e, i) {
                                                    return e[t](i) || e[t]("data-paper-" + i)
                                                }
                                        }
                                        return {
                                            _scopes: {},
                                            _id: 0,
                                            get: function(t) {
                                                return this._scopes[t] || null
                                            },
                                            getAttribute: t("get"),
                                            hasAttribute: t("has")
                                        }
                                    }
                                })
                                    , p = u.extend(c, {
                                    initialize: function(t) {
                                        this._scope = Ut,
                                            this._index = this._scope[this._list].push(this) - 1,
                                        !t && this._scope[this._reference] || this.activate()
                                    },
                                    activate: function() {
                                        if (!this._scope)
                                            return !1;
                                        var t = this._scope[this._reference];
                                        return t && t !== this && t.emit("deactivate"),
                                            (this._scope[this._reference] = this).emit("activate", t),
                                            !0
                                    },
                                    isActive: function() {
                                        return this._scope[this._reference] === this
                                    },
                                    remove: function() {
                                        return null != this._index && (u.splice(this._scope[this._list], null, this._index, 1),
                                        this._scope[this._reference] == this && (this._scope[this._reference] = null),
                                            !(this._scope = null))
                                    },
                                    getView: function() {
                                        return this._scope.getView()
                                    }
                                })
                                    , f = {
                                    findItemBoundsCollisions: function(t, e, i) {
                                        function n(t) {
                                            for (var e = new Array(t.length), i = 0; i < t.length; i++) {
                                                var n = t[i].getBounds();
                                                e[i] = [n.left, n.top, n.right, n.bottom]
                                            }
                                            return e
                                        }
                                        var r = n(t);
                                        e = e && e !== t ? n(e) : r;
                                        return this.findBoundsCollisions(r, e, i || 0)
                                    },
                                    findCurveBoundsCollisions: function(t, e, i, n) {
                                        function r(t) {
                                            for (var e = Math.min, i = Math.max, n = new Array(t.length), r = 0; r < t.length; r++) {
                                                var s = t[r];
                                                n[r] = [e(s[0], s[2], s[4], s[6]), e(s[1], s[3], s[5], s[7]), i(s[0], s[2], s[4], s[6]), i(s[1], s[3], s[5], s[7])]
                                            }
                                            return n
                                        }
                                        var s = r(t);
                                        e = e && e !== t ? r(e) : s;
                                        if (n) {
                                            for (var a = this.findBoundsCollisions(s, e, i || 0, !1, !0), o = this.findBoundsCollisions(s, e, i || 0, !0, !0), h = [], l = 0, u = a.length; l < u; l++)
                                                h[l] = {
                                                    hor: a[l],
                                                    ver: o[l]
                                                };
                                            return h
                                        }
                                        return this.findBoundsCollisions(s, e, i || 0)
                                    },
                                    findBoundsCollisions: function(t, e, i, n, r) {
                                        var s = !e || t === e
                                            , a = s ? t : t.concat(e)
                                            , o = t.length
                                            , h = a.length;
                                        function l(t, e, i) {
                                            for (var n = 0, r = t.length; n < r; ) {
                                                var s = r + n >>> 1;
                                                a[t[s]][e] < i ? n = 1 + s : r = s
                                            }
                                            return n - 1
                                        }
                                        for (var u = n ? 1 : 0, c = 2 + u, d = n ? 0 : 1, p = 2 + d, f = new Array(h), m = 0; m < h; m++)
                                            f[m] = m;
                                        f.sort((function(t, e) {
                                                return a[t][u] - a[e][u]
                                            }
                                        ));
                                        var g = []
                                            , v = new Array(o);
                                        for (m = 0; m < h; m++) {
                                            var _ = f[m]
                                                , y = a[_]
                                                , x = s ? _ : _ - o
                                                , b = _ < o
                                                , w = s || !b
                                                , S = b ? [] : null;
                                            if (g.length) {
                                                var M = l(g, c, y[u] - i) + 1;
                                                if (g.splice(0, M),
                                                s && r) {
                                                    S = S.concat(g);
                                                    for (var C = 0; C < g.length; C++)
                                                        v[P = g[C]].push(x)
                                                } else {
                                                    var A = y[p]
                                                        , T = y[d];
                                                    for (C = 0; C < g.length; C++) {
                                                        var P = g[C]
                                                            , E = a[P]
                                                            , L = P < o
                                                            , I = s || o <= P;
                                                        (r || (b && I || w && L) && A >= E[d] - i && T <= E[p] + i) && (b && I && S.push(s ? P : P - o),
                                                        w && L && v[P].push(x))
                                                    }
                                                }
                                            }
                                            b && (t === e && S.push(_),
                                                v[_] = S),
                                                g.length ? (y = l(g, c, y[c]),
                                                    g.splice(y + 1, 0, _)) : g.push(_)
                                        }
                                        for (m = 0; m < v.length; m++) {
                                            var k = v[m];
                                            k && k.sort((function(t, e) {
                                                    return t - e
                                                }
                                            ))
                                        }
                                        return v
                                    }
                                }
                                    , m = u.extend({
                                    initialize: function(t) {
                                        this.precision = u.pick(t, 5),
                                            this.multiplier = Math.pow(10, this.precision)
                                    },
                                    number: function(t) {
                                        return this.precision < 16 ? Math.round(t * this.multiplier) / this.multiplier : t
                                    },
                                    pair: function(t, e, i) {
                                        return this.number(t) + (i || ",") + this.number(e)
                                    },
                                    point: function(t, e) {
                                        return this.number(t.x) + (e || ",") + this.number(t.y)
                                    },
                                    size: function(t, e) {
                                        return this.number(t.width) + (e || ",") + this.number(t.height)
                                    },
                                    rectangle: function(t, e) {
                                        return this.point(t, e) + (e || ",") + this.size(t, e)
                                    }
                                });
                                m.instance = new m;
                                var g = new function() {
                                    var t = [[.5773502691896257], [0, .7745966692414834], [.33998104358485626, .8611363115940526], [0, .5384693101056831, .906179845938664], [.2386191860831969, .6612093864662645, .932469514203152], [0, .4058451513773972, .7415311855993945, .9491079123427585], [.1834346424956498, .525532409916329, .7966664774136267, .9602898564975363], [0, .3242534234038089, .6133714327005904, .8360311073266358, .9681602395076261], [.14887433898163122, .4333953941292472, .6794095682990244, .8650633666889845, .9739065285171717], [0, .26954315595234496, .5190961292068118, .7301520055740494, .8870625997680953, .978228658146057], [.1252334085114689, .3678314989981802, .5873179542866175, .7699026741943047, .9041172563704749, .9815606342467192], [0, .2304583159551348, .44849275103644687, .6423493394403402, .8015780907333099, .9175983992229779, .9841830547185881], [.10805494870734367, .31911236892788974, .5152486363581541, .6872929048116855, .827201315069765, .9284348836635735, .9862838086968123], [0, .20119409399743451, .3941513470775634, .5709721726085388, .7244177313601701, .8482065834104272, .937273392400706, .9879925180204854], [.09501250983763744, .2816035507792589, .45801677765722737, .6178762444026438, .755404408355003, .8656312023878318, .9445750230732326, .9894009349916499]]
                                        , e = [[1], [.8888888888888888, .5555555555555556], [.6521451548625461, .34785484513745385], [.5688888888888889, .47862867049936647, .23692688505618908], [.46791393457269104, .3607615730481386, .17132449237917036], [.4179591836734694, .3818300505051189, .27970539148927664, .1294849661688697], [.362683783378362, .31370664587788727, .22238103445337448, .10122853629037626], [.3302393550012598, .31234707704000286, .26061069640293544, .1806481606948574, .08127438836157441], [.29552422471475287, .26926671930999635, .21908636251598204, .1494513491505806, .06667134430868814], [.2729250867779006, .26280454451024665, .23319376459199048, .18629021092773426, .1255803694649046, .05566856711617366], [.24914704581340277, .2334925365383548, .20316742672306592, .16007832854334622, .10693932599531843, .04717533638651183], [.2325515532308739, .22628318026289723, .2078160475368885, .17814598076194574, .13887351021978725, .09212149983772845, .04048400476531588], [.2152638534631578, .2051984637212956, .18553839747793782, .15720316715819355, .12151857068790319, .08015808715976021, .03511946033175186], [.2025782419255613, .19843148532711158, .1861610000155622, .16626920581699392, .13957067792615432, .10715922046717194, .07036604748810812, .03075324199611727], [.1894506104550685, .18260341504492358, .16915651939500254, .14959598881657674, .12462897125553388, .09515851168249279, .062253523938647894, .027152459411754096]]
                                        , i = Math.abs
                                        , n = Math.sqrt
                                        , r = Math.pow
                                        , s = Math.log2 || function(t) {
                                        return Math.log(t) * Math.LOG2E
                                    }
                                        , a = 1e-12
                                        , o = 112e-18;
                                    function h(t, e, i) {
                                        return t < e ? e : i < t ? i : t
                                    }
                                    function l(t, e, n) {
                                        function r(t) {
                                            var e;
                                            return [e = t - (e = 134217729 * t) + e, t - e]
                                        }
                                        var s, a, o = e * e - t * n, h = e * e + t * n;
                                        return 3 * i(o) < h && (s = r(t),
                                            a = r(e),
                                            h = r(n),
                                            o = (e *= e) - (n *= t) + (a[0] * a[0] - e + 2 * a[0] * a[1] + a[1] * a[1] - (s[0] * h[0] - n + s[0] * h[1] + s[1] * h[0] + s[1] * h[1]))),
                                            o
                                    }
                                    function u() {
                                        var t = Math.max.apply(Math, arguments);
                                        return t && (t < 1e-8 || 1e8 < t) ? r(2, -Math.round(s(t))) : 0
                                    }
                                    return {
                                        EPSILON: a,
                                        MACHINE_EPSILON: o,
                                        CURVETIME_EPSILON: 1e-8,
                                        GEOMETRIC_EPSILON: 1e-7,
                                        TRIGONOMETRIC_EPSILON: 1e-8,
                                        KAPPA: 4 * (n(2) - 1) / 3,
                                        isZero: function(t) {
                                            return -a <= t && t <= a
                                        },
                                        isMachineZero: function(t) {
                                            return -o <= t && t <= o
                                        },
                                        clamp: h,
                                        integrate: function(i, n, r, s) {
                                            for (var a = t[s - 2], o = e[s - 2], h = .5 * (r - n), l = h + n, u = 0, c = s + 1 >> 1, d = 1 & s ? o[u++] * i(l) : 0; u < c; ) {
                                                var p = h * a[u];
                                                d += o[u++] * (i(l + p) + i(l - p))
                                            }
                                            return h * d
                                        },
                                        findRoot: function(t, e, n, r, s, a, o) {
                                            for (var l = 0; l < a; l++) {
                                                var u = t(n)
                                                    , c = u / e(n)
                                                    , d = n - c;
                                                if (i(c) < o) {
                                                    n = d;
                                                    break
                                                }
                                                n = 0 < u ? (s = n,
                                                    d <= r ? .5 * (r + s) : d) : (r = n,
                                                    s <= d ? .5 * (r + s) : d)
                                            }
                                            return h(n, r, s)
                                        },
                                        solveQuadratic: function(t, e, r, s, c, d) {
                                            var p, f = 1 / 0;
                                            if (i(t) < a) {
                                                if (i(e) < a)
                                                    return i(r) < a ? -1 : 0;
                                                p = -r / e
                                            } else {
                                                var m, g = l(t, e *= -.5, r);
                                                g && i(g) < o && (m = u(i(t), i(e), i(r))) && (g = l(t *= m, e *= m, r *= m)),
                                                -o <= g && (v = g < 0 ? 0 : n(g),
                                                    f = 0 === (_ = e + (e < 0 ? -v : v)) ? -(p = r / t) : (p = _ / t,
                                                    r / _))
                                            }
                                            var v = 0
                                                , _ = (t = null == c,
                                                r = c - a,
                                            d + a);
                                            return isFinite(p) && (t || r < p && p < _) && (s[v++] = t ? p : h(p, c, d)),
                                            f !== p && isFinite(f) && (t || r < f && f < _) && (s[v++] = t ? f : h(f, c, d)),
                                                v
                                        },
                                        solveCubic: function(t, e, s, l, c, d, p) {
                                            var f, m, v, _, y, x = u(i(t), i(e), i(s), i(l));
                                            function b(i) {
                                                i = t * (f = i),
                                                    _ = (i + (m = i + e)) * f + (v = m * f + s),
                                                    y = v * f + l
                                            }
                                            if (x && (t *= x,
                                                e *= x,
                                                s *= x,
                                                l *= x),
                                            i(t) < a)
                                                t = e,
                                                    m = s,
                                                    v = l,
                                                    f = 1 / 0;
                                            else if (i(l) < a)
                                                m = e,
                                                    v = s,
                                                    f = 0;
                                            else {
                                                b(-e / t / 3);
                                                var w = r(i(M = y / t), 1 / 3)
                                                    , S = M < 0 ? -1 : 1
                                                    , M = 0 < (M = -_ / t) ? 1.324717957244746 * Math.max(w, n(M)) : w
                                                    , C = f - S * M;
                                                if (C !== f) {
                                                    for (; b(C),
                                                           S * f < S * (C = 0 === _ ? f : f - y / _ / (1 + o)); )
                                                        ;
                                                    i(t) * f * f > i(l / f) && (m = ((v = -l / f) - s) / f)
                                                }
                                            }
                                            return w = g.solveQuadratic(t, m, v, c, d, p),
                                                M = null == d,
                                            isFinite(f) && (0 === w || 0 < w && f !== c[0] && f !== c[1]) && (M || d - a < f && f < p + a) && (c[w++] = M ? f : h(f, d, p)),
                                                w
                                        }
                                    }
                                }
                                    , v = {
                                    _id: 1,
                                    _pools: {},
                                    get: function(t) {
                                        if (t) {
                                            var e = this._pools[t];
                                            return (e = e || (this._pools[t] = {
                                                _id: 1
                                            }))._id++
                                        }
                                        return this._id++
                                    }
                                }
                                    , _ = u.extend({
                                    _class: "Point",
                                    _readIndex: !0,
                                    initialize: function(t, e) {
                                        var i, n = typeof t, r = this.__read, s = 0;
                                        return "number" == n ? (this._set(t, (i = "number" == typeof e) ? e : t),
                                        r && (s = i ? 2 : 1)) : "undefined" == n || null === t ? (this._set(0, 0),
                                        r && (s = null === t ? 1 : 0)) : (t = "string" == n ? t.split(/[\s,]+/) || [] : t,
                                            s = 1,
                                            Array.isArray(t) ? this._set(+t[0], +(1 < t.length ? t[1] : t[0])) : "x"in t ? this._set(t.x || 0, t.y || 0) : "width"in t ? this._set(t.width || 0, t.height || 0) : "angle"in t ? (this._set(t.length || 0, 0),
                                                this.setAngle(t.angle || 0)) : (this._set(0, 0),
                                                s = 0)),
                                        r && (this.__read = s),
                                            this
                                    },
                                    set: "#initialize",
                                    _set: function(t, e) {
                                        return this.x = t,
                                            this.y = e,
                                            this
                                    },
                                    equals: function(t) {
                                        return this === t || t && (this.x === t.x && this.y === t.y || Array.isArray(t) && this.x === t[0] && this.y === t[1]) || !1
                                    },
                                    clone: function() {
                                        return new _(this.x,this.y)
                                    },
                                    toString: function() {
                                        var t = m.instance;
                                        return "{ x: " + t.number(this.x) + ", y: " + t.number(this.y) + " }"
                                    },
                                    _serialize: function(t) {
                                        return [(t = t.formatter).number(this.x), t.number(this.y)]
                                    },
                                    getLength: function() {
                                        return Math.sqrt(this.x * this.x + this.y * this.y)
                                    },
                                    setLength: function(t) {
                                        var e;
                                        this.isZero() ? (e = this._angle || 0,
                                            this._set(Math.cos(e) * t, Math.sin(e) * t)) : (t /= this.getLength(),
                                        g.isZero(t) && this.getAngle(),
                                            this._set(this.x * t, this.y * t))
                                    },
                                    getAngle: function() {
                                        return 180 * this.getAngleInRadians.apply(this, arguments) / Math.PI
                                    },
                                    setAngle: function(t) {
                                        this.setAngleInRadians.call(this, t * Math.PI / 180)
                                    },
                                    getAngleInDegrees: "#getAngle",
                                    setAngleInDegrees: "#setAngle",
                                    getAngleInRadians: function() {
                                        if (arguments.length) {
                                            var t = _.read(arguments)
                                                , e = this.getLength() * t.getLength();
                                            return g.isZero(e) ? NaN : (e = this.dot(t) / e,
                                                Math.acos(e < -1 ? -1 : 1 < e ? 1 : e))
                                        }
                                        return this.isZero() ? this._angle || 0 : this._angle = Math.atan2(this.y, this.x)
                                    },
                                    setAngleInRadians: function(t) {
                                        var e;
                                        this._angle = t,
                                        this.isZero() || (e = this.getLength(),
                                            this._set(Math.cos(t) * e, Math.sin(t) * e))
                                    },
                                    getQuadrant: function() {
                                        return 0 <= this.x ? 0 <= this.y ? 1 : 4 : 0 <= this.y ? 2 : 3
                                    }
                                }, {
                                    beans: !1,
                                    getDirectedAngle: function() {
                                        var t = _.read(arguments);
                                        return 180 * Math.atan2(this.cross(t), this.dot(t)) / Math.PI
                                    },
                                    getDistance: function() {
                                        var t = arguments
                                            , e = (i = _.read(t)).x - this.x
                                            , i = e * e + (i = i.y - this.y) * i;
                                        return u.read(t) ? i : Math.sqrt(i)
                                    },
                                    normalize: function(t) {
                                        t === o && (t = 1);
                                        t = 0 !== (e = this.getLength()) ? t / e : 0;
                                        var e = new _(this.x * t,this.y * t);
                                        return 0 <= t && (e._angle = this._angle),
                                            e
                                    },
                                    rotate: function(t, e) {
                                        if (0 === t)
                                            return this.clone();
                                        t = t * Math.PI / 180;
                                        var i = e ? this.subtract(e) : this
                                            , n = Math.sin(t);
                                        t = Math.cos(t),
                                            i = new _(i.x * t - i.y * n,i.x * n + i.y * t);
                                        return e ? i.add(e) : i
                                    },
                                    transform: function(t) {
                                        return t ? t._transformPoint(this) : this
                                    },
                                    add: function() {
                                        var t = _.read(arguments);
                                        return new _(this.x + t.x,this.y + t.y)
                                    },
                                    subtract: function() {
                                        var t = _.read(arguments);
                                        return new _(this.x - t.x,this.y - t.y)
                                    },
                                    multiply: function() {
                                        var t = _.read(arguments);
                                        return new _(this.x * t.x,this.y * t.y)
                                    },
                                    divide: function() {
                                        var t = _.read(arguments);
                                        return new _(this.x / t.x,this.y / t.y)
                                    },
                                    modulo: function() {
                                        var t = _.read(arguments);
                                        return new _(this.x % t.x,this.y % t.y)
                                    },
                                    negate: function() {
                                        return new _(-this.x,-this.y)
                                    },
                                    isInside: function() {
                                        return w.read(arguments).contains(this)
                                    },
                                    isClose: function() {
                                        var t = arguments
                                            , e = _.read(t);
                                        t = u.read(t);
                                        return this.getDistance(e) <= t
                                    },
                                    isCollinear: function() {
                                        var t = _.read(arguments);
                                        return _.isCollinear(this.x, this.y, t.x, t.y)
                                    },
                                    isColinear: "#isCollinear",
                                    isOrthogonal: function() {
                                        var t = _.read(arguments);
                                        return _.isOrthogonal(this.x, this.y, t.x, t.y)
                                    },
                                    isZero: function() {
                                        var t = g.isZero;
                                        return t(this.x) && t(this.y)
                                    },
                                    isNaN: function() {
                                        return isNaN(this.x) || isNaN(this.y)
                                    },
                                    isInQuadrant: function(t) {
                                        return 0 <= this.x * (1 < t && t < 4 ? -1 : 1) && 0 <= this.y * (2 < t ? -1 : 1)
                                    },
                                    dot: function() {
                                        var t = _.read(arguments);
                                        return this.x * t.x + this.y * t.y
                                    },
                                    cross: function() {
                                        var t = _.read(arguments);
                                        return this.x * t.y - this.y * t.x
                                    },
                                    project: function() {
                                        var t = _.read(arguments)
                                            , e = t.isZero() ? 0 : this.dot(t) / t.dot(t);
                                        return new _(t.x * e,t.y * e)
                                    },
                                    statics: {
                                        min: function() {
                                            var t = arguments
                                                , e = _.read(t);
                                            t = _.read(t);
                                            return new _(Math.min(e.x, t.x),Math.min(e.y, t.y))
                                        },
                                        max: function() {
                                            var t = arguments
                                                , e = _.read(t);
                                            t = _.read(t);
                                            return new _(Math.max(e.x, t.x),Math.max(e.y, t.y))
                                        },
                                        random: function() {
                                            return new _(Math.random(),Math.random())
                                        },
                                        isCollinear: function(t, e, i, n) {
                                            return Math.abs(t * n - e * i) <= 1e-8 * Math.sqrt((t * t + e * e) * (i * i + n * n))
                                        },
                                        isOrthogonal: function(t, e, i, n) {
                                            return Math.abs(t * i + e * n) <= 1e-8 * Math.sqrt((t * t + e * e) * (i * i + n * n))
                                        }
                                    }
                                }, u.each(["round", "ceil", "floor", "abs"], (function(t) {
                                        var e = Math[t];
                                        this[t] = function() {
                                            return new _(e(this.x),e(this.y))
                                        }
                                    }
                                ), {}))
                                    , y = _.extend({
                                    initialize: function(t, e, i, n) {
                                        this._x = t,
                                            this._y = e,
                                            this._owner = i,
                                            this._setter = n
                                    },
                                    _set: function(t, e, i) {
                                        return this._x = t,
                                            this._y = e,
                                        i || this._owner[this._setter](this),
                                            this
                                    },
                                    getX: function() {
                                        return this._x
                                    },
                                    setX: function(t) {
                                        this._x = t,
                                            this._owner[this._setter](this)
                                    },
                                    getY: function() {
                                        return this._y
                                    },
                                    setY: function(t) {
                                        this._y = t,
                                            this._owner[this._setter](this)
                                    },
                                    isSelected: function() {
                                        return !!(this._owner._selection & this._getSelection())
                                    },
                                    setSelected: function(t) {
                                        this._owner._changeSelection(this._getSelection(), t)
                                    },
                                    _getSelection: function() {
                                        return "setPosition" === this._setter ? 4 : 0
                                    }
                                })
                                    , x = u.extend({
                                    _class: "Size",
                                    _readIndex: !0,
                                    initialize: function(t, e) {
                                        var i, n = typeof t, r = this.__read, s = 0;
                                        return "number" == n ? (this._set(t, (i = "number" == typeof e) ? e : t),
                                        r && (s = i ? 2 : 1)) : "undefined" == n || null === t ? (this._set(0, 0),
                                        r && (s = null === t ? 1 : 0)) : (t = "string" == n ? t.split(/[\s,]+/) || [] : t,
                                            s = 1,
                                            Array.isArray(t) ? this._set(+t[0], +(1 < t.length ? t[1] : t[0])) : "width"in t ? this._set(t.width || 0, t.height || 0) : "x"in t ? this._set(t.x || 0, t.y || 0) : (this._set(0, 0),
                                                s = 0)),
                                        r && (this.__read = s),
                                            this
                                    },
                                    set: "#initialize",
                                    _set: function(t, e) {
                                        return this.width = t,
                                            this.height = e,
                                            this
                                    },
                                    equals: function(t) {
                                        return t === this || t && (this.width === t.width && this.height === t.height || Array.isArray(t) && this.width === t[0] && this.height === t[1]) || !1
                                    },
                                    clone: function() {
                                        return new x(this.width,this.height)
                                    },
                                    toString: function() {
                                        var t = m.instance;
                                        return "{ width: " + t.number(this.width) + ", height: " + t.number(this.height) + " }"
                                    },
                                    _serialize: function(t) {
                                        return [(t = t.formatter).number(this.width), t.number(this.height)]
                                    },
                                    add: function() {
                                        var t = x.read(arguments);
                                        return new x(this.width + t.width,this.height + t.height)
                                    },
                                    subtract: function() {
                                        var t = x.read(arguments);
                                        return new x(this.width - t.width,this.height - t.height)
                                    },
                                    multiply: function() {
                                        var t = x.read(arguments);
                                        return new x(this.width * t.width,this.height * t.height)
                                    },
                                    divide: function() {
                                        var t = x.read(arguments);
                                        return new x(this.width / t.width,this.height / t.height)
                                    },
                                    modulo: function() {
                                        var t = x.read(arguments);
                                        return new x(this.width % t.width,this.height % t.height)
                                    },
                                    negate: function() {
                                        return new x(-this.width,-this.height)
                                    },
                                    isZero: function() {
                                        var t = g.isZero;
                                        return t(this.width) && t(this.height)
                                    },
                                    isNaN: function() {
                                        return isNaN(this.width) || isNaN(this.height)
                                    },
                                    statics: {
                                        min: function(t, e) {
                                            return new x(Math.min(t.width, e.width),Math.min(t.height, e.height))
                                        },
                                        max: function(t, e) {
                                            return new x(Math.max(t.width, e.width),Math.max(t.height, e.height))
                                        },
                                        random: function() {
                                            return new x(Math.random(),Math.random())
                                        }
                                    }
                                }, u.each(["round", "ceil", "floor", "abs"], (function(t) {
                                        var e = Math[t];
                                        this[t] = function() {
                                            return new x(e(this.width),e(this.height))
                                        }
                                    }
                                ), {}))
                                    , b = x.extend({
                                    initialize: function(t, e, i, n) {
                                        this._width = t,
                                            this._height = e,
                                            this._owner = i,
                                            this._setter = n
                                    },
                                    _set: function(t, e, i) {
                                        return this._width = t,
                                            this._height = e,
                                        i || this._owner[this._setter](this),
                                            this
                                    },
                                    getWidth: function() {
                                        return this._width
                                    },
                                    setWidth: function(t) {
                                        this._width = t,
                                            this._owner[this._setter](this)
                                    },
                                    getHeight: function() {
                                        return this._height
                                    },
                                    setHeight: function(t) {
                                        this._height = t,
                                            this._owner[this._setter](this)
                                    }
                                })
                                    , w = u.extend({
                                    _class: "Rectangle",
                                    _readIndex: !0,
                                    beans: !0,
                                    initialize: function(t, e, i, n) {
                                        var r, s, a, h, l, c, d = arguments, p = typeof t;
                                        return "number" == p ? (this._set(t, e, i, n),
                                            r = 4) : "undefined" == p || null === t ? (this._set(0, 0, 0, 0),
                                            r = null === t ? 1 : 0) : 1 === d.length && (Array.isArray(t) ? (this._set.apply(this, t),
                                            r = 1) : t.x !== o || t.width !== o ? (this._set(t.x || 0, t.y || 0, t.width || 0, t.height || 0),
                                            r = 1) : t.from === o && t.to === o && (this._set(0, 0, 0, 0),
                                        u.readSupported(d, this) && (r = 1))),
                                        r === o && (a = _.readNamed(d, "from"),
                                            s = u.peek(d),
                                            p = a.x,
                                            a = a.y,
                                            s && s.x !== o || u.hasNamed(d, "to") ? (h = (c = _.readNamed(d, "to")).x - p,
                                                l = c.y - a,
                                            h < 0 && (p = c.x,
                                                h = -h),
                                            l < 0 && (a = c.y,
                                                l = -l)) : (h = (c = x.read(d)).width,
                                                l = c.height),
                                            this._set(p, a, h, l),
                                            r = d.__index),
                                        (d = d.__filtered) && (this.__filtered = d),
                                        this.__read && (this.__read = r),
                                            this
                                    },
                                    set: "#initialize",
                                    _set: function(t, e, i, n) {
                                        return this.x = t,
                                            this.y = e,
                                            this.width = i,
                                            this.height = n,
                                            this
                                    },
                                    clone: function() {
                                        return new w(this.x,this.y,this.width,this.height)
                                    },
                                    equals: function(t) {
                                        var e = u.isPlainValue(t) ? w.read(arguments) : t;
                                        return e === this || e && this.x === e.x && this.y === e.y && this.width === e.width && this.height === e.height || !1
                                    },
                                    toString: function() {
                                        var t = m.instance;
                                        return "{ x: " + t.number(this.x) + ", y: " + t.number(this.y) + ", width: " + t.number(this.width) + ", height: " + t.number(this.height) + " }"
                                    },
                                    _serialize: function(t) {
                                        return [(t = t.formatter).number(this.x), t.number(this.y), t.number(this.width), t.number(this.height)]
                                    },
                                    getPoint: function(t) {
                                        return new (t ? _ : y)(this.x,this.y,this,"setPoint")
                                    },
                                    setPoint: function() {
                                        var t = _.read(arguments);
                                        this.x = t.x,
                                            this.y = t.y
                                    },
                                    getSize: function(t) {
                                        return new (t ? x : b)(this.width,this.height,this,"setSize")
                                    },
                                    _fw: 1,
                                    _fh: 1,
                                    setSize: function() {
                                        var t = x.read(arguments)
                                            , e = this._sx
                                            , i = this._sy
                                            , n = t.width;
                                        t = t.height;
                                        e && (this.x += (this.width - n) * e),
                                        i && (this.y += (this.height - t) * i),
                                            this.width = n,
                                            this.height = t,
                                            this._fw = this._fh = 1
                                    },
                                    getLeft: function() {
                                        return this.x
                                    },
                                    setLeft: function(t) {
                                        var e;
                                        this._fw || (e = t - this.x,
                                            this.width -= .5 === this._sx ? 2 * e : e),
                                            this.x = t,
                                            this._sx = this._fw = 0
                                    },
                                    getTop: function() {
                                        return this.y
                                    },
                                    setTop: function(t) {
                                        var e;
                                        this._fh || (e = t - this.y,
                                            this.height -= .5 === this._sy ? 2 * e : e),
                                            this.y = t,
                                            this._sy = this._fh = 0
                                    },
                                    getRight: function() {
                                        return this.x + this.width
                                    },
                                    setRight: function(t) {
                                        var e;
                                        this._fw || (e = t - this.x,
                                            this.width = .5 === this._sx ? 2 * e : e),
                                            this.x = t - this.width,
                                            this._sx = 1,
                                            this._fw = 0
                                    },
                                    getBottom: function() {
                                        return this.y + this.height
                                    },
                                    setBottom: function(t) {
                                        var e;
                                        this._fh || (e = t - this.y,
                                            this.height = .5 === this._sy ? 2 * e : e),
                                            this.y = t - this.height,
                                            this._sy = 1,
                                            this._fh = 0
                                    },
                                    getCenterX: function() {
                                        return this.x + this.width / 2
                                    },
                                    setCenterX: function(t) {
                                        this._fw || .5 === this._sx ? this.x = t - this.width / 2 : (this._sx && (this.x += 2 * (t - this.x) * this._sx),
                                            this.width = 2 * (t - this.x)),
                                            this._sx = .5,
                                            this._fw = 0
                                    },
                                    getCenterY: function() {
                                        return this.y + this.height / 2
                                    },
                                    setCenterY: function(t) {
                                        this._fh || .5 === this._sy ? this.y = t - this.height / 2 : (this._sy && (this.y += 2 * (t - this.y) * this._sy),
                                            this.height = 2 * (t - this.y)),
                                            this._sy = .5,
                                            this._fh = 0
                                    },
                                    getCenter: function(t) {
                                        return new (t ? _ : y)(this.getCenterX(),this.getCenterY(),this,"setCenter")
                                    },
                                    setCenter: function() {
                                        var t = _.read(arguments);
                                        return this.setCenterX(t.x),
                                            this.setCenterY(t.y),
                                            this
                                    },
                                    getArea: function() {
                                        return this.width * this.height
                                    },
                                    isEmpty: function() {
                                        return 0 === this.width || 0 === this.height
                                    },
                                    contains: function(t) {
                                        return t && t.width !== o || 4 === (Array.isArray(t) ? t : arguments).length ? this._containsRectangle(w.read(arguments)) : this._containsPoint(_.read(arguments))
                                    },
                                    _containsPoint: function(t) {
                                        var e = t.x;
                                        t = t.y;
                                        return e >= this.x && t >= this.y && e <= this.x + this.width && t <= this.y + this.height
                                    },
                                    _containsRectangle: function(t) {
                                        var e = t.x
                                            , i = t.y;
                                        return e >= this.x && i >= this.y && e + t.width <= this.x + this.width && i + t.height <= this.y + this.height
                                    },
                                    intersects: function() {
                                        var t = w.read(arguments)
                                            , e = u.read(arguments) || 0;
                                        return t.x + t.width > this.x - e && t.y + t.height > this.y - e && t.x < this.x + this.width + e && t.y < this.y + this.height + e
                                    },
                                    intersect: function() {
                                        var t = w.read(arguments)
                                            , e = Math.max(this.x, t.x)
                                            , i = Math.max(this.y, t.y)
                                            , n = Math.min(this.x + this.width, t.x + t.width);
                                        t = Math.min(this.y + this.height, t.y + t.height);
                                        return new w(e,i,n - e,t - i)
                                    },
                                    unite: function() {
                                        var t = w.read(arguments)
                                            , e = Math.min(this.x, t.x)
                                            , i = Math.min(this.y, t.y)
                                            , n = Math.max(this.x + this.width, t.x + t.width);
                                        t = Math.max(this.y + this.height, t.y + t.height);
                                        return new w(e,i,n - e,t - i)
                                    },
                                    include: function() {
                                        var t = _.read(arguments)
                                            , e = Math.min(this.x, t.x)
                                            , i = Math.min(this.y, t.y)
                                            , n = Math.max(this.x + this.width, t.x);
                                        t = Math.max(this.y + this.height, t.y);
                                        return new w(e,i,n - e,t - i)
                                    },
                                    expand: function() {
                                        var t = (e = x.read(arguments)).width
                                            , e = e.height;
                                        return new w(this.x - t / 2,this.y - e / 2,this.width + t,this.height + e)
                                    },
                                    scale: function(t, e) {
                                        return this.expand(this.width * t - this.width, this.height * (e === o ? t : e) - this.height)
                                    }
                                }, u.each([["Top", "Left"], ["Top", "Right"], ["Bottom", "Left"], ["Bottom", "Right"], ["Left", "Center"], ["Top", "Center"], ["Right", "Center"], ["Bottom", "Center"]], (function(t, e) {
                                        var i = t.join("")
                                            , n = /^[RL]/.test(i);
                                        4 <= e && (t[1] += n ? "Y" : "X");
                                        e = t[n ? 0 : 1],
                                            n = t[n ? 1 : 0];
                                        var r = "get" + e
                                            , s = "get" + n
                                            , a = "set" + e
                                            , o = "set" + n
                                            , h = "set" + i;
                                        this["get" + i] = function(t) {
                                            return new (t ? _ : y)(this[r](),this[s](),this,h)
                                        }
                                            ,
                                            this[h] = function() {
                                                var t = _.read(arguments);
                                                this[a](t.x),
                                                    this[o](t.y)
                                            }
                                    }
                                ), {
                                    beans: !0
                                }))
                                    , S = w.extend({
                                        initialize: function(t, e, i, n, r, s) {
                                            this._set(t, e, i, n, !0),
                                                this._owner = r,
                                                this._setter = s
                                        },
                                        _set: function(t, e, i, n, r) {
                                            return this._x = t,
                                                this._y = e,
                                                this._width = i,
                                                this._height = n,
                                            r || this._owner[this._setter](this),
                                                this
                                        }
                                    }, new function() {
                                        var t = w.prototype;
                                        return u.each(["x", "y", "width", "height"], (function(t) {
                                                var e = u.capitalize(t)
                                                    , i = "_" + t;
                                                this["get" + e] = function() {
                                                    return this[i]
                                                }
                                                    ,
                                                    this["set" + e] = function(t) {
                                                        this[i] = t,
                                                        this._dontNotify || this._owner[this._setter](this)
                                                    }
                                            }
                                        ), u.each(["Point", "Size", "Center", "Left", "Top", "Right", "Bottom", "CenterX", "CenterY", "TopLeft", "TopRight", "BottomLeft", "BottomRight", "LeftCenter", "TopCenter", "RightCenter", "BottomCenter"], (function(e) {
                                                var i = "set" + e;
                                                this[i] = function() {
                                                    this._dontNotify = !0,
                                                        t[i].apply(this, arguments),
                                                        this._dontNotify = !1,
                                                        this._owner[this._setter](this)
                                                }
                                            }
                                        ), {
                                            isSelected: function() {
                                                return !!(2 & this._owner._selection)
                                            },
                                            setSelected: function(t) {
                                                var e = this._owner;
                                                e._changeSelection && e._changeSelection(2, t)
                                            }
                                        }))
                                    }
                                )
                                    , M = u.extend({
                                    _class: "Matrix",
                                    initialize: function t(e, i) {
                                        var n = arguments
                                            , r = n.length
                                            , s = !0;
                                        if (6 <= r ? this._set.apply(this, n) : 1 === r || 2 === r ? e instanceof t ? this._set(e._a, e._b, e._c, e._d, e._tx, e._ty, i) : Array.isArray(e) ? this._set.apply(this, i ? e.concat([i]) : e) : s = !1 : r ? s = !1 : this.reset(),
                                            !s)
                                            throw new Error("Unsupported matrix parameters");
                                        return this
                                    },
                                    set: "#initialize",
                                    _set: function(t, e, i, n, r, s, a) {
                                        return this._a = t,
                                            this._b = e,
                                            this._c = i,
                                            this._d = n,
                                            this._tx = r,
                                            this._ty = s,
                                        a || this._changed(),
                                            this
                                    },
                                    _serialize: function(t, e) {
                                        return u.serialize(this.getValues(), t, !0, e)
                                    },
                                    _changed: function() {
                                        var t = this._owner;
                                        t && (t._applyMatrix ? t.transform(null, !0) : t._changed(25))
                                    },
                                    clone: function() {
                                        return new M(this._a,this._b,this._c,this._d,this._tx,this._ty)
                                    },
                                    equals: function(t) {
                                        return t === this || t && this._a === t._a && this._b === t._b && this._c === t._c && this._d === t._d && this._tx === t._tx && this._ty === t._ty
                                    },
                                    toString: function() {
                                        var t = m.instance;
                                        return "[[" + [t.number(this._a), t.number(this._c), t.number(this._tx)].join(", ") + "], [" + [t.number(this._b), t.number(this._d), t.number(this._ty)].join(", ") + "]]"
                                    },
                                    reset: function(t) {
                                        return this._a = this._d = 1,
                                            this._b = this._c = this._tx = this._ty = 0,
                                        t || this._changed(),
                                            this
                                    },
                                    apply: function(t, e) {
                                        var i = this._owner;
                                        return !!i && (i.transform(null, u.pick(t, !0), e),
                                            this.isIdentity())
                                    },
                                    translate: function() {
                                        var t = (e = _.read(arguments)).x
                                            , e = e.y;
                                        return this._tx += t * this._a + e * this._c,
                                            this._ty += t * this._b + e * this._d,
                                            this._changed(),
                                            this
                                    },
                                    scale: function() {
                                        var t = arguments
                                            , e = _.read(t);
                                        return (t = _.read(t, 0, {
                                            readNull: !0
                                        })) && this.translate(t),
                                            this._a *= e.x,
                                            this._b *= e.x,
                                            this._c *= e.y,
                                            this._d *= e.y,
                                        t && this.translate(t.negate()),
                                            this._changed(),
                                            this
                                    },
                                    rotate: function(t) {
                                        t *= Math.PI / 180;
                                        var e = (h = _.read(arguments, 1)).x
                                            , i = h.y
                                            , n = Math.cos(t)
                                            , r = Math.sin(t)
                                            , s = e - e * n + i * r
                                            , a = i - e * r - i * n
                                            , o = this._a
                                            , h = this._b;
                                        e = this._c,
                                            i = this._d;
                                        return this._a = n * o + r * e,
                                            this._b = n * h + r * i,
                                            this._c = -r * o + n * e,
                                            this._d = -r * h + n * i,
                                            this._tx += s * o + a * e,
                                            this._ty += s * h + a * i,
                                            this._changed(),
                                            this
                                    },
                                    shear: function() {
                                        var t = arguments
                                            , e = _.read(t)
                                            , i = _.read(t, 0, {
                                            readNull: !0
                                        });
                                        i && this.translate(i);
                                        var n = this._a;
                                        t = this._b;
                                        return this._a += e.y * this._c,
                                            this._b += e.y * this._d,
                                            this._c += e.x * n,
                                            this._d += e.x * t,
                                        i && this.translate(i.negate()),
                                            this._changed(),
                                            this
                                    },
                                    skew: function() {
                                        var t = arguments
                                            , e = _.read(t)
                                            , i = _.read(t, 0, {
                                            readNull: !0
                                        });
                                        t = Math.PI / 180,
                                            t = new _(Math.tan(e.x * t),Math.tan(e.y * t));
                                        return this.shear(t, i)
                                    },
                                    append: function(t, e) {
                                        var i, n, r, s, a, o, h, l, u;
                                        return t && (i = this._a,
                                            n = this._b,
                                            r = this._c,
                                            s = this._d,
                                            a = t._a,
                                            o = t._c,
                                            h = t._b,
                                            l = t._d,
                                            u = t._tx,
                                            t = t._ty,
                                            this._a = a * i + h * r,
                                            this._c = o * i + l * r,
                                            this._b = a * n + h * s,
                                            this._d = o * n + l * s,
                                            this._tx += u * i + t * r,
                                            this._ty += u * n + t * s,
                                        e || this._changed()),
                                            this
                                    },
                                    prepend: function(t, e) {
                                        var i, n, r, s, a, o, h, l, u, c, d;
                                        return t && (i = this._a,
                                            n = this._b,
                                            r = this._c,
                                            s = this._d,
                                            a = this._tx,
                                            o = this._ty,
                                            h = t._a,
                                            l = t._c,
                                            u = t._b,
                                            c = t._d,
                                            d = t._tx,
                                            t = t._ty,
                                            this._a = h * i + l * n,
                                            this._c = h * r + l * s,
                                            this._b = u * i + c * n,
                                            this._d = u * r + c * s,
                                            this._tx = h * a + l * o + d,
                                            this._ty = u * a + c * o + t,
                                        e || this._changed()),
                                            this
                                    },
                                    appended: function(t) {
                                        return this.clone().append(t)
                                    },
                                    prepended: function(t) {
                                        return this.clone().prepend(t)
                                    },
                                    invert: function() {
                                        var t = this._a
                                            , e = this._b
                                            , i = this._c
                                            , n = this._d
                                            , r = this._tx
                                            , s = this._ty
                                            , a = t * n - e * i
                                            , o = null;
                                        return a && !isNaN(a) && isFinite(r) && isFinite(s) && (this._a = n / a,
                                            this._b = -e / a,
                                            this._c = -i / a,
                                            this._d = t / a,
                                            this._tx = (i * s - n * r) / a,
                                            this._ty = (e * r - t * s) / a,
                                            o = this),
                                            o
                                    },
                                    inverted: function() {
                                        return this.clone().invert()
                                    },
                                    concatenate: "#append",
                                    preConcatenate: "#prepend",
                                    chain: "#appended",
                                    _shiftless: function() {
                                        return new M(this._a,this._b,this._c,this._d,0,0)
                                    },
                                    _orNullIfIdentity: function() {
                                        return this.isIdentity() ? null : this
                                    },
                                    isIdentity: function() {
                                        return 1 === this._a && 0 === this._b && 0 === this._c && 1 === this._d && 0 === this._tx && 0 === this._ty
                                    },
                                    isInvertible: function() {
                                        var t = this._a * this._d - this._c * this._b;
                                        return t && !isNaN(t) && isFinite(this._tx) && isFinite(this._ty)
                                    },
                                    isSingular: function() {
                                        return !this.isInvertible()
                                    },
                                    transform: function(t, e, i) {
                                        return arguments.length < 3 ? this._transformPoint(_.read(arguments)) : this._transformCoordinates(t, e, i)
                                    },
                                    _transformPoint: function(t, e, i) {
                                        var n = t.x;
                                        t = t.y;
                                        return (e = e || new _)._set(n * this._a + t * this._c + this._tx, n * this._b + t * this._d + this._ty, i)
                                    },
                                    _transformCoordinates: function(t, e, i) {
                                        for (var n = 0, r = 2 * i; n < r; n += 2) {
                                            var s = t[n]
                                                , a = t[n + 1];
                                            e[n] = s * this._a + a * this._c + this._tx,
                                                e[n + 1] = s * this._b + a * this._d + this._ty
                                        }
                                        return e
                                    },
                                    _transformCorners: function(t) {
                                        var e = t.x
                                            , i = t.y
                                            , n = e + t.width;
                                        t = [e, i, n, i, n, t = i + t.height, e, t];
                                        return this._transformCoordinates(t, t, 4)
                                    },
                                    _transformBounds: function(t, e, i) {
                                        for (var n = this._transformCorners(t), r = n.slice(0, 2), s = r.slice(), a = 2; a < 8; a++) {
                                            var o = n[a]
                                                , h = 1 & a;
                                            o < r[h] ? r[h] = o : o > s[h] && (s[h] = o)
                                        }
                                        return (e = e || new w)._set(r[0], r[1], s[0] - r[0], s[1] - r[1], i)
                                    },
                                    inverseTransform: function() {
                                        return this._inverseTransform(_.read(arguments))
                                    },
                                    _inverseTransform: function(t, e, i) {
                                        var n = this._a
                                            , r = this._b
                                            , s = this._c
                                            , a = this._d
                                            , o = this._tx
                                            , h = this._ty
                                            , l = n * a - r * s
                                            , u = null;
                                        return l && !isNaN(l) && isFinite(o) && isFinite(h) && (h = t.x - this._tx,
                                            t = t.y - this._ty,
                                            u = (e = e || new _)._set((h * a - t * s) / l, (t * n - h * r) / l, i)),
                                            u
                                    },
                                    decompose: function() {
                                        var t, e, i, n, r = this._a, s = this._b, a = this._c, o = this._d, h = r * o - s * a, l = Math.sqrt, u = Math.atan2, c = 180 / Math.PI;
                                        return n = 0 !== r || 0 !== s ? (t = l(r * r + s * s),
                                            e = Math.acos(r / t) * (0 < s ? 1 : -1),
                                            i = [t, h / t],
                                            [u(r * a + s * o, t * t), 0]) : 0 !== a || 0 !== o ? (n = l(a * a + o * o),
                                            e = Math.asin(a / n) * (0 < o ? 1 : -1),
                                            i = [h / n, n],
                                            [0, u(r * a + s * o, n * n)]) : i = [e = 0, 0],
                                            {
                                                translation: this.getTranslation(),
                                                rotation: e * c,
                                                scaling: new _(i),
                                                skewing: new _(n[0] * c,n[1] * c)
                                            }
                                    },
                                    getValues: function() {
                                        return [this._a, this._b, this._c, this._d, this._tx, this._ty]
                                    },
                                    getTranslation: function() {
                                        return new _(this._tx,this._ty)
                                    },
                                    getScaling: function() {
                                        return this.decompose().scaling
                                    },
                                    getRotation: function() {
                                        return this.decompose().rotation
                                    },
                                    applyToContext: function(t) {
                                        this.isIdentity() || t.transform(this._a, this._b, this._c, this._d, this._tx, this._ty)
                                    }
                                }, u.each(["a", "b", "c", "d", "tx", "ty"], (function(t) {
                                        var e = u.capitalize(t)
                                            , i = "_" + t;
                                        this["get" + e] = function() {
                                            return this[i]
                                        }
                                            ,
                                            this["set" + e] = function(t) {
                                                this[i] = t,
                                                    this._changed()
                                            }
                                    }
                                ), {}))
                                    , C = u.extend({
                                    _class: "Line",
                                    initialize: function(t, e, i, n, r) {
                                        (4 <= arguments.length ? (this._px = t,
                                            this._py = e,
                                            this._vx = i,
                                            this._vy = n,
                                            r) : (this._px = t.x,
                                            this._py = t.y,
                                            this._vx = e.x,
                                            this._vy = e.y,
                                            i)) || (this._vx -= this._px,
                                            this._vy -= this._py)
                                    },
                                    getPoint: function() {
                                        return new _(this._px,this._py)
                                    },
                                    getVector: function() {
                                        return new _(this._vx,this._vy)
                                    },
                                    getLength: function() {
                                        return this.getVector().getLength()
                                    },
                                    intersect: function(t, e) {
                                        return C.intersect(this._px, this._py, this._vx, this._vy, t._px, t._py, t._vx, t._vy, !0, e)
                                    },
                                    getSide: function(t, e) {
                                        return C.getSide(this._px, this._py, this._vx, this._vy, t.x, t.y, !0, e)
                                    },
                                    getDistance: function(t) {
                                        return Math.abs(this.getSignedDistance(t))
                                    },
                                    getSignedDistance: function(t) {
                                        return C.getSignedDistance(this._px, this._py, this._vx, this._vy, t.x, t.y, !0)
                                    },
                                    isCollinear: function(t) {
                                        return _.isCollinear(this._vx, this._vy, t._vx, t._vy)
                                    },
                                    isOrthogonal: function(t) {
                                        return _.isOrthogonal(this._vx, this._vy, t._vx, t._vy)
                                    },
                                    statics: {
                                        intersect: function(t, e, i, n, r, s, a, o, h, l) {
                                            if (h || (i -= t,
                                                n -= e,
                                                a -= r,
                                                o -= s),
                                                h = i * o - n * a,
                                            !g.isMachineZero(h) && (o = (a * (s = e - s) - o * (r = t - r)) / h,
                                                h = (i * s - n * r) / h,
                                            l || -1e-12 < o && o < 1 + 1e-12 && -1e-12 < h && h < 1 + 1e-12))
                                                return new _(t + (o = l ? o : o <= 0 ? 0 : 1 <= o ? 1 : o) * i,e + o * n)
                                        },
                                        getSide: function(t, e, i, n, r, s, a, o) {
                                            return a || (i -= t,
                                                n -= e),
                                                e = (t = r - t) * n - (s - e) * i,
                                                (e = !o && g.isMachineZero(e) && 0 <= (e = (t * i + t * i) / (i * i + n * n)) && e <= 1 ? 0 : e) < 0 ? -1 : 0 < e ? 1 : 0
                                        },
                                        getSignedDistance: function(t, e, i, n, r, s, a) {
                                            return a || (i -= t,
                                                n -= e),
                                                0 === i ? 0 < n ? r - t : t - r : 0 === n ? i < 0 ? s - e : e - s : ((r - t) * n - (s - e) * i) / (i < n ? n * Math.sqrt(1 + i * i / (n * n)) : i * Math.sqrt(1 + n * n / (i * i)))
                                        },
                                        getDistance: function(t, e, i, n, r, s, a) {
                                            return Math.abs(C.getSignedDistance(t, e, i, n, r, s, a))
                                        }
                                    }
                                })
                                    , A = p.extend({
                                    _class: "Project",
                                    _list: "projects",
                                    _reference: "project",
                                    _compactSerialize: !0,
                                    initialize: function(t) {
                                        p.call(this, !0),
                                            this._children = [],
                                            this._namedChildren = {},
                                            this._activeLayer = null,
                                            this._currentStyle = new J(null,null,this),
                                            this._view = st.create(this, t || mt.getCanvas(1, 1)),
                                            this._selectionItems = {},
                                            this._selectionCount = 0,
                                            this._updateVersion = 0
                                    },
                                    _serialize: function(t, e) {
                                        return u.serialize(this._children, t, !0, e)
                                    },
                                    _changed: function(t, e) {
                                        1 & t && (r = this._view) && (r._needsUpdate = !0,
                                        !r._requested && r._autoUpdate && r.requestUpdate());
                                        var i, n, r, s = this._changes;
                                        s && e && ((r = (i = this._changesById)[n = e._id]) ? r.flags |= t : s.push(i[n] = {
                                            item: e,
                                            flags: t
                                        }))
                                    },
                                    clear: function() {
                                        for (var t = this._children, e = t.length - 1; 0 <= e; e--)
                                            t[e].remove()
                                    },
                                    isEmpty: function() {
                                        return !this._children.length
                                    },
                                    remove: function t() {
                                        return !!t.base.call(this) && (this._view && this._view.remove(),
                                            !0)
                                    },
                                    getView: function() {
                                        return this._view
                                    },
                                    getCurrentStyle: function() {
                                        return this._currentStyle
                                    },
                                    setCurrentStyle: function(t) {
                                        this._currentStyle.set(t)
                                    },
                                    getIndex: function() {
                                        return this._index
                                    },
                                    getOptions: function() {
                                        return this._scope.settings
                                    },
                                    getLayers: function() {
                                        return this._children
                                    },
                                    getActiveLayer: function() {
                                        return this._activeLayer || new E({
                                            project: this,
                                            insert: !0
                                        })
                                    },
                                    getSymbolDefinitions: function() {
                                        var t = []
                                            , e = {};
                                        return this.getItems({
                                            class: k,
                                            match: function(i) {
                                                var n = i._definition;
                                                i = n._id;
                                                return e[i] || (e[i] = !0,
                                                    t.push(n)),
                                                    !1
                                            }
                                        }),
                                            t
                                    },
                                    getSymbols: "getSymbolDefinitions",
                                    getSelectedItems: function() {
                                        var t, e = this._selectionItems, i = [];
                                        for (t in e) {
                                            var n = e[t]
                                                , r = n._selection;
                                            1 & r && n.isInserted() ? i.push(n) : r || this._updateSelection(n)
                                        }
                                        return i
                                    },
                                    _updateSelection: function(t) {
                                        var e = t._id
                                            , i = this._selectionItems;
                                        t._selection ? i[e] !== t && (this._selectionCount++,
                                            i[e] = t) : i[e] === t && (this._selectionCount--,
                                            delete i[e])
                                    },
                                    selectAll: function() {
                                        for (var t = this._children, e = 0, i = t.length; e < i; e++)
                                            t[e].setFullySelected(!0)
                                    },
                                    deselectAll: function() {
                                        var t, e = this._selectionItems;
                                        for (t in e)
                                            e[t].setFullySelected(!1)
                                    },
                                    addLayer: function(t) {
                                        return this.insertLayer(o, t)
                                    },
                                    insertLayer: function(t, e) {
                                        return e instanceof E ? (e._remove(!1, !0),
                                            u.splice(this._children, [e], t, 0),
                                            e._setProject(this, !0),
                                        (t = e._name) && e.setName(t),
                                        this._changes && e._changed(5),
                                        this._activeLayer || (this._activeLayer = e)) : e = null,
                                            e
                                    },
                                    _insertItem: function(t, e, i) {
                                        return e = this.insertLayer(t, e) || (this._activeLayer || this._insertItem(o, new E(T.NO_INSERT), !0)).insertChild(t, e),
                                        i && e.activate && e.activate(),
                                            e
                                    },
                                    getItems: function(t) {
                                        return T._getItems(this, t)
                                    },
                                    getItem: function(t) {
                                        return T._getItems(this, t, null, null, !0)[0] || null
                                    },
                                    importJSON: function(t) {
                                        this.activate();
                                        var e = this._activeLayer;
                                        return u.importJSON(t, e && e.isEmpty() && e)
                                    },
                                    removeOn: function(t) {
                                        var e = this._removeSets;
                                        if (e) {
                                            "mouseup" === t && (e.mousedrag = null);
                                            var i = e[t];
                                            if (i) {
                                                for (var n in i) {
                                                    var r, s = i[n];
                                                    for (r in e) {
                                                        var a = e[r];
                                                        a && a != i && delete a[s._id]
                                                    }
                                                    s.remove()
                                                }
                                                e[t] = null
                                            }
                                        }
                                    },
                                    draw: function(t, e, i) {
                                        this._updateVersion++,
                                            t.save(),
                                            e.applyToContext(t);
                                        for (var n = this._children, r = new u({
                                            offset: new _(0,0),
                                            pixelRatio: i,
                                            viewMatrix: e.isIdentity() ? null : e,
                                            matrices: [new M],
                                            updateMatrix: !0
                                        }), s = 0, a = n.length; s < a; s++)
                                            n[s].draw(t, r);
                                        if (t.restore(),
                                        0 < this._selectionCount) {
                                            t.save(),
                                                t.strokeWidth = 1;
                                            var o, h = this._selectionItems, l = this._scope.settings.handleSize, c = this._updateVersion;
                                            for (o in h)
                                                h[o]._drawSelection(t, e, l, h, c);
                                            t.restore()
                                        }
                                    }
                                })
                                    , T = u.extend(c, {
                                        statics: {
                                            extend: function t(e) {
                                                return e._serializeFields && (e._serializeFields = u.set({}, this.prototype._serializeFields, e._serializeFields)),
                                                    t.base.apply(this, arguments)
                                            },
                                            NO_INSERT: {
                                                insert: !1
                                            }
                                        },
                                        _class: "Item",
                                        _name: null,
                                        _applyMatrix: !0,
                                        _canApplyMatrix: !0,
                                        _canScaleStroke: !1,
                                        _pivot: null,
                                        _visible: !0,
                                        _blendMode: "normal",
                                        _opacity: 1,
                                        _locked: !1,
                                        _guide: !1,
                                        _clipMask: !1,
                                        _selection: 0,
                                        _selectBounds: !0,
                                        _selectChildren: !1,
                                        _serializeFields: {
                                            name: null,
                                            applyMatrix: null,
                                            matrix: new M,
                                            pivot: null,
                                            visible: !0,
                                            blendMode: "normal",
                                            opacity: 1,
                                            locked: !1,
                                            guide: !1,
                                            clipMask: !1,
                                            selected: !1,
                                            data: {}
                                        },
                                        _prioritize: ["applyMatrix"]
                                    }, new function() {
                                        var t = ["onMouseDown", "onMouseUp", "onMouseDrag", "onClick", "onDoubleClick", "onMouseMove", "onMouseEnter", "onMouseLeave"];
                                        return u.each(t, (function(t) {
                                                this._events[t] = {
                                                    install: function(t) {
                                                        this.getView()._countItemEvent(t, 1)
                                                    },
                                                    uninstall: function(t) {
                                                        this.getView()._countItemEvent(t, -1)
                                                    }
                                                }
                                            }
                                        ), {
                                            _events: {
                                                onFrame: {
                                                    install: function() {
                                                        this.getView()._animateItem(this, !0)
                                                    },
                                                    uninstall: function() {
                                                        this.getView()._animateItem(this, !1)
                                                    }
                                                },
                                                onLoad: {},
                                                onError: {}
                                            },
                                            statics: {
                                                _itemHandlers: t
                                            }
                                        })
                                    }
                                    , {
                                        initialize: function() {},
                                        _initialize: function(t, e) {
                                            var i = t && u.isPlainObject(t)
                                                , n = i && !0 === t.internal
                                                , r = this._matrix = new M
                                                , s = i && t.project || Ut.project
                                                , a = Ut.settings;
                                            return this._id = n ? null : v.get(),
                                                this._parent = this._index = null,
                                                this._applyMatrix = this._canApplyMatrix && a.applyMatrix,
                                            e && r.translate(e),
                                                (r._owner = this)._style = new J(s._currentStyle,this,s),
                                                n || i && 0 == t.insert || !a.insertItems && (!i || !0 !== t.insert) ? this._setProject(s) : (i && t.parent || s)._insertItem(o, this, !0),
                                            i && t !== T.NO_INSERT && this.set(t, {
                                                internal: !0,
                                                insert: !0,
                                                project: !0,
                                                parent: !0
                                            }),
                                                i
                                        },
                                        _serialize: function(t, e) {
                                            var i = {}
                                                , n = this;
                                            function r(r) {
                                                for (var s in r) {
                                                    var a = n[s];
                                                    u.equals(a, "leading" === s ? 1.2 * r.fontSize : r[s]) || (i[s] = u.serialize(a, t, "data" !== s, e))
                                                }
                                            }
                                            return r(this._serializeFields),
                                            this instanceof P || r(this._style._defaults),
                                                [this._class, i]
                                        },
                                        _changed: function(t) {
                                            var e = this._symbol
                                                , i = this._parent || e
                                                , n = this._project;
                                            8 & t && (this._bounds = this._position = this._decomposed = o),
                                            16 & t && (this._globalMatrix = o),
                                            i && 72 & t && T._clearBoundsCache(i),
                                            2 & t && T._clearBoundsCache(this),
                                            n && n._changed(t, this),
                                            e && e._changed(t)
                                        },
                                        getId: function() {
                                            return this._id
                                        },
                                        getName: function() {
                                            return this._name
                                        },
                                        setName: function(t) {
                                            if (this._name && this._removeNamed(),
                                            t === +t + "")
                                                throw new Error("Names consisting only of numbers are not supported.");
                                            var e, i = this._getOwner();
                                            t && i && (e = i._children,
                                                ((i = i._namedChildren)[t] = i[t] || []).push(this),
                                            t in e || (e[t] = this)),
                                                this._name = t || o,
                                                this._changed(256)
                                        },
                                        getStyle: function() {
                                            return this._style
                                        },
                                        setStyle: function(t) {
                                            this.getStyle().set(t)
                                        }
                                    }, u.each(["locked", "visible", "blendMode", "opacity", "guide"], (function(t) {
                                            var e = u.capitalize(t)
                                                , i = "_" + t
                                                , n = {
                                                locked: 256,
                                                visible: 265
                                            };
                                            this["get" + e] = function() {
                                                return this[i]
                                            }
                                                ,
                                                this["set" + e] = function(e) {
                                                    e != this[i] && (this[i] = e,
                                                        this._changed(n[t] || 257))
                                                }
                                        }
                                    ), {}), {
                                        beans: !0,
                                        getSelection: function() {
                                            return this._selection
                                        },
                                        setSelection: function(t) {
                                            t !== this._selection && (this._selection = t,
                                            (t = this._project) && (t._updateSelection(this),
                                                this._changed(257)))
                                        },
                                        _changeSelection: function(t, e) {
                                            var i = this._selection;
                                            this.setSelection(e ? i | t : i & ~t)
                                        },
                                        isSelected: function() {
                                            if (this._selectChildren)
                                                for (var t = this._children, e = 0, i = t.length; e < i; e++)
                                                    if (t[e].isSelected())
                                                        return !0;
                                            return !!(1 & this._selection)
                                        },
                                        setSelected: function(t) {
                                            if (this._selectChildren)
                                                for (var e = this._children, i = 0, n = e.length; i < n; i++)
                                                    e[i].setSelected(t);
                                            this._changeSelection(1, t)
                                        },
                                        isFullySelected: function() {
                                            var t = this._children
                                                , e = !!(1 & this._selection);
                                            if (t && e) {
                                                for (var i = 0, n = t.length; i < n; i++)
                                                    if (!t[i].isFullySelected())
                                                        return !1;
                                                return !0
                                            }
                                            return e
                                        },
                                        setFullySelected: function(t) {
                                            var e = this._children;
                                            if (e)
                                                for (var i = 0, n = e.length; i < n; i++)
                                                    e[i].setFullySelected(t);
                                            this._changeSelection(1, t)
                                        },
                                        isClipMask: function() {
                                            return this._clipMask
                                        },
                                        setClipMask: function(t) {
                                            this._clipMask != (t = !!t) && ((this._clipMask = t) && (this.setFillColor(null),
                                                this.setStrokeColor(null)),
                                                this._changed(257),
                                            this._parent && this._parent._changed(2048))
                                        },
                                        getData: function() {
                                            return this._data || (this._data = {}),
                                                this._data
                                        },
                                        setData: function(t) {
                                            this._data = t
                                        },
                                        getPosition: function(t) {
                                            return new (t ? _ : y)((t = this._position || (this._position = this._getPositionFromBounds())).x,t.y,this,"setPosition")
                                        },
                                        setPosition: function() {
                                            this.translate(_.read(arguments).subtract(this.getPosition(!0)))
                                        },
                                        _getPositionFromBounds: function(t) {
                                            return this._pivot ? this._matrix._transformPoint(this._pivot) : (t || this.getBounds()).getCenter(!0)
                                        },
                                        getPivot: function() {
                                            var t = this._pivot;
                                            return t ? new y(t.x,t.y,this,"setPivot") : null
                                        },
                                        setPivot: function() {
                                            this._pivot = _.read(arguments, 0, {
                                                clone: !0,
                                                readNull: !0
                                            }),
                                                this._position = o
                                        }
                                    }, u.each({
                                        getStrokeBounds: {
                                            stroke: !0
                                        },
                                        getHandleBounds: {
                                            handle: !0
                                        },
                                        getInternalBounds: {
                                            internal: !0
                                        }
                                    }, (function(t, e) {
                                            this[e] = function(e) {
                                                return this.getBounds(e, t)
                                            }
                                        }
                                    ), {
                                        beans: !0,
                                        getBounds: function(t, e) {
                                            var i = e || t instanceof M
                                                , n = u.set({}, i ? e : t, this._boundsOptions);
                                            return n.stroke && !this.getStrokeScaling() || (n.cacheItem = this),
                                                n = this._getCachedBounds(i && t, n).rect,
                                                arguments.length ? n : new S(n.x,n.y,n.width,n.height,this,"setBounds")
                                        },
                                        setBounds: function() {
                                            var t = w.read(arguments)
                                                , e = this.getBounds()
                                                , i = this._matrix
                                                , n = new M
                                                , r = t.getCenter();
                                            n.translate(r),
                                            t.width == e.width && t.height == e.height || (i.isInvertible() || (i.set(i._backup || (new M).translate(i.getTranslation())),
                                                e = this.getBounds()),
                                                n.scale(0 !== e.width ? t.width / e.width : 0, 0 !== e.height ? t.height / e.height : 0)),
                                                r = e.getCenter(),
                                                n.translate(-r.x, -r.y),
                                                this.transform(n)
                                        },
                                        _getBounds: function(t, e) {
                                            var i = this._children;
                                            return i && i.length ? (T._updateBoundsCache(this, e.cacheItem),
                                                T._getBounds(i, t, e)) : new w
                                        },
                                        _getBoundsCacheKey: function(t, e) {
                                            return [t.stroke ? 1 : 0, t.handle ? 1 : 0, e ? 1 : 0].join("")
                                        },
                                        _getCachedBounds: function(t, e, i) {
                                            t = t && t._orNullIfIdentity();
                                            var n = e.internal && !i
                                                , r = e.cacheItem
                                                , s = n ? null : this._matrix._orNullIfIdentity()
                                                , a = r && (!t || t.equals(s)) && this._getBoundsCacheKey(e, n);
                                            i = this._bounds;
                                            if (T._updateBoundsCache(this._parent || this._symbol, r),
                                            a && i && a in i)
                                                return {
                                                    rect: (o = i[a]).rect.clone(),
                                                    nonscaling: o.nonscaling
                                                };
                                            var o;
                                            s = (t = this._getBounds(t || s, e)).rect || t,
                                                e = this._style,
                                                e = t.nonscaling || e.hasStroke() && !e.getStrokeScaling();
                                            return a && (i || (this._bounds = i = {}),
                                                o = i[a] = {
                                                    rect: s.clone(),
                                                    nonscaling: e,
                                                    internal: n
                                                }),
                                                {
                                                    rect: s,
                                                    nonscaling: e
                                                }
                                        },
                                        _getStrokeMatrix: function(t, e) {
                                            return (t = (e = this.getStrokeScaling() ? null : e && e.internal ? this : this._parent || this._symbol && this._symbol._item) ? e.getViewMatrix().invert() : t) && t._shiftless()
                                        },
                                        statics: {
                                            _updateBoundsCache: function(t, e) {
                                                var i;
                                                t && e && (i = e._id,
                                                (t = t._boundsCache = t._boundsCache || {
                                                    ids: {},
                                                    list: []
                                                }).ids[i] || (t.list.push(e),
                                                    t.ids[i] = e))
                                            },
                                            _clearBoundsCache: function(t) {
                                                var e = t._boundsCache;
                                                if (e) {
                                                    t._bounds = t._position = t._boundsCache = o;
                                                    for (var i = 0, n = e.list, r = n.length; i < r; i++) {
                                                        var s = n[i];
                                                        s !== t && (s._bounds = s._position = o,
                                                        s._boundsCache && T._clearBoundsCache(s))
                                                    }
                                                }
                                            },
                                            _getBounds: function(t, e, i) {
                                                var n = l = 1 / 0
                                                    , r = u = -l
                                                    , s = !1;
                                                i = i || {};
                                                for (var a = 0, o = t.length; a < o; a++) {
                                                    var h, l, u, c = t[a];
                                                    c._visible && !c.isEmpty(!0) && (c = (h = c._getCachedBounds(e && e.appended(c._matrix), i, !0)).rect,
                                                        l = Math.min(c.x, l),
                                                        n = Math.min(c.y, n),
                                                        u = Math.max(c.x + c.width, u),
                                                        r = Math.max(c.y + c.height, r),
                                                    h.nonscaling && (s = !0))
                                                }
                                                return {
                                                    rect: isFinite(l) ? new w(l,n,u - l,r - n) : new w,
                                                    nonscaling: s
                                                }
                                            }
                                        }
                                    }), {
                                        beans: !0,
                                        _decompose: function() {
                                            return this._applyMatrix ? null : this._decomposed || (this._decomposed = this._matrix.decompose())
                                        },
                                        getRotation: function() {
                                            var t = this._decompose();
                                            return t ? t.rotation : 0
                                        },
                                        setRotation: function(t) {
                                            var e, i = this.getRotation();
                                            null != i && null != t && (e = this._decomposed,
                                                this.rotate(t - i),
                                            e && (e.rotation = t,
                                                this._decomposed = e))
                                        },
                                        getScaling: function() {
                                            var t = (t = this._decompose()) && t.scaling;
                                            return new y(t ? t.x : 1,t ? t.y : 1,this,"setScaling")
                                        },
                                        setScaling: function() {
                                            var t, e, i, n, r = this.getScaling(), s = _.read(arguments, 0, {
                                                clone: !0,
                                                readNull: !0
                                            });
                                            r && s && !r.equals(s) && (t = this.getRotation(),
                                                e = this._decomposed,
                                                i = new M,
                                                (n = g.isZero)(r.x) || n(r.y) ? (i.translate(e.translation),
                                                t && i.rotate(t),
                                                    i.scale(s.x, s.y),
                                                    this._matrix.set(i)) : (n = this.getPosition(!0),
                                                    i.translate(n),
                                                t && i.rotate(t),
                                                    i.scale(s.x / r.x, s.y / r.y),
                                                t && i.rotate(-t),
                                                    i.translate(n.negate()),
                                                    this.transform(i)),
                                            e && (e.scaling = s,
                                                this._decomposed = e))
                                        },
                                        getMatrix: function() {
                                            return this._matrix
                                        },
                                        setMatrix: function() {
                                            var t = this._matrix;
                                            t.set.apply(t, arguments)
                                        },
                                        getGlobalMatrix: function(t) {
                                            if (n = this._globalMatrix)
                                                for (var e = this._parent, i = []; e; ) {
                                                    if (!e._globalMatrix) {
                                                        for (var n = null, r = 0, s = i.length; r < s; r++)
                                                            i[r]._globalMatrix = null;
                                                        break
                                                    }
                                                    i.push(e),
                                                        e = e._parent
                                                }
                                            return n || (n = this._globalMatrix = this._matrix.clone(),
                                            (e = this._parent) && n.prepend(e.getGlobalMatrix(!0))),
                                                t ? n : n.clone()
                                        },
                                        getViewMatrix: function() {
                                            return this.getGlobalMatrix().prepend(this.getView()._matrix)
                                        },
                                        getApplyMatrix: function() {
                                            return this._applyMatrix
                                        },
                                        setApplyMatrix: function(t) {
                                            (this._applyMatrix = this._canApplyMatrix && !!t) && this.transform(null, !0)
                                        },
                                        getTransformContent: "#getApplyMatrix",
                                        setTransformContent: "#setApplyMatrix"
                                    }, {
                                        getProject: function() {
                                            return this._project
                                        },
                                        _setProject: function(t, e) {
                                            if (this._project !== t) {
                                                this._project && this._installEvents(!1),
                                                    this._project = t;
                                                for (var i = this._children, n = 0, r = i && i.length; n < r; n++)
                                                    i[n]._setProject(t);
                                                e = !0
                                            }
                                            e && this._installEvents(!0)
                                        },
                                        getView: function() {
                                            return this._project._view
                                        },
                                        _installEvents: function t(e) {
                                            t.base.call(this, e);
                                            for (var i = this._children, n = 0, r = i && i.length; n < r; n++)
                                                i[n]._installEvents(e)
                                        },
                                        getLayer: function() {
                                            for (var t = this; t = t._parent; )
                                                if (t instanceof E)
                                                    return t;
                                            return null
                                        },
                                        getParent: function() {
                                            return this._parent
                                        },
                                        setParent: function(t) {
                                            return t.addChild(this)
                                        },
                                        _getOwner: "#getParent",
                                        getChildren: function() {
                                            return this._children
                                        },
                                        setChildren: function(t) {
                                            this.removeChildren(),
                                                this.addChildren(t)
                                        },
                                        getFirstChild: function() {
                                            return this._children && this._children[0] || null
                                        },
                                        getLastChild: function() {
                                            return this._children && this._children[this._children.length - 1] || null
                                        },
                                        getNextSibling: function() {
                                            var t = this._getOwner();
                                            return t && t._children[this._index + 1] || null
                                        },
                                        getPreviousSibling: function() {
                                            var t = this._getOwner();
                                            return t && t._children[this._index - 1] || null
                                        },
                                        getIndex: function() {
                                            return this._index
                                        },
                                        equals: function(t) {
                                            return t === this || t && this._class === t._class && this._style.equals(t._style) && this._matrix.equals(t._matrix) && this._locked === t._locked && this._visible === t._visible && this._blendMode === t._blendMode && this._opacity === t._opacity && this._clipMask === t._clipMask && this._guide === t._guide && this._equals(t) || !1
                                        },
                                        _equals: function(t) {
                                            return u.equals(this._children, t._children)
                                        },
                                        clone: function(t) {
                                            var e = new this.constructor(T.NO_INSERT)
                                                , i = this._children
                                                , n = u.pick(t ? t.insert : o, t === o || !0 === t);
                                            t = u.pick(t ? t.deep : o, !0);
                                            i && e.copyAttributes(this),
                                            i && !t || e.copyContent(this),
                                            i || e.copyAttributes(this),
                                            n && e.insertAbove(this);
                                            var r = this._name;
                                            n = this._parent;
                                            if (r && n) {
                                                i = n._children;
                                                for (var s = r, a = 1; i[r]; )
                                                    r = s + " " + a++;
                                                r !== s && e.setName(r)
                                            }
                                            return e
                                        },
                                        copyContent: function(t) {
                                            for (var e = t._children, i = 0, n = e && e.length; i < n; i++)
                                                this.addChild(e[i].clone(!1), !0)
                                        },
                                        copyAttributes: function(t, e) {
                                            this.setStyle(t._style);
                                            for (var i = ["_locked", "_visible", "_blendMode", "_opacity", "_clipMask", "_guide"], n = 0, r = i.length; n < r; n++) {
                                                var s = i[n];
                                                t.hasOwnProperty(s) && (this[s] = t[s])
                                            }
                                            e || this._matrix.set(t._matrix, !0),
                                                this.setApplyMatrix(t._applyMatrix),
                                                this.setPivot(t._pivot),
                                                this.setSelection(t._selection);
                                            var a = t._data;
                                            e = t._name;
                                            this._data = a ? u.clone(a) : null,
                                            e && this.setName(e)
                                        },
                                        rasterize: function(t, e) {
                                            var i, n;
                                            u.isPlainObject(t) ? (a = t.resolution,
                                                i = t.insert,
                                                n = t.raster) : (a = t,
                                                i = e),
                                                n ? n.matrix.reset(!0) : n = new I(T.NO_INSERT);
                                            var r = this.getStrokeBounds()
                                                , s = (a || this.getView().getResolution()) / 72
                                                , a = (t = r.getTopLeft().floor(),
                                                e = r.getBottomRight().ceil(),
                                                new x(e.subtract(t)));
                                            r = a.multiply(s);
                                            return n.setSize(r, !0),
                                            r.isZero() || (e = n.getContext(!0),
                                                r = (new M).scale(s).translate(t.negate()),
                                                e.save(),
                                                r.applyToContext(e),
                                                this.draw(e, new u({
                                                    matrices: [r]
                                                })),
                                                e.restore()),
                                                n.transform((new M).translate(t.add(a.divide(2))).scale(1 / s)),
                                            i !== o && !i || n.insertAbove(this),
                                                n
                                        },
                                        contains: function() {
                                            var t = this._matrix;
                                            return t.isInvertible() && !!this._contains(t._inverseTransform(_.read(arguments)))
                                        },
                                        _contains: function(t) {
                                            var e = this._children;
                                            if (e) {
                                                for (var i = e.length - 1; 0 <= i; i--)
                                                    if (e[i].contains(t))
                                                        return !0;
                                                return !1
                                            }
                                            return t.isInside(this.getInternalBounds())
                                        },
                                        isInside: function() {
                                            return w.read(arguments).contains(this.getBounds())
                                        },
                                        _asPathItem: function() {
                                            return new V.Rectangle({
                                                rectangle: this.getInternalBounds(),
                                                matrix: this._matrix,
                                                insert: !1
                                            })
                                        },
                                        intersects: function(t, e) {
                                            return t instanceof T && 0 < this._asPathItem().getIntersections(t._asPathItem(), null, e, !0).length
                                        }
                                    }, new function() {
                                        function t() {
                                            var t = arguments;
                                            return this._hitTest(_.read(t), O.getOptions(t))
                                        }
                                        function e() {
                                            var t = arguments
                                                , e = _.read(t)
                                                , i = O.getOptions(t);
                                            t = [];
                                            return this._hitTest(e, new u({
                                                all: t
                                            },i)),
                                                t
                                        }
                                        function i(t, e, i, n) {
                                            var r = this._children;
                                            if (r)
                                                for (var s = r.length - 1; 0 <= s; s--) {
                                                    var a;
                                                    if ((a = (a = r[s]) !== n && a._hitTest(t, e, i)) && !e.all)
                                                        return a
                                                }
                                            return null
                                        }
                                        return A.inject({
                                            hitTest: t,
                                            hitTestAll: e,
                                            _hitTest: i
                                        }),
                                            {
                                                hitTest: t,
                                                hitTestAll: e,
                                                _hitTestChildren: i
                                            }
                                    }
                                    , {
                                        _hitTest: function(t, e, i) {
                                            if (this._locked || !this._visible || this._guide && !e.guides || this.isEmpty())
                                                return null;
                                            var n = this._matrix
                                                , r = i ? i.appended(n) : this.getGlobalMatrix().prepend(this.getView()._matrix)
                                                , s = Math.max(e.tolerance, 1e-12)
                                                , a = e._tolerancePadding = new x(V._getStrokePadding(s, n._shiftless().invert()));
                                            if (!(t = n._inverseTransform(t)) || !this._children && !this.getBounds({
                                                internal: !0,
                                                stroke: !0,
                                                handle: !0
                                            }).expand(a.multiply(2))._containsPoint(t))
                                                return null;
                                            var o, h, l = !(e.guides && !this._guide || e.selected && !this.isSelected() || e.type && e.type !== u.hyphenate(this._class) || e.class && !(this instanceof e.class)), c = e.match, d = this;
                                            function p(t) {
                                                return (t = t && c && !c(t) ? null : t) && e.all && e.all.push(t),
                                                    t
                                            }
                                            function f(e, i) {
                                                var n = i ? o["get" + i]() : d.getPosition();
                                                if (t.subtract(n).divide(a).length <= 1)
                                                    return new O(e,d,{
                                                        name: i ? u.hyphenate(i) : e,
                                                        point: n
                                                    })
                                            }
                                            var m = e.position;
                                            i = e.center,
                                                s = e.bounds;
                                            if (l && this._parent && (m || i || s)) {
                                                if ((i || s) && (o = this.getInternalBounds()),
                                                !(h = m && f("position") || i && f("center", "Center")) && s)
                                                    for (var g = ["TopLeft", "TopRight", "BottomLeft", "BottomRight", "LeftCenter", "TopCenter", "RightCenter", "BottomCenter"], v = 0; v < 8 && !h; v++)
                                                        h = f("bounds", g[v]);
                                                h = p(h)
                                            }
                                            return (h = h || this._hitTestChildren(t, e, r) || l && p(this._hitTestSelf(t, e, r, this.getStrokeScaling() ? null : r._shiftless().invert())) || null) && h.point && (h.point = n.transform(h.point)),
                                                h
                                        },
                                        _hitTestSelf: function(t, e) {
                                            if (e.fill && this.hasFill() && this._contains(t))
                                                return new O("fill",this)
                                        },
                                        matches: function(t, e) {
                                            var i = typeof t;
                                            if ("object" == i) {
                                                for (var n in t)
                                                    if (t.hasOwnProperty(n) && !this.matches(n, t[n]))
                                                        return !1;
                                                return !0
                                            }
                                            if ("function" == i)
                                                return t(this);
                                            if ("match" === t)
                                                return e(this);
                                            if (i = /^(empty|editable)$/.test(t) ? this["is" + u.capitalize(t)]() : "type" === t ? u.hyphenate(this._class) : this[t],
                                            "class" === t) {
                                                if ("function" == typeof e)
                                                    return this instanceof e;
                                                i = this._class
                                            }
                                            if ("function" == typeof e)
                                                return !!e(i);
                                            if (e) {
                                                if (e.test)
                                                    return e.test(i);
                                                if (u.isPlainObject(e))
                                                    return function t(e, i) {
                                                        for (var n in e)
                                                            if (e.hasOwnProperty(n)) {
                                                                var r = e[n];
                                                                n = i[n];
                                                                if (u.isPlainObject(r) && u.isPlainObject(n)) {
                                                                    if (!t(r, n))
                                                                        return !1
                                                                } else if (!u.equals(r, n))
                                                                    return !1
                                                            }
                                                        return !0
                                                    }(e, i)
                                            }
                                            return u.equals(i, e)
                                        },
                                        getItems: function(t) {
                                            return T._getItems(this, t, this._matrix)
                                        },
                                        getItem: function(t) {
                                            return T._getItems(this, t, this._matrix, null, !0)[0] || null
                                        },
                                        statics: {
                                            _getItems: function t(e, i, n, r, s) {
                                                var a, o, h;
                                                r || (o = (a = "object" == typeof i && i) && a.overlapping,
                                                    h = a && a.inside,
                                                    l = (_ = o || h) && w.read([_]),
                                                    r = {
                                                        items: [],
                                                        recursive: a && !1 !== a.recursive,
                                                        inside: !!h,
                                                        overlapping: !!o,
                                                        rect: l,
                                                        path: o && new V.Rectangle({
                                                            rectangle: l,
                                                            insert: !1
                                                        })
                                                    },
                                                a && (i = u.filter({}, i, {
                                                    recursive: !0,
                                                    inside: !0,
                                                    overlapping: !0
                                                })));
                                                var l, c = e._children, d = r.items;
                                                n = (l = r.rect) && (n || new M);
                                                for (var p = 0, f = c && c.length; p < f; p++) {
                                                    var m = c[p]
                                                        , g = n && n.appended(m._matrix)
                                                        , v = !0;
                                                    if (l) {
                                                        var _ = m.getBounds(g);
                                                        if (!l.intersects(_))
                                                            continue;
                                                        l.contains(_) || r.overlapping && (_.contains(l) || r.path.intersects(m, g)) || (v = !1)
                                                    }
                                                    if (v && m.matches(i) && (d.push(m),
                                                        s))
                                                        break;
                                                    if (!1 !== r.recursive && t(m, i, g, r, s),
                                                    s && 0 < d.length)
                                                        break
                                                }
                                                return d
                                            }
                                        }
                                    }, {
                                        importJSON: function(t) {
                                            return (t = u.importJSON(t, this)) !== this ? this.addChild(t) : t
                                        },
                                        addChild: function(t) {
                                            return this.insertChild(o, t)
                                        },
                                        insertChild: function(t, e) {
                                            return (e = e ? this.insertChildren(t, [e]) : null) && e[0]
                                        },
                                        addChildren: function(t) {
                                            return this.insertChildren(this._children.length, t)
                                        },
                                        insertChildren: function(t, e) {
                                            var i = this._children;
                                            if (i && e && 0 < e.length) {
                                                for (var n = {}, r = (e = u.slice(e)).length - 1; 0 <= r; r--) {
                                                    var s = (l = e[r]) && l._id;
                                                    !l || n[s] ? e.splice(r, 1) : (l._remove(!1, !0),
                                                        n[s] = !0)
                                                }
                                                u.splice(i, e, t, 0);
                                                for (var a = this._project, o = a._changes, h = (r = 0,
                                                    e.length); r < h; r++) {
                                                    var l, c = (l = e[r])._name;
                                                    l._parent = this,
                                                        l._setProject(a, !0),
                                                    c && l.setName(c),
                                                    o && l._changed(5)
                                                }
                                                this._changed(11)
                                            } else
                                                e = null;
                                            return e
                                        },
                                        _insertItem: "#insertChild",
                                        _insertAt: function(t, e) {
                                            var i = t && t._getOwner()
                                                , n = t !== this && i ? this : null;
                                            return n && (n._remove(!1, !0),
                                                i._insertItem(t._index + e, n)),
                                                n
                                        },
                                        insertAbove: function(t) {
                                            return this._insertAt(t, 1)
                                        },
                                        insertBelow: function(t) {
                                            return this._insertAt(t, 0)
                                        },
                                        sendToBack: function() {
                                            var t = this._getOwner();
                                            return t ? t._insertItem(0, this) : null
                                        },
                                        bringToFront: function() {
                                            var t = this._getOwner();
                                            return t ? t._insertItem(o, this) : null
                                        },
                                        appendTop: "#addChild",
                                        appendBottom: function(t) {
                                            return this.insertChild(0, t)
                                        },
                                        moveAbove: "#insertAbove",
                                        moveBelow: "#insertBelow",
                                        addTo: function(t) {
                                            return t._insertItem(o, this)
                                        },
                                        copyTo: function(t) {
                                            return this.clone(!1).addTo(t)
                                        },
                                        reduce: function(t) {
                                            var e = this._children;
                                            return e && 1 === e.length ? (t = e[0].reduce(t),
                                                this._parent ? (t.insertAbove(this),
                                                    this.remove()) : t.remove(),
                                                t) : this
                                        },
                                        _removeNamed: function() {
                                            var t, e, i, n, r = this._getOwner();
                                            r && (t = r._children,
                                            -1 !== (r = (n = (e = r._namedChildren)[i = this._name]) ? n.indexOf(this) : -1) && (t[i] == this && delete t[i],
                                                n.splice(r, 1),
                                                n.length ? t[i] = n[0] : delete e[i]))
                                        },
                                        _remove: function(t, e) {
                                            var i = this._getOwner()
                                                , n = this._project
                                                , r = this._index;
                                            return this._style && this._style._dispose(),
                                                !(!i || (this._name && this._removeNamed(),
                                                null != r && (n._activeLayer === this && (n._activeLayer = this.getNextSibling() || this.getPreviousSibling()),
                                                    u.splice(i._children, null, r, 1)),
                                                    this._installEvents(!1),
                                                t && n._changes && this._changed(5),
                                                e && i._changed(11, this),
                                                    this._parent = null))
                                        },
                                        remove: function() {
                                            return this._remove(!0, !0)
                                        },
                                        replaceWith: function(t) {
                                            return (t = t && t.insertBelow(this)) && this.remove(),
                                                t
                                        },
                                        removeChildren: function(t, e) {
                                            if (!this._children)
                                                return null;
                                            t = t || 0,
                                                e = u.pick(e, this._children.length);
                                            for (var i = u.splice(this._children, null, t, e - t), n = i.length - 1; 0 <= n; n--)
                                                i[n]._remove(!0, !1);
                                            return 0 < i.length && this._changed(11),
                                                i
                                        },
                                        clear: "#removeChildren",
                                        reverseChildren: function() {
                                            if (this._children) {
                                                this._children.reverse();
                                                for (var t = 0, e = this._children.length; t < e; t++)
                                                    this._children[t]._index = t;
                                                this._changed(11)
                                            }
                                        },
                                        isEmpty: function(t) {
                                            var e = this._children
                                                , i = e ? e.length : 0;
                                            if (t) {
                                                for (var n = 0; n < i; n++)
                                                    if (!e[n].isEmpty(t))
                                                        return !1;
                                                return !0
                                            }
                                            return !i
                                        },
                                        isEditable: function() {
                                            for (var t = this; t; ) {
                                                if (!t._visible || t._locked)
                                                    return !1;
                                                t = t._parent
                                            }
                                            return !0
                                        },
                                        hasFill: function() {
                                            return this.getStyle().hasFill()
                                        },
                                        hasStroke: function() {
                                            return this.getStyle().hasStroke()
                                        },
                                        hasShadow: function() {
                                            return this.getStyle().hasShadow()
                                        },
                                        _getOrder: function(t) {
                                            function e(t) {
                                                for (var e = []; e.unshift(t),
                                                    t = t._parent; )
                                                    ;
                                                return e
                                            }
                                            for (var i = e(this), n = e(t), r = 0, s = Math.min(i.length, n.length); r < s; r++)
                                                if (i[r] != n[r])
                                                    return i[r]._index < n[r]._index ? 1 : -1;
                                            return 0
                                        },
                                        hasChildren: function() {
                                            return this._children && 0 < this._children.length
                                        },
                                        isInserted: function() {
                                            return !!this._parent && this._parent.isInserted()
                                        },
                                        isAbove: function(t) {
                                            return -1 === this._getOrder(t)
                                        },
                                        isBelow: function(t) {
                                            return 1 === this._getOrder(t)
                                        },
                                        isParent: function(t) {
                                            return this._parent === t
                                        },
                                        isChild: function(t) {
                                            return t && t._parent === this
                                        },
                                        isDescendant: function(t) {
                                            for (var e = this; e = e._parent; )
                                                if (e === t)
                                                    return !0;
                                            return !1
                                        },
                                        isAncestor: function(t) {
                                            return !!t && t.isDescendant(this)
                                        },
                                        isSibling: function(t) {
                                            return this._parent === t._parent
                                        },
                                        isGroupedWith: function(t) {
                                            for (var e = this._parent; e; ) {
                                                if (e._parent && /^(Group|Layer|CompoundPath)$/.test(e._class) && t.isDescendant(e))
                                                    return !0;
                                                e = e._parent
                                            }
                                            return !1
                                        }
                                    }, u.each(["rotate", "scale", "shear", "skew"], (function(t) {
                                            var e = "rotate" === t;
                                            this[t] = function() {
                                                var i = arguments
                                                    , n = (e ? u : _).read(i);
                                                i = _.read(i, 0, {
                                                    readNull: !0
                                                });
                                                return this.transform((new M)[t](n, i || this.getPosition(!0)))
                                            }
                                        }
                                    ), {
                                        translate: function() {
                                            var t = new M;
                                            return this.transform(t.translate.apply(t, arguments))
                                        },
                                        transform: function(t, e, i) {
                                            var n, r, s = this._matrix, a = t && !t.isIdentity(), o = i && this._canApplyMatrix || this._applyMatrix && (a || !s.isIdentity() || e && this._children);
                                            if (!a && !o)
                                                return this;
                                            a && (!t.isInvertible() && s.isInvertible() && (s._backup = s.getValues()),
                                                s.prepend(t, !0),
                                                n = (r = this._style).getFillColor(!0),
                                                r = r.getStrokeColor(!0),
                                            n && n.transform(t),
                                            r && r.transform(t)),
                                            (o = o && this._transformContent(s, e, i)) && ((e = this._pivot) && s._transformPoint(e, e, !0),
                                                s.reset(!0),
                                            i && this._canApplyMatrix && (this._applyMatrix = !0));
                                            var h = this._bounds;
                                            s = this._position;
                                            if ((a || o) && this._changed(25),
                                            (i = a && h && t.decompose()) && i.skewing.isZero() && i.rotation % 90 == 0) {
                                                for (var l in h) {
                                                    var u = h[l];
                                                    u.nonscaling ? delete h[l] : !o && u.internal || (u = u.rect,
                                                        t._transformBounds(u, u))
                                                }
                                                (i = (this._bounds = h)[this._getBoundsCacheKey(this._boundsOptions || {})]) && (this._position = this._getPositionFromBounds(i.rect))
                                            } else
                                                a && s && this._pivot && (this._position = t._transformPoint(s, s));
                                            return this
                                        },
                                        _transformContent: function(t, e, i) {
                                            var n = this._children;
                                            if (n) {
                                                for (var r = 0, s = n.length; r < s; r++)
                                                    n[r].transform(t, e, i);
                                                return !0
                                            }
                                        },
                                        globalToLocal: function() {
                                            return this.getGlobalMatrix(!0)._inverseTransform(_.read(arguments))
                                        },
                                        localToGlobal: function() {
                                            return this.getGlobalMatrix(!0)._transformPoint(_.read(arguments))
                                        },
                                        parentToLocal: function() {
                                            return this._matrix._inverseTransform(_.read(arguments))
                                        },
                                        localToParent: function() {
                                            return this._matrix._transformPoint(_.read(arguments))
                                        },
                                        fitBounds: function(t, e) {
                                            t = w.read(arguments);
                                            var i = this.getBounds()
                                                , n = i.height / i.width
                                                , r = t.height / t.width;
                                            r = (e ? r < n : n < r) ? t.width / i.width : t.height / i.height;
                                            (r = new w(new _,new x(i.width * r,i.height * r))).setCenter(t.getCenter()),
                                                this.setBounds(r)
                                        }
                                    }), {
                                        _setStyles: function(t, e, i) {
                                            var n, r, s = this._style, a = this._matrix;
                                            s.hasFill() && (t.fillStyle = s.getFillColor().toCanvasStyle(t, a)),
                                            s.hasStroke() && (t.strokeStyle = s.getStrokeColor().toCanvasStyle(t, a),
                                                t.lineWidth = s.getStrokeWidth(),
                                                n = s.getStrokeJoin(),
                                                r = s.getStrokeCap(),
                                                a = s.getMiterLimit(),
                                            n && (t.lineJoin = n),
                                            r && (t.lineCap = r),
                                            a && (t.miterLimit = a),
                                            Ut.support.nativeDash && (r = s.getDashArray(),
                                                a = s.getDashOffset(),
                                            r && r.length && ("setLineDash"in t ? (t.setLineDash(r),
                                                t.lineDashOffset = a) : (t.mozDash = r,
                                                t.mozDashOffset = a)))),
                                            s.hasShadow() && (e = e.pixelRatio || 1,
                                                e = (i = i._shiftless().prepend((new M).scale(e, e))).transform(new _(s.getShadowBlur(),0)),
                                                i = i.transform(this.getShadowOffset()),
                                                t.shadowColor = s.getShadowColor().toCanvasStyle(t),
                                                t.shadowBlur = e.getLength(),
                                                t.shadowOffsetX = i.x,
                                                t.shadowOffsetY = i.y)
                                        },
                                        draw: function(t, e, i) {
                                            if (this._updateVersion = this._project._updateVersion,
                                            this._visible && 0 !== this._opacity) {
                                                var n = e.matrices
                                                    , r = e.viewMatrix
                                                    , s = this._matrix;
                                                if ((f = n[n.length - 1].appended(s)).isInvertible()) {
                                                    r = r ? r.appended(f) : f,
                                                        n.push(f),
                                                    e.updateMatrix && (this._globalMatrix = f);
                                                    var a, o, h, l = this._blendMode, u = g.clamp(this._opacity, 0, 1), c = "normal" === l, d = gt.nativeModes[l], p = c && 1 === u || e.dontStart || e.clip || (d || c && u < 1) && this._canComposite(), f = e.pixelRatio || 1;
                                                    if (!p) {
                                                        if (!(m = this.getStrokeBounds(r)).width || !m.height)
                                                            return void n.pop();
                                                        h = e.offset,
                                                            o = e.offset = m.getTopLeft().floor(),
                                                            a = t,
                                                            t = mt.getContext(m.getSize().ceil().add(1).multiply(f)),
                                                        1 !== f && t.scale(f, f)
                                                    }
                                                    t.save();
                                                    c = i ? i.appended(s) : this._canScaleStroke && !this.getStrokeScaling(!0) && r;
                                                    var m = !p && e.clipItem;
                                                    i = !c || m;
                                                    p ? (t.globalAlpha = u,
                                                    d && (t.globalCompositeOperation = l)) : i && t.translate(-o.x, -o.y),
                                                    i && (p ? s : r).applyToContext(t),
                                                    m && e.clipItem.draw(t, e.extend({
                                                        clip: !0
                                                    })),
                                                    c && (t.setTransform(f, 0, 0, f, 0, 0),
                                                    (m = e.offset) && t.translate(-m.x, -m.y)),
                                                        this._draw(t, e, r, c),
                                                        t.restore(),
                                                        n.pop(),
                                                    e.clip && !e.dontFinish && t.clip(this.getFillRule()),
                                                    p || (gt.process(l, t, a, u, o.subtract(h).multiply(f)),
                                                        mt.release(t),
                                                        e.offset = h)
                                                }
                                            }
                                        },
                                        _isUpdated: function(t) {
                                            var e = this._parent;
                                            if (e instanceof U)
                                                return e._isUpdated(t);
                                            var i = this._updateVersion === t;
                                            return !i && e && e._visible && e._isUpdated(t) && (this._updateVersion = t,
                                                i = !0),
                                                i
                                        },
                                        _drawSelection: function(t, e, i, n, r) {
                                            var s = 1 & (o = this._selection)
                                                , a = 2 & o || s && this._selectBounds
                                                , o = 4 & o;
                                            if (((s = !!this._drawSelected && s) || a || o) && this._isUpdated(r)) {
                                                var h = this.getSelectedColor(!0) || (h = this.getLayer()) && h.getSelectedColor(!0)
                                                    , l = (e = e.appended(this.getGlobalMatrix(!0)),
                                                i / 2);
                                                if (t.strokeStyle = t.fillStyle = h ? h.toCanvasStyle(t) : "#009dec",
                                                s && this._drawSelected(t, e, n),
                                                    o) {
                                                    n = this.getPosition(!0);
                                                    var u = (n = (o = this._parent) ? o.localToGlobal(n) : n).x
                                                        , c = n.y;
                                                    t.beginPath(),
                                                        t.arc(u, c, l, 0, 2 * Math.PI, !0),
                                                        t.stroke();
                                                    for (var d = [[0, -1], [1, 0], [0, 1], [-1, 0]], p = l, f = i + 1, m = 0; m < 4; m++) {
                                                        var g = (v = d[m])[0]
                                                            , v = v[1];
                                                        t.moveTo(u + g * p, c + v * p),
                                                            t.lineTo(u + g * f, c + v * f),
                                                            t.stroke()
                                                    }
                                                }
                                                if (a) {
                                                    var _ = e._transformCorners(this.getInternalBounds());
                                                    for (t.beginPath(),
                                                             m = 0; m < 8; m++)
                                                        t[m ? "lineTo" : "moveTo"](_[m], _[++m]);
                                                    for (t.closePath(),
                                                             t.stroke(),
                                                             m = 0; m < 8; m++)
                                                        t.fillRect(_[m] - l, _[++m] - l, i, i)
                                                }
                                            }
                                        },
                                        _canComposite: function() {
                                            return !1
                                        }
                                    }, u.each(["down", "drag", "up", "move"], (function(t) {
                                            this["removeOn" + u.capitalize(t)] = function() {
                                                var e = {};
                                                return e[t] = !0,
                                                    this.removeOn(e)
                                            }
                                        }
                                    ), {
                                        removeOn: function(t) {
                                            for (var e in t) {
                                                var i;
                                                t[e] && (i = "mouse" + e,
                                                    (e = (e = this._project)._removeSets = e._removeSets || {})[i] = e[i] || {},
                                                    e[i][this._id] = this)
                                            }
                                            return this
                                        }
                                    }), {
                                        tween: function(t, e, i) {
                                            i || (i = e,
                                                e = t,
                                                t = null,
                                            i || (i = e,
                                                e = null));
                                            var n = i && i.easing
                                                , r = i && i.start
                                                , s = (i = null != i && ("number" == typeof i ? i : i.duration),
                                                new pt(this,t,e,i,n,r));
                                            return i && this.on("frame", (function t(e) {
                                                    s._handleFrame(1e3 * e.time),
                                                    s.running || this.off("frame", t)
                                                }
                                            )),
                                                s
                                        },
                                        tweenTo: function(t, e) {
                                            return this.tween(null, t, e)
                                        },
                                        tweenFrom: function(t, e) {
                                            return this.tween(t, null, e)
                                        }
                                    })
                                    , P = T.extend({
                                    _class: "Group",
                                    _selectBounds: !1,
                                    _selectChildren: !0,
                                    _serializeFields: {
                                        children: []
                                    },
                                    initialize: function(t) {
                                        this._children = [],
                                            this._namedChildren = {},
                                        this._initialize(t) || this.addChildren(Array.isArray(t) ? t : arguments)
                                    },
                                    _changed: function t(e) {
                                        t.base.call(this, e),
                                        2050 & e && (this._clipItem = o)
                                    },
                                    _getClipItem: function() {
                                        if ((t = this._clipItem) === o) {
                                            for (var t = null, e = this._children, i = 0, n = e.length; i < n; i++)
                                                if (e[i]._clipMask) {
                                                    t = e[i];
                                                    break
                                                }
                                            this._clipItem = t
                                        }
                                        return t
                                    },
                                    isClipped: function() {
                                        return !!this._getClipItem()
                                    },
                                    setClipped: function(t) {
                                        var e = this.getFirstChild();
                                        e && e.setClipMask(t)
                                    },
                                    _getBounds: function t(e, i) {
                                        var n = this._getClipItem();
                                        return n ? n._getCachedBounds(n._matrix.prepended(e), u.set({}, i, {
                                            stroke: !1
                                        })) : t.base.call(this, e, i)
                                    },
                                    _hitTestChildren: function t(e, i, n) {
                                        var r = this._getClipItem();
                                        return (!r || r.contains(e)) && t.base.call(this, e, i, n, r)
                                    },
                                    _draw: function(t, e) {
                                        var i = e.clip
                                            , n = !i && this._getClipItem();
                                        e = e.extend({
                                            clipItem: n,
                                            clip: !1
                                        }),
                                            i ? (t.beginPath(),
                                                e.dontStart = e.dontFinish = !0) : n && n.draw(t, e.extend({
                                                clip: !0
                                            }));
                                        for (var r = this._children, s = 0, a = r.length; s < a; s++) {
                                            var o = r[s];
                                            o !== n && o.draw(t, e)
                                        }
                                    }
                                })
                                    , E = P.extend({
                                    _class: "Layer",
                                    initialize: function() {
                                        P.apply(this, arguments)
                                    },
                                    _getOwner: function() {
                                        return this._parent || null != this._index && this._project
                                    },
                                    isInserted: function t() {
                                        return this._parent ? t.base.call(this) : null != this._index
                                    },
                                    activate: function() {
                                        this._project._activeLayer = this
                                    },
                                    _hitTestSelf: function() {}
                                })
                                    , L = T.extend({
                                        _class: "Shape",
                                        _applyMatrix: !1,
                                        _canApplyMatrix: !1,
                                        _canScaleStroke: !0,
                                        _serializeFields: {
                                            type: null,
                                            size: null,
                                            radius: null
                                        },
                                        initialize: function(t, e) {
                                            this._initialize(t, e)
                                        },
                                        _equals: function(t) {
                                            return this._type === t._type && this._size.equals(t._size) && u.equals(this._radius, t._radius)
                                        },
                                        copyContent: function(t) {
                                            this.setType(t._type),
                                                this.setSize(t._size),
                                                this.setRadius(t._radius)
                                        },
                                        getType: function() {
                                            return this._type
                                        },
                                        setType: function(t) {
                                            this._type = t
                                        },
                                        getShape: "#getType",
                                        setShape: "#setType",
                                        getSize: function() {
                                            var t = this._size;
                                            return new b(t.width,t.height,this,"setSize")
                                        },
                                        setSize: function() {
                                            var t, e, i, n = x.read(arguments);
                                            this._size ? this._size.equals(n) || (t = this._type,
                                                e = n.width,
                                                i = n.height,
                                                "rectangle" === t ? this._radius.set(x.min(this._radius, n.divide(2).abs())) : "circle" === t ? (e = i = (e + i) / 2,
                                                    this._radius = e / 2) : "ellipse" === t && this._radius._set(e / 2, i / 2),
                                                this._size._set(e, i),
                                                this._changed(9)) : this._size = n.clone()
                                        },
                                        getRadius: function() {
                                            var t = this._radius;
                                            return "circle" === this._type ? t : new b(t.width,t.height,this,"setRadius")
                                        },
                                        setRadius: function(t) {
                                            var e = this._type;
                                            if ("circle" === e) {
                                                if (t === this._radius)
                                                    return;
                                                var i = 2 * t;
                                                this._radius = t,
                                                    this._size._set(i, i)
                                            } else if (t = x.read(arguments),
                                                this._radius) {
                                                if (this._radius.equals(t))
                                                    return;
                                                this._radius.set(t),
                                                    "rectangle" === e ? (i = x.max(this._size, t.multiply(2)),
                                                        this._size.set(i)) : "ellipse" === e && this._size._set(2 * t.width, 2 * t.height)
                                            } else
                                                this._radius = t.clone();
                                            this._changed(9)
                                        },
                                        isEmpty: function() {
                                            return !1
                                        },
                                        toPath: function(t) {
                                            var e = new (V[u.capitalize(this._type)])({
                                                center: new _,
                                                size: this._size,
                                                radius: this._radius,
                                                insert: !1
                                            });
                                            return e.copyAttributes(this),
                                            Ut.settings.applyMatrix && e.setApplyMatrix(!0),
                                            t !== o && !t || e.insertAbove(this),
                                                e
                                        },
                                        toShape: "#clone",
                                        _asPathItem: function() {
                                            return this.toPath(!1)
                                        },
                                        _draw: function(t, e, i, n) {
                                            var r, s, a, o, h, l = this._style, u = l.hasFill(), c = l.hasStroke(), d = e.dontFinish || e.clip, p = !n;
                                            (u || c || d) && (a = this._type,
                                                o = this._radius,
                                                h = "circle" === a,
                                            e.dontStart || t.beginPath(),
                                                p && h ? t.arc(0, 0, o, 0, 2 * Math.PI, !0) : (r = h ? o : o.width,
                                                    s = h ? o : o.height,
                                                    o = (h = this._size).width,
                                                    h = h.height,
                                                    p && "rectangle" === a && 0 === r && 0 === s ? t.rect(-o / 2, -h / 2, o, h) : (h = [-(p = o / 2), -(a = h / 2) + s, -p, (h = s * (o = .44771525016920644)) - a, (o *= r) - p, -a, -p + r, -a, p - r, -a, p - o, -a, p, h - a, p, -a + s, p, a - s, p, a - h, p - o, a, p - r, a, -p + r, a, o - p, a, -p, a - h, -p, a - s],
                                                    n && n.transform(h, h, 32),
                                                        t.moveTo(h[0], h[1]),
                                                        t.bezierCurveTo(h[2], h[3], h[4], h[5], h[6], h[7]),
                                                    p !== r && t.lineTo(h[8], h[9]),
                                                        t.bezierCurveTo(h[10], h[11], h[12], h[13], h[14], h[15]),
                                                    a !== s && t.lineTo(h[16], h[17]),
                                                        t.bezierCurveTo(h[18], h[19], h[20], h[21], h[22], h[23]),
                                                    p !== r && t.lineTo(h[24], h[25]),
                                                        t.bezierCurveTo(h[26], h[27], h[28], h[29], h[30], h[31]))),
                                                t.closePath()),
                                            d || !u && !c || (this._setStyles(t, e, i),
                                            u && (t.fill(l.getFillRule()),
                                                t.shadowColor = "rgba(0,0,0,0)"),
                                            c && t.stroke())
                                        },
                                        _canComposite: function() {
                                            return !(this.hasFill() && this.hasStroke())
                                        },
                                        _getBounds: function(t, e) {
                                            var i = new w(this._size).setCenter(0, 0)
                                                , n = this._style;
                                            n = e.stroke && n.hasStroke() && n.getStrokeWidth();
                                            return t && (i = t._transformBounds(i)),
                                                n ? i.expand(V._getStrokePadding(n, this._getStrokeMatrix(t, e))) : i
                                        }
                                    }, new function() {
                                        function t(t, e, i) {
                                            var n = t._radius;
                                            if (!n.isZero())
                                                for (var r = t._size.divide(2), s = 1; s <= 4; s++) {
                                                    var a = new _(1 < s && s < 4 ? -1 : 1,2 < s ? -1 : 1)
                                                        , o = a.multiply(r)
                                                        , h = o.subtract(a.multiply(n));
                                                    if (new w(i ? o.add(a.multiply(i)) : o,h).contains(e))
                                                        return {
                                                            point: h,
                                                            quadrant: s
                                                        }
                                                }
                                        }
                                        function e(t, e, i, n) {
                                            return t = t.divide(e),
                                            (!n || t.isInQuadrant(n)) && t.subtract(t.normalize()).multiply(e).divide(i).length <= 1
                                        }
                                        return {
                                            _contains: function e(i) {
                                                if ("rectangle" !== this._type)
                                                    return i.divide(this.size).getLength() <= .5;
                                                var n = t(this, i);
                                                return n ? i.subtract(n.point).divide(this._radius).getLength() <= 1 : e.base.call(this, i)
                                            },
                                            _hitTestSelf: function i(n, r, s, a) {
                                                var o, h, l, u = !1, c = this._style, d = r.stroke && c.hasStroke(), p = r.fill && c.hasFill();
                                                return (d || p) && (h = this._type,
                                                    o = this._radius,
                                                    l = d ? c.getStrokeWidth() / 2 : 0,
                                                    p = r._tolerancePadding.add(V._getStrokePadding(l, !c.getStrokeScaling() && a)),
                                                    u = "rectangle" === h ? (c = t(this, n, l = p.multiply(2))) ? e(n.subtract(c.point), o, p, c.quadrant) : (c = (h = new w(this._size).setCenter(0, 0)).expand(l),
                                                        l = h.expand(l.negate()),
                                                    c._containsPoint(n) && !l._containsPoint(n)) : e(n, o, p)),
                                                    u ? new O(d ? "stroke" : "fill",this) : i.base.apply(this, arguments)
                                            }
                                        }
                                    }
                                    , {
                                        statics: new function() {
                                            function t(t, e, i, n, r) {
                                                var s = u.create(L.prototype);
                                                return s._type = t,
                                                    s._size = i,
                                                    s._radius = n,
                                                    s._initialize(u.getNamed(r), e),
                                                    s
                                            }
                                            return {
                                                Circle: function() {
                                                    var e = arguments
                                                        , i = _.readNamed(e, "center")
                                                        , n = u.readNamed(e, "radius");
                                                    return t("circle", i, new x(2 * n), n, e)
                                                },
                                                Rectangle: function() {
                                                    var e = arguments
                                                        , i = w.readNamed(e, "rectangle")
                                                        , n = x.min(x.readNamed(e, "radius"), i.getSize(!0).divide(2));
                                                    return t("rectangle", i.getCenter(!0), i.getSize(!0), n, e)
                                                },
                                                Ellipse: function() {
                                                    var e = arguments
                                                        , i = L._readEllipse(e)
                                                        , n = i.radius;
                                                    return t("ellipse", i.center, n.multiply(2), n, e)
                                                },
                                                _readEllipse: function(t) {
                                                    var e, i;
                                                    return i = u.hasNamed(t, "radius") ? (e = _.readNamed(t, "center"),
                                                        x.readNamed(t, "radius")) : (e = (i = w.readNamed(t, "rectangle")).getCenter(!0),
                                                        i.getSize(!0).divide(2)),
                                                        {
                                                            center: e,
                                                            radius: i
                                                        }
                                                }
                                            }
                                        }
                                    })
                                    , I = T.extend({
                                    _class: "Raster",
                                    _applyMatrix: !1,
                                    _canApplyMatrix: !1,
                                    _boundsOptions: {
                                        stroke: !1,
                                        handle: !1
                                    },
                                    _serializeFields: {
                                        crossOrigin: null,
                                        source: null
                                    },
                                    _prioritize: ["crossOrigin"],
                                    _smoothing: "low",
                                    beans: !0,
                                    initialize: function(t, e) {
                                        var i, n;
                                        this._initialize(t, e !== o && _.read(arguments)) || ((n = "string" == (n = typeof t) ? l.getElementById(t) : "object" == n ? t : null) && n !== T.NO_INSERT && (n.getContext || null != n.naturalHeight ? i = n : n && ((n = x.read(arguments)).isZero() || (i = mt.getCanvas(n)))),
                                            i ? this.setImage(i) : this.setSource(t)),
                                        this._size || (this._size = new x,
                                            this._loaded = !1)
                                    },
                                    _equals: function(t) {
                                        return this.getSource() === t.getSource()
                                    },
                                    copyContent: function(t) {
                                        var e = t._image
                                            , i = t._canvas;
                                        e ? this._setImage(e) : i && ((e = mt.getCanvas(t._size)).getContext("2d").drawImage(i, 0, 0),
                                            this._setImage(e)),
                                            this._crossOrigin = t._crossOrigin
                                    },
                                    getSize: function() {
                                        var t = this._size;
                                        return new b(t ? t.width : 0,t ? t.height : 0,this,"setSize")
                                    },
                                    setSize: function(t, e) {
                                        var i, n = x.read(arguments);
                                        n.equals(this._size) ? e && this.clear() : 0 < n.width && 0 < n.height ? (i = !e && this.getElement(),
                                            this._setImage(mt.getCanvas(n)),
                                        i && this.getContext(!0).drawImage(i, 0, 0, n.width, n.height)) : (this._canvas && mt.release(this._canvas),
                                            this._size = n.clone())
                                    },
                                    getWidth: function() {
                                        return this._size ? this._size.width : 0
                                    },
                                    setWidth: function(t) {
                                        this.setSize(t, this.getHeight())
                                    },
                                    getHeight: function() {
                                        return this._size ? this._size.height : 0
                                    },
                                    setHeight: function(t) {
                                        this.setSize(this.getWidth(), t)
                                    },
                                    getLoaded: function() {
                                        return this._loaded
                                    },
                                    isEmpty: function() {
                                        var t = this._size;
                                        return !t || 0 === t.width && 0 === t.height
                                    },
                                    getResolution: function() {
                                        var t = this._matrix
                                            , e = new _(0,0).transform(t)
                                            , i = new _(1,0).transform(t).subtract(e);
                                        e = new _(0,1).transform(t).subtract(e);
                                        return new x(72 / i.getLength(),72 / e.getLength())
                                    },
                                    getPpi: "#getResolution",
                                    getImage: function() {
                                        return this._image
                                    },
                                    setImage: function(t) {
                                        var e = this;
                                        function i(t) {
                                            var i = e.getView()
                                                , n = t && t.type || "load";
                                            i && e.responds(n) && (Ut = i._scope,
                                                e.emit(n, new ot(t)))
                                        }
                                        this._setImage(t),
                                            this._loaded ? setTimeout(i, 0) : t && Q.add(t, {
                                                load: function(n) {
                                                    e._setImage(t),
                                                        i(n)
                                                },
                                                error: i
                                            })
                                    },
                                    _setImage: function(t) {
                                        this._canvas && mt.release(this._canvas),
                                            t && t.getContext ? (this._image = null,
                                                this._canvas = t,
                                                this._loaded = !0) : (this._image = t,
                                                this._canvas = null,
                                                this._loaded = !!(t && t.src && t.complete)),
                                            this._size = new x(t ? t.naturalWidth || t.width : 0,t ? t.naturalHeight || t.height : 0),
                                            this._context = null,
                                            this._changed(1033)
                                    },
                                    getCanvas: function() {
                                        if (!this._canvas) {
                                            var t = mt.getContext(this._size);
                                            try {
                                                this._image && t.drawImage(this._image, 0, 0),
                                                    this._canvas = t.canvas
                                            } catch (e) {
                                                mt.release(t)
                                            }
                                        }
                                        return this._canvas
                                    },
                                    setCanvas: "#setImage",
                                    getContext: function(t) {
                                        return this._context || (this._context = this.getCanvas().getContext("2d")),
                                        t && (this._image = null,
                                            this._changed(1025)),
                                            this._context
                                    },
                                    setContext: function(t) {
                                        this._context = t
                                    },
                                    getSource: function() {
                                        var t = this._image;
                                        return t && t.src || this.toDataURL()
                                    },
                                    setSource: function(t) {
                                        var e = new a.Image
                                            , i = this._crossOrigin;
                                        i && (e.crossOrigin = i),
                                        t && (e.src = t),
                                            this.setImage(e)
                                    },
                                    getCrossOrigin: function() {
                                        var t = this._image;
                                        return t && t.crossOrigin || this._crossOrigin || ""
                                    },
                                    setCrossOrigin: function(t) {
                                        this._crossOrigin = t;
                                        var e = this._image;
                                        e && (e.crossOrigin = t)
                                    },
                                    getSmoothing: function() {
                                        return this._smoothing
                                    },
                                    setSmoothing: function(t) {
                                        this._smoothing = "string" == typeof t ? t : t ? "low" : "off",
                                            this._changed(257)
                                    },
                                    getElement: function() {
                                        return this._canvas || this._loaded && this._image
                                    }
                                }, {
                                    beans: !1,
                                    getSubCanvas: function() {
                                        var t = w.read(arguments)
                                            , e = mt.getContext(t.getSize());
                                        return e.drawImage(this.getCanvas(), t.x, t.y, t.width, t.height, 0, 0, t.width, t.height),
                                            e.canvas
                                    },
                                    getSubRaster: function() {
                                        var t = w.read(arguments)
                                            , e = new I(T.NO_INSERT);
                                        return e._setImage(this.getSubCanvas(t)),
                                            e.translate(t.getCenter().subtract(this.getSize().divide(2))),
                                            e._matrix.prepend(this._matrix),
                                            e.insertAbove(this),
                                            e
                                    },
                                    toDataURL: function() {
                                        var t = (t = this._image) && t.src;
                                        return /^data:/.test(t) ? t : (t = this.getCanvas()) ? t.toDataURL.apply(t, arguments) : null
                                    },
                                    drawImage: function(t) {
                                        var e = _.read(arguments, 1);
                                        this.getContext(!0).drawImage(t, e.x, e.y)
                                    },
                                    getAverageColor: function(t) {
                                        if (t ? t instanceof B ? r = (n = t).getBounds() : "object" == typeof t && ("width"in t ? r = new w(t) : "x"in t && (r = new w(t.x - .5,t.y - .5,1,1))) : r = this.getBounds(),
                                            !r)
                                            return null;
                                        var e = Math.min(r.width, 32)
                                            , i = Math.min(r.height, 32);
                                        (t = I._sampleContext) ? t.clearRect(0, 0, 33, 33) : t = I._sampleContext = mt.getContext(new x(32)),
                                            t.save(),
                                            (r = (new M).scale(e / r.width, i / r.height).translate(-r.x, -r.y)).applyToContext(t),
                                        n && n.draw(t, new u({
                                            clip: !0,
                                            matrices: [r]
                                        })),
                                            this._matrix.applyToContext(t);
                                        var n = this.getElement()
                                            , r = this._size;
                                        n && t.drawImage(n, -r.width / 2, -r.height / 2),
                                            t.restore();
                                        for (var s = t.getImageData(.5, .5, Math.ceil(e), Math.ceil(i)).data, a = [0, 0, 0], o = 0, h = 0, l = s.length; h < l; h += 4) {
                                            var c = s[h + 3];
                                            o += c,
                                                c /= 255,
                                                a[0] += s[h] * c,
                                                a[1] += s[h + 1] * c,
                                                a[2] += s[h + 2] * c
                                        }
                                        for (h = 0; h < 3; h++)
                                            a[h] /= o;
                                        return o ? q.read(a) : null
                                    },
                                    getPixel: function() {
                                        var t = _.read(arguments);
                                        t = this.getContext().getImageData(t.x, t.y, 1, 1).data;
                                        return new q("rgb",[t[0] / 255, t[1] / 255, t[2] / 255],t[3] / 255)
                                    },
                                    setPixel: function() {
                                        var t, e = arguments, i = _.read(e), n = (t = q.read(e))._convert("rgb"), r = t._alpha, s = this.getContext(!0);
                                        (t = (e = s.createImageData(1, 1)).data)[0] = 255 * n[0],
                                            t[1] = 255 * n[1],
                                            t[2] = 255 * n[2],
                                            t[3] = null != r ? 255 * r : 255,
                                            s.putImageData(e, i.x, i.y)
                                    },
                                    clear: function() {
                                        var t = this._size;
                                        this.getContext(!0).clearRect(0, 0, t.width + 1, t.height + 1)
                                    },
                                    createImageData: function() {
                                        var t = x.read(arguments);
                                        return this.getContext().createImageData(t.width, t.height)
                                    },
                                    getImageData: function() {
                                        var t = w.read(arguments);
                                        return t.isEmpty() && (t = new w(this._size)),
                                            this.getContext().getImageData(t.x, t.y, t.width, t.height)
                                    },
                                    setImageData: function(t) {
                                        var e = _.read(arguments, 1);
                                        this.getContext(!0).putImageData(t, e.x, e.y)
                                    },
                                    _getBounds: function(t, e) {
                                        var i = new w(this._size).setCenter(0, 0);
                                        return t ? t._transformBounds(i) : i
                                    },
                                    _hitTestSelf: function(t) {
                                        if (this._contains(t)) {
                                            var e = this;
                                            return new O("pixel",e,{
                                                offset: t.add(e._size.divide(2)).round(),
                                                color: {
                                                    get: function() {
                                                        return e.getPixel(this.offset)
                                                    }
                                                }
                                            })
                                        }
                                    },
                                    _draw: function(t, e, i) {
                                        var n = this.getElement();
                                        n && 0 < n.width && 0 < n.height && (t.globalAlpha = g.clamp(this._opacity, 0, 1),
                                            this._setStyles(t, e, i),
                                            e = this._smoothing,
                                            Y.setPrefixed(t, (i = "off" === e) ? "imageSmoothingEnabled" : "imageSmoothingQuality", !i && e),
                                            t.drawImage(n, -this._size.width / 2, -this._size.height / 2))
                                    },
                                    _canComposite: function() {
                                        return !0
                                    }
                                })
                                    , k = T.extend({
                                    _class: "SymbolItem",
                                    _applyMatrix: !1,
                                    _canApplyMatrix: !1,
                                    _boundsOptions: {
                                        stroke: !0
                                    },
                                    _serializeFields: {
                                        symbol: null
                                    },
                                    initialize: function(t, e) {
                                        this._initialize(t, e !== o && _.read(arguments, 1)) || this.setDefinition(t instanceof N ? t : new N(t))
                                    },
                                    _equals: function(t) {
                                        return this._definition === t._definition
                                    },
                                    copyContent: function(t) {
                                        this.setDefinition(t._definition)
                                    },
                                    getDefinition: function() {
                                        return this._definition
                                    },
                                    setDefinition: function(t) {
                                        this._definition = t,
                                            this._changed(9)
                                    },
                                    getSymbol: "#getDefinition",
                                    setSymbol: "#setDefinition",
                                    isEmpty: function() {
                                        return this._definition._item.isEmpty()
                                    },
                                    _getBounds: function(t, e) {
                                        var i = this._definition._item;
                                        return i._getCachedBounds(i._matrix.prepended(t), e)
                                    },
                                    _hitTestSelf: function(t, e, i) {
                                        return e = e.extend({
                                            all: !1
                                        }),
                                        (i = this._definition._item._hitTest(t, e, i)) && (i.item = this),
                                            i
                                    },
                                    _draw: function(t, e) {
                                        this._definition._item.draw(t, e)
                                    }
                                })
                                    , N = u.extend({
                                    _class: "SymbolDefinition",
                                    initialize: function(t, e) {
                                        this._id = v.get(),
                                            this.project = Ut.project,
                                        t && this.setItem(t, e)
                                    },
                                    _serialize: function(t, e) {
                                        return e.add(this, (function() {
                                                return u.serialize([this._class, this._item], t, !1, e)
                                            }
                                        ))
                                    },
                                    _changed: function(t) {
                                        8 & t && T._clearBoundsCache(this),
                                        1 & t && this.project._changed(t)
                                    },
                                    getItem: function() {
                                        return this._item
                                    },
                                    setItem: function(t, e) {
                                        t._symbol && (t = t.clone()),
                                        this._item && (this._item._symbol = null),
                                            (this._item = t).remove(),
                                            t.setSelected(!1),
                                        e || t.setPosition(new _),
                                            (t._symbol = this)._changed(9)
                                    },
                                    getDefinition: "#getItem",
                                    setDefinition: "#setItem",
                                    place: function(t) {
                                        return new k(this,t)
                                    },
                                    clone: function() {
                                        return new N(this._item.clone(!1))
                                    },
                                    equals: function(t) {
                                        return t === this || t && this._item.equals(t._item) || !1
                                    }
                                })
                                    , O = u.extend({
                                    _class: "HitResult",
                                    initialize: function(t, e, i) {
                                        this.type = t,
                                            this.item = e,
                                        i && this.inject(i)
                                    },
                                    statics: {
                                        getOptions: function(t) {
                                            return t = t && u.read(t),
                                                new u({
                                                    type: null,
                                                    tolerance: Ut.settings.hitTolerance,
                                                    fill: !t,
                                                    stroke: !t,
                                                    segments: !t,
                                                    handles: !1,
                                                    ends: !1,
                                                    position: !1,
                                                    center: !1,
                                                    bounds: !1,
                                                    guides: !1,
                                                    selected: !1
                                                },t)
                                        }
                                    }
                                })
                                    , D = u.extend({
                                    _class: "Segment",
                                    beans: !0,
                                    _selection: 0,
                                    initialize: function(t, e, i, n, r, s) {
                                        var a, h, l, u, c = arguments.length;
                                        0 < c && (null == t || "object" == typeof t ? u = 1 === c && t && "point"in t ? (a = t.point,
                                            h = t.handleIn,
                                            l = t.handleOut,
                                            t.selection) : (a = t,
                                            h = e,
                                            l = i,
                                            n) : (a = [t, e],
                                            h = i !== o ? [i, n] : null,
                                            l = r !== o ? [r, s] : null)),
                                            new R(a,this,"_point"),
                                            new R(h,this,"_handleIn"),
                                            new R(l,this,"_handleOut"),
                                        u && this.setSelection(u)
                                    },
                                    _serialize: function(t, e) {
                                        var i = this._point
                                            , n = this._selection;
                                        i = n || this.hasHandles() ? [i, this._handleIn, this._handleOut] : i;
                                        return n && i.push(n),
                                            u.serialize(i, t, !0, e)
                                    },
                                    _changed: function(t) {
                                        var e, i, n, r = this._path;
                                        r && (e = r._curves,
                                            i = this._index,
                                        e && (t && t !== this._point && t !== this._handleIn || !(n = 0 < i ? e[i - 1] : r._closed ? e[e.length - 1] : null) || n._changed(),
                                        t && t !== this._point && t !== this._handleOut || !(n = e[i]) || n._changed()),
                                            r._changed(41))
                                    },
                                    getPoint: function() {
                                        return this._point
                                    },
                                    setPoint: function() {
                                        this._point.set(_.read(arguments))
                                    },
                                    getHandleIn: function() {
                                        return this._handleIn
                                    },
                                    setHandleIn: function() {
                                        this._handleIn.set(_.read(arguments))
                                    },
                                    getHandleOut: function() {
                                        return this._handleOut
                                    },
                                    setHandleOut: function() {
                                        this._handleOut.set(_.read(arguments))
                                    },
                                    hasHandles: function() {
                                        return !this._handleIn.isZero() || !this._handleOut.isZero()
                                    },
                                    isSmooth: function() {
                                        var t = this._handleIn
                                            , e = this._handleOut;
                                        return !t.isZero() && !e.isZero() && t.isCollinear(e)
                                    },
                                    clearHandles: function() {
                                        this._handleIn._set(0, 0),
                                            this._handleOut._set(0, 0)
                                    },
                                    getSelection: function() {
                                        return this._selection
                                    },
                                    setSelection: function(t) {
                                        var e = this._selection
                                            , i = this._path;
                                        this._selection = t = t || 0,
                                        i && t !== e && (i._updateSelection(this, e, t),
                                            i._changed(257))
                                    },
                                    _changeSelection: function(t, e) {
                                        var i = this._selection;
                                        this.setSelection(e ? i | t : i & ~t)
                                    },
                                    isSelected: function() {
                                        return !!(7 & this._selection)
                                    },
                                    setSelected: function(t) {
                                        this._changeSelection(7, t)
                                    },
                                    getIndex: function() {
                                        return this._index !== o ? this._index : null
                                    },
                                    getPath: function() {
                                        return this._path || null
                                    },
                                    getCurve: function() {
                                        var t = this._path
                                            , e = this._index;
                                        return t ? (0 < e && !t._closed && e === t._segments.length - 1 && e--,
                                        t.getCurves()[e] || null) : null
                                    },
                                    getLocation: function() {
                                        var t = this.getCurve();
                                        return t ? new F(t,this === t._segment1 ? 0 : 1) : null
                                    },
                                    getNext: function() {
                                        var t = this._path && this._path._segments;
                                        return t && (t[this._index + 1] || this._path._closed && t[0]) || null
                                    },
                                    smooth: function(t, e, i) {
                                        var n = t || {}
                                            , r = n.type
                                            , s = n.factor
                                            , a = this.getPrevious()
                                            , h = this.getNext()
                                            , l = (a || this)._point
                                            , u = this._point
                                            , c = (h || this)._point
                                            , d = l.getDistance(u);
                                        t = u.getDistance(c);
                                        if (r && "catmull-rom" !== r) {
                                            if ("geometric" !== r)
                                                throw new Error("Smoothing method '" + r + "' not supported.");
                                            a && h && (n = l.subtract(c),
                                                r = (m = s === o ? .4 : s) * d / (d + t),
                                            e || this.setHandleIn(n.multiply(r)),
                                            i || this.setHandleOut(n.multiply(r - m)))
                                        } else {
                                            var p, f, m = s === o ? .5 : s;
                                            d = (s = Math.pow(d, m)) * s,
                                                m = (t = Math.pow(t, m)) * t;
                                            !e && a && (p = 2 * m + 3 * t * s + d,
                                                this.setHandleIn(0 != (f = 3 * t * (t + s)) ? new _((m * l._x + p * u._x - d * c._x) / f - u._x,(m * l._y + p * u._y - d * c._y) / f - u._y) : new _)),
                                            !i && h && (p = 2 * d + 3 * s * t + m,
                                                this.setHandleOut(0 != (f = 3 * s * (s + t)) ? new _((d * c._x + p * u._x - m * l._x) / f - u._x,(d * c._y + p * u._y - m * l._y) / f - u._y) : new _))
                                        }
                                    },
                                    getPrevious: function() {
                                        var t = this._path && this._path._segments;
                                        return t && (t[this._index - 1] || this._path._closed && t[t.length - 1]) || null
                                    },
                                    isFirst: function() {
                                        return !this._index
                                    },
                                    isLast: function() {
                                        var t = this._path;
                                        return t && this._index === t._segments.length - 1 || !1
                                    },
                                    reverse: function() {
                                        var t = this._handleIn
                                            , e = this._handleOut
                                            , i = t.clone();
                                        t.set(e),
                                            e.set(i)
                                    },
                                    reversed: function() {
                                        return new D(this._point,this._handleOut,this._handleIn)
                                    },
                                    remove: function() {
                                        return !!this._path && !!this._path.removeSegment(this._index)
                                    },
                                    clone: function() {
                                        return new D(this._point,this._handleIn,this._handleOut)
                                    },
                                    equals: function(t) {
                                        return t === this || t && this._class === t._class && this._point.equals(t._point) && this._handleIn.equals(t._handleIn) && this._handleOut.equals(t._handleOut) || !1
                                    },
                                    toString: function() {
                                        var t = ["point: " + this._point];
                                        return this._handleIn.isZero() || t.push("handleIn: " + this._handleIn),
                                        this._handleOut.isZero() || t.push("handleOut: " + this._handleOut),
                                        "{ " + t.join(", ") + " }"
                                    },
                                    transform: function(t) {
                                        this._transformCoordinates(t, new Array(6), !0),
                                            this._changed()
                                    },
                                    interpolate: function(t, e, i) {
                                        var n = 1 - i
                                            , r = i
                                            , s = t._point
                                            , a = e._point
                                            , o = t._handleIn;
                                        i = e._handleIn,
                                            e = e._handleOut,
                                            t = t._handleOut;
                                        this._point._set(n * s._x + r * a._x, n * s._y + r * a._y, !0),
                                            this._handleIn._set(n * o._x + r * i._x, n * o._y + r * i._y, !0),
                                            this._handleOut._set(n * t._x + r * e._x, n * t._y + r * e._y, !0),
                                            this._changed()
                                    },
                                    _transformCoordinates: function(t, e, i) {
                                        var n = this._point
                                            , r = i && this._handleIn.isZero() ? null : this._handleIn
                                            , s = i && this._handleOut.isZero() ? null : this._handleOut
                                            , a = n._x
                                            , o = n._y
                                            , h = 2;
                                        return e[0] = a,
                                            e[1] = o,
                                        r && (e[h++] = r._x + a,
                                            e[h++] = r._y + o),
                                        s && (e[h++] = s._x + a,
                                            e[h++] = s._y + o),
                                        t && (t._transformCoordinates(e, e, h / 2),
                                            a = e[0],
                                            o = e[1],
                                            i ? (n._x = a,
                                                n._y = o,
                                                h = 2,
                                            r && (r._x = e[h++] - a,
                                                r._y = e[h++] - o),
                                            s && (s._x = e[h++] - a,
                                                s._y = e[h++] - o)) : (r || (e[h++] = a,
                                                e[h++] = o),
                                            s || (e[h++] = a,
                                                e[h++] = o))),
                                            e
                                    }
                                })
                                    , R = _.extend({
                                    initialize: function(t, e, i) {
                                        var n, r, s;
                                        t ? (n = t[0]) !== o ? r = t[1] : ((n = (s = t).x) === o && (n = (s = _.read(arguments)).x),
                                            r = s.y,
                                            s = s.selected) : n = r = 0,
                                            this._x = n,
                                            this._y = r,
                                            (this._owner = e)[i] = this,
                                        s && this.setSelected(!0)
                                    },
                                    _set: function(t, e) {
                                        return this._x = t,
                                            this._y = e,
                                            this._owner._changed(this),
                                            this
                                    },
                                    getX: function() {
                                        return this._x
                                    },
                                    setX: function(t) {
                                        this._x = t,
                                            this._owner._changed(this)
                                    },
                                    getY: function() {
                                        return this._y
                                    },
                                    setY: function(t) {
                                        this._y = t,
                                            this._owner._changed(this)
                                    },
                                    isZero: function() {
                                        var t = g.isZero;
                                        return t(this._x) && t(this._y)
                                    },
                                    isSelected: function() {
                                        return !!(this._owner._selection & this._getSelection())
                                    },
                                    setSelected: function(t) {
                                        this._owner._changeSelection(this._getSelection(), t)
                                    },
                                    _getSelection: function() {
                                        var t = this._owner;
                                        return this === t._point ? 1 : this === t._handleIn ? 2 : this === t._handleOut ? 4 : 0
                                    }
                                })
                                    , z = u.extend({
                                        _class: "Curve",
                                        beans: !0,
                                        initialize: function(t, e, i, n, r, s, a, o) {
                                            var h, l, u, c, d, p, f = arguments.length;
                                            3 === f ? (this._path = t,
                                                h = e,
                                                l = i) : f ? 1 === f ? "segment1"in t ? (h = new D(t.segment1),
                                                l = new D(t.segment2)) : "point1"in t ? (u = t.point1,
                                                d = t.handle1,
                                                p = t.handle2,
                                                c = t.point2) : Array.isArray(t) && (u = [t[0], t[1]],
                                                c = [t[6], t[7]],
                                                d = [t[2] - t[0], t[3] - t[1]],
                                                p = [t[4] - t[6], t[5] - t[7]]) : 2 === f ? (h = new D(t),
                                                l = new D(e)) : 4 === f ? (u = t,
                                                d = e,
                                                p = i,
                                                c = n) : 8 === f && (u = [t, e],
                                                c = [a, o],
                                                d = [i - t, n - e],
                                                p = [r - a, s - o]) : (h = new D,
                                                l = new D),
                                                this._segment1 = h || new D(u,null,d),
                                                this._segment2 = l || new D(c,p,null)
                                        },
                                        _serialize: function(t, e) {
                                            return u.serialize(this.hasHandles() ? [this.getPoint1(), this.getHandle1(), this.getHandle2(), this.getPoint2()] : [this.getPoint1(), this.getPoint2()], t, !0, e)
                                        },
                                        _changed: function() {
                                            this._length = this._bounds = o
                                        },
                                        clone: function() {
                                            return new z(this._segment1,this._segment2)
                                        },
                                        toString: function() {
                                            var t = ["point1: " + this._segment1._point];
                                            return this._segment1._handleOut.isZero() || t.push("handle1: " + this._segment1._handleOut),
                                            this._segment2._handleIn.isZero() || t.push("handle2: " + this._segment2._handleIn),
                                                t.push("point2: " + this._segment2._point),
                                            "{ " + t.join(", ") + " }"
                                        },
                                        classify: function() {
                                            return z.classify(this.getValues())
                                        },
                                        remove: function() {
                                            var t, e, i = !1;
                                            return this._path && (e = (t = this._segment2)._handleOut,
                                            (i = t.remove()) && this._segment1._handleOut.set(e)),
                                                i
                                        },
                                        getPoint1: function() {
                                            return this._segment1._point
                                        },
                                        setPoint1: function() {
                                            this._segment1._point.set(_.read(arguments))
                                        },
                                        getPoint2: function() {
                                            return this._segment2._point
                                        },
                                        setPoint2: function() {
                                            this._segment2._point.set(_.read(arguments))
                                        },
                                        getHandle1: function() {
                                            return this._segment1._handleOut
                                        },
                                        setHandle1: function() {
                                            this._segment1._handleOut.set(_.read(arguments))
                                        },
                                        getHandle2: function() {
                                            return this._segment2._handleIn
                                        },
                                        setHandle2: function() {
                                            this._segment2._handleIn.set(_.read(arguments))
                                        },
                                        getSegment1: function() {
                                            return this._segment1
                                        },
                                        getSegment2: function() {
                                            return this._segment2
                                        },
                                        getPath: function() {
                                            return this._path
                                        },
                                        getIndex: function() {
                                            return this._segment1._index
                                        },
                                        getNext: function() {
                                            var t = this._path && this._path._curves;
                                            return t && (t[this._segment1._index + 1] || this._path._closed && t[0]) || null
                                        },
                                        getPrevious: function() {
                                            var t = this._path && this._path._curves;
                                            return t && (t[this._segment1._index - 1] || this._path._closed && t[t.length - 1]) || null
                                        },
                                        isFirst: function() {
                                            return !this._segment1._index
                                        },
                                        isLast: function() {
                                            var t = this._path;
                                            return t && this._segment1._index === t._curves.length - 1 || !1
                                        },
                                        isSelected: function() {
                                            return this.getPoint1().isSelected() && this.getHandle1().isSelected() && this.getHandle2().isSelected() && this.getPoint2().isSelected()
                                        },
                                        setSelected: function(t) {
                                            this.getPoint1().setSelected(t),
                                                this.getHandle1().setSelected(t),
                                                this.getHandle2().setSelected(t),
                                                this.getPoint2().setSelected(t)
                                        },
                                        getValues: function(t) {
                                            return z.getValues(this._segment1, this._segment2, t)
                                        },
                                        getPoints: function() {
                                            for (var t = this.getValues(), e = [], i = 0; i < 8; i += 2)
                                                e.push(new _(t[i],t[i + 1]));
                                            return e
                                        }
                                    }, {
                                        getLength: function() {
                                            return null == this._length && (this._length = z.getLength(this.getValues(), 0, 1)),
                                                this._length
                                        },
                                        getArea: function() {
                                            return z.getArea(this.getValues())
                                        },
                                        getLine: function() {
                                            return new C(this._segment1._point,this._segment2._point)
                                        },
                                        getPart: function(t, e) {
                                            return new z(z.getPart(this.getValues(), t, e))
                                        },
                                        getPartLength: function(t, e) {
                                            return z.getLength(this.getValues(), t, e)
                                        },
                                        divideAt: function(t) {
                                            return this.divideAtTime(t && t.curve === this ? t.time : this.getTimeAt(t))
                                        },
                                        divideAtTime: function(t, e) {
                                            var i, n, r, s, a, o, h = null;
                                            return 1e-8 <= t && t <= 1 - 1e-8 && (i = (o = z.subdivide(this.getValues(), t))[0],
                                                n = o[1],
                                                r = e || this.hasHandles(),
                                                s = this._segment1,
                                                a = this._segment2,
                                                t = this._path,
                                            r && (s._handleOut._set(i[2] - i[0], i[3] - i[1]),
                                                a._handleIn._set(n[4] - n[6], n[5] - n[7])),
                                                o = i[6],
                                                e = i[7],
                                                e = new D(new _(o,e),r && new _(i[4] - o,i[5] - e),r && new _(n[2] - o,n[3] - e)),
                                                h = t ? (t.insert(s._index + 1, e),
                                                    this.getNext()) : (this._segment2 = e,
                                                    this._changed(),
                                                    new z(e,a))),
                                                h
                                        },
                                        splitAt: function(t) {
                                            var e = this._path;
                                            return e ? e.splitAt(t) : null
                                        },
                                        splitAtTime: function(t) {
                                            return this.splitAt(this.getLocationAtTime(t))
                                        },
                                        divide: function(t, e) {
                                            return this.divideAtTime(t === o ? .5 : e ? t : this.getTimeAt(t))
                                        },
                                        split: function(t, e) {
                                            return this.splitAtTime(t === o ? .5 : e ? t : this.getTimeAt(t))
                                        },
                                        reversed: function() {
                                            return new z(this._segment2.reversed(),this._segment1.reversed())
                                        },
                                        clearHandles: function() {
                                            this._segment1._handleOut._set(0, 0),
                                                this._segment2._handleIn._set(0, 0)
                                        },
                                        statics: {
                                            getValues: function(t, e, i, n) {
                                                var r = t._point
                                                    , s = t._handleOut
                                                    , a = e._handleIn
                                                    , o = e._point;
                                                t = r.x,
                                                    e = r.y,
                                                    r = o.x,
                                                    o = o.y,
                                                    o = n ? [t, e, t, e, r, o, r, o] : [t, e, t + s._x, e + s._y, r + a._x, o + a._y, r, o];
                                                return i && i._transformCoordinates(o, o, 4),
                                                    o
                                            },
                                            subdivide: function(t, e) {
                                                var i = t[0]
                                                    , n = t[1]
                                                    , r = t[2]
                                                    , s = t[3]
                                                    , a = t[4]
                                                    , h = t[5]
                                                    , l = t[6]
                                                    , u = t[7]
                                                    , c = 1 - (e = e === o ? .5 : e)
                                                    , d = c * i + e * r
                                                    , p = c * n + e * s
                                                    , f = c * r + e * a
                                                    , m = c * s + e * h;
                                                r = c * h + e * u,
                                                    s = c * d + e * f,
                                                    h = c * f + e * (t = c * a + e * l),
                                                    f = c * m + e * r;
                                                return [[i, n, d, p, s, a = c * p + e * m, m = c * s + e * h, e = c * a + e * f], [m, e, h, f, t, r, l, u]]
                                            },
                                            getMonoCurves: function(t, e) {
                                                var i, n, r = [], s = t[0 + (o = e ? 0 : 1)], a = t[2 + o], o = (e = t[4 + o],
                                                    t[6 + o]);
                                                return a <= s == e <= a && e <= a == o <= e || z.isStraight(t) || !(n = g.solveQuadratic(3 * (a - e) - s + o, 2 * (s + e) - 4 * a, a - s, i = [], 1e-8, 1 - 1e-8)) ? r.push(t) : (i.sort(),
                                                    a = i[0],
                                                    s = z.subdivide(t, a),
                                                    r.push(s[0]),
                                                1 < n && (a = (i[1] - a) / (1 - a),
                                                    s = z.subdivide(s[1], a),
                                                    r.push(s[0])),
                                                    r.push(s[1])),
                                                    r
                                            },
                                            solveCubic: function(t, e, i, n, r, s) {
                                                var a = t[e]
                                                    , o = t[e + 2]
                                                    , h = t[e + 4];
                                                t = t[e + 6],
                                                    e = 0;
                                                return a < i && t < i && o < i && h < i || i < a && i < t && i < o && i < h ? e : g.solveCubic(t - a - (t = 3 * (o - a)) - (o = 3 * (h - o) - t), o, t, a - i, n, r, s)
                                            },
                                            getTimeOf: function(t, e) {
                                                var i = new _(t[0],t[1])
                                                    , n = new _(t[6],t[7]);
                                                if (null === (e.isClose(i, 1e-12) ? 0 : e.isClose(n, 1e-12) ? 1 : null))
                                                    for (var r = [e.x, e.y], s = [], a = 0; a < 2; a++)
                                                        for (var o = z.solveCubic(t, a, r[a], s, 0, 1), h = 0; h < o; h++) {
                                                            var l = s[h];
                                                            if (e.isClose(z.getPoint(t, l), 1e-7))
                                                                return l
                                                        }
                                                return e.isClose(i, 1e-7) ? 0 : e.isClose(n, 1e-7) ? 1 : null
                                            },
                                            getNearestTime: function(t, e) {
                                                if (z.isStraight(t)) {
                                                    var i = t[0]
                                                        , n = t[1]
                                                        , r = t[6] - i
                                                        , s = t[7] - n
                                                        , a = r * r + s * s;
                                                    return 0 == a || (a = ((e.x - i) * r + (e.y - n) * s) / a) < 1e-12 ? 0 : .999999999999 < a ? 1 : z.getTimeOf(t, new _(i + a * r,n + a * s))
                                                }
                                                var o = 1 / 0
                                                    , h = 0;
                                                function l(i) {
                                                    if (0 <= i && i <= 1) {
                                                        var n = e.getDistance(z.getPoint(t, i), !0);
                                                        return n < o ? (o = n,
                                                            h = i,
                                                            1) : void 0
                                                    }
                                                }
                                                for (var u = 0; u <= 100; u++)
                                                    l(u / 100);
                                                for (var c = .005; 1e-8 < c; )
                                                    l(h - c) || l(h + c) || (c /= 2);
                                                return h
                                            },
                                            getPart: function(t, e, i) {
                                                var n, r = i < e;
                                                return r && (n = e,
                                                    e = i,
                                                    i = n),
                                                0 < e && (t = z.subdivide(t, e)[1]),
                                                i < 1 && (t = z.subdivide(t, (i - e) / (1 - e))[0]),
                                                    r ? [t[6], t[7], t[4], t[5], t[2], t[3], t[0], t[1]] : t
                                            },
                                            isFlatEnough: function(t, e) {
                                                var i = t[0]
                                                    , n = t[1]
                                                    , r = t[2]
                                                    , s = t[3]
                                                    , a = t[4]
                                                    , o = t[5]
                                                    , h = t[6];
                                                r = 3 * r - 2 * i - h,
                                                    s = 3 * s - 2 * n - (t = t[7]),
                                                    i = 3 * a - 2 * h - i,
                                                    n = 3 * o - 2 * t - n;
                                                return Math.max(r * r, i * i) + Math.max(s * s, n * n) <= 16 * e * e
                                            },
                                            getArea: function(t) {
                                                var e = t[0]
                                                    , i = t[1]
                                                    , n = t[2]
                                                    , r = t[3]
                                                    , s = t[4]
                                                    , a = t[5]
                                                    , o = t[6];
                                                return 3 * (((t = t[7]) - i) * (n + s) - (o - e) * (r + a) + r * (e - s) - n * (i - a) + t * (s + e / 3) - o * (a + i / 3)) / 20
                                            },
                                            getBounds: function(t) {
                                                for (var e = t.slice(0, 2), i = e.slice(), n = [0, 0], r = 0; r < 2; r++)
                                                    z._addBounds(t[r], t[r + 2], t[r + 4], t[r + 6], r, 0, e, i, n);
                                                return new w(e[0],e[1],i[0] - e[0],i[1] - e[1])
                                            },
                                            _addBounds: function(t, e, i, n, r, s, a, o, h) {
                                                function l(t, e) {
                                                    var i = t - e;
                                                    e = t + e;
                                                    i < a[r] && (a[r] = i),
                                                    e > o[r] && (o[r] = e)
                                                }
                                                var u = a[r] + (s /= 2)
                                                    , c = o[r] - s;
                                                if (t < u || e < u || i < u || n < u || c < t || c < e || c < i || c < n)
                                                    if (e < t != e < n && i < t != i < n)
                                                        l(t, 0),
                                                            l(n, 0);
                                                    else {
                                                        var d = g.solveQuadratic(3 * (e - i) - t + n, 2 * (t + i) - 4 * e, e - t, h);
                                                        l(n, 0);
                                                        for (var p = 0; p < d; p++) {
                                                            var f = h[p]
                                                                , m = 1 - f;
                                                            1e-8 <= f && f <= 1 - 1e-8 && l(m * m * m * t + 3 * m * m * f * e + 3 * m * f * f * i + f * f * f * n, s)
                                                        }
                                                    }
                                            }
                                        }
                                    }, u.each(["getBounds", "getStrokeBounds", "getHandleBounds"], (function(t) {
                                            this[t] = function() {
                                                return this._bounds || (this._bounds = {}),
                                                    (this._bounds[t] || (this._bounds[t] = V[t]([this._segment1, this._segment2], !1, this._path))).clone()
                                            }
                                        }
                                    ), {}), u.each({
                                        isStraight: function(t, e, i, n) {
                                            if (e.isZero() && i.isZero())
                                                return !0;
                                            var r = n.subtract(t);
                                            if (r.isZero())
                                                return !1;
                                            if (r.isCollinear(e) && r.isCollinear(i)) {
                                                var s = new C(t,n);
                                                if (s.getDistance(t.add(e)) < 1e-7 && s.getDistance(n.add(i)) < 1e-7)
                                                    return n = r.dot(r),
                                                        e = r.dot(e) / n,
                                                        n = r.dot(i) / n,
                                                    0 <= e && e <= 1 && n <= 0 && -1 <= n
                                            }
                                            return !1
                                        },
                                        isLinear: function(t, e, i, n) {
                                            return t = n.subtract(t).divide(3),
                                            e.equals(t) && i.negate().equals(t)
                                        }
                                    }, (function(t, e) {
                                            this[e] = function(e) {
                                                var i = this._segment1
                                                    , n = this._segment2;
                                                return t(i._point, i._handleOut, n._handleIn, n._point, e)
                                            }
                                                ,
                                                this.statics[e] = function(e, i) {
                                                    var n = e[0]
                                                        , r = e[1]
                                                        , s = e[6]
                                                        , a = e[7];
                                                    return t(new _(n,r), new _(e[2] - n,e[3] - r), new _(e[4] - s,e[5] - a), new _(s,a), i)
                                                }
                                        }
                                    ), {
                                        statics: {},
                                        hasHandles: function() {
                                            return !this._segment1._handleOut.isZero() || !this._segment2._handleIn.isZero()
                                        },
                                        hasLength: function(t) {
                                            return (!this.getPoint1().equals(this.getPoint2()) || this.hasHandles()) && this.getLength() > (t || 0)
                                        },
                                        isCollinear: function(t) {
                                            return t && this.isStraight() && t.isStraight() && this.getLine().isCollinear(t.getLine())
                                        },
                                        isHorizontal: function() {
                                            return this.isStraight() && Math.abs(this.getTangentAtTime(.5).y) < 1e-8
                                        },
                                        isVertical: function() {
                                            return this.isStraight() && Math.abs(this.getTangentAtTime(.5).x) < 1e-8
                                        }
                                    }), {
                                        beans: !1,
                                        getLocationAt: function(t, e) {
                                            return this.getLocationAtTime(e ? t : this.getTimeAt(t))
                                        },
                                        getLocationAtTime: function(t) {
                                            return null != t && 0 <= t && t <= 1 ? new F(this,t) : null
                                        },
                                        getTimeAt: function(t, e) {
                                            return z.getTimeAt(this.getValues(), t, e)
                                        },
                                        getParameterAt: "#getTimeAt",
                                        getTimesWithTangent: function() {
                                            var t = _.read(arguments);
                                            return t.isZero() ? [] : z.getTimesWithTangent(this.getValues(), t)
                                        },
                                        getOffsetAtTime: function(t) {
                                            return this.getPartLength(0, t)
                                        },
                                        getLocationOf: function() {
                                            return this.getLocationAtTime(this.getTimeOf(_.read(arguments)))
                                        },
                                        getOffsetOf: function() {
                                            var t = this.getLocationOf.apply(this, arguments);
                                            return t ? t.getOffset() : null
                                        },
                                        getTimeOf: function() {
                                            return z.getTimeOf(this.getValues(), _.read(arguments))
                                        },
                                        getParameterOf: "#getTimeOf",
                                        getNearestLocation: function() {
                                            var t = _.read(arguments)
                                                , e = this.getValues()
                                                , i = z.getNearestTime(e, t);
                                            e = z.getPoint(e, i);
                                            return new F(this,i,e,null,t.getDistance(e))
                                        },
                                        getNearestPoint: function() {
                                            var t = this.getNearestLocation.apply(this, arguments);
                                            return t && t.getPoint()
                                        }
                                    }, new function() {
                                        var t = ["getPoint", "getTangent", "getNormal", "getWeightedTangent", "getWeightedNormal", "getCurvature"];
                                        return u.each(t, (function(t) {
                                                this[t + "At"] = function(e, i) {
                                                    var n = this.getValues();
                                                    return z[t](n, i ? e : z.getTimeAt(n, e))
                                                }
                                                    ,
                                                    this[t + "AtTime"] = function(e) {
                                                        return z[t](this.getValues(), e)
                                                    }
                                            }
                                        ), {
                                            statics: {
                                                _evaluateMethods: t
                                            }
                                        })
                                    }
                                    , new function() {
                                        function t(t) {
                                            var e = t[0]
                                                , i = t[1]
                                                , n = t[2]
                                                , r = t[3]
                                                , s = t[4]
                                                , a = t[5]
                                                , o = t[6]
                                                , h = (t = t[7],
                                            9 * (n - s) + 3 * (o - e))
                                                , l = 6 * (e + s) - 12 * n
                                                , u = 3 * (n - e)
                                                , c = 9 * (r - a) + 3 * (t - i)
                                                , d = 6 * (i + a) - 12 * r
                                                , p = 3 * (r - i);
                                            return function(t) {
                                                var e = (h * t + l) * t + u;
                                                t = (c * t + d) * t + p;
                                                return Math.sqrt(e * e + t * t)
                                            }
                                        }
                                        function e(t, e) {
                                            return Math.max(2, Math.min(16, Math.ceil(32 * Math.abs(e - t))))
                                        }
                                        function i(t, e, i, n) {
                                            if (null == e || e < 0 || 1 < e)
                                                return null;
                                            var r = t[0]
                                                , s = t[1]
                                                , a = t[2]
                                                , o = t[3]
                                                , h = t[4]
                                                , l = t[5]
                                                , u = t[6]
                                                , c = t[7];
                                            (x = g.isZero)(a - r) && x(o - s) && (a = r,
                                                o = s),
                                            x(h - u) && x(l - c) && (h = u,
                                                l = c);
                                            var d, p, f = 3 * (a - r), m = 3 * (h - a) - f, v = u - r - f - m, y = 3 * (o - s), x = c - s - y - (t = 3 * (l - o) - y);
                                            return 0 === i ? (d = 0 === e ? r : 1 === e ? u : ((v * e + m) * e + f) * e + r,
                                                p = 0 === e ? s : 1 === e ? c : ((x * e + t) * e + y) * e + s) : (p = e < 1e-8 ? (d = f,
                                                y) : 1 - 1e-8 < e ? (d = 3 * (u - h),
                                            3 * (c - l)) : (d = (3 * v * e + 2 * m) * e + f,
                                            (3 * x * e + 2 * t) * e + y),
                                            n && (0 === d && 0 === p && (e < 1e-8 || 1 - 1e-8 < e) && (d = h - a,
                                                p = l - o),
                                            (o = Math.sqrt(d * d + p * p)) && (d /= o,
                                                p /= o)),
                                            3 === i && (h = 6 * v * e + 2 * m,
                                                l = 6 * x * e + 2 * t,
                                                d = 0 !== (t = Math.pow(d * d + p * p, 1.5)) ? (d * l - p * h) / t : 0,
                                                p = 0)),
                                                2 === i ? new _(p,-d) : new _(d,p)
                                        }
                                        return {
                                            statics: {
                                                classify: function(t) {
                                                    var e = t[0]
                                                        , i = t[1]
                                                        , n = t[2]
                                                        , r = t[3]
                                                        , s = t[4]
                                                        , a = t[5]
                                                        , h = t[6]
                                                        , l = (t = n * (i - (l = t[7])) + r * (h - e) + e * l - i * h,
                                                        h = (r = (n = 3 * (s * (r - i) + a * (e - n) + n * i - r * e)) - t) - t + (e * (l - a) + i * (s - h) + h * a - l * s),
                                                        0 !== (a = Math.sqrt(h * h + r * r + n * n)) ? 1 / a : 0);
                                                    a = "serpentine";
                                                    function u(t, e, i) {
                                                        var n = e !== o
                                                            , r = n && 0 < e && e < 1
                                                            , s = n && 0 < i && i < 1;
                                                        return !n || (r || s) && ("loop" !== t || r && s) || (r = s = !(t = "arch")),
                                                            {
                                                                type: t,
                                                                roots: r || s ? r && s ? e < i ? [e, i] : [i, e] : [r ? e : i] : null
                                                            }
                                                    }
                                                    return r *= l,
                                                        n *= l,
                                                        (s = g.isZero)(h *= l) ? s(r) ? u(s(n) ? "line" : "quadratic") : u(a, n / (3 * r)) : s(n = 3 * r * r - 4 * h * n) ? u("cusp", r / (2 * h)) : u(0 < n ? a : "loop", (r + (s = 0 < n ? Math.sqrt(n / 3) : Math.sqrt(-n))) / (h *= 2), (r - s) / h)
                                                },
                                                getLength: function(i, n, r, s) {
                                                    if (n === o && (n = 0),
                                                    r === o && (r = 1),
                                                        z.isStraight(i)) {
                                                        var a = i;
                                                        r < 1 && (a = z.subdivide(a, r)[0],
                                                            n /= r);
                                                        var h = (a = 0 < n ? z.subdivide(a, n)[1] : a)[6] - a[0];
                                                        a = a[7] - a[1];
                                                        return Math.sqrt(h * h + a * a)
                                                    }
                                                    return g.integrate(s || t(i), n, r, e(n, r))
                                                },
                                                getTimeAt: function(i, n, r) {
                                                    if (r === o && (r = n < 0 ? 1 : 0),
                                                    0 === n)
                                                        return r;
                                                    var s = Math.abs
                                                        , a = 0 < n
                                                        , h = a ? r : 0
                                                        , l = a ? 1 : r
                                                        , u = t(i)
                                                        , c = z.getLength(i, h, l, u);
                                                    i = s(n) - c;
                                                    if (s(i) < 1e-12)
                                                        return a ? l : h;
                                                    if (1e-12 < i)
                                                        return null;
                                                    var d = 0;
                                                    return g.findRoot((function(t) {
                                                            return d += g.integrate(u, r, t, e(r, t)),
                                                                r = t,
                                                            d - n
                                                        }
                                                    ), u, r + n / c, h, l, 32, 1e-12)
                                                },
                                                getPoint: function(t, e) {
                                                    return i(t, e, 0, !1)
                                                },
                                                getTangent: function(t, e) {
                                                    return i(t, e, 1, !0)
                                                },
                                                getWeightedTangent: function(t, e) {
                                                    return i(t, e, 1, !1)
                                                },
                                                getNormal: function(t, e) {
                                                    return i(t, e, 2, !0)
                                                },
                                                getWeightedNormal: function(t, e) {
                                                    return i(t, e, 2, !1)
                                                },
                                                getCurvature: function(t, e) {
                                                    return i(t, e, 3, !1).x
                                                },
                                                getPeaks: function(t) {
                                                    var e = t[0]
                                                        , i = t[1]
                                                        , n = t[2]
                                                        , r = t[3]
                                                        , s = t[4]
                                                        , a = t[5]
                                                        , o = 3 * n - e - 3 * s + t[6];
                                                    s = 3 * e - 6 * n + 3 * s,
                                                        n = -3 * e + 3 * n,
                                                        t = 3 * r - i - 3 * a + t[7],
                                                        a = 3 * i - 6 * r + 3 * a,
                                                        i = -3 * i + 3 * r,
                                                        r = [];
                                                    return g.solveCubic(9 * (o * o + t * t), 9 * (o * s + a * t), 2 * (s * s + a * a) + 3 * (n * o + i * t), n * s + a * i, r, 1e-8, 1 - 1e-8),
                                                        r.sort()
                                                }
                                            }
                                        }
                                    }
                                    , new function() {
                                        function t(t, e, i, n, r, s, a) {
                                            var o = !a && i.getPrevious() === r
                                                , h = !a && i !== r && i.getNext() === r;
                                            null !== n && (o ? 1e-8 : 0) <= n && n <= (h ? 1 - 1e-8 : 1) && null !== s && (h ? 1e-8 : 0) <= s && s <= (o ? 1 - 1e-8 : 1) && (n = new F(i,n,null,a),
                                                a = new F(r,s,null,a),
                                                (n._intersection = a)._intersection = n,
                                            e && !e(n) || F.insert(t, n, !0))
                                        }
                                        function e(n, r, s, a, o, h, l, u, c, d, p, f, m) {
                                            if (4096 <= ++c || 40 <= ++u)
                                                return c;
                                            var g, v, _, y = r[0], x = r[1], b = r[6], w = r[7], S = C.getSignedDistance, M = S(y, x, b, w, r[2], r[3]), A = S(y, x, b, w, r[4], r[5]), T = (_ = 0 < M * A ? .75 : 4 / 9) * Math.min(0, M, A), P = _ * Math.max(0, M, A), E = S(y, x, b, w, n[0], n[1]), L = S(y, x, b, w, n[2], n[3]);
                                            b = function(t, e, i, n) {
                                                var r = [0, t]
                                                    , s = [1 / 3, e]
                                                    , a = [2 / 3, i]
                                                    , o = [1, n];
                                                return o = (e = e - (2 * t + n) / 3) * (t = i - (t + 2 * n) / 3) < 0 ? [[r, s, o], [r, a, o]] : [2 <= (n = e / t) ? [r, s, o] : n <= .5 ? [r, a, o] : [r, s, a, o], [r, o]],
                                                    (e || t) < 0 ? o.reverse() : o
                                            }(E, L, _ = S(y, x, b, w, n[4], n[5]), x = S(y, x, b, w, n[6], n[7])),
                                                w = b[0],
                                                b = b[1];
                                            if (0 === M && 0 === A && 0 === E && 0 === L && 0 === _ && 0 === x || null == (g = i(w, b, T, P)) || null == (v = i(w.reverse(), b.reverse(), T, P)))
                                                return c;
                                            var I, k, N;
                                            P = d + (p - d) * g,
                                                p = d + (p - d) * v;
                                            return Math.max(m - f, p - P) < 1e-9 ? (I = (P + p) / 2,
                                                N = (f + m) / 2,
                                                t(o, h, l ? a : s, l ? N : I, l ? s : a, l ? I : N)) : (n = z.getPart(n, g, v),
                                                d = m - f,
                                                c = .8 < v - g ? d < p - P ? (I = (P + p) / 2,
                                                    c = e(r, (k = z.subdivide(n, .5))[0], a, s, o, h, !l, u, c, f, m, P, I),
                                                    e(r, k[1], a, s, o, h, !l, u, c, f, m, I, p)) : (N = (f + m) / 2,
                                                    c = e((k = z.subdivide(r, .5))[0], n, a, s, o, h, !l, u, c, f, N, P, p),
                                                    e(k[1], n, a, s, o, h, !l, u, c, N, m, P, p)) : 0 == d || 1e-9 <= d ? e(r, n, a, s, o, h, !l, u, c, f, m, P, p) : e(n, r, s, a, o, h, l, u, c, P, p, f, m)),
                                                c
                                        }
                                        function i(t, e, i, r) {
                                            return t[0][1] < i ? n(t, !0, i) : e[0][1] > r ? n(e, !1, r) : t[0][0]
                                        }
                                        function n(t, e, i) {
                                            for (var n = t[0][0], r = t[0][1], s = 1, a = t.length; s < a; s++) {
                                                var o = t[s][0]
                                                    , h = t[s][1];
                                                if (e ? i <= h : h <= i)
                                                    return h === i ? o : n + (i - r) * (o - n) / (h - r);
                                                n = o,
                                                    r = h
                                            }
                                            return null
                                        }
                                        function r(t, e, i, n, r) {
                                            var s = g.isZero;
                                            if (s(n) && s(r))
                                                return null === (s = z.getTimeOf(t, new _(e,i))) ? [] : [s];
                                            n = Math.atan2(-r, n);
                                            for (var a = Math.sin(n), o = Math.cos(n), h = [], l = (n = [],
                                                0); l < 8; l += 2) {
                                                var u = t[l] - e
                                                    , c = t[l + 1] - i;
                                                h.push(u * o - c * a, u * a + c * o)
                                            }
                                            return z.solveCubic(h, 1, 0, n, 0, 1),
                                                n
                                        }
                                        function s(e, i, n, s, a, o, h) {
                                            for (var l = i[0], u = i[1], c = r(e, l, u, i[6] - l, i[7] - u), d = 0, p = c.length; d < p; d++) {
                                                var f = c[d]
                                                    , m = z.getPoint(e, f);
                                                null !== (m = z.getTimeOf(i, m)) && t(a, o, h ? s : n, h ? m : f, h ? n : s, h ? f : m)
                                            }
                                        }
                                        function a(e, i, n, r, s, a) {
                                            var o = C.intersect(e[0], e[1], e[6], e[7], i[0], i[1], i[6], i[7]);
                                            o && t(s, a, n, z.getTimeOf(e, o), r, z.getTimeOf(i, o))
                                        }
                                        function o(i, n, r, o, h, u) {
                                            var c = Math.min;
                                            if ((y = Math.max)(i[0], i[2], i[4], i[6]) + 1e-12 > c(n[0], n[2], n[4], n[6]) && c(i[0], i[2], i[4], i[6]) - 1e-12 < y(n[0], n[2], n[4], n[6]) && y(i[1], i[3], i[5], i[7]) + 1e-12 > c(n[1], n[3], n[5], n[7]) && c(i[1], i[3], i[5], i[7]) - 1e-12 < y(n[1], n[3], n[5], n[7])) {
                                                var d = l(i, n);
                                                if (d)
                                                    for (var p = 0; p < 2; p++) {
                                                        var f = d[p];
                                                        t(h, u, r, f[0], o, f[1], !0)
                                                    }
                                                else {
                                                    var m = z.isStraight(i)
                                                        , g = z.isStraight(n)
                                                        , v = m && g
                                                        , y = (c = m && !g,
                                                        h.length);
                                                    if ((v ? a : m || g ? s : e)(c ? n : i, c ? i : n, c ? o : r, c ? r : o, h, u, c, 0, 0, 0, 1, 0, 1),
                                                    !v || h.length === y)
                                                        for (p = 0; p < 4; p++) {
                                                            var x = p >> 1
                                                                , b = 1 & p
                                                                , w = 6 * b
                                                                , S = new _(i[S = 6 * x],i[1 + S]);
                                                            w = new _(n[w],n[1 + w]);
                                                            S.isClose(w, 1e-12) && t(h, u, r, x, o, b)
                                                        }
                                                }
                                            }
                                            return h
                                        }
                                        function h(e, i, n, r) {
                                            return "loop" === (e = z.classify(e)).type && t(n, r, i, (e = e.roots)[0], i, e[1]),
                                                n
                                        }
                                        function l(t, e) {
                                            function i(t) {
                                                var e = t[6] - t[0];
                                                return e * e + (t = t[7] - t[1]) * t
                                            }
                                            var n, r = Math.abs, s = C.getDistance, a = 1e-7, o = z.isStraight(t), h = z.isStraight(e), l = o && h, u = (n = i(t) < i(e)) ? e : t, c = n ? t : e, d = u[0], p = u[1], f = u[6] - d;
                                            if (s(d, p, f, n = u[7] - p, c[0], c[1], !0) < a && s(d, p, f, n, c[6], c[7], !0) < a)
                                                !l && s(d, p, f, n, u[2], u[3], !0) < a && s(d, p, f, n, u[4], u[5], !0) < a && s(d, p, f, n, c[2], c[3], !0) < a && s(d, p, f, n, c[4], c[5], !0) < a && (o = h = l = !0);
                                            else if (l)
                                                return null;
                                            if (o ^ h)
                                                return null;
                                            for (var m = [t, e], g = [], v = 0; v < 4 && g.length < 2; v++) {
                                                var y = 1 & v
                                                    , x = 1 ^ y
                                                    , b = v >> 1;
                                                if (null != (x = z.getTimeOf(m[y], new _(m[x][b ? 6 : 0],m[x][b ? 7 : 1]))) && (b = y ? [b, x] : [x, b],
                                                (!g.length || 1e-8 < r(b[0] - g[0][0]) && 1e-8 < r(b[1] - g[0][1])) && g.push(b)),
                                                2 < v && !g.length)
                                                    break
                                            }
                                            return 2 !== g.length ? g = null : l || (t = z.getPart(t, g[0][0], g[1][0]),
                                            (r((e = z.getPart(e, g[0][1], g[1][1]))[2] - t[2]) > a || r(e[3] - t[3]) > a || r(e[4] - t[4]) > a || r(e[5] - t[5]) > a) && (g = null)),
                                                g
                                        }
                                        return {
                                            getIntersections: function(t) {
                                                var e = this.getValues()
                                                    , i = t && t !== this && t.getValues();
                                                return i ? o(e, i, this, t, []) : h(e, this, [])
                                            },
                                            statics: {
                                                getOverlaps: l,
                                                getIntersections: function(t, e, i, n, r, s) {
                                                    for (var a = !e, l = t.length, u = (e = a ? t : e).length, c = new Array(l), d = a ? c : new Array(u), p = [], m = 0; m < l; m++)
                                                        c[m] = t[m].getValues(n);
                                                    if (!a)
                                                        for (m = 0; m < u; m++)
                                                            d[m] = e[m].getValues(r);
                                                    for (var g = f.findCurveBoundsCollisions(c, d, 1e-7), v = 0; v < l; v++) {
                                                        var _ = t[v]
                                                            , y = c[v];
                                                        a && h(y, _, p, i);
                                                        var x = g[v];
                                                        if (x)
                                                            for (var b = 0; b < x.length; b++) {
                                                                if (s && p.length)
                                                                    return p;
                                                                var w, S = x[b];
                                                                (!a || v < S) && (w = e[S],
                                                                    o(y, d[S], _, w, p, i))
                                                            }
                                                    }
                                                    return p
                                                },
                                                getCurveLineIntersections: r,
                                                getTimesWithTangent: function(t, e) {
                                                    var i, n = t[0], r = t[1], s = t[2], a = t[3], o = t[4], h = t[5], l = t[6], u = t[7];
                                                    e = (t = e.normalize()).x,
                                                        l = 3 * l - 9 * o + 9 * s - 3 * n,
                                                        u = 3 * u - 9 * h + 9 * a - 3 * r,
                                                        o = 6 * o - 12 * s + 6 * n,
                                                        h = 6 * h - 12 * a + 6 * r,
                                                        s = 3 * s - 3 * n,
                                                        n = 3 * a - 3 * r,
                                                        a = 2 * l * (t = t.y) - 2 * u * e,
                                                        r = [];
                                                    return Math.abs(a) < g.CURVETIME_EPSILON ? 0 == (a = l * h - u * o) || 0 <= (i = -(l * n - u * s) / a) && i <= 1 && r.push(i) : (i = o * t - h * e,
                                                    0 <= (n = (o * o - 4 * l * s) * t * t + (-2 * o * h + 4 * u * s + 4 * l * n) * e * t + (h * h - 4 * u * n) * e * e) && 0 != a && (n = (-i + (e = Math.sqrt(n))) / a,
                                                    0 <= (a = -(i + e) / a) && a <= 1 && r.push(a),
                                                    0 <= n && n <= 1 && r.push(n))),
                                                        r
                                                }
                                            }
                                        }
                                    }
                                )
                                    , F = u.extend({
                                        _class: "CurveLocation",
                                        initialize: function(t, e, i, n, r) {
                                            var s;
                                            .99999999 <= e && (s = t.getNext()) && (e = 0,
                                                t = s),
                                                this._setCurve(t),
                                                this._time = e,
                                                this._point = i || t.getPointAtTime(e),
                                                this._overlap = n,
                                                this._distance = r,
                                                this._intersection = this._next = this._previous = null
                                        },
                                        _setPath: function(t) {
                                            this._path = t,
                                                this._version = t ? t._version : 0
                                        },
                                        _setCurve: function(t) {
                                            this._setPath(t._path),
                                                this._curve = t,
                                                this._segment = null,
                                                this._segment1 = t._segment1,
                                                this._segment2 = t._segment2
                                        },
                                        _setSegment: function(t) {
                                            var e = t.getCurve();
                                            e ? this._setCurve(e) : (this._setPath(t._path),
                                                this._segment1 = t,
                                                this._segment2 = null),
                                                this._segment = t,
                                                this._time = t === this._segment1 ? 0 : 1,
                                                this._point = t._point.clone()
                                        },
                                        getSegment: function() {
                                            var t, e, i = this._segment;
                                            return i || (t = this.getCurve(),
                                                0 === (e = this.getTime()) ? i = t._segment1 : 1 === e ? i = t._segment2 : null != e && (i = t.getPartLength(0, e) < t.getPartLength(e, 1) ? t._segment1 : t._segment2),
                                                this._segment = i),
                                                i
                                        },
                                        getCurve: function() {
                                            var t = this._path
                                                , e = this;
                                            function i(t) {
                                                if ((t = t && t.getCurve()) && null != (e._time = t.getTimeOf(e._point)))
                                                    return e._setCurve(t),
                                                        t
                                            }
                                            return t && t._version !== this._version && (this._time = this._offset = this._curveOffset = this._curve = null),
                                            this._curve || i(this._segment) || i(this._segment1) || i(this._segment2.getPrevious())
                                        },
                                        getPath: function() {
                                            var t = this.getCurve();
                                            return t && t._path
                                        },
                                        getIndex: function() {
                                            var t = this.getCurve();
                                            return t && t.getIndex()
                                        },
                                        getTime: function() {
                                            var t = this.getCurve()
                                                , e = this._time;
                                            return t && null == e ? this._time = t.getTimeOf(this._point) : e
                                        },
                                        getParameter: "#getTime",
                                        getPoint: function() {
                                            return this._point
                                        },
                                        getOffset: function() {
                                            if (null == (t = this._offset)) {
                                                var t = 0
                                                    , e = this.getPath()
                                                    , i = this.getIndex();
                                                if (e && null != i)
                                                    for (var n = e.getCurves(), r = 0; r < i; r++)
                                                        t += n[r].getLength();
                                                this._offset = t += this.getCurveOffset()
                                            }
                                            return t
                                        },
                                        getCurveOffset: function() {
                                            var t, e, i = this._curveOffset;
                                            return null == i && (t = this.getCurve(),
                                                e = this.getTime(),
                                                this._curveOffset = i = null != e && t && t.getPartLength(0, e)),
                                                i
                                        },
                                        getIntersection: function() {
                                            return this._intersection
                                        },
                                        getDistance: function() {
                                            return this._distance
                                        },
                                        divide: function() {
                                            var t;
                                            return (t = (t = this.getCurve()) && t.divideAtTime(this.getTime())) && this._setSegment(t._segment1),
                                                t
                                        },
                                        split: function() {
                                            var t, e = (t = this.getCurve())._path;
                                            return (t = t && t.splitAtTime(this.getTime())) && this._setSegment(e.getLastSegment()),
                                                t
                                        },
                                        equals: function(t, e) {
                                            var i, n, r, s, a = this === t;
                                            return !a && t instanceof F && (r = this.getCurve(),
                                                s = t.getCurve(),
                                            (i = r._path) === s._path && (r = (n = Math.abs)(this.getOffset() - t.getOffset()),
                                                s = !e && this._intersection,
                                                t = !e && t._intersection,
                                                a = (r < 1e-7 || i && n(i.getLength() - r) < 1e-7) && (!s && !t || s && t && s.equals(t, !0)))),
                                                a
                                        },
                                        toString: function() {
                                            var t = []
                                                , e = this.getPoint()
                                                , i = m.instance;
                                            return e && t.push("point: " + e),
                                            null != (e = this.getIndex()) && t.push("index: " + e),
                                            null != (e = this.getTime()) && t.push("time: " + i.number(e)),
                                            null != this._distance && t.push("distance: " + i.number(this._distance)),
                                            "{ " + t.join(", ") + " }"
                                        },
                                        isTouching: function() {
                                            if ((e = this._intersection) && this.getTangent().isCollinear(e.getTangent())) {
                                                var t = this.getCurve()
                                                    , e = e.getCurve();
                                                return !(t.isStraight() && e.isStraight() && t.getLine().intersect(e.getLine()))
                                            }
                                            return !1
                                        },
                                        isCrossing: function() {
                                            var t = this._intersection;
                                            if (!t)
                                                return !1;
                                            var e = this.getTime()
                                                , i = t.getTime()
                                                , n = 1 - 1e-8
                                                , r = 1e-8 <= e && e <= n
                                                , s = 1e-8 <= i && i <= n;
                                            if (r && s)
                                                return !this.isTouching();
                                            var a = this.getCurve()
                                                , o = a && e < 1e-8 ? a.getPrevious() : a
                                                , h = t.getCurve()
                                                , l = h && i < 1e-8 ? h.getPrevious() : h;
                                            if (n < e && (a = a.getNext()),
                                            n < i && (h = h.getNext()),
                                                !(o && a && l && h))
                                                return !1;
                                            var u = [];
                                            function c(t, e) {
                                                var i = t.getValues()
                                                    , n = (t = (n = z.classify(i).roots || z.getPeaks(i)).length,
                                                    z.getLength(i, e && t ? n[t - 1] : 0, !e && t ? n[0] : 1));
                                                u.push(t ? n : n / 32)
                                            }
                                            function d(t, e, i) {
                                                return e < i ? e < t && t < i : e < t || t < i
                                            }
                                            return r || (c(o, !0),
                                                c(a, !1)),
                                            s || (c(l, !0),
                                                c(h, !1)),
                                                t = this.getPoint(),
                                                n = Math.min.apply(Math, u),
                                                a = r ? a.getTangentAtTime(e) : a.getPointAt(n).subtract(t),
                                                o = r ? a.negate() : o.getPointAt(-n).subtract(t),
                                                h = s ? h.getTangentAtTime(i) : h.getPointAt(n).subtract(t),
                                                t = s ? h.negate() : l.getPointAt(-n).subtract(t),
                                                o = o.getAngle(),
                                                a = a.getAngle(),
                                                t = t.getAngle(),
                                                h = h.getAngle(),
                                                !!(r ? d(o, t, h) ^ d(a, t, h) && d(o, h, t) ^ d(a, h, t) : d(t, o, a) ^ d(h, o, a) && d(t, a, o) ^ d(h, a, o))
                                        },
                                        hasOverlap: function() {
                                            return !!this._overlap
                                        }
                                    }, u.each(z._evaluateMethods, (function(t) {
                                            var e = t + "At";
                                            this[t] = function() {
                                                var t = this.getCurve()
                                                    , i = this.getTime();
                                                return null != i && t && t[e](i, !0)
                                            }
                                        }
                                    ), {
                                        preserve: !0
                                    }), new function() {
                                        function t(t, e, i) {
                                            var n = t.length
                                                , r = 0
                                                , s = n - 1;
                                            function a(i, r) {
                                                for (var s = i + r; -1 <= s && s <= n; s += r) {
                                                    var a = t[(s % n + n) % n];
                                                    if (!e.getPoint().isClose(a.getPoint(), 1e-7))
                                                        break;
                                                    if (e.equals(a))
                                                        return a
                                                }
                                                return null
                                            }
                                            for (; r <= s; ) {
                                                var o, h = r + s >>> 1, l = t[h];
                                                if (i && (o = e.equals(l) ? l : a(h, -1) || a(h, 1)))
                                                    return e._overlap && (o._overlap = o._intersection._overlap = !0),
                                                        o;
                                                var u = e.getPath()
                                                    , c = l.getPath();
                                                (u !== c ? u._id - c._id : e.getIndex() + e.getTime() - (l.getIndex() + l.getTime())) < 0 ? s = h - 1 : r = 1 + h
                                            }
                                            return t.splice(r, 0, e),
                                                e
                                        }
                                        return {
                                            statics: {
                                                insert: t,
                                                expand: function(e) {
                                                    for (var i = e.slice(), n = e.length - 1; 0 <= n; n--)
                                                        t(i, e[n]._intersection, !1);
                                                    return i
                                                }
                                            }
                                        }
                                    }
                                )
                                    , B = T.extend({
                                    _class: "PathItem",
                                    _selectBounds: !1,
                                    _canScaleStroke: !0,
                                    beans: !0,
                                    initialize: function() {},
                                    statics: {
                                        create: function(t) {
                                            var e, i, n;
                                            return u.isPlainObject(t) ? (i = t.segments,
                                                e = t.pathData) : Array.isArray(t) ? i = t : "string" == typeof t && (e = t),
                                                i ? n = (n = i[0]) && Array.isArray(n[0]) : e && (n = 1 < (e.match(/m/gi) || []).length || /z\s*\S+/i.test(e)),
                                                new (n ? U : V)(t)
                                        }
                                    },
                                    _asPathItem: function() {
                                        return this
                                    },
                                    isClockwise: function() {
                                        return 0 <= this.getArea()
                                    },
                                    setClockwise: function(t) {
                                        this.isClockwise() != (t = !!t) && this.reverse()
                                    },
                                    setPathData: function(t) {
                                        var e, i, n = t && t.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/gi), r = !1, s = new _, a = new _;
                                        function o(t, e) {
                                            return t = +c[t],
                                            r && (t += s[e]),
                                                t
                                        }
                                        function h(t) {
                                            return new _(o(t, "x"),o(t + 1, "y"))
                                        }
                                        this.clear();
                                        for (var l = 0, u = n && n.length; l < u; l++) {
                                            var c, d = n[l], p = d[0], f = p.toLowerCase(), m = (c = d.match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g)) && c.length;
                                            r = p === f;
                                            switch ("z" !== e || /[mz]/.test(f) || this.moveTo(s),
                                                f) {
                                                case "m":
                                                case "l":
                                                    for (var g = "m" === f, v = 0; v < m; v += 2)
                                                        this[g ? "moveTo" : "lineTo"](s = h(v)),
                                                        g && (a = s,
                                                            g = !1);
                                                    i = s;
                                                    break;
                                                case "h":
                                                case "v":
                                                    var y = "h" === f ? "x" : "y";
                                                    for (s = s.clone(),
                                                             v = 0; v < m; v++)
                                                        s[y] = o(v, y),
                                                            this.lineTo(s);
                                                    i = s;
                                                    break;
                                                case "c":
                                                    for (v = 0; v < m; v += 6)
                                                        this.cubicCurveTo(h(v), i = h(v + 2), s = h(v + 4));
                                                    break;
                                                case "s":
                                                    for (v = 0; v < m; v += 4)
                                                        this.cubicCurveTo(/[cs]/.test(e) ? s.multiply(2).subtract(i) : s, i = h(v), s = h(v + 2)),
                                                            e = f;
                                                    break;
                                                case "q":
                                                    for (v = 0; v < m; v += 4)
                                                        this.quadraticCurveTo(i = h(v), s = h(v + 2));
                                                    break;
                                                case "t":
                                                    for (v = 0; v < m; v += 2)
                                                        this.quadraticCurveTo(i = /[qt]/.test(e) ? s.multiply(2).subtract(i) : s, s = h(v)),
                                                            e = f;
                                                    break;
                                                case "a":
                                                    for (v = 0; v < m; v += 7)
                                                        this.arcTo(s = h(v + 5), new x(+c[v],+c[v + 1]), +c[v + 2], +c[v + 4], +c[v + 3]);
                                                    break;
                                                case "z":
                                                    this.closePath(1e-12),
                                                        s = a
                                            }
                                            e = f
                                        }
                                    },
                                    _canComposite: function() {
                                        return !(this.hasFill() && this.hasStroke())
                                    },
                                    _contains: function(t) {
                                        return (t = t.isInside(this.getBounds({
                                            internal: !0,
                                            handle: !0
                                        })) ? this._getWinding(t) : {}).onPath || !!("evenodd" === this.getFillRule() ? 1 & t.windingL || 1 & t.windingR : t.winding)
                                    },
                                    getIntersections: function(t, e, i, n) {
                                        var r = this === t || !t
                                            , s = this._matrix._orNullIfIdentity();
                                        i = r ? s : (i || t._matrix)._orNullIfIdentity();
                                        return r || this.getBounds(s).intersects(t.getBounds(i), 1e-12) ? z.getIntersections(this.getCurves(), !r && t.getCurves(), e, s, i, n) : []
                                    },
                                    getCrossings: function(t) {
                                        return this.getIntersections(t, (function(t) {
                                                return t.isCrossing()
                                            }
                                        ))
                                    },
                                    getNearestLocation: function() {
                                        for (var t = _.read(arguments), e = this.getCurves(), i = 1 / 0, n = null, r = 0, s = e.length; r < s; r++) {
                                            var a = e[r].getNearestLocation(t);
                                            a._distance < i && (i = a._distance,
                                                n = a)
                                        }
                                        return n
                                    },
                                    getNearestPoint: function() {
                                        var t = this.getNearestLocation.apply(this, arguments);
                                        return t && t.getPoint()
                                    },
                                    interpolate: function(t, e, i) {
                                        var n = !this._children
                                            , r = n ? "_segments" : "_children"
                                            , s = t[r]
                                            , a = e[r]
                                            , o = this[r];
                                        if (!s || !a || s.length !== a.length)
                                            throw new Error("Invalid operands in interpolate() call: " + t + ", " + e);
                                        e = o.length;
                                        var h = a.length;
                                        if (e < h)
                                            for (var l = n ? D : V, u = e; u < h; u++)
                                                this.add(new l);
                                        else
                                            h < e && this[n ? "removeSegments" : "removeChildren"](h, e);
                                        for (u = 0; u < h; u++)
                                            o[u].interpolate(s[u], a[u], i);
                                        n && (this.setClosed(t._closed),
                                            this._changed(9))
                                    },
                                    compare: function(t) {
                                        var e = !1;
                                        if (t) {
                                            var i = this._children || [this]
                                                , n = t._children ? t._children.slice() : [t]
                                                , r = i.length
                                                , s = (t = n.length,
                                                [])
                                                , a = 0;
                                            e = !0;
                                            for (var o = f.findItemBoundsCollisions(i, n, g.GEOMETRIC_EPSILON), h = r - 1; 0 <= h && e; h--) {
                                                var l = i[h]
                                                    , u = (e = !1,
                                                    o[h]);
                                                if (u)
                                                    for (var c = u.length - 1; 0 <= c && !e; c--)
                                                        l.compare(n[u[c]]) && (s[u[c]] || (s[u[c]] = !0,
                                                            a++),
                                                            e = !0)
                                            }
                                            e = e && a === t
                                        }
                                        return e
                                    }
                                })
                                    , V = B.extend({
                                        _class: "Path",
                                        _serializeFields: {
                                            segments: [],
                                            closed: !1
                                        },
                                        initialize: function(t) {
                                            this._closed = !1,
                                                this._segments = [],
                                                this._version = 0;
                                            var e = arguments;
                                            (e = Array.isArray(t) ? "object" == typeof t[0] ? t : e : !t || t.size !== o || t.x === o && t.point === o ? null : e) && 0 < e.length ? this.setSegments(e) : (this._curves = o,
                                                this._segmentSelection = 0,
                                            e || "string" != typeof t || (this.setPathData(t),
                                                t = null)),
                                                this._initialize(!e && t)
                                        },
                                        _equals: function(t) {
                                            return this._closed === t._closed && u.equals(this._segments, t._segments)
                                        },
                                        copyContent: function(t) {
                                            this.setSegments(t._segments),
                                                this._closed = t._closed
                                        },
                                        _changed: function t(e) {
                                            if (t.base.call(this, e),
                                            8 & e) {
                                                if (this._length = this._area = o,
                                                32 & e)
                                                    this._version++;
                                                else if (this._curves)
                                                    for (var i = 0, n = this._curves.length; i < n; i++)
                                                        this._curves[i]._changed()
                                            } else
                                                64 & e && (this._bounds = o)
                                        },
                                        getStyle: function() {
                                            var t = this._parent;
                                            return (t instanceof U ? t : this)._style
                                        },
                                        getSegments: function() {
                                            return this._segments
                                        },
                                        setSegments: function(t) {
                                            var e, i = this.isFullySelected(), n = t && t.length;
                                            this._segments.length = 0,
                                                this._segmentSelection = 0,
                                                this._curves = o,
                                            n && ("boolean" == typeof (e = t[n - 1]) && (this.setClosed(e),
                                                n--),
                                                this._add(D.readList(t, 0, {}, n))),
                                            i && this.setFullySelected(!0)
                                        },
                                        getFirstSegment: function() {
                                            return this._segments[0]
                                        },
                                        getLastSegment: function() {
                                            return this._segments[this._segments.length - 1]
                                        },
                                        getCurves: function() {
                                            var t = this._curves
                                                , e = this._segments;
                                            if (!t)
                                                for (var i = this._countCurves(), n = (t = this._curves = new Array(i),
                                                    0); n < i; n++)
                                                    t[n] = new z(this,e[n],e[n + 1] || e[0]);
                                            return t
                                        },
                                        getFirstCurve: function() {
                                            return this.getCurves()[0]
                                        },
                                        getLastCurve: function() {
                                            var t = this.getCurves();
                                            return t[t.length - 1]
                                        },
                                        isClosed: function() {
                                            return this._closed
                                        },
                                        setClosed: function(t) {
                                            var e;
                                            this._closed != (t = !!t) && (this._closed = t,
                                            this._curves && (e = this._curves.length = this._countCurves(),
                                            t && (this._curves[e - 1] = new z(this,this._segments[e - 1],this._segments[0]))),
                                                this._changed(41))
                                        }
                                    }, {
                                        beans: !0,
                                        getPathData: function(t, e) {
                                            var i, n, r, s, a, o, h, l, u = this._segments, c = u.length, d = new m(e), p = new Array(6), f = !0, g = [];
                                            function v(e, u) {
                                                e._transformCoordinates(t, p),
                                                    i = p[0],
                                                    n = p[1],
                                                    f ? (g.push("M" + d.pair(i, n)),
                                                        f = !1) : (a = p[2],
                                                        o = p[3],
                                                        a === i && o === n && h === r && l === s ? u || (e = i - r,
                                                            u = n - s,
                                                            g.push(0 == e ? "v" + d.number(u) : 0 == u ? "h" + d.number(e) : "l" + d.pair(e, u))) : g.push("c" + d.pair(h - r, l - s) + " " + d.pair(a - r, o - s) + " " + d.pair(i - r, n - s))),
                                                    r = i,
                                                    s = n,
                                                    h = p[4],
                                                    l = p[5]
                                            }
                                            if (!c)
                                                return "";
                                            for (var _ = 0; _ < c; _++)
                                                v(u[_]);
                                            return this._closed && 0 < c && (v(u[0], !0),
                                                g.push("z")),
                                                g.join("")
                                        },
                                        isEmpty: function() {
                                            return !this._segments.length
                                        },
                                        _transformContent: function(t) {
                                            for (var e = this._segments, i = new Array(6), n = 0, r = e.length; n < r; n++)
                                                e[n]._transformCoordinates(t, i, !0);
                                            return !0
                                        },
                                        _add: function(t, e) {
                                            for (var i = this._segments, n = this._curves, r = t.length, s = (e = (c = null == e) ? i.length : e,
                                                0); s < r; s++) {
                                                var a = t[s];
                                                (a = a._path ? t[s] = a.clone() : a)._path = this,
                                                    a._index = e + s,
                                                a._selection && this._updateSelection(a, 0, a._selection)
                                            }
                                            if (c)
                                                u.push(i, t);
                                            else {
                                                i.splice.apply(i, [e, 0].concat(t));
                                                s = e + r;
                                                for (var o = i.length; s < o; s++)
                                                    i[s]._index = s
                                            }
                                            if (n) {
                                                var h = this._countCurves()
                                                    , l = 0 < e && e + r - 1 === h ? e - 1 : e
                                                    , c = l
                                                    , d = Math.min(l + r, h);
                                                for (t._curves && (n.splice.apply(n, [l, 0].concat(t._curves)),
                                                    c += t._curves.length),
                                                         s = c; s < d; s++)
                                                    n.splice(s, 0, new z(this,null,null));
                                                this._adjustCurves(l, d)
                                            }
                                            return this._changed(41),
                                                t
                                        },
                                        _adjustCurves: function(t, e) {
                                            for (var i, n = this._segments, r = this._curves, s = t; s < e; s++)
                                                (i = r[s])._path = this,
                                                    i._segment1 = n[s],
                                                    i._segment2 = n[s + 1] || n[0],
                                                    i._changed();
                                            (i = r[this._closed && !t ? n.length - 1 : t - 1]) && (i._segment2 = n[t] || n[0],
                                                i._changed()),
                                            (i = r[e]) && (i._segment1 = n[e],
                                                i._changed())
                                        },
                                        _countCurves: function() {
                                            var t = this._segments.length;
                                            return !this._closed && 0 < t ? t - 1 : t
                                        },
                                        add: function(t) {
                                            var e = arguments;
                                            return 1 < e.length && "number" != typeof t ? this._add(D.readList(e)) : this._add([D.read(e)])[0]
                                        },
                                        insert: function(t, e) {
                                            var i = arguments;
                                            return 2 < i.length && "number" != typeof e ? this._add(D.readList(i, 1), t) : this._add([D.read(i, 1)], t)[0]
                                        },
                                        addSegment: function() {
                                            return this._add([D.read(arguments)])[0]
                                        },
                                        insertSegment: function(t) {
                                            return this._add([D.read(arguments, 1)], t)[0]
                                        },
                                        addSegments: function(t) {
                                            return this._add(D.readList(t))
                                        },
                                        insertSegments: function(t, e) {
                                            return this._add(D.readList(e), t)
                                        },
                                        removeSegment: function(t) {
                                            return this.removeSegments(t, t + 1)[0] || null
                                        },
                                        removeSegments: function(t, e, i) {
                                            t = t || 0,
                                                e = u.pick(e, this._segments.length);
                                            var n = this._segments
                                                , r = this._curves
                                                , s = n.length
                                                , a = n.splice(t, e - t)
                                                , o = a.length;
                                            if (!o)
                                                return a;
                                            for (var h = 0; h < o; h++) {
                                                var l = a[h];
                                                l._selection && this._updateSelection(l, l._selection, 0),
                                                    l._index = l._path = null
                                            }
                                            h = t;
                                            for (var c = n.length; h < c; h++)
                                                n[h]._index = h;
                                            if (r) {
                                                for (t = 0 < t && e === s + (this._closed ? 1 : 0) ? t - 1 : t,
                                                         h = (r = r.splice(t, o)).length - 1; 0 <= h; h--)
                                                    r[h]._path = null;
                                                i && (a._curves = r.slice(1)),
                                                    this._adjustCurves(t, t)
                                            }
                                            return this._changed(41),
                                                a
                                        },
                                        clear: "#removeSegments",
                                        hasHandles: function() {
                                            for (var t = this._segments, e = 0, i = t.length; e < i; e++)
                                                if (t[e].hasHandles())
                                                    return !0;
                                            return !1
                                        },
                                        clearHandles: function() {
                                            for (var t = this._segments, e = 0, i = t.length; e < i; e++)
                                                t[e].clearHandles()
                                        },
                                        getLength: function() {
                                            if (null == this._length) {
                                                for (var t = this.getCurves(), e = 0, i = 0, n = t.length; i < n; i++)
                                                    e += t[i].getLength();
                                                this._length = e
                                            }
                                            return this._length
                                        },
                                        getArea: function() {
                                            if (null == (i = this._area)) {
                                                for (var t = this._segments, e = this._closed, i = 0, n = 0, r = t.length; n < r; n++) {
                                                    var s = n + 1 === r;
                                                    i += z.getArea(z.getValues(t[n], t[s ? 0 : n + 1], null, s && !e))
                                                }
                                                this._area = i
                                            }
                                            return i
                                        },
                                        isFullySelected: function() {
                                            var t = this._segments.length;
                                            return this.isSelected() && 0 < t && this._segmentSelection === 7 * t
                                        },
                                        setFullySelected: function(t) {
                                            t && this._selectSegments(!0),
                                                this.setSelected(t)
                                        },
                                        setSelection: function t(e) {
                                            1 & e || this._selectSegments(!1),
                                                t.base.call(this, e)
                                        },
                                        _selectSegments: function(t) {
                                            var e = this._segments
                                                , i = e.length
                                                , n = t ? 7 : 0;
                                            this._segmentSelection = n * i;
                                            for (var r = 0; r < i; r++)
                                                e[r]._selection = n
                                        },
                                        _updateSelection: function(t, e, i) {
                                            t._selection = i,
                                            0 < (this._segmentSelection += i - e) && this.setSelected(!0)
                                        },
                                        divideAt: function(t) {
                                            var e;
                                            return (t = this.getLocationAt(t)) && (e = t.getCurve().divideAt(t.getCurveOffset())) ? e._segment1 : null
                                        },
                                        splitAt: function(t) {
                                            var e = this.getLocationAt(t)
                                                , i = e && e.index;
                                            if (1 - 1e-8 < (t = e && e.time) && (i++,
                                                t = 0),
                                                e = this.getCurves(),
                                            0 <= i && i < e.length) {
                                                1e-8 <= t && e[i++].divideAtTime(t);
                                                var n;
                                                i = this.removeSegments(i, this._segments.length, !0);
                                                return this._closed ? (this.setClosed(!1),
                                                    n = this) : ((n = new V(T.NO_INSERT)).insertAbove(this),
                                                    n.copyAttributes(this)),
                                                    n._add(i, 0),
                                                    this.addSegment(i[0]),
                                                    n
                                            }
                                            return null
                                        },
                                        split: function(t, e) {
                                            return null != (e = e === o ? t : (t = this.getCurves()[t]) && t.getLocationAtTime(e)) ? this.splitAt(e) : null
                                        },
                                        join: function(t, e) {
                                            var i = e || 0;
                                            if (t && t !== this) {
                                                var n = t._segments
                                                    , r = this.getLastSegment()
                                                    , s = t.getLastSegment();
                                                if (!s)
                                                    return this;
                                                r && r._point.isClose(s._point, i) && t.reverse(),
                                                    e = t.getFirstSegment(),
                                                    r && r._point.isClose(e._point, i) ? (r.setHandleOut(e._handleOut),
                                                        this._add(n.slice(1))) : ((r = this.getFirstSegment()) && r._point.isClose(e._point, i) && t.reverse(),
                                                        s = t.getLastSegment(),
                                                        r && r._point.isClose(s._point, i) ? (r.setHandleIn(s._handleIn),
                                                            this._add(n.slice(0, n.length - 1), 0)) : this._add(n.slice())),
                                                t._closed && this._add([n[0]]),
                                                    t.remove()
                                            }
                                            return (n = this.getFirstSegment()) !== (t = this.getLastSegment()) && n._point.isClose(t._point, i) && (n.setHandleIn(t._handleIn),
                                                t.remove(),
                                                this.setClosed(!0)),
                                                this
                                        },
                                        reduce: function(t) {
                                            for (var e = this.getCurves(), i = t && t.simplify, n = i ? 1e-7 : 0, r = e.length - 1; 0 <= r; r--) {
                                                var s = e[r];
                                                !s.hasHandles() && (!s.hasLength(n) || i && s.isCollinear(s.getNext())) && s.remove()
                                            }
                                            return this
                                        },
                                        reverse: function() {
                                            this._segments.reverse();
                                            for (var t = 0, e = this._segments.length; t < e; t++) {
                                                var i = this._segments[t]
                                                    , n = i._handleIn;
                                                i._handleIn = i._handleOut,
                                                    i._handleOut = n,
                                                    i._index = t
                                            }
                                            this._curves = null,
                                                this._changed(9)
                                        },
                                        flatten: function(t) {
                                            for (var e = new G(this,t || .25,256,!0).parts, i = e.length, n = [], r = 0; r < i; r++)
                                                n.push(new D(e[r].curve.slice(0, 2)));
                                            !this._closed && 0 < i && n.push(new D(e[i - 1].curve.slice(6))),
                                                this.setSegments(n)
                                        },
                                        simplify: function(t) {
                                            return (t = new W(this).fit(t || 2.5)) && this.setSegments(t),
                                                !!t
                                        },
                                        smooth: function(t) {
                                            var e = this
                                                , i = t || {}
                                                , n = (t = i.type || "asymmetric",
                                                this._segments)
                                                , r = n.length
                                                , s = this._closed;
                                            function a(t, i) {
                                                var n = t && t.index;
                                                if (null != n) {
                                                    var a = t.path;
                                                    if (a && a !== e)
                                                        throw new Error(t._class + " " + n + " of " + a + " is not part of " + e);
                                                    i && t instanceof z && n++
                                                } else
                                                    n = "number" == typeof t ? t : i;
                                                return Math.min(n < 0 && s ? n % r : n < 0 ? n + r : n, r - 1)
                                            }
                                            var h = s && i.from === o && i.to === o
                                                , l = a(i.from, 0)
                                                , u = a(i.to, r - 1);
                                            if (u < l && (s ? l -= r : (d = l,
                                                l = u,
                                                u = d)),
                                                /^(?:asymmetric|continuous)$/.test(t)) {
                                                var c = "asymmetric" === t
                                                    , d = Math.min
                                                    , p = (t = u - l + 1) - 1
                                                    , f = t = h ? d(t, 4) : 1
                                                    , m = (t = t,
                                                    []);
                                                if (s || (f = d(1, l),
                                                    t = d(1, r - u - 1)),
                                                    !((p += f + t) <= 1)) {
                                                    for (var g = 0, v = l - f; g <= p; g++,
                                                        v++)
                                                        m[g] = n[(v < 0 ? v + r : v) % r]._point;
                                                    var _ = p - 1
                                                        , y = [E = m[0]._x + 2 * m[1]._x]
                                                        , x = [L = m[0]._y + 2 * m[1]._y]
                                                        , b = [P = 2]
                                                        , w = []
                                                        , S = [];
                                                    for (g = 1; g < p; g++)
                                                         var M = g < _
                                                             , C = M ? 4 : c ? 3 : 8
                                                             , A = M ? 2 : c ? 0 : 1
                                                             , T = (M || c ? 1 : 2) / P
                                                             , P = b[g] = (M ? 4 : c ? 2 : 7) - T
                                                             , E = y[g] = C * m[g]._x + A * m[g + 1]._x - T * E
                                                             , L = x[g] = C * m[g]._y + A * m[g + 1]._y - T * L;
                                                    for (w[_] = y[_] / b[_],
                                                             S[_] = x[_] / b[_],
                                                             g = p - 2; 0 <= g; g--)
                                                        w[g] = (y[g] - w[g + 1]) / b[g],
                                                            S[g] = (x[g] - S[g + 1]) / b[g];
                                                    w[p] = (3 * m[p]._x - w[_]) / 2,
                                                        S[p] = (3 * m[p]._y - S[_]) / 2;
                                                    g = f;
                                                    var I = p - t;
                                                    for (v = l; g <= I; g++,
                                                        v++) {
                                                        var k = n[v < 0 ? v + r : v]
                                                            , N = k._point
                                                            , O = w[g] - N._x;
                                                        N = S[g] - N._y;
                                                        (h || g < I) && k.setHandleOut(O, N),
                                                        (h || f < g) && k.setHandleIn(-O, -N)
                                                    }
                                                }
                                            } else
                                                for (g = l; g <= u; g++)
                                                    n[g < 0 ? g + r : g].smooth(i, !h && g === l, !h && g === u)
                                        },
                                        toShape: function(t) {
                                            if (!this._closed)
                                                return null;
                                            var e, i, n, r, s, a = this._segments;
                                            function h(t, e) {
                                                var i = a[t]
                                                    , n = i.getNext();
                                                e = (t = a[e]).getNext();
                                                return i._handleOut.isZero() && n._handleIn.isZero() && t._handleOut.isZero() && e._handleIn.isZero() && n._point.subtract(i._point).isCollinear(e._point.subtract(t._point))
                                            }
                                            function l(t) {
                                                var e = a[t]
                                                    , i = e.getNext()
                                                    , n = e._handleOut
                                                    , r = i._handleIn
                                                    , s = .5522847498307936;
                                                if (n.isOrthogonal(r))
                                                    return t = e._point,
                                                        e = i._point,
                                                    (i = new C(t,n,!0).intersect(new C(e,r,!0), !0)) && g.isZero(n.getLength() / i.subtract(t).getLength() - s) && g.isZero(r.getLength() / i.subtract(e).getLength() - s)
                                            }
                                            function u(t, e) {
                                                return a[t]._point.getDistance(a[e]._point)
                                            }
                                            if (!this.hasHandles() && 4 === a.length && h(0, 2) && h(1, 3) && (s = (c = a[r = 1]).getPrevious(),
                                                r = c.getNext(),
                                            s._handleOut.isZero() && c._handleIn.isZero() && c._handleOut.isZero() && r._handleIn.isZero() && c._point.subtract(s._point).isOrthogonal(r._point.subtract(c._point))) ? (e = L.Rectangle,
                                                i = new x(u(0, 3),u(0, 1)),
                                                n = a[1]._point.add(a[2]._point).divide(2)) : 8 === a.length && l(0) && l(2) && l(4) && l(6) && h(1, 5) && h(3, 7) ? (e = L.Rectangle,
                                                d = (i = new x(u(1, 6),u(0, 3))).subtract(new x(u(0, 7),u(1, 2))).divide(2),
                                                n = a[3]._point.add(a[4]._point).divide(2)) : 4 === a.length && l(0) && l(1) && l(2) && l(3) && (d = g.isZero(u(0, 2) - u(1, 3)) ? (e = L.Circle,
                                            u(0, 2) / 2) : (e = L.Ellipse,
                                                new x(u(2, 0) / 2,u(3, 1) / 2)),
                                                n = a[1]._point),
                                                e) {
                                                var c = this.getPosition(!0)
                                                    , d = new e({
                                                    center: c,
                                                    size: i,
                                                    radius: d,
                                                    insert: !1
                                                });
                                                return d.copyAttributes(this, !0),
                                                    d._matrix.prepend(this._matrix),
                                                    d.rotate(n.subtract(c).getAngle() + 90),
                                                t !== o && !t || d.insertAbove(this),
                                                    d
                                            }
                                            return null
                                        },
                                        toPath: "#clone",
                                        compare: function t(e) {
                                            if (!e || e instanceof U)
                                                return t.base.call(this, e);
                                            var i = this.getCurves()
                                                , n = e.getCurves()
                                                , r = i.length
                                                , s = n.length;
                                            if (!r || !s)
                                                return r == s;
                                            for (var a, o, h = i[0].getValues(), l = [], u = 0, c = 0, d = 0; d < s; d++) {
                                                var p = n[d].getValues();
                                                if (l.push(p),
                                                    g = z.getOverlaps(h, p)) {
                                                    a = !d && 0 < g[0][0] ? s - 1 : d,
                                                        o = g[0][1];
                                                    break
                                                }
                                            }
                                            var f, m = Math.abs;
                                            for (p = l[a]; h && p; ) {
                                                var g = z.getOverlaps(h, p);
                                                if (g && m(g[0][0] - c) < 1e-8) {
                                                    1 === (c = g[1][0]) && (h = ++u < r ? i[u].getValues() : null,
                                                        c = 0);
                                                    var v = g[0][1];
                                                    if (m(v - o) < 1e-8) {
                                                        if (f = f || [a, v],
                                                        1 === (o = g[1][1]) && (p = l[a = ++a >= s ? 0 : a] || n[a].getValues(),
                                                            o = 0),
                                                            !h)
                                                            return f[0] === a && f[1] === o;
                                                        continue
                                                    }
                                                }
                                                break
                                            }
                                            return !1
                                        },
                                        _hitTestSelf: function(t, e, i, n) {
                                            var r, s, a, o, h, l, u = this, c = this.getStyle(), d = this._segments, p = d.length, f = this._closed, m = e._tolerancePadding, g = m, v = e.stroke && c.hasStroke(), _ = e.fill && c.hasFill(), y = e.curves, x = v ? c.getStrokeWidth() / 2 : _ && 0 < e.tolerance || y ? 0 : null;
                                            function b(e, i) {
                                                return t.subtract(e).divide(i).length <= 1
                                            }
                                            function w(t, i, n) {
                                                if (!e.selected || i.isSelected()) {
                                                    var r = t._point;
                                                    if (b(i = i !== r ? i.add(r) : i, g))
                                                        return new O(n,u,{
                                                            segment: t,
                                                            point: i
                                                        })
                                                }
                                            }
                                            function S(t, i) {
                                                return (i || e.segments) && w(t, t._point, "segment") || !i && e.handles && (w(t, t._handleIn, "handle-in") || w(t, t._handleOut, "handle-out"))
                                            }
                                            function M(t) {
                                                o.add(t)
                                            }
                                            function C(e) {
                                                var i = f || 0 < e._index && e._index < p - 1;
                                                return "round" === (i ? r : s) ? b(e._point, g) : (o = new V({
                                                    internal: !0,
                                                    closed: !0
                                                }),
                                                    i ? e.isSmooth() || V._addBevelJoin(e, r, x, a, null, n, M, !0) : "square" === s && V._addSquareCap(e, s, x, null, n, M, !0),
                                                !o.isEmpty() && (o.contains(t) || (e = o.getNearestLocation(t)) && b(e.getPoint(), m)))
                                            }
                                            if (null !== x && (0 < x ? (r = c.getStrokeJoin(),
                                                s = c.getStrokeCap(),
                                                a = c.getMiterLimit(),
                                                g = g.add(V._getStrokePadding(x, n))) : r = s = "round"),
                                            !e.ends || e.segments || f) {
                                                if (e.segments || e.handles)
                                                    for (var A = 0; A < p; A++)
                                                        if (h = S(d[A]))
                                                            return h
                                            } else if (h = S(d[0], !0) || S(d[p - 1], !0))
                                                return h;
                                            if (null !== x && ((l = this.getNearestLocation(t)) && (0 === (c = l.getTime()) || 1 === c && 1 < p ? C(l.getSegment()) || (l = null) : b(l.getPoint(), g) || (l = null)),
                                            !l && "miter" === r && 1 < p))
                                                for (A = 0; A < p; A++) {
                                                    var T = d[A];
                                                    if (t.getDistance(T._point) <= a * x && C(T)) {
                                                        l = T.getLocation();
                                                        break
                                                    }
                                                }
                                            return !l && _ && this._contains(t) || l && !v && !y ? new O("fill",this) : l ? new O(v ? "stroke" : "curve",this,{
                                                location: l,
                                                point: l.getPoint()
                                            }) : null
                                        }
                                    }, u.each(z._evaluateMethods, (function(t) {
                                            this[t + "At"] = function(e) {
                                                return (e = this.getLocationAt(e)) && e[t]()
                                            }
                                        }
                                    ), {
                                        beans: !1,
                                        getLocationOf: function() {
                                            for (var t = _.read(arguments), e = this.getCurves(), i = 0, n = e.length; i < n; i++) {
                                                var r = e[i].getLocationOf(t);
                                                if (r)
                                                    return r
                                            }
                                            return null
                                        },
                                        getOffsetOf: function() {
                                            var t = this.getLocationOf.apply(this, arguments);
                                            return t ? t.getOffset() : null
                                        },
                                        getLocationAt: function(t) {
                                            if ("number" == typeof t) {
                                                for (var e = this.getCurves(), i = 0, n = 0, r = e.length; n < r; n++) {
                                                    var s = i
                                                        , a = e[n];
                                                    if (t < (i += a.getLength()))
                                                        return a.getLocationAt(t - s)
                                                }
                                                if (0 < e.length && t <= this.getLength())
                                                    return new F(e[e.length - 1],1)
                                            } else if (t && t.getPath && t.getPath() === this)
                                                return t;
                                            return null
                                        },
                                        getOffsetsWithTangent: function() {
                                            var t = _.read(arguments);
                                            if (t.isZero())
                                                return [];
                                            for (var e = [], i = 0, n = this.getCurves(), r = 0, s = n.length; r < s; r++) {
                                                for (var a = n[r], o = a.getTimesWithTangent(t), h = 0, l = o.length; h < l; h++) {
                                                    var u = i + a.getOffsetAtTime(o[h]);
                                                    e.indexOf(u) < 0 && e.push(u)
                                                }
                                                i += a.length
                                            }
                                            return e
                                        }
                                    }), new function() {
                                        function t(t, e, i) {
                                            var n, r, s, a, o, h, l, u, c = e._segments, d = c.length, p = new Array(6), f = !0;
                                            function m(e) {
                                                var c, d;
                                                r = i ? (e._transformCoordinates(i, p),
                                                    n = p[0],
                                                    p[1]) : (c = e._point,
                                                    n = c._x,
                                                    c._y),
                                                    f ? (t.moveTo(n, r),
                                                        f = !1) : (h = i ? (o = p[2],
                                                        p[3]) : (d = e._handleIn,
                                                        o = n + d._x,
                                                    r + d._y),
                                                        o === n && h === r && l === s && u === a ? t.lineTo(n, r) : t.bezierCurveTo(l, u, o, h, n, r)),
                                                    s = n,
                                                    a = r,
                                                    u = i ? (l = p[4],
                                                        p[5]) : (d = e._handleOut,
                                                        l = s + d._x,
                                                    a + d._y)
                                            }
                                            for (var g = 0; g < d; g++)
                                                m(c[g]);
                                            e._closed && 0 < d && m(c[0])
                                        }
                                        return {
                                            _draw: function(e, i, n, r) {
                                                var s = i.dontStart
                                                    , a = i.dontFinish || i.clip
                                                    , o = this.getStyle()
                                                    , h = o.hasFill()
                                                    , l = o.hasStroke()
                                                    , u = o.getDashArray()
                                                    , c = !Ut.support.nativeDash && l && u && u.length;
                                                function d(t) {
                                                    return u[(t % c + c) % c]
                                                }
                                                if (s || e.beginPath(),
                                                (h || l && !c || a) && (t(e, this, r),
                                                this._closed && e.closePath()),
                                                !a && (h || l) && (this._setStyles(e, i, n),
                                                h && (e.fill(o.getFillRule()),
                                                    e.shadowColor = "rgba(0,0,0,0)"),
                                                    l)) {
                                                    if (c) {
                                                        s || e.beginPath();
                                                        for (var p, f = new G(this,.25,32,!1,r), m = f.length, g = -o.getDashOffset(), v = 0; 0 < g; )
                                                            g -= d(v--) + d(v--);
                                                        for (; g < m; )
                                                            p = g + d(v++),
                                                            (0 < g || 0 < p) && f.drawPart(e, Math.max(g, 0), Math.max(p, 0)),
                                                                g = p + d(v++)
                                                    }
                                                    e.stroke()
                                                }
                                            },
                                            _drawSelected: function(e, i) {
                                                e.beginPath(),
                                                    t(e, this, i),
                                                    e.stroke(),
                                                    function(t, e, i, n) {
                                                        if (!(n <= 0))
                                                            for (var r, s, a = n / 2, o = n - 2, h = a - 1, l = new Array(6), u = 0, c = e.length; u < c; u++) {
                                                                var d = e[u]
                                                                    , p = d._selection;
                                                                d._transformCoordinates(i, l),
                                                                    r = l[0],
                                                                    s = l[1],
                                                                2 & p && f(2),
                                                                4 & p && f(4),
                                                                    t.fillRect(r - a, s - a, n, n),
                                                                0 < o && !(1 & p) && (p = t.fillStyle,
                                                                    t.fillStyle = "#ffffff",
                                                                    t.fillRect(r - h, s - h, o, o),
                                                                    t.fillStyle = p)
                                                            }
                                                        function f(e) {
                                                            var i = l[e];
                                                            e = l[e + 1];
                                                            r == i && s == e || (t.beginPath(),
                                                                t.moveTo(r, s),
                                                                t.lineTo(i, e),
                                                                t.stroke(),
                                                                t.beginPath(),
                                                                t.arc(i, e, a, 0, 2 * Math.PI, !0),
                                                                t.fill())
                                                        }
                                                    }(e, this._segments, i, Ut.settings.handleSize)
                                            }
                                        }
                                    }
                                    , new function() {
                                        function t(t) {
                                            if (!(t = t._segments).length)
                                                throw new Error("Use a moveTo() command first");
                                            return t[t.length - 1]
                                        }
                                        return {
                                            moveTo: function() {
                                                var t = this._segments;
                                                1 === t.length && this.removeSegment(0),
                                                t.length || this._add([new D(_.read(arguments))])
                                            },
                                            moveBy: function() {
                                                throw new Error("moveBy() is unsupported on Path items.")
                                            },
                                            lineTo: function() {
                                                this._add([new D(_.read(arguments))])
                                            },
                                            cubicCurveTo: function() {
                                                var e = arguments
                                                    , i = _.read(e)
                                                    , n = _.read(e)
                                                    , r = _.read(e);
                                                (e = t(this)).setHandleOut(i.subtract(e._point)),
                                                    this._add([new D(r,n.subtract(r))])
                                            },
                                            quadraticCurveTo: function() {
                                                var e = arguments
                                                    , i = _.read(e)
                                                    , n = _.read(e);
                                                e = t(this)._point;
                                                this.cubicCurveTo(i.add(e.subtract(i).multiply(1 / 3)), i.add(n.subtract(i).multiply(1 / 3)), n)
                                            },
                                            curveTo: function() {
                                                var e = arguments
                                                    , i = _.read(e)
                                                    , n = _.read(e)
                                                    , r = u.pick(u.read(e), .5)
                                                    , s = 1 - r;
                                                e = t(this)._point;
                                                if ((s = i.subtract(e.multiply(s * s)).subtract(n.multiply(r * r)).divide(2 * r * s)).isNaN())
                                                    throw new Error("Cannot put a curve through points with parameter = " + r);
                                                this.quadraticCurveTo(s, n)
                                            },
                                            arcTo: function() {
                                                var e, i = arguments, n = Math.abs, r = Math.sqrt, s = t(this), a = s._point, o = _.read(i), h = u.peek(i);
                                                if ("boolean" == typeof (f = u.pick(h, !0)))
                                                    var l = (v = a.add(o).divide(2)).add(v.subtract(a).rotate(f ? -90 : 90));
                                                else if (u.remain(i) <= 2)
                                                    l = o,
                                                        o = _.read(i);
                                                else if (!a.equals(o)) {
                                                    var c = x.read(i);
                                                    if ((d = g.isZero)(c.width) || d(c.height))
                                                        return this.lineTo(o);
                                                    var d, p = u.read(i), f = !!u.read(i), m = !!u.read(i), v = a.add(o).divide(2), y = (R = a.subtract(v).rotate(-p)).x, b = R.y, w = (A = n(c.width)) * A;
                                                    if (1 < (c = r((d = y * y) / w + (i = b * b) / (h = (T = n(c.height)) * T))) && (w = (A *= c) * A,
                                                        h = (T *= c) * T),
                                                    (c = n(c = (w * h - w * i - h * d) / (w * i + h * d)) < 1e-12 ? 0 : c) < 0)
                                                        throw new Error("Cannot create an arc with the given arguments");
                                                    S = new _(A * b / T,-T * y / A).multiply((m === f ? -1 : 1) * r(c)).rotate(p).add(v),
                                                        p = (P = (e = (new M).translate(S).rotate(p).scale(A, T))._inverseTransform(a)).getDirectedAngle(e._inverseTransform(o)),
                                                        !f && 0 < p ? p -= 360 : f && p < 0 && (p += 360)
                                                }
                                                if (l) {
                                                    var S, A = new C(a.add(l).divide(2),l.subtract(a).rotate(90),!0), T = new C(l.add(o).divide(2),o.subtract(l).rotate(90),!0);
                                                    l = (f = new C(a,o)).getSide(l);
                                                    if (!(S = A.intersect(T, !0))) {
                                                        if (!l)
                                                            return this.lineTo(o);
                                                        throw new Error("Cannot create an arc with the given arguments")
                                                    }
                                                    var P;
                                                    p = (P = a.subtract(S)).getDirectedAngle(o.subtract(S));
                                                    0 === (f = f.getSide(S, !0)) ? p = l * n(p) : l === f && (p += p < 0 ? 360 : -360)
                                                }
                                                if (p) {
                                                    for (var E = 360 <= (n = n(p)) ? 4 : Math.ceil((n - 1e-7) / 90), L = p / E, I = (p = L * Math.PI / 360,
                                                    4 / 3 * Math.sin(p) / (1 + Math.cos(p))), k = [], N = 0; N <= E; N++) {
                                                        var O, R = o, z = null;
                                                        N < E && (z = P.rotate(90).multiply(I),
                                                            e ? (R = e._transformPoint(P),
                                                                z = e._transformPoint(P.add(z)).subtract(R)) : R = S.add(P)),
                                                            N ? (O = P.rotate(-90).multiply(I),
                                                            e && (O = e._transformPoint(P.add(O)).subtract(R)),
                                                                k.push(new D(R,O,z))) : s.setHandleOut(z),
                                                            P = P.rotate(L)
                                                    }
                                                    this._add(k)
                                                }
                                            },
                                            lineBy: function() {
                                                var e = _.read(arguments)
                                                    , i = t(this)._point;
                                                this.lineTo(i.add(e))
                                            },
                                            curveBy: function() {
                                                var e = arguments
                                                    , i = _.read(e)
                                                    , n = _.read(e)
                                                    , r = u.read(e);
                                                e = t(this)._point;
                                                this.curveTo(e.add(i), e.add(n), r)
                                            },
                                            cubicCurveBy: function() {
                                                var e = arguments
                                                    , i = _.read(e)
                                                    , n = _.read(e)
                                                    , r = _.read(e);
                                                e = t(this)._point;
                                                this.cubicCurveTo(e.add(i), e.add(n), e.add(r))
                                            },
                                            quadraticCurveBy: function() {
                                                var e = arguments
                                                    , i = _.read(e)
                                                    , n = _.read(e);
                                                e = t(this)._point;
                                                this.quadraticCurveTo(e.add(i), e.add(n))
                                            },
                                            arcBy: function() {
                                                var e = arguments
                                                    , i = t(this)._point
                                                    , n = i.add(_.read(e))
                                                    , r = u.pick(u.peek(e), !0);
                                                "boolean" == typeof r ? this.arcTo(n, r) : this.arcTo(n, i.add(_.read(e)))
                                            },
                                            closePath: function(t) {
                                                this.setClosed(!0),
                                                    this.join(this, t)
                                            }
                                        }
                                    }
                                    , {
                                        _getBounds: function(t, e) {
                                            var i = e.handle ? "getHandleBounds" : e.stroke ? "getStrokeBounds" : "getBounds";
                                            return V[i](this._segments, this._closed, this, t, e)
                                        },
                                        statics: {
                                            getBounds: function(t, e, i, n, r, s) {
                                                var a = t[0];
                                                if (!a)
                                                    return new w;
                                                var o = new Array(6)
                                                    , h = a._transformCoordinates(n, new Array(6))
                                                    , l = h.slice(0, 2)
                                                    , u = l.slice()
                                                    , c = new Array(2);
                                                function d(t) {
                                                    t._transformCoordinates(n, o);
                                                    for (var e = 0; e < 2; e++)
                                                        z._addBounds(h[e], h[e + 4], o[e + 2], o[e], e, s ? s[e] : 0, l, u, c);
                                                    t = h,
                                                        h = o,
                                                        o = t
                                                }
                                                for (var p = 1, f = t.length; p < f; p++)
                                                    d(t[p]);
                                                return e && d(a),
                                                    new w(l[0],l[1],u[0] - l[0],u[1] - l[1])
                                            },
                                            getStrokeBounds: function(t, e, i, n, r) {
                                                var s = i.getStyle()
                                                    , a = s.hasStroke()
                                                    , o = s.getStrokeWidth()
                                                    , h = a && i._getStrokeMatrix(n, r)
                                                    , l = a && V._getStrokePadding(o, h)
                                                    , u = V.getBounds(t, e, i, n, r, l);
                                                if (!a)
                                                    return u;
                                                var c = o / 2
                                                    , d = s.getStrokeJoin()
                                                    , p = (o = s.getStrokeCap(),
                                                    s.getMiterLimit())
                                                    , f = new w(new x(l));
                                                function m(t) {
                                                    u = u.include(t)
                                                }
                                                function g(t) {
                                                    u = u.unite(f.setCenter(t._point.transform(n)))
                                                }
                                                function v(t, e) {
                                                    "round" === e || t.isSmooth() ? g(t) : V._addBevelJoin(t, e, c, p, n, h, m)
                                                }
                                                function _(t, e) {
                                                    "round" === e ? g(t) : V._addSquareCap(t, e, c, n, h, m)
                                                }
                                                var y = t.length - (e ? 0 : 1);
                                                if (0 < y) {
                                                    for (var b = 1; b < y; b++)
                                                        v(t[b], d);
                                                    e ? v(t[0], d) : (_(t[0], o),
                                                        _(t[t.length - 1], o))
                                                }
                                                return u
                                            },
                                            _getStrokePadding: function(t, e) {
                                                if (!e)
                                                    return [t, t];
                                                var i = new _(t,0).transform(e)
                                                    , n = new _(0,t).transform(e)
                                                    , r = i.getAngleInRadians()
                                                    , s = i.getLength();
                                                t = n.getLength(),
                                                    e = Math.sin(r),
                                                    i = Math.cos(r),
                                                    n = Math.tan(r),
                                                    r = Math.atan2(t * n, s),
                                                    n = Math.atan2(t, n * s);
                                                return [Math.abs(s * Math.cos(r) * i + t * Math.sin(r) * e), Math.abs(t * Math.sin(n) * i + s * Math.cos(n) * e)]
                                            },
                                            _addBevelJoin: function(t, e, i, n, r, s, a, o) {
                                                t = (h = t.getCurve()).getPrevious(),
                                                    r = h.getPoint1().transform(r),
                                                    t = t.getNormalAtTime(1).multiply(i).transform(s);
                                                var h = h.getNormalAtTime(0).multiply(i).transform(s);
                                                ((s = t.getDirectedAngle(h)) < 0 || 180 <= s) && (t = t.negate(),
                                                    h = h.negate()),
                                                o && a(r),
                                                    a(r.add(t)),
                                                "miter" !== e || (t = new C(r.add(t),new _(-t.y,t.x),!0).intersect(new C(r.add(h),new _(-h.y,h.x),!0), !0)) && r.getDistance(t) <= n * i && a(t),
                                                    a(r.add(h))
                                            },
                                            _addSquareCap: function(t, e, i, n, r, s, a) {
                                                n = t._point.transform(n),
                                                    r = (t = t.getLocation()).getNormal().multiply(0 === t.getTime() ? i : -i).transform(r),
                                                "square" === e && (a && (s(n.subtract(r)),
                                                    s(n.add(r))),
                                                    n = n.add(r.rotate(-90))),
                                                    s(n.add(r)),
                                                    s(n.subtract(r))
                                            },
                                            getHandleBounds: function(t, e, i, n, r) {
                                                var s, a, o, h = i.getStyle();
                                                r.stroke && h.hasStroke() && (o = i._getStrokeMatrix(n, r),
                                                    r = i = h.getStrokeWidth() / 2,
                                                "miter" === h.getStrokeJoin() && (r = i * h.getMiterLimit()),
                                                "square" === h.getStrokeCap() && (r = Math.max(r, i * Math.SQRT2)),
                                                    s = V._getStrokePadding(i, o),
                                                    a = V._getStrokePadding(r, o));
                                                for (var l = new Array(6), u = 1 / 0, c = -u, d = u, p = c, f = 0, m = t.length; f < m; f++) {
                                                    t[f]._transformCoordinates(n, l);
                                                    for (var g = 0; g < 6; g += 2) {
                                                        var v, _ = (v = g ? s : a) ? v[0] : 0, y = v ? v[1] : 0, x = l[g], b = l[g + 1];
                                                        (v = x - _) < u && (u = v),
                                                        c < (x = x + _) && (c = x),
                                                        (_ = b - y) < d && (d = _),
                                                        p < (y = b + y) && (p = y)
                                                    }
                                                }
                                                return new w(u,d,c - u,p - d)
                                            }
                                        }
                                    });
                                V.inject({
                                    statics: new function() {
                                        var t = .5522847498307936
                                            , e = [new D([-1, 0],[0, t],[0, -t]), new D([0, -1],[-t, 0],[t, 0]), new D([1, 0],[0, -t],[0, t]), new D([0, 1],[t, 0],[-t, 0])];
                                        function i(t, e, i) {
                                            var n = u.getNamed(i);
                                            return (i = new V(n && 0 == n.insert && T.NO_INSERT))._add(t),
                                                i._closed = e,
                                                i.set(n, {
                                                    insert: !0
                                                })
                                        }
                                        function n(t, n, r) {
                                            for (var s = new Array(4), a = 0; a < 4; a++) {
                                                var o = e[a];
                                                s[a] = new D(o._point.multiply(n).add(t),o._handleIn.multiply(n),o._handleOut.multiply(n))
                                            }
                                            return i(s, !0, r)
                                        }
                                        return {
                                            Line: function() {
                                                var t = arguments;
                                                return i([new D(_.readNamed(t, "from")), new D(_.readNamed(t, "to"))], !1, t)
                                            },
                                            Circle: function() {
                                                var t = arguments
                                                    , e = _.readNamed(t, "center")
                                                    , i = u.readNamed(t, "radius");
                                                return n(e, new x(i), t)
                                            },
                                            Rectangle: function() {
                                                var e, n, r = arguments, s = w.readNamed(r, "rectangle"), a = x.readNamed(r, "radius", 0, {
                                                    readNull: !0
                                                }), o = s.getBottomLeft(!0), h = s.getTopLeft(!0), l = s.getTopRight(!0), u = s.getBottomRight(!0);
                                                return i(!a || a.isZero() ? [new D(o), new D(h), new D(l), new D(u)] : (e = (a = x.min(a, s.getSize(!0).divide(2))).width,
                                                    n = a.height,
                                                    s = e * t,
                                                    a = n * t,
                                                    [new D(o.add(e, 0),null,[-s, 0]), new D(o.subtract(0, n),[0, a]), new D(h.add(0, n),null,[0, -a]), new D(h.add(e, 0),[-s, 0],null), new D(l.subtract(e, 0),null,[s, 0]), new D(l.add(0, n),[0, -a],null), new D(u.subtract(0, n),null,[0, a]), new D(u.subtract(e, 0),[s, 0])]), !0, r)
                                            },
                                            RoundRectangle: "#Rectangle",
                                            Ellipse: function() {
                                                var t = arguments
                                                    , e = L._readEllipse(t);
                                                return n(e.center, e.radius, t)
                                            },
                                            Oval: "#Ellipse",
                                            Arc: function() {
                                                var t = arguments
                                                    , e = _.readNamed(t, "from")
                                                    , i = _.readNamed(t, "through")
                                                    , n = _.readNamed(t, "to")
                                                    , r = u.getNamed(t);
                                                return (t = new V(r && 0 == r.insert && T.NO_INSERT)).moveTo(e),
                                                    t.arcTo(i, n),
                                                    t.set(r)
                                            },
                                            RegularPolygon: function() {
                                                for (var t = arguments, e = _.readNamed(t, "center"), n = u.readNamed(t, "sides"), r = u.readNamed(t, "radius"), s = 360 / n, a = n % 3 == 0, o = new _(0,a ? -r : r), h = a ? -1 : .5, l = new Array(n), c = 0; c < n; c++)
                                                    l[c] = new D(e.add(o.rotate((c + h) * s)));
                                                return i(l, !0, t)
                                            },
                                            Star: function() {
                                                for (var t = arguments, e = _.readNamed(t, "center"), n = 2 * u.readNamed(t, "points"), r = u.readNamed(t, "radius1"), s = u.readNamed(t, "radius2"), a = 360 / n, o = new _(0,-1), h = new Array(n), l = 0; l < n; l++)
                                                    h[l] = new D(e.add(o.rotate(a * l).multiply(l % 2 ? s : r)));
                                                return i(h, !0, t)
                                            }
                                        }
                                    }
                                });
                                var U = B.extend({
                                        _class: "CompoundPath",
                                        _serializeFields: {
                                            children: []
                                        },
                                        beans: !0,
                                        initialize: function(t) {
                                            this._children = [],
                                                this._namedChildren = {},
                                            this._initialize(t) || ("string" == typeof t ? this.setPathData(t) : this.addChildren(Array.isArray(t) ? t : arguments))
                                        },
                                        insertChildren: function t(e, i) {
                                            var n = i
                                                , r = n[0];
                                            r && "number" == typeof r[0] && (n = [n]);
                                            for (var s = i.length - 1; 0 <= s; s--) {
                                                var a = n[s];
                                                n !== i || a instanceof V || (n = u.slice(n)),
                                                    Array.isArray(a) ? n[s] = new V({
                                                        segments: a,
                                                        insert: !1
                                                    }) : a instanceof U && (n.splice.apply(n, [s, 1].concat(a.removeChildren())),
                                                        a.remove())
                                            }
                                            return t.base.call(this, e, n)
                                        },
                                        reduce: function t(e) {
                                            for (var i, n = this._children, r = n.length - 1; 0 <= r; r--)
                                                (i = n[r].reduce(e)).isEmpty() && i.remove();
                                            return n.length ? t.base.call(this) : ((i = new V(T.NO_INSERT)).copyAttributes(this),
                                                i.insertAbove(this),
                                                this.remove(),
                                                i)
                                        },
                                        isClosed: function() {
                                            for (var t = this._children, e = 0, i = t.length; e < i; e++)
                                                if (!t[e]._closed)
                                                    return !1;
                                            return !0
                                        },
                                        setClosed: function(t) {
                                            for (var e = this._children, i = 0, n = e.length; i < n; i++)
                                                e[i].setClosed(t)
                                        },
                                        getFirstSegment: function() {
                                            var t = this.getFirstChild();
                                            return t && t.getFirstSegment()
                                        },
                                        getLastSegment: function() {
                                            var t = this.getLastChild();
                                            return t && t.getLastSegment()
                                        },
                                        getCurves: function() {
                                            for (var t = this._children, e = [], i = 0, n = t.length; i < n; i++)
                                                u.push(e, t[i].getCurves());
                                            return e
                                        },
                                        getFirstCurve: function() {
                                            var t = this.getFirstChild();
                                            return t && t.getFirstCurve()
                                        },
                                        getLastCurve: function() {
                                            var t = this.getLastChild();
                                            return t && t.getLastCurve()
                                        },
                                        getArea: function() {
                                            for (var t = this._children, e = 0, i = 0, n = t.length; i < n; i++)
                                                e += t[i].getArea();
                                            return e
                                        },
                                        getLength: function() {
                                            for (var t = this._children, e = 0, i = 0, n = t.length; i < n; i++)
                                                e += t[i].getLength();
                                            return e
                                        },
                                        getPathData: function(t, e) {
                                            for (var i = this._children, n = [], r = 0, s = i.length; r < s; r++) {
                                                var a = i[r]
                                                    , o = a._matrix;
                                                n.push(a.getPathData(t && !o.isIdentity() ? t.appended(o) : t, e))
                                            }
                                            return n.join("")
                                        },
                                        _hitTestChildren: function t(e, i, n) {
                                            return t.base.call(this, e, i.class === V || "path" === i.type ? i : u.set({}, i, {
                                                fill: !1
                                            }), n)
                                        },
                                        _draw: function(t, e, i, n) {
                                            var r = this._children;
                                            if (r.length) {
                                                e = e.extend({
                                                    dontStart: !0,
                                                    dontFinish: !0
                                                }),
                                                    t.beginPath();
                                                for (var s = 0, a = r.length; s < a; s++)
                                                    r[s].draw(t, e, n);
                                                e.clip || (this._setStyles(t, e, i),
                                                (i = this._style).hasFill() && (t.fill(i.getFillRule()),
                                                    t.shadowColor = "rgba(0,0,0,0)"),
                                                i.hasStroke() && t.stroke())
                                            }
                                        },
                                        _drawSelected: function(t, e, i) {
                                            for (var n = this._children, r = 0, s = n.length; r < s; r++) {
                                                var a = n[r]
                                                    , o = a._matrix;
                                                i[a._id] || a._drawSelected(t, o.isIdentity() ? e : e.appended(o))
                                            }
                                        }
                                    }, new function() {
                                        function t(t, e) {
                                            if (t = t._children,
                                            e && !t.length)
                                                throw new Error("Use a moveTo() command first");
                                            return t[t.length - 1]
                                        }
                                        return u.each(["lineTo", "cubicCurveTo", "quadraticCurveTo", "curveTo", "arcTo", "lineBy", "cubicCurveBy", "quadraticCurveBy", "curveBy", "arcBy"], (function(e) {
                                                this[e] = function() {
                                                    var i = t(this, !0);
                                                    i[e].apply(i, arguments)
                                                }
                                            }
                                        ), {
                                            moveTo: function() {
                                                var e = t(this)
                                                    , i = e && e.isEmpty() ? e : new V(T.NO_INSERT);
                                                i !== e && this.addChild(i),
                                                    i.moveTo.apply(i, arguments)
                                            },
                                            moveBy: function() {
                                                var e = (i = t(this, !0)) && i.getLastSegment()
                                                    , i = _.read(arguments);
                                                this.moveTo(e ? i.add(e._point) : i)
                                            },
                                            closePath: function(e) {
                                                t(this, !0).closePath(e)
                                            }
                                        })
                                    }
                                    , u.each(["reverse", "flatten", "simplify", "smooth"], (function(t) {
                                            this[t] = function(e) {
                                                for (var i, n = this._children, r = 0, s = n.length; r < s; r++)
                                                    i = n[r][t](e) || i;
                                                return i
                                            }
                                        }
                                    ), {}));
                                B.inject(new function() {
                                        var t = Math.min
                                            , e = Math.max
                                            , i = Math.abs
                                            , n = {
                                            unite: {
                                                1: !0,
                                                2: !0
                                            },
                                            intersect: {
                                                2: !0
                                            },
                                            subtract: {
                                                1: !0
                                            },
                                            exclude: {
                                                1: !0,
                                                "-1": !0
                                            }
                                        };
                                        function r(t) {
                                            return t._children || [t]
                                        }
                                        function s(t, e) {
                                            var i = t.clone(!1).reduce({
                                                simplify: !0
                                            }).transform(null, !0, !0);
                                            if (e) {
                                                for (var n = r(i), s = 0, a = n.length; s < a; s++)
                                                    (t = n[s])._closed || t.isEmpty() || (t.closePath(1e-12),
                                                        t.getFirstSegment().setHandleIn(0, 0),
                                                        t.getLastSegment().setHandleOut(0, 0));
                                                i = i.resolveCrossings().reorient("nonzero" === i.getFillRule(), !0)
                                            }
                                            return i
                                        }
                                        function a(t, e, i, n, r) {
                                            var s = new U(T.NO_INSERT);
                                            return s.addChildren(t, !0),
                                                s = s.reduce({
                                                    simplify: e
                                                }),
                                            r && 0 == r.insert || s.insertAbove(n && i.isSibling(n) && i.getIndex() < n.getIndex() ? n : i),
                                                s.copyAttributes(i, !0),
                                                s
                                        }
                                        function h(t) {
                                            return t.hasOverlap() || t.isCrossing()
                                        }
                                        function l(t, e, i, o) {
                                            if (o && (0 == o.trace || o.stroke) && /^(subtract|intersect)$/.test(i))
                                                return c(t, e, i);
                                            var l = s(t, !0)
                                                , d = e && t !== e && s(e, !0)
                                                , p = n[i];
                                            p[i] = !0,
                                            d && (p.subtract || p.exclude) ^ d.isClockwise() ^ l.isClockwise() && d.reverse();
                                            var g, _ = v(F.expand(l.getIntersections(d, h))), b = r(l), w = (i = d && r(d),
                                                []), S = [];
                                            function M(t) {
                                                for (var e = 0, i = t.length; e < i; e++) {
                                                    var n = t[e];
                                                    u.push(w, n._segments),
                                                        u.push(S, n.getCurves()),
                                                        n._overlapsOnly = !0
                                                }
                                            }
                                            function C(t) {
                                                for (var e = [], i = 0, n = t && t.length; i < n; i++)
                                                    e.push(S[t[i]]);
                                                return e
                                            }
                                            if (_.length) {
                                                M(b),
                                                i && M(i);
                                                for (var A = new Array(S.length), T = 0, P = S.length; T < P; T++)
                                                    A[T] = S[T].getValues();
                                                var E = f.findCurveBoundsCollisions(A, A, 0, !0)
                                                    , L = {};
                                                for (T = 0; T < S.length; T++) {
                                                    var I = S[T]
                                                        , k = I._path._id;
                                                    (L[k] = L[k] || {})[I.getIndex()] = {
                                                        hor: C(E[T].hor),
                                                        ver: C(E[T].ver)
                                                    }
                                                }
                                                for (T = 0,
                                                         P = _.length; T < P; T++)
                                                    y(_[T]._segment, l, d, L, p);
                                                for (T = 0,
                                                         P = w.length; T < P; T++) {
                                                    var N = w[T]
                                                        , O = N._intersection;
                                                    N._winding || y(N, l, d, L, p),
                                                    O && O._overlap || (N._path._overlapsOnly = !1)
                                                }
                                                g = x(w, p)
                                            } else
                                                g = m(i ? b.concat(i) : b.slice(), (function(t) {
                                                        return !!p[t]
                                                    }
                                                ));
                                            return a(g, !0, t, e, o)
                                        }
                                        function c(t, e, i) {
                                            var n = s(t)
                                                , r = s(e)
                                                , o = n.getIntersections(r, h)
                                                , l = "subtract" === i
                                                , u = "divide" === i
                                                , c = {}
                                                , d = [];
                                            function p(t) {
                                                return !c[t._id] && (u || r.contains(t.getPointAt(t.getLength() / 2)) ^ l) && (d.unshift(t),
                                                    c[t._id] = !0)
                                            }
                                            for (var f = o.length - 1; 0 <= f; f--) {
                                                var m = o[f].split();
                                                m && (p(m) && m.getFirstSegment().setHandleIn(0, 0),
                                                    n.getLastSegment().setHandleOut(0, 0))
                                            }
                                            return p(n),
                                                a(d, !1, t, e)
                                        }
                                        function d(t, e) {
                                            for (var i = t; i; ) {
                                                if (i === e)
                                                    return;
                                                i = i._previous
                                            }
                                            for (; t._next && t._next !== e; )
                                                t = t._next;
                                            if (!t._next) {
                                                for (; e._previous; )
                                                    e = e._previous;
                                                (t._next = e)._previous = t
                                            }
                                        }
                                        function p(t) {
                                            for (var e = t.length - 1; 0 <= e; e--)
                                                t[e].clearHandles()
                                        }
                                        function m(t, e, n) {
                                            var r = t && t.length;
                                            if (r) {
                                                var s = u.each(t, (function(t, e) {
                                                        this[t._id] = {
                                                            container: null,
                                                            winding: t.isClockwise() ? 1 : -1,
                                                            index: e
                                                        }
                                                    }
                                                ), {})
                                                    , a = t.slice().sort((function(t, e) {
                                                        return i(e.getArea()) - i(t.getArea())
                                                    }
                                                ))
                                                    , o = a[0]
                                                    , h = f.findItemBoundsCollisions(a, null, g.GEOMETRIC_EPSILON);
                                                null == n && (n = o.isClockwise());
                                                for (var l = 0; l < r; l++) {
                                                    var c, d = a[l], p = s[d._id], m = 0, v = h[l];
                                                    if (v)
                                                        for (var _ = null, y = v.length - 1; 0 <= y; y--)
                                                            if (v[y] < l) {
                                                                _ = _ || d.getInteriorPoint();
                                                                var x = a[v[y]];
                                                                if (x.contains(_)) {
                                                                    var b = s[x._id];
                                                                    m = b.winding;
                                                                    p.winding += m,
                                                                        p.container = b.exclude ? b.container : x;
                                                                    break
                                                                }
                                                            }
                                                    e(p.winding) === e(m) ? (p.exclude = !0,
                                                        t[p.index] = null) : (c = p.container,
                                                        d.setClockwise(c ? !c.isClockwise() : n))
                                                }
                                            }
                                            return t
                                        }
                                        function v(t, e, i) {
                                            var n, r, s, a = e && [], o = !1, h = i || [], l = i && {};
                                            function u(t) {
                                                return t._path._id + "." + t._segment1._index
                                            }
                                            for (var c = (i && i.length) - 1; 0 <= c; c--)
                                                (f = i[c])._path && (l[u(f)] = !0);
                                            for (c = t.length - 1; 0 <= c; c--) {
                                                var f, m = (w = t[c])._time, g = m, v = e && !e(w);
                                                if ((f = w._curve) && (f !== r ? (o = !f.hasHandles() || l && l[u(f)],
                                                    n = [],
                                                    s = null,
                                                    r = f) : 1e-8 <= s && (m /= s)),
                                                    v)
                                                    n && n.push(w);
                                                else {
                                                    if (e && a.unshift(w),
                                                        s = g,
                                                    m < 1e-8)
                                                        _ = f._segment1;
                                                    else if (1 - 1e-8 < m)
                                                        _ = f._segment2;
                                                    else {
                                                        g = f.divideAtTime(m, !0),
                                                        o && h.push(f, g);
                                                        for (var _ = g._segment1, y = n.length - 1; 0 <= y; y--) {
                                                            var x = n[y];
                                                            x._time = (x._time - m) / (1 - m)
                                                        }
                                                    }
                                                    w._setSegment(_);
                                                    var b = _._intersection
                                                        , w = w._intersection;
                                                    if (b) {
                                                        d(b, w);
                                                        for (var S = b; S; )
                                                            d(S._intersection, b),
                                                                S = S._next
                                                    } else
                                                        _._intersection = w
                                                }
                                            }
                                            return i || p(h),
                                            a || t
                                        }
                                        function _(n, r, s, a, o) {
                                            var h, l = Array.isArray(r) ? r : r[s ? "hor" : "ver"], u = s ? 1 : 0, c = 1 ^ u, d = [n.x, n.y], p = d[u], f = d[c], m = 1e-6, g = p - 1e-9, v = p + 1e-9, y = 0, x = 0, b = 0, w = 0, S = !1, M = !1, C = 1, A = [];
                                            function T(i) {
                                                var h = i[c + 0]
                                                    , l = i[c + 2]
                                                    , d = i[c + 4]
                                                    , y = i[c + 6];
                                                if (f <= e(h, l, d, y) && f >= t(h, l, d, y)) {
                                                    h = i[u + 0],
                                                        l = i[u + 2],
                                                        d = i[u + 4],
                                                        y = i[u + 6];
                                                    for (var x, M = g > e(h, l, d, y) || v < t(h, l, d, y) ? [i] : z.getMonoCurves(i, s), T = 0, P = M.length; T < P; T++)
                                                        if (x = function(i) {
                                                            var h = i[c + 0]
                                                                , l = i[c + 6];
                                                            if (!(f < t(h, l) || f > e(h, l))) {
                                                                var d = i[u + 0]
                                                                    , y = i[u + 2]
                                                                    , x = i[u + 4]
                                                                    , M = i[u + 6];
                                                                if (h !== l) {
                                                                    var T = f === h ? 0 : f !== l && !(g > e(d, y, x, M) || v < t(d, y, x, M)) && 0 < z.solveCubic(i, c, f, A, 0, 1) ? A[0] : 1
                                                                        , P = 0 === T ? d : 1 === T ? M : z.getPoint(i, T)[s ? "y" : "x"];
                                                                    y = l < h ? 1 : -1,
                                                                        x = N[c] > N[c + 6] ? 1 : -1,
                                                                        l = N[u + 6];
                                                                    return f !== h ? (P < g ? b += y : v < P ? w += y : S = !0,
                                                                    p - m < P && P < p + m && (C /= 2)) : (y != x ? d < g ? b += y : v < d && (w += y) : d != l && (l < v && v < P ? (w += y,
                                                                        S = !0) : g < l && P < g && (b += y,
                                                                        S = !0)),
                                                                        C /= 4),
                                                                        N = i,
                                                                    !o && g < P && P < v && 0 === z.getTangent(i, T)[s ? "x" : "y"] && _(n, r, !s, a, !0)
                                                                }
                                                                (d < v && g < M || M < v && g < d) && (S = !0)
                                                            }
                                                        }(M[T]))
                                                            return x
                                                }
                                            }
                                            for (var P = 0, E = l.length; P < E; P++) {
                                                var L = l[P]
                                                    , I = L._path
                                                    , k = L.getValues();
                                                if (!(P && l[P - 1]._path === I || (N = null,
                                                I._closed || (h = z.getValues(I.getLastCurve().getSegment2(), L.getSegment1(), null, !a))[c] !== h[c + 6] && (N = h),
                                                    N)))
                                                    for (var N = k, O = I.getLastCurve(); O && O !== L; ) {
                                                        var D = O.getValues();
                                                        if (D[c] !== D[c + 6]) {
                                                            N = D;
                                                            break
                                                        }
                                                        O = O.getPrevious()
                                                    }
                                                if (k = T(k))
                                                    return k;
                                                if (P + 1 === E || l[P + 1]._path !== I) {
                                                    if (h && (k = T(h)))
                                                        return k;
                                                    y += b = !S || b || w ? b : w = I.isClockwise(a) ^ s ? 1 : -1,
                                                        x += w,
                                                        b = w = 0,
                                                        S = S && !(M = !0),
                                                        h = null
                                                }
                                            }
                                            return y = i(y),
                                                x = i(x),
                                                {
                                                    winding: e(y, x),
                                                    windingL: y,
                                                    windingR: x,
                                                    quality: C,
                                                    onPath: M
                                                }
                                        }
                                        function y(t, e, n, r, s) {
                                            var a = []
                                                , o = t
                                                , h = 0;
                                            do {} while ((v = t.getCurve()) && (d = v.getLength(),
                                                a.push({
                                                    segment: t,
                                                    curve: v,
                                                    length: d
                                                }),
                                                h += d),
                                            (t = t.getNext()) && !t._intersection && t !== o);
                                            for (var l = [.5, .25, .75], u = {
                                                winding: 0,
                                                quality: -1
                                            }, c = 0; c < l.length && u.quality < .5; c++)
                                                for (var d = h * l[c], p = 0, f = a.length; p < f; p++) {
                                                    var m = (S = a[p]).length;
                                                    if (d <= m) {
                                                        var v, y = (v = S.curve)._path, x = (M = y._parent)instanceof U ? M : y, b = g.clamp(v.getTimeAt(d), .001, .999), w = v.getPointAtTime(b), S = i(v.getTangentAtTime(b).y) < Math.SQRT1_2, M = null;
                                                        if (s.subtract && n && (b = (x === e ? n : e)._getWinding(w, S, !0),
                                                        x === e && b.winding || x === n && !b.winding)) {
                                                            if (b.quality < 1)
                                                                continue;
                                                            M = {
                                                                winding: 0,
                                                                quality: 1
                                                            }
                                                        }
                                                        (M = M || _(w, r[y._id][v.getIndex()], S, !0)).quality > u.quality && (u = M);
                                                        break
                                                    }
                                                    d -= m
                                                }
                                            for (p = a.length - 1; 0 <= p; p--)
                                                a[p].segment._winding = u
                                        }
                                        function x(t, e) {
                                            var i, n = [];
                                            function r(t) {
                                                return !(!t || t._visited || e && (!e[(t = t._winding || {}).winding] || e.unite && 2 === t.winding && t.windingL && t.windingR))
                                            }
                                            function s(t) {
                                                if (t)
                                                    for (var e = 0, n = i.length; e < n; e++)
                                                        if (t === i[e])
                                                            return !0;
                                                return !1
                                            }
                                            function a(t) {
                                                for (var e = t._segments, i = 0, n = e.length; i < n; i++)
                                                    e[i]._visited = !0
                                            }
                                            t.sort((function(t, e) {
                                                    var i = t._intersection
                                                        , n = e._intersection
                                                        , r = !(!i || !i._overlap)
                                                        , s = !(!n || !n._overlap)
                                                        , a = t._path
                                                        , o = e._path;
                                                    return r ^ s ? r ? 1 : -1 : !i ^ !n ? i ? 1 : -1 : a !== o ? a._id - o._id : t._index - e._index
                                                }
                                            ));
                                            for (var o = 0, h = t.length; o < h; o++) {
                                                var l, u, c, d, p, f = t[o], m = r(f), g = null, v = !1, _ = !0, y = [];
                                                for (m && f._path._overlapsOnly && (d = f._path,
                                                    p = f._intersection._segment._path,
                                                d.compare(p) && (d.getArea() && n.push(d.clone(!1)),
                                                    a(d),
                                                    a(p),
                                                    m = !1)); m; ) {
                                                    var x = !g
                                                        , b = function(t, e) {
                                                        var n = t._intersection
                                                            , a = n
                                                            , o = [];
                                                        function h(n, a) {
                                                            for (; n && n !== a; ) {
                                                                var h, l = n._segment, u = l && l._path;
                                                                u && (u = (h = l.getNext() || u.getFirstSegment())._intersection,
                                                                l !== t && (s(l) || s(h) || h && r(l) && (r(h) || u && r(u._segment))) && o.push(l),
                                                                e && i.push(l)),
                                                                    n = n._next
                                                            }
                                                        }
                                                        if (e && (i = [t]),
                                                            n) {
                                                            for (h(n); n && n._previous; )
                                                                n = n._previous;
                                                            h(n, a)
                                                        }
                                                        return o
                                                    }(f, x)
                                                        , w = b.shift()
                                                        , S = !(v = !x && (s(f) || s(w))) && w;
                                                    if (x && (g = new V(T.NO_INSERT),
                                                        l = null),
                                                        v) {
                                                        (f.isFirst() || f.isLast()) && (_ = f._path._closed),
                                                            f._visited = !0;
                                                        break
                                                    }
                                                    if (S && l && (y.push(l),
                                                        l = null),
                                                    l || (S && b.push(f),
                                                        l = {
                                                            start: g._segments.length,
                                                            crossings: b,
                                                            visited: u = [],
                                                            handleIn: c
                                                        }),
                                                        !r(f = S ? w : f)) {
                                                        g.removeSegments(l.start);
                                                        for (var M = 0, C = u.length; M < C; M++)
                                                            u[M]._visited = !1;
                                                        for (u.length = 0; (f = l && l.crossings.shift()) && f._path || (f = null,
                                                        (l = y.pop()) && (u = l.visited,
                                                            c = l.handleIn)),
                                                        l && !r(f); )
                                                            ;
                                                        if (!f)
                                                            break
                                                    }
                                                    w = f.getNext(),
                                                        g.add(new D(f._point,c,w && f._handleOut)),
                                                        f._visited = !0,
                                                        u.push(f),
                                                        f = w || f._path.getFirstSegment(),
                                                        c = w && w._handleIn
                                                }
                                                v && (_ && (g.getFirstSegment().setHandleIn(c),
                                                    g.setClosed(_)),
                                                0 !== g.getArea() && n.push(g))
                                            }
                                            return n
                                        }
                                        return {
                                            _getWinding: function(t, e, i) {
                                                return _(t, this.getCurves(), e, i)
                                            },
                                            unite: function(t, e) {
                                                return l(this, t, "unite", e)
                                            },
                                            intersect: function(t, e) {
                                                return l(this, t, "intersect", e)
                                            },
                                            subtract: function(t, e) {
                                                return l(this, t, "subtract", e)
                                            },
                                            exclude: function(t, e) {
                                                return l(this, t, "exclude", e)
                                            },
                                            divide: function(t, e) {
                                                return e && (0 == e.trace || e.stroke) ? c(this, t, "divide") : a([this.subtract(t, e), this.intersect(t, e)], !0, this, t, e)
                                            },
                                            resolveCrossings: function() {
                                                var t = this._children
                                                    , e = t || [this];
                                                function i(t, e) {
                                                    return (t = t && t._intersection) && t._overlap && t._path === e
                                                }
                                                var n, r = !1, s = !1, a = this.getIntersections(null, (function(t) {
                                                        return t.hasOverlap() ? r = !0 : t.isCrossing() && (s = !0)
                                                    }
                                                )), o = r && s && [];
                                                a = F.expand(a);
                                                if (r)
                                                    for (var h = v(a, (function(t) {
                                                            return t.hasOverlap()
                                                        }
                                                    ), o), l = h.length - 1; 0 <= l; l--) {
                                                        var c = (m = h[l])._path
                                                            , d = m._segment
                                                            , f = d.getPrevious()
                                                            , m = d.getNext();
                                                        i(f, c) && i(m, c) && (d.remove(),
                                                            f._handleOut._set(0, 0),
                                                            m._handleIn._set(0, 0),
                                                        f === d || f.getCurve().hasLength() || (m._handleIn.set(f._handleIn),
                                                            f.remove()))
                                                    }
                                                return s && (v(a, r && function(t) {
                                                    var e = t.getCurve()
                                                        , i = t.getSegment()
                                                        , n = (t = (n = t._intersection)._curve,
                                                        n._segment);
                                                    if (e && t && e._path && t._path)
                                                        return !0;
                                                    i && (i._intersection = null),
                                                    n && (n._intersection = null)
                                                }
                                                    , o),
                                                o && p(o),
                                                    e = x(u.each(e, (function(t) {
                                                            u.push(this, t._segments)
                                                        }
                                                    ), []))),
                                                    1 < (o = e.length) && t ? (e !== t && this.setChildren(e),
                                                        n = this) : 1 !== o || t || (e[0] !== this && this.setSegments(e[0].removeSegments()),
                                                        n = this),
                                                n || ((n = new U(T.NO_INSERT)).addChildren(e),
                                                    (n = n.reduce()).copyAttributes(this),
                                                    this.replaceWith(n)),
                                                    n
                                            },
                                            reorient: function(t, e) {
                                                var i = this._children;
                                                return i && i.length ? this.setChildren(m(this.removeChildren(), (function(e) {
                                                        return !!(t ? e : 1 & e)
                                                    }
                                                ), e)) : e !== o && this.setClockwise(e),
                                                    this
                                            },
                                            getInteriorPoint: function() {
                                                var i = this.getBounds().getCenter(!0);
                                                if (!this.contains(i)) {
                                                    for (var n = this.getCurves(), r = i.y, s = [], a = [], o = 0, h = n.length; o < h; o++) {
                                                        var l = n[o].getValues()
                                                            , u = l[1]
                                                            , c = l[3]
                                                            , d = l[5]
                                                            , p = l[7];
                                                        if (r >= t(u, c, d, p) && r <= e(u, c, d, p))
                                                            for (var f = z.getMonoCurves(l), m = 0, g = f.length; m < g; m++) {
                                                                var v = f[m]
                                                                    , _ = v[1]
                                                                    , y = v[7];
                                                                _ !== y && (_ <= r && r <= y || y <= r && r <= _) && (v = r === _ ? v[0] : r === y ? v[6] : 1 === z.solveCubic(v, 1, r, a, 0, 1) ? z.getPoint(v, a[0]).x : (v[0] + v[6]) / 2,
                                                                    s.push(v))
                                                            }
                                                    }
                                                    1 < s.length && (s.sort((function(t, e) {
                                                            return t - e
                                                        }
                                                    )),
                                                        i.x = (s[0] + s[1]) / 2)
                                                }
                                                return i
                                            }
                                        }
                                    }
                                );
                                var G = u.extend({
                                    _class: "PathFlattener",
                                    initialize: function(t, e, i, n, r) {
                                        var s, a = [], o = [], h = 0, l = 1 / (i || 32), u = t._segments, c = u[0];
                                        function d(t, i) {
                                            i = z.getValues(t, i, r),
                                                a.push(i),
                                                function t(i, r, s, a) {
                                                    var u, c;
                                                    !(l < a - s) || n && z.isStraight(i) || z.isFlatEnough(i, e || .25) ? (u = i[6] - i[0],
                                                        c = i[7] - i[1],
                                                    0 < (c = Math.sqrt(u * u + c * c)) && (h += c,
                                                        o.push({
                                                            offset: h,
                                                            curve: i,
                                                            index: r,
                                                            time: a
                                                        }))) : (c = z.subdivide(i, .5),
                                                        i = (s + a) / 2,
                                                        t(c[0], r, s, i),
                                                        t(c[1], r, i, a))
                                                }(i, t._index, 0, 1)
                                        }
                                        for (var p = 1, f = u.length; p < f; p++)
                                            d(c, s = u[p]),
                                                c = s;
                                        t._closed && d(s || c, u[0]),
                                            this.curves = a,
                                            this.parts = o,
                                            this.length = h,
                                            this.index = 0
                                    },
                                    _get: function(t) {
                                        for (var e, i = this.parts, n = i.length, r = this.index; (e = r) && !(i[--r].offset < t); )
                                            ;
                                        for (; e < n; e++) {
                                            var s = i[e];
                                            if (s.offset >= t) {
                                                var a = (o = i[(this.index = e) - 1]) && o.index === s.index ? o.time : 0
                                                    , o = o ? o.offset : 0;
                                                return {
                                                    index: s.index,
                                                    time: a + (s.time - a) * (t - o) / (s.offset - o)
                                                }
                                            }
                                        }
                                        return {
                                            index: i[n - 1].index,
                                            time: 1
                                        }
                                    },
                                    drawPart: function(t, e, i) {
                                        for (var n = this._get(e), r = this._get(i), s = n.index, a = r.index; s <= a; s++) {
                                            var o = z.getPart(this.curves[s], s === n.index ? n.time : 0, s === r.index ? r.time : 1);
                                            s === n.index && t.moveTo(o[0], o[1]),
                                                t.bezierCurveTo.apply(t, o.slice(2))
                                        }
                                    }
                                }, u.each(z._evaluateMethods, (function(t) {
                                        this[t + "At"] = function(e) {
                                            return e = this._get(e),
                                                z[t](this.curves[e.index], e.time)
                                        }
                                    }
                                ), {}))
                                    , W = u.extend({
                                    initialize: function(t) {
                                        for (var e, i = this.points = [], n = t._segments, r = (t = t._closed,
                                            0), s = n.length; r < s; r++) {
                                            var a = n[r].point;
                                            e && e.equals(a) || i.push(e = a.clone())
                                        }
                                        t && (i.unshift(i[i.length - 1]),
                                            i.push(i[1])),
                                            this.closed = t
                                    },
                                    fit: function(t) {
                                        var e = this.points
                                            , i = e.length
                                            , n = null;
                                        return 0 < i && (n = [new D(e[0])],
                                        1 < i && (this.fitCubic(n, t, 0, i - 1, e[1].subtract(e[0]), e[i - 2].subtract(e[i - 1])),
                                        this.closed && (n.shift(),
                                            n.pop()))),
                                            n
                                    },
                                    fitCubic: function(t, e, i, n, r, s) {
                                        var a = this.points;
                                        if (n - i != 1) {
                                            for (var o, h = this.chordLengthParameterize(i, n), l = Math.max(e, e * e), u = !0, c = 0; c <= 4; c++) {
                                                var d = this.generateBezier(i, n, h, r, s)
                                                    , p = this.findMaxError(i, n, d, h);
                                                if (p.error < e && u)
                                                    return void this.addCurve(t, d);
                                                if (o = p.index,
                                                p.error >= l)
                                                    break;
                                                u = this.reparameterize(i, n, h, d),
                                                    l = p.error
                                            }
                                            var f = a[o - 1].subtract(a[o + 1]);
                                            this.fitCubic(t, e, i, o, r, f),
                                                this.fitCubic(t, e, o, n, f.negate(), s)
                                        } else {
                                            var m = a[i];
                                            f = a[n],
                                                a = m.getDistance(f) / 3;
                                            this.addCurve(t, [m, m.add(r.normalize(a)), f.add(s.normalize(a)), f])
                                        }
                                    },
                                    addCurve: function(t, e) {
                                        t[t.length - 1].setHandleOut(e[1].subtract(e[0])),
                                            t.push(new D(e[3],e[2].subtract(e[3])))
                                    },
                                    generateBezier: function(t, e, i, n, r) {
                                        for (var s = Math.abs, a = this.points, o = a[t], h = a[e], l = [[0, 0], [0, 0]], u = [0, 0], c = 0, d = e - t + 1; c < d; c++) {
                                            var p = (g = 1 - (_ = i[c])) * g * g
                                                , f = (v = 3 * _ * g) * g
                                                , m = v * _
                                                , g = _ * _ * _
                                                , v = n.normalize(f)
                                                , _ = r.normalize(m);
                                            g = a[t + c].subtract(o.multiply(p + f)).subtract(h.multiply(m + g));
                                            l[0][0] += v.dot(v),
                                                l[0][1] += v.dot(_),
                                                l[1][0] = l[0][1],
                                                l[1][1] += _.dot(_),
                                                u[0] += v.dot(g),
                                                u[1] += _.dot(g)
                                        }
                                        var y, x;
                                        1e-12 < s(e = l[0][0] * l[1][1] - l[1][0] * l[0][1]) ? (x = l[0][0] * u[1] - l[1][0] * u[0],
                                            y = (u[0] * l[1][1] - u[1] * l[0][1]) / e,
                                            x /= e) : (e = l[0][0] + l[0][1],
                                            S = l[1][0] + l[1][1],
                                            y = x = 1e-12 < s(e) ? u[0] / e : 1e-12 < s(S) ? u[1] / S : 0);
                                        var b, w, S = 1e-12 * (s = h.getDistance(o));
                                        return y < S || x < S ? y = x = s / 3 : (S = h.subtract(o),
                                            b = n.normalize(y),
                                            w = r.normalize(x),
                                        b.dot(S) - w.dot(S) > s * s && (y = x = s / 3,
                                            b = w = null)),
                                            [o, o.add(b || n.normalize(y)), h.add(w || r.normalize(x)), h]
                                    },
                                    reparameterize: function(t, e, i, n) {
                                        for (var r = t; r <= e; r++)
                                            i[r - t] = this.findRoot(n, this.points[r], i[r - t]);
                                        r = 1;
                                        for (var s = i.length; r < s; r++)
                                            if (i[r] <= i[r - 1])
                                                return !1;
                                        return !0
                                    },
                                    findRoot: function(t, e, i) {
                                        for (var n = [], r = [], s = 0; s <= 2; s++)
                                            n[s] = t[s + 1].subtract(t[s]).multiply(3);
                                        for (s = 0; s <= 1; s++)
                                            r[s] = n[s + 1].subtract(n[s]).multiply(2);
                                        var a = this.evaluate(3, t, i)
                                            , o = this.evaluate(2, n, i)
                                            , h = this.evaluate(1, r, i);
                                        e = a.subtract(e),
                                            h = o.dot(o) + e.dot(h);
                                        return g.isMachineZero(h) ? i : i - e.dot(o) / h
                                    },
                                    evaluate: function(t, e, i) {
                                        for (var n = e.slice(), r = 1; r <= t; r++)
                                            for (var s = 0; s <= t - r; s++)
                                                n[s] = n[s].multiply(1 - i).add(n[s + 1].multiply(i));
                                        return n[0]
                                    },
                                    chordLengthParameterize: function(t, e) {
                                        for (var i = [0], n = t + 1; n <= e; n++)
                                            i[n - t] = i[n - t - 1] + this.points[n].getDistance(this.points[n - 1]);
                                        n = 1;
                                        for (var r = e - t; n <= r; n++)
                                            i[n] /= i[r];
                                        return i
                                    },
                                    findMaxError: function(t, e, i, n) {
                                        for (var r = Math.floor((e - t + 1) / 2), s = 0, a = t + 1; a < e; a++) {
                                            var o;
                                            s <= (o = (o = this.evaluate(3, i, n[a - t]).subtract(this.points[a])).x * o.x + o.y * o.y) && (s = o,
                                                r = a)
                                        }
                                        return {
                                            error: s,
                                            index: r
                                        }
                                    }
                                })
                                    , j = T.extend({
                                    _class: "TextItem",
                                    _applyMatrix: !1,
                                    _canApplyMatrix: !1,
                                    _serializeFields: {
                                        content: null
                                    },
                                    _boundsOptions: {
                                        stroke: !1,
                                        handle: !1
                                    },
                                    initialize: function(t) {
                                        this._content = "",
                                            this._lines = [];
                                        var e = t && u.isPlainObject(t) && t.x === o && t.y === o;
                                        this._initialize(e && t, !e && _.read(arguments))
                                    },
                                    _equals: function(t) {
                                        return this._content === t._content
                                    },
                                    copyContent: function(t) {
                                        this.setContent(t._content)
                                    },
                                    getContent: function() {
                                        return this._content
                                    },
                                    setContent: function(t) {
                                        this._content = "" + t,
                                            this._lines = this._content.split(/\r\n|\n|\r/gm),
                                            this._changed(521)
                                    },
                                    isEmpty: function() {
                                        return !this._content
                                    },
                                    getCharacterStyle: "#getStyle",
                                    setCharacterStyle: "#setStyle",
                                    getParagraphStyle: "#getStyle",
                                    setParagraphStyle: "#setStyle"
                                })
                                    , H = j.extend({
                                    _class: "PointText",
                                    initialize: function() {
                                        j.apply(this, arguments)
                                    },
                                    getPoint: function() {
                                        var t = this._matrix.getTranslation();
                                        return new y(t.x,t.y,this,"setPoint")
                                    },
                                    setPoint: function() {
                                        var t = _.read(arguments);
                                        this.translate(t.subtract(this._matrix.getTranslation()))
                                    },
                                    _draw: function(t, e, i) {
                                        if (this._content) {
                                            this._setStyles(t, e, i);
                                            var n = this._lines
                                                , r = (i = this._style).hasFill()
                                                , s = i.hasStroke()
                                                , a = i.getLeading()
                                                , o = t.shadowColor;
                                            t.font = i.getFontStyle(),
                                                t.textAlign = i.getJustification();
                                            for (var h = 0, l = n.length; h < l; h++) {
                                                t.shadowColor = o;
                                                var u = n[h];
                                                r && (t.fillText(u, 0, 0),
                                                    t.shadowColor = "rgba(0,0,0,0)"),
                                                s && t.strokeText(u, 0, 0),
                                                    t.translate(0, a)
                                            }
                                        }
                                    },
                                    _getBounds: function(t, e) {
                                        var i = this._style
                                            , n = (a = this._lines).length
                                            , r = i.getJustification()
                                            , s = i.getLeading()
                                            , a = (i = this.getView().getTextWidth(i.getFontStyle(), a),
                                            0);
                                        return "left" !== r && (a -= i / ("center" === r ? 2 : 1)),
                                            s = new w(a,n ? -.75 * s : 0,i,n * s),
                                            t ? t._transformBounds(s, s) : s
                                    }
                                })
                                    , q = u.extend(new function() {
                                        var t, e = {
                                            gray: ["gray"],
                                            rgb: ["red", "green", "blue"],
                                            hsb: ["hue", "saturation", "brightness"],
                                            hsl: ["hue", "saturation", "lightness"],
                                            gradient: ["gradient", "origin", "destination", "highlight"]
                                        }, i = {}, n = {
                                            transparent: [0, 0, 0, 0]
                                        }, r = [[0, 3, 1], [2, 0, 1], [1, 0, 3], [1, 2, 0], [3, 1, 0], [0, 1, 2]], s = {
                                            "rgb-hsb": function(t, e, i) {
                                                var n = Math.max(t, e, i)
                                                    , r = n - Math.min(t, e, i);
                                                return [0 == r ? 0 : 60 * (n == t ? (e - i) / r + (e < i ? 6 : 0) : n == e ? (i - t) / r + 2 : (t - e) / r + 4), 0 === n ? 0 : r / n, n]
                                            },
                                            "hsb-rgb": function(t, e, i) {
                                                t = (t / 60 % 6 + 6) % 6;
                                                var n = Math.floor(t);
                                                return [(t = [i, i * (1 - e), i * (1 - e * (t = t - n)), i * (1 - e * (1 - t))])[(n = r[n])[0]], t[n[1]], t[n[2]]]
                                            },
                                            "rgb-hsl": function(t, e, i) {
                                                var n = Math.max(t, e, i)
                                                    , r = Math.min(t, e, i)
                                                    , s = n - r
                                                    , a = 0 == s
                                                    , o = (n + r) / 2;
                                                return [a ? 0 : 60 * (n == t ? (e - i) / s + (e < i ? 6 : 0) : n == e ? (i - t) / s + 2 : (t - e) / s + 4), a ? 0 : o < .5 ? s / (n + r) : s / (2 - n - r), o]
                                            },
                                            "hsl-rgb": function(t, e, i) {
                                                if (0 === e)
                                                    return [i, i, i];
                                                for (var n = [(t = (t / 360 % 1 + 1) % 1) + 1 / 3, t, t - 1 / 3], r = i < .5 ? i * (1 + e) : i + e - i * e, s = 2 * i - r, a = [], o = 0; o < 3; o++) {
                                                    var h = n[o];
                                                    h < 0 && (h += 1),
                                                    1 < h && --h,
                                                        a[o] = 6 * h < 1 ? s + 6 * (r - s) * h : 2 * h < 1 ? r : 3 * h < 2 ? s + (r - s) * (2 / 3 - h) * 6 : s
                                                }
                                                return a
                                            },
                                            "rgb-gray": function(t, e, i) {
                                                return [.2989 * t + .587 * e + .114 * i]
                                            },
                                            "gray-rgb": function(t) {
                                                return [t, t, t]
                                            },
                                            "gray-hsb": function(t) {
                                                return [0, 0, t]
                                            },
                                            "gray-hsl": function(t) {
                                                return [0, 0, t]
                                            },
                                            "gradient-rgb": function() {
                                                return []
                                            },
                                            "rgb-gradient": function() {
                                                return []
                                            }
                                        };
                                        return u.each(e, (function(t, n) {
                                                i[n] = [],
                                                    u.each(t, (function(t, r) {
                                                            var s = u.capitalize(t)
                                                                , a = /^(hue|saturation)$/.test(t)
                                                                , o = i[n][r] = "gradient" === n ? "gradient" === t ? function(t) {
                                                                    var e = this._components[0];
                                                                    return e !== (t = X.read(Array.isArray(t) ? t : arguments, 0, {
                                                                        readNull: !0
                                                                    })) && (e && e._removeOwner(this),
                                                                    t && t._addOwner(this)),
                                                                        t
                                                                }
                                                                : function() {
                                                                    return _.read(arguments, 0, {
                                                                        readNull: "highlight" === t,
                                                                        clone: !0
                                                                    })
                                                                }
                                                                : function(t) {
                                                                    return null == t || isNaN(t) ? 0 : +t
                                                                }
                                                            ;
                                                            this["get" + s] = function() {
                                                                return (this._type === n || a && /^hs[bl]$/.test(this._type) ? this._components : this._convert(n))[r]
                                                            }
                                                                ,
                                                                this["set" + s] = function(t) {
                                                                    this._type === n || a && /^hs[bl]$/.test(this._type) || (this._components = this._convert(n),
                                                                        this._properties = e[n],
                                                                        this._type = n),
                                                                        this._components[r] = o.call(this, t),
                                                                        this._changed()
                                                                }
                                                        }
                                                    ), this)
                                            }
                                        ), {
                                            _class: "Color",
                                            _readIndex: !0,
                                            initialize: function r(s) {
                                                var a, o, l = arguments, c = this.__read, d = 0, p = null != (s = Array.isArray(s) ? (l = s)[0] : s) && typeof s;
                                                if ("string" === p && s in e && (f = s,
                                                    s = l[1],
                                                    Array.isArray(s) ? (a = s,
                                                        g = l[2]) : (c && (d = 1),
                                                        l = u.slice(l, 1),
                                                        p = typeof s)),
                                                    !a) {
                                                    if (o = "number" === p ? l : "object" === p && null != s.length ? s : null) {
                                                        var f = f || (3 <= o.length ? "rgb" : "gray")
                                                            , m = e[f].length
                                                            , g = o[m];
                                                        c && (d += o === arguments ? m + (null != g ? 1 : 0) : 1),
                                                        o.length > m && (o = u.slice(o, 0, m))
                                                    } else if ("string" === p)
                                                        m = function(e) {
                                                            var i = e.match(/^#([\da-f]{2})([\da-f]{2})([\da-f]{2})([\da-f]{2})?$/i) || e.match(/^#([\da-f])([\da-f])([\da-f])([\da-f])?$/i)
                                                                , r = "rgb";
                                                            if (i)
                                                                for (var s = i[4] ? 4 : 3, a = new Array(s), o = 0; o < s; o++) {
                                                                    var l = i[o + 1];
                                                                    a[o] = parseInt(1 == l.length ? l + l : l, 16) / 255
                                                                }
                                                            else if (i = e.match(/^(rgb|hsl)a?\((.*)\)$/)) {
                                                                r = i[1],
                                                                    a = i[2].trim().split(/[,\s]+/g);
                                                                for (var u = "hsl" === r, c = (o = 0,
                                                                    Math.min(a.length, 4)); o < c; o++) {
                                                                    var d, p = a[o];
                                                                    l = parseFloat(p);
                                                                    u ? 0 === o ? (d = p.match(/([a-z]*)$/)[1],
                                                                        l *= {
                                                                            turn: 360,
                                                                            rad: 180 / Math.PI,
                                                                            grad: .9
                                                                        }[d] || 1) : o < 3 && (l /= 100) : o < 3 && (l /= /%$/.test(p) ? 100 : 255),
                                                                        a[o] = l
                                                                }
                                                            } else {
                                                                var f, m = n[e];
                                                                a = (m = m || (h ? (t || ((t = mt.getContext(1, 1)).globalCompositeOperation = "copy"),
                                                                    t.fillStyle = "rgba(0,0,0,0)",
                                                                    t.fillStyle = e,
                                                                    t.fillRect(0, 0, 1, 1),
                                                                    f = t.getImageData(0, 0, 1, 1).data,
                                                                    n[e] = [f[0] / 255, f[1] / 255, f[2] / 255]) : [0, 0, 0])).slice()
                                                            }
                                                            return [r, a]
                                                        }(s),
                                                            f = m[0],
                                                        4 === (a = m[1]).length && (g = a[3],
                                                            a.length--);
                                                    else if ("object" === p)
                                                        if (s.constructor === r) {
                                                            if (f = s._type,
                                                                a = s._components.slice(),
                                                                g = s._alpha,
                                                            "gradient" === f)
                                                                for (var v = 1, _ = a.length; v < _; v++) {
                                                                    var y = a[v];
                                                                    y && (a[v] = y.clone())
                                                                }
                                                        } else if (s.constructor === X)
                                                            f = "gradient",
                                                                o = l;
                                                        else {
                                                            var x = e[f = "hue"in s ? "lightness"in s ? "hsl" : "hsb" : "gradient"in s || "stops"in s || "radial"in s ? "gradient" : "gray"in s ? "gray" : "rgb"]
                                                                , b = i[f];
                                                            for (this._components = a = [],
                                                                     v = 0,
                                                                     _ = x.length; v < _; v++)
                                                                null == (w = s[x[v]]) && !v && "gradient" === f && "stops"in s && (w = {
                                                                    stops: s.stops,
                                                                    radial: s.radial
                                                                }),
                                                                null != (w = b[v].call(this, w)) && (a[v] = w);
                                                            g = s.alpha
                                                        }
                                                    c && f && (d = 1)
                                                }
                                                if (this._type = f || "rgb",
                                                    !a) {
                                                    this._components = a = [];
                                                    var w;
                                                    for (v = 0,
                                                             _ = (b = i[this._type]).length; v < _; v++)
                                                        null != (w = b[v].call(this, o && o[v])) && (a[v] = w)
                                                }
                                                return this._components = a,
                                                    this._properties = e[this._type],
                                                    this._alpha = g,
                                                c && (this.__read = d),
                                                    this
                                            },
                                            set: "#initialize",
                                            _serialize: function(t, e) {
                                                var i = this.getComponents();
                                                return u.serialize(/^(gray|rgb)$/.test(this._type) ? i : [this._type].concat(i), t, !0, e)
                                            },
                                            _changed: function() {
                                                this._canvasStyle = null,
                                                this._owner && (this._setter ? this._owner[this._setter](this) : this._owner._changed(129))
                                            },
                                            _convert: function(t) {
                                                var e;
                                                return this._type === t ? this._components.slice() : (e = s[this._type + "-" + t]) ? e.apply(this, this._components) : s["rgb-" + t].apply(this, s[this._type + "-rgb"].apply(this, this._components))
                                            },
                                            convert: function(t) {
                                                return new q(t,this._convert(t),this._alpha)
                                            },
                                            getType: function() {
                                                return this._type
                                            },
                                            setType: function(t) {
                                                this._components = this._convert(t),
                                                    this._properties = e[t],
                                                    this._type = t
                                            },
                                            getComponents: function() {
                                                var t = this._components.slice();
                                                return null != this._alpha && t.push(this._alpha),
                                                    t
                                            },
                                            getAlpha: function() {
                                                return null != this._alpha ? this._alpha : 1
                                            },
                                            setAlpha: function(t) {
                                                this._alpha = null == t ? null : Math.min(Math.max(t, 0), 1),
                                                    this._changed()
                                            },
                                            hasAlpha: function() {
                                                return null != this._alpha
                                            },
                                            equals: function(t) {
                                                var e = u.isPlainValue(t, !0) ? q.read(arguments) : t;
                                                return e === this || e && this._class === e._class && this._type === e._type && this.getAlpha() === e.getAlpha() && u.equals(this._components, e._components) || !1
                                            },
                                            toString: function() {
                                                for (var t = this._properties, e = [], i = "gradient" === this._type, n = m.instance, r = 0, s = t.length; r < s; r++) {
                                                    var a = this._components[r];
                                                    null != a && e.push(t[r] + ": " + (i ? a : n.number(a)))
                                                }
                                                return null != this._alpha && e.push("alpha: " + n.number(this._alpha)),
                                                "{ " + e.join(", ") + " }"
                                            },
                                            toCSS: function(t) {
                                                var e = this._convert("rgb")
                                                    , i = t || null == this._alpha ? 1 : this._alpha;
                                                function n(t) {
                                                    return Math.round(255 * (t < 0 ? 0 : 1 < t ? 1 : t))
                                                }
                                                return e = [n(e[0]), n(e[1]), n(e[2])],
                                                i < 1 && e.push(i < 0 ? 0 : i),
                                                    t ? "#" + ((1 << 24) + (e[0] << 16) + (e[1] << 8) + e[2]).toString(16).slice(1) : (4 == e.length ? "rgba(" : "rgb(") + e.join(",") + ")"
                                            },
                                            toCanvasStyle: function(t, e) {
                                                if (this._canvasStyle)
                                                    return this._canvasStyle;
                                                if ("gradient" !== this._type)
                                                    return this._canvasStyle = this.toCSS();
                                                var i, n = (o = this._components)[0], r = n._stops, s = o[1], a = o[2], o = o[3];
                                                (e = e && e.inverted()) && (s = e._transformPoint(s),
                                                    a = e._transformPoint(a),
                                                    o = o && e._transformPoint(o)),
                                                    i = n._radial ? (e = a.getDistance(s),
                                                    !o || (n = o.subtract(s)).getLength() > e && (o = s.add(n.normalize(e - .1))),
                                                        t.createRadialGradient((o = o || s).x, o.y, 0, s.x, s.y, e)) : t.createLinearGradient(s.x, s.y, a.x, a.y);
                                                for (var h = 0, l = r.length; h < l; h++) {
                                                    var u = r[h]
                                                        , c = u._offset;
                                                    i.addColorStop(null == c ? h / (l - 1) : c, u._color.toCanvasStyle())
                                                }
                                                return this._canvasStyle = i
                                            },
                                            transform: function(t) {
                                                if ("gradient" === this._type) {
                                                    for (var e = this._components, i = 1, n = e.length; i < n; i++) {
                                                        var r = e[i];
                                                        t._transformPoint(r, r, !0)
                                                    }
                                                    this._changed()
                                                }
                                            },
                                            statics: {
                                                _types: e,
                                                random: function() {
                                                    var t = Math.random;
                                                    return new q(t(),t(),t())
                                                },
                                                _setOwner: function(t, e, i) {
                                                    return t && !(t = t._owner && e && t._owner !== e ? t.clone() : t)._owner ^ !e && (t._owner = e || null,
                                                        t._setter = i || null),
                                                        t
                                                }
                                            }
                                        })
                                    }
                                    , new function() {
                                        return u.each({
                                            add: function(t, e) {
                                                return t + e
                                            },
                                            subtract: function(t, e) {
                                                return t - e
                                            },
                                            multiply: function(t, e) {
                                                return t * e
                                            },
                                            divide: function(t, e) {
                                                return t / e
                                            }
                                        }, (function(t, e) {
                                                this[e] = function(e) {
                                                    e = q.read(arguments);
                                                    for (var i = this._type, n = this._components, r = e._convert(i), s = 0, a = n.length; s < a; s++)
                                                        r[s] = t(n[s], r[s]);
                                                    return new q(i,r,null != this._alpha ? t(this._alpha, e.getAlpha()) : null)
                                                }
                                            }
                                        ), {})
                                    }
                                )
                                    , X = u.extend({
                                    _class: "Gradient",
                                    initialize: function(t, e) {
                                        this._id = v.get(),
                                        t && u.isPlainObject(t) && (this.set(t),
                                            t = e = null),
                                        null == this._stops && this.setStops(t || ["white", "black"]),
                                        null == this._radial && this.setRadial("string" == typeof e && "radial" === e || e || !1)
                                    },
                                    _serialize: function(t, e) {
                                        return e.add(this, (function() {
                                                return u.serialize([this._stops, this._radial], t, !0, e)
                                            }
                                        ))
                                    },
                                    _changed: function() {
                                        for (var t = 0, e = this._owners && this._owners.length; t < e; t++)
                                            this._owners[t]._changed()
                                    },
                                    _addOwner: function(t) {
                                        this._owners || (this._owners = []),
                                            this._owners.push(t)
                                    },
                                    _removeOwner: function(t) {
                                        -1 != (t = this._owners ? this._owners.indexOf(t) : -1) && (this._owners.splice(t, 1),
                                        this._owners.length || (this._owners = o))
                                    },
                                    clone: function() {
                                        for (var t = [], e = 0, i = this._stops.length; e < i; e++)
                                            t[e] = this._stops[e].clone();
                                        return new X(t,this._radial)
                                    },
                                    getStops: function() {
                                        return this._stops
                                    },
                                    setStops: function(t) {
                                        if (t.length < 2)
                                            throw new Error("Gradient stop list needs to contain at least two stops.");
                                        var e = this._stops;
                                        if (e)
                                            for (var i = 0, n = e.length; i < n; i++)
                                                e[i]._owner = o;
                                        for (i = 0,
                                                 n = (e = this._stops = Z.readList(t, 0, {
                                                     clone: !0
                                                 })).length; i < n; i++)
                                            e[i]._owner = this;
                                        this._changed()
                                    },
                                    getRadial: function() {
                                        return this._radial
                                    },
                                    setRadial: function(t) {
                                        this._radial = t,
                                            this._changed()
                                    },
                                    equals: function(t) {
                                        if (t === this)
                                            return !0;
                                        if (t && this._class === t._class) {
                                            var e = this._stops
                                                , i = t._stops
                                                , n = e.length;
                                            if (n === i.length) {
                                                for (var r = 0; r < n; r++)
                                                    if (!e[r].equals(i[r]))
                                                        return !1;
                                                return !0
                                            }
                                        }
                                        return !1
                                    }
                                })
                                    , Z = u.extend({
                                    _class: "GradientStop",
                                    initialize: function(t, e) {
                                        var i = t
                                            , n = e;
                                        "object" == typeof t && e === o && (Array.isArray(t) && "number" != typeof t[0] ? (i = t[0],
                                            n = t[1]) : ("color"in t || "offset"in t || "rampPoint"in t) && (i = t.color,
                                            n = t.offset || t.rampPoint || 0)),
                                            this.setColor(i),
                                            this.setOffset(n)
                                    },
                                    clone: function() {
                                        return new Z(this._color.clone(),this._offset)
                                    },
                                    _serialize: function(t, e) {
                                        var i = this._color
                                            , n = this._offset;
                                        return u.serialize(null == n ? [i] : [i, n], t, !0, e)
                                    },
                                    _changed: function() {
                                        this._owner && this._owner._changed(129)
                                    },
                                    getOffset: function() {
                                        return this._offset
                                    },
                                    setOffset: function(t) {
                                        this._offset = t,
                                            this._changed()
                                    },
                                    getRampPoint: "#getOffset",
                                    setRampPoint: "#setOffset",
                                    getColor: function() {
                                        return this._color
                                    },
                                    setColor: function() {
                                        q._setOwner(this._color, null),
                                            this._color = q._setOwner(q.read(arguments, 0), this, "setColor"),
                                            this._changed()
                                    },
                                    equals: function(t) {
                                        return t === this || t && this._class === t._class && this._color.equals(t._color) && this._offset == t._offset || !1
                                    }
                                })
                                    , J = u.extend(new function() {
                                        var t = {
                                            fillColor: null,
                                            fillRule: "nonzero",
                                            strokeColor: null,
                                            strokeWidth: 1,
                                            strokeCap: "butt",
                                            strokeJoin: "miter",
                                            strokeScaling: !0,
                                            miterLimit: 10,
                                            dashOffset: 0,
                                            dashArray: [],
                                            shadowColor: null,
                                            shadowBlur: 0,
                                            shadowOffset: new _,
                                            selectedColor: null
                                        }
                                            , e = u.set({}, t, {
                                            fontFamily: "sans-serif",
                                            fontWeight: "normal",
                                            fontSize: 12,
                                            leading: null,
                                            justification: "left"
                                        })
                                            , i = u.set({}, e, {
                                            fillColor: new q
                                        })
                                            , n = {
                                            strokeWidth: 193,
                                            strokeCap: 193,
                                            strokeJoin: 193,
                                            strokeScaling: 201,
                                            miterLimit: 193,
                                            fontFamily: 9,
                                            fontWeight: 9,
                                            fontSize: 9,
                                            font: 9,
                                            leading: 9,
                                            justification: 9
                                        }
                                            , r = {
                                            beans: !0
                                        }
                                            , s = {
                                            _class: "Style",
                                            beans: !0,
                                            initialize: function(n, r, s) {
                                                this._values = {},
                                                    this._owner = r,
                                                    this._project = r && r._project || s || Ut.project,
                                                    this._defaults = !r || r instanceof P ? e : r instanceof j ? i : t,
                                                n && this.set(n)
                                            }
                                        };
                                        return u.each(e, (function(t, e) {
                                                var i = /Color$/.test(e)
                                                    , a = "shadowOffset" === e
                                                    , h = u.capitalize(e)
                                                    , l = n[e]
                                                    , c = "set" + h
                                                    , d = "get" + h;
                                                s[c] = function(t) {
                                                    var n, r = this._owner, s = r && r._children, a = s && 0 < s.length && !(r instanceof U);
                                                    if (a)
                                                        for (var o = 0, h = s.length; o < h; o++)
                                                            s[o]._style[c](t);
                                                    "selectedColor" !== e && a || !(e in this._defaults) || (n = this._values[e]) !== t && (i && (n && (q._setOwner(n, null),
                                                        n._canvasStyle = null),
                                                    t && t.constructor === q && (t = q._setOwner(t, r, a && c))),
                                                        this._values[e] = t,
                                                    r && r._changed(l || 129))
                                                }
                                                    ,
                                                    s[d] = function(t) {
                                                        var n, r = this._owner, s = r && r._children, h = s && 0 < s.length && !(r instanceof U);
                                                        if (h && !t)
                                                            for (var l = 0, p = s.length; l < p; l++) {
                                                                var f = s[l]._style[d]();
                                                                if (l) {
                                                                    if (!u.equals(n, f))
                                                                        return o
                                                                } else
                                                                    n = f
                                                            }
                                                        else
                                                            e in this._defaults && ((n = this._values[e]) === o ? (n = this._defaults[e]) && n.clone && (n = n.clone()) : !(t = i ? q : a ? _ : null) || n && n.constructor === t || (this._values[e] = n = t.read([n], 0, {
                                                                readNull: !0,
                                                                clone: !0
                                                            })));
                                                        return n && i ? q._setOwner(n, r, h && c) : n
                                                    }
                                                    ,
                                                    r[d] = function(t) {
                                                        return this._style[d](t)
                                                    }
                                                    ,
                                                    r[c] = function(t) {
                                                        this._style[c](t)
                                                    }
                                            }
                                        )),
                                            u.each({
                                                Font: "FontFamily",
                                                WindingRule: "FillRule"
                                            }, (function(t, e) {
                                                    var i = "get" + e;
                                                    e = "set" + e;
                                                    s[i] = r[i] = "#get" + t,
                                                        s[e] = r[e] = "#set" + t
                                                }
                                            )),
                                            T.inject(r),
                                            s
                                    }
                                    , {
                                        set: function(t) {
                                            var e, i = t instanceof J, n = i ? t._values : t;
                                            if (n)
                                                for (var r in n)
                                                    r in this._defaults && (e = n[r],
                                                        this[r] = e && i && e.clone ? e.clone() : e)
                                        },
                                        equals: function(t) {
                                            function e(t, e, i) {
                                                var n, r = t._values, s = e._values, a = e._defaults;
                                                for (n in r) {
                                                    var h = r[n]
                                                        , l = s[n];
                                                    if (!(i && n in s || u.equals(h, l === o ? a[n] : l)))
                                                        return !1
                                                }
                                                return !0
                                            }
                                            return t === this || t && this._class === t._class && e(this, t) && e(t, this, !0) || !1
                                        },
                                        _dispose: function() {
                                            var t = this.getFillColor();
                                            t && (t._canvasStyle = null),
                                            (t = this.getStrokeColor()) && (t._canvasStyle = null),
                                            (t = this.getShadowColor()) && (t._canvasStyle = null)
                                        },
                                        hasFill: function() {
                                            var t = this.getFillColor();
                                            return !!t && 0 < t.alpha
                                        },
                                        hasStroke: function() {
                                            var t = this.getStrokeColor();
                                            return !!t && 0 < t.alpha && 0 < this.getStrokeWidth()
                                        },
                                        hasShadow: function() {
                                            var t = this.getShadowColor();
                                            return !!t && 0 < t.alpha && (0 < this.getShadowBlur() || !this.getShadowOffset().isZero())
                                        },
                                        getView: function() {
                                            return this._project._view
                                        },
                                        getFontStyle: function() {
                                            var t = this.getFontSize();
                                            return this.getFontWeight() + " " + t + (/[a-z]/i.test(t + "") ? " " : "px ") + this.getFontFamily()
                                        },
                                        getFont: "#getFontFamily",
                                        setFont: "#setFontFamily",
                                        getLeading: function t() {
                                            var e = t.base.call(this)
                                                , i = this.getFontSize();
                                            return /pt|em|%|px/.test(i) && (i = this.getView().getPixelSize(i)),
                                                null != e ? e : 1.2 * i
                                        }
                                    })
                                    , Y = new function() {
                                    function t(t, e, i, n) {
                                        for (var r = ["", "webkit", "moz", "Moz", "ms", "o"], s = e[0].toUpperCase() + e.substring(1), a = 0; a < 6; a++) {
                                            var o;
                                            if ((o = (o = r[a]) ? o + s : e)in t) {
                                                if (!i)
                                                    return t[o];
                                                t[o] = n;
                                                break
                                            }
                                        }
                                    }
                                    return {
                                        getStyles: function(t) {
                                            var e;
                                            return (e = (e = t && 9 !== t.nodeType ? t.ownerDocument : t) && e.defaultView) && e.getComputedStyle(t, "")
                                        },
                                        getBounds: function(t, e) {
                                            var i, n = t.ownerDocument, r = n.body, s = n.documentElement;
                                            try {
                                                i = t.getBoundingClientRect()
                                            } catch (t) {
                                                i = {
                                                    left: 0,
                                                    top: 0,
                                                    width: 0,
                                                    height: 0
                                                }
                                            }
                                            var a = i.left - (s.clientLeft || r.clientLeft || 0);
                                            t = i.top - (s.clientTop || r.clientTop || 0);
                                            return e || (a += (n = n.defaultView).pageXOffset || s.scrollLeft || r.scrollLeft,
                                                t += n.pageYOffset || s.scrollTop || r.scrollTop),
                                                new w(a,t,i.width,i.height)
                                        },
                                        getViewportBounds: function(t) {
                                            t = (e = t.ownerDocument).defaultView;
                                            var e = e.documentElement;
                                            return new w(0,0,t.innerWidth || e.clientWidth,t.innerHeight || e.clientHeight)
                                        },
                                        getOffset: function(t, e) {
                                            return Y.getBounds(t, e).getPoint()
                                        },
                                        getSize: function(t) {
                                            return Y.getBounds(t, !0).getSize()
                                        },
                                        isInvisible: function(t) {
                                            return Y.getSize(t).equals(new x(0,0))
                                        },
                                        isInView: function(t) {
                                            return !Y.isInvisible(t) && Y.getViewportBounds(t).intersects(Y.getBounds(t, !0))
                                        },
                                        isInserted: function(t) {
                                            return l.body.contains(t)
                                        },
                                        getPrefixed: function(e, i) {
                                            return e && t(e, i)
                                        },
                                        setPrefixed: function(e, i, n) {
                                            if ("object" == typeof i)
                                                for (var r in i)
                                                    t(e, r, !0, i[r]);
                                            else
                                                t(e, i, !0, n)
                                        }
                                    }
                                }
                                    , Q = {
                                    add: function(t, e) {
                                        if (t)
                                            for (var i in e)
                                                for (var n = e[i], r = i.split(/[\s,]+/g), s = 0, a = r.length; s < a; s++) {
                                                    var o = r[s];
                                                    t.addEventListener(o, n, t === l && ("touchstart" === o || "touchmove" === o) && {
                                                        passive: !1
                                                    })
                                                }
                                    },
                                    remove: function(t, e) {
                                        if (t)
                                            for (var i in e)
                                                for (var n = e[i], r = i.split(/[\s,]+/g), s = 0, a = r.length; s < a; s++)
                                                    t.removeEventListener(r[s], n, !1)
                                    },
                                    getPoint: function(t) {
                                        return t = t.targetTouches ? (t.targetTouches.length ? t.targetTouches : t.changedTouches)[0] : t,
                                            new _(t.pageX || t.clientX + l.documentElement.scrollLeft,t.pageY || t.clientY + l.documentElement.scrollTop)
                                    },
                                    getTarget: function(t) {
                                        return t.target || t.srcElement
                                    },
                                    getRelatedTarget: function(t) {
                                        return t.relatedTarget || t.toElement
                                    },
                                    getOffset: function(t, e) {
                                        return Q.getPoint(t).subtract(Y.getOffset(e || Q.getTarget(t)))
                                    }
                                };
                                Q.requestAnimationFrame = new function() {
                                    var t, e = Y.getPrefixed(h, "requestAnimationFrame"), i = !1, n = [];
                                    function r() {
                                        var t = n;
                                        n = [];
                                        for (var s = 0, a = t.length; s < a; s++)
                                            t[s]();
                                        (i = e && n.length) && e(r)
                                    }
                                    return function(s) {
                                        n.push(s),
                                            e ? i || (e(r),
                                                i = !0) : t = t || setInterval(r, 1e3 / 60)
                                    }
                                }
                                ;
                                var K, $, tt, et, it, nt, rt, st = u.extend(c, {
                                        _class: "View",
                                        initialize: function t(e, i) {
                                            function n(t) {
                                                return i[t] || parseInt(i.getAttribute(t), 10)
                                            }
                                            function r() {
                                                var t = Y.getSize(i);
                                                return t.isNaN() || t.isZero() ? new x(n("width"),n("height")) : t
                                            }
                                            var s, a, o, u, c;
                                            h && i ? (this._id = i.getAttribute("id"),
                                            null == this._id && i.setAttribute("id", this._id = "paper-view-" + t._id++),
                                                Q.add(i, this._viewEvents),
                                                Y.setPrefixed(i.style, {
                                                    userDrag: c = "none",
                                                    userSelect: c,
                                                    touchCallout: c,
                                                    contentZooming: c,
                                                    tapHighlightColor: "rgba(0,0,0,0)"
                                                }),
                                            d.hasAttribute(i, "resize") && Q.add(h, (a = this)._windowEvents = {
                                                resize: function() {
                                                    a.setViewSize(r())
                                                }
                                            }),
                                                s = r(),
                                            d.hasAttribute(i, "stats") && "undefined" != typeof Stats && (this._stats = new Stats,
                                                u = (o = this._stats.domElement).style,
                                                c = Y.getOffset(i),
                                                u.position = "absolute",
                                                u.left = c.x + "px",
                                                u.top = c.y + "px",
                                                l.body.appendChild(o))) : (s = new x(i),
                                                i = null),
                                                this._project = e,
                                                this._scope = e._scope,
                                                this._element = i,
                                            this._pixelRatio || (this._pixelRatio = h && h.devicePixelRatio || 1),
                                                this._setElementSize(s.width, s.height),
                                                this._viewSize = s,
                                                t._views.push(this),
                                                ((t._viewsById[this._id] = this)._matrix = new M)._owner = this,
                                            t._focused || (t._focused = this),
                                                this._frameItems = {},
                                                this._frameItemCount = 0,
                                                this._itemEvents = {
                                                    native: {},
                                                    virtual: {}
                                                },
                                                this._autoUpdate = !Ut.agent.node,
                                                this._needsUpdate = !1
                                        },
                                        remove: function() {
                                            if (!this._project)
                                                return !1;
                                            st._focused === this && (st._focused = null),
                                                st._views.splice(st._views.indexOf(this), 1),
                                                delete st._viewsById[this._id];
                                            var t = this._project;
                                            return t._view === this && (t._view = null),
                                                Q.remove(this._element, this._viewEvents),
                                                Q.remove(h, this._windowEvents),
                                                this._element = this._project = null,
                                                this.off("frame"),
                                                this._animate = !1,
                                                this._frameItems = {},
                                                !0
                                        },
                                        _events: u.each(T._itemHandlers.concat(["onResize", "onKeyDown", "onKeyUp"]), (function(t) {
                                                this[t] = {}
                                            }
                                        ), {
                                            onFrame: {
                                                install: function() {
                                                    this.play()
                                                },
                                                uninstall: function() {
                                                    this.pause()
                                                }
                                            }
                                        }),
                                        _animate: !1,
                                        _time: 0,
                                        _count: 0,
                                        getAutoUpdate: function() {
                                            return this._autoUpdate
                                        },
                                        setAutoUpdate: function(t) {
                                            (this._autoUpdate = t) && this.requestUpdate()
                                        },
                                        update: function() {},
                                        draw: function() {
                                            this.update()
                                        },
                                        requestUpdate: function() {
                                            var t;
                                            this._requested || (t = this,
                                                Q.requestAnimationFrame((function() {
                                                        var e;
                                                        t._requested = !1,
                                                        t._animate && (t.requestUpdate(),
                                                            e = t._element,
                                                        Y.getPrefixed(l, "hidden") && "true" !== d.getAttribute(e, "keepalive") || !Y.isInView(e) || t._handleFrame()),
                                                        t._autoUpdate && t.update()
                                                    }
                                                )),
                                                this._requested = !0)
                                        },
                                        play: function() {
                                            this._animate = !0,
                                                this.requestUpdate()
                                        },
                                        pause: function() {
                                            this._animate = !1
                                        },
                                        _handleFrame: function() {
                                            Ut = this._scope;
                                            var t = Date.now() / 1e3
                                                , e = this._last ? t - this._last : 0;
                                            this._last = t,
                                                this.emit("frame", new u({
                                                    delta: e,
                                                    time: this._time += e,
                                                    count: this._count++
                                                })),
                                            this._stats && this._stats.update()
                                        },
                                        _animateItem: function(t, e) {
                                            var i = this._frameItems;
                                            e ? (i[t._id] = {
                                                item: t,
                                                time: 0,
                                                count: 0
                                            },
                                            1 == ++this._frameItemCount && this.on("frame", this._handleFrameItems)) : (delete i[t._id],
                                            0 == --this._frameItemCount && this.off("frame", this._handleFrameItems))
                                        },
                                        _handleFrameItems: function(t) {
                                            for (var e in this._frameItems)
                                                (e = this._frameItems[e]).item.emit("frame", new u(t,{
                                                    time: e.time += t.delta,
                                                    count: e.count++
                                                }))
                                        },
                                        _changed: function() {
                                            this._project._changed(4097),
                                                this._bounds = this._decomposed = o
                                        },
                                        getElement: function() {
                                            return this._element
                                        },
                                        getPixelRatio: function() {
                                            return this._pixelRatio
                                        },
                                        getResolution: function() {
                                            return 72 * this._pixelRatio
                                        },
                                        getViewSize: function() {
                                            var t = this._viewSize;
                                            return new b(t.width,t.height,this,"setViewSize")
                                        },
                                        setViewSize: function() {
                                            var t = x.read(arguments)
                                                , e = t.subtract(this._viewSize);
                                            e.isZero() || (this._setElementSize(t.width, t.height),
                                                this._viewSize.set(t),
                                                this._changed(),
                                                this.emit("resize", {
                                                    size: t,
                                                    delta: e
                                                }),
                                            this._autoUpdate && this.update())
                                        },
                                        _setElementSize: function(t, e) {
                                            var i = this._element;
                                            i && (i.width !== t && (i.width = t),
                                            i.height !== e && (i.height = e))
                                        },
                                        getBounds: function() {
                                            return this._bounds || (this._bounds = this._matrix.inverted()._transformBounds(new w(new _,this._viewSize))),
                                                this._bounds
                                        },
                                        getSize: function() {
                                            return this.getBounds().getSize()
                                        },
                                        isVisible: function() {
                                            return Y.isInView(this._element)
                                        },
                                        isInserted: function() {
                                            return Y.isInserted(this._element)
                                        },
                                        getPixelSize: function(t) {
                                            var e, i, n = this._element;
                                            return n ? (i = n.parentNode,
                                                (n = l.createElement("div")).style.fontSize = t,
                                                i.appendChild(n),
                                                e = parseFloat(Y.getStyles(n).fontSize),
                                                i.removeChild(n)) : e = parseFloat(e),
                                                e
                                        },
                                        getTextWidth: function(t, e) {
                                            return 0
                                        }
                                    }, u.each(["rotate", "scale", "shear", "skew"], (function(t) {
                                            var e = "rotate" === t;
                                            this[t] = function() {
                                                var i = arguments
                                                    , n = (e ? u : _).read(i);
                                                i = _.read(i, 0, {
                                                    readNull: !0
                                                });
                                                return this.transform((new M)[t](n, i || this.getCenter(!0)))
                                            }
                                        }
                                    ), {
                                        _decompose: function() {
                                            return this._decomposed || (this._decomposed = this._matrix.decompose())
                                        },
                                        translate: function() {
                                            var t = new M;
                                            return this.transform(t.translate.apply(t, arguments))
                                        },
                                        getCenter: function() {
                                            return this.getBounds().getCenter()
                                        },
                                        setCenter: function() {
                                            var t = _.read(arguments);
                                            this.translate(this.getCenter().subtract(t))
                                        },
                                        getZoom: function() {
                                            var t = this._decompose().scaling;
                                            return (t.x + t.y) / 2
                                        },
                                        setZoom: function(t) {
                                            this.transform((new M).scale(t / this.getZoom(), this.getCenter()))
                                        },
                                        getRotation: function() {
                                            return this._decompose().rotation
                                        },
                                        setRotation: function(t) {
                                            var e = this.getRotation();
                                            null != e && null != t && this.rotate(t - e)
                                        },
                                        getScaling: function() {
                                            var t = this._decompose().scaling;
                                            return new y(t.x,t.y,this,"setScaling")
                                        },
                                        setScaling: function() {
                                            var t = this.getScaling()
                                                , e = _.read(arguments, 0, {
                                                clone: !0,
                                                readNull: !0
                                            });
                                            t && e && this.scale(e.x / t.x, e.y / t.y)
                                        },
                                        getMatrix: function() {
                                            return this._matrix
                                        },
                                        setMatrix: function() {
                                            var t = this._matrix;
                                            t.set.apply(t, arguments)
                                        },
                                        transform: function(t) {
                                            this._matrix.append(t)
                                        },
                                        scrollBy: function() {
                                            this.translate(_.read(arguments).negate())
                                        }
                                    }), {
                                        projectToView: function() {
                                            return this._matrix._transformPoint(_.read(arguments))
                                        },
                                        viewToProject: function() {
                                            return this._matrix._inverseTransform(_.read(arguments))
                                        },
                                        getEventPoint: function(t) {
                                            return this.viewToProject(Q.getOffset(t, this._element))
                                        }
                                    }, {
                                        statics: {
                                            _views: [],
                                            _viewsById: {},
                                            _id: 0,
                                            create: function(t, e) {
                                                return l && "string" == typeof e && (e = l.getElementById(e)),
                                                    new (h ? at : st)(t,e)
                                            }
                                        }
                                    }, new function() {
                                        if (h) {
                                            var t, e, i, n, r, s = !1, a = !1;
                                            (u = h.navigator).pointerEnabled || u.msPointerEnabled ? (i = "pointerdown MSPointerDown",
                                                n = "pointermove MSPointerMove",
                                                r = "pointerup pointercancel MSPointerUp MSPointerCancel") : (i = "touchstart",
                                                n = "touchmove",
                                                r = "touchend touchcancel",
                                            "ontouchstart"in h && u.userAgent.match(/mobile|tablet|ip(ad|hone|od)|android|silk/i) || (i += " mousedown",
                                                n += " mousemove",
                                                r += " mouseup"));
                                            var o = {}
                                                , u = {
                                                mouseout: function(t) {
                                                    var e, i, n, r = st._focused, s = Q.getRelatedTarget(t);
                                                    !r || s && "HTML" !== s.nodeName || (i = (e = Q.getOffset(t, r._element)).x,
                                                        s = (n = Math.abs)(i),
                                                        e.x = n(n = s - (1 << 25)) < s ? n * (i < 0 ? -1 : 1) : i,
                                                        A(r, t, r.viewToProject(e)))
                                                },
                                                scroll: C
                                            };
                                            o[i] = function(t) {
                                                var e = st._focused = M(t);
                                                s || (s = !0,
                                                    e._handleMouseEvent("mousedown", t))
                                            }
                                                ,
                                                u[n] = function(i) {
                                                    var n, r = st._focused;
                                                    a || ((n = M(i)) ? r !== n && (r && A(r, i),
                                                        t = t || r,
                                                        r = st._focused = e = n) : e && e === r && (t && !t.isInserted() && (t = null),
                                                        r = st._focused = t,
                                                        t = null,
                                                        C())),
                                                    r && A(r, i)
                                                }
                                                ,
                                                u[i] = function() {
                                                    a = !0
                                                }
                                                ,
                                                u[r] = function(t) {
                                                    var e = st._focused;
                                                    e && s && e._handleMouseEvent("mouseup", t),
                                                        a = s = !1
                                                }
                                                ,
                                                Q.add(l, u),
                                                Q.add(h, {
                                                    load: C
                                                });
                                            var c, d, p, f, m, g, v, _, y = !1, x = !1, b = {
                                                doubleclick: "click",
                                                mousedrag: "mousemove"
                                            }, w = !1, S = {
                                                mousedown: {
                                                    mousedown: 1,
                                                    mousedrag: 1,
                                                    click: 1,
                                                    doubleclick: 1
                                                },
                                                mouseup: {
                                                    mouseup: 1,
                                                    mousedrag: 1,
                                                    click: 1,
                                                    doubleclick: 1
                                                },
                                                mousemove: {
                                                    mousedrag: 1,
                                                    mousemove: 1,
                                                    mouseenter: 1,
                                                    mouseleave: 1
                                                }
                                            };
                                            return {
                                                _viewEvents: o,
                                                _handleMouseEvent: function(t, e, i) {
                                                    var n = this._itemEvents
                                                        , r = n.native[t]
                                                        , a = "mousemove" === t
                                                        , o = this._scope.tool
                                                        , h = this;
                                                    function l(t) {
                                                        return n.virtual[t] || h.responds(t) || o && o.responds(t)
                                                    }
                                                    a && s && l("mousedrag") && (t = "mousedrag"),
                                                        i = i || this.getEventPoint(e);
                                                    var u, b = this.getBounds().contains(i), S = (u = r && b && h._project.hitTest(i, {
                                                        tolerance: 0,
                                                        fill: !0,
                                                        stroke: !0
                                                    })) && u.item || null, M = !1;
                                                    if ((u = {})[t.substr(5)] = !0,
                                                    r && S !== f && (f && T(f, null, "mouseleave", e, i),
                                                    S && T(S, null, "mouseenter", e, i),
                                                        f = S),
                                                    w ^ b && (T(this, null, b ? "mouseenter" : "mouseleave", e, i),
                                                        M = !0),
                                                    !b && !u.drag || i.equals(d) || (P(this, S, a ? t : "mousemove", e, i, d),
                                                        M = !0),
                                                        w = b,
                                                    u.down && b || u.up && c) {
                                                        if (P(this, S, t, e, i, c),
                                                            u.down) {
                                                            if (_ = S === g && Date.now() - v < 300,
                                                                p = g = S,
                                                            !x && S) {
                                                                for (var C = S; C && !C.responds("mousedrag"); )
                                                                    C = C._parent;
                                                                C && (m = S)
                                                            }
                                                            c = i
                                                        } else
                                                            u.up && (x || S !== p || (v = Date.now(),
                                                                P(this, S, _ ? "doubleclick" : "click", e, i, c),
                                                                _ = !1),
                                                                p = m = null);
                                                        M = !(w = !1)
                                                    }
                                                    d = i,
                                                    M && o && (y = o._handleMouseEvent(t, e, i, u) || y),
                                                    !1 !== e.cancelable && (y && !u.move || u.down && l("mouseup")) && e.preventDefault()
                                                },
                                                _handleKeyEvent: function(t, e, i, n) {
                                                    var r, s = this._scope, a = s.tool;
                                                    function o(a) {
                                                        a.responds(t) && (Ut = s,
                                                            a.emit(t, r = r || new ht(t,e,i,n)))
                                                    }
                                                    this.isVisible() && (o(this),
                                                    a && a.responds(t) && o(a))
                                                },
                                                _countItemEvent: function(t, e) {
                                                    var i, n = (r = this._itemEvents).native, r = r.virtual;
                                                    for (i in S)
                                                        n[i] = (n[i] || 0) + (S[i][t] || 0) * e;
                                                    r[t] = (r[t] || 0) + e
                                                },
                                                statics: {
                                                    updateFocus: C,
                                                    _resetState: function() {
                                                        s = a = y = w = !1,
                                                            t = e = c = d = p = f = m = g = v = _ = null
                                                    }
                                                }
                                            }
                                        }
                                        function M(t) {
                                            return (t = Q.getTarget(t)).getAttribute && st._viewsById[t.getAttribute("id")]
                                        }
                                        function C() {
                                            var t = st._focused;
                                            if (!t || !t.isVisible())
                                                for (var i = 0, n = st._views.length; i < n; i++)
                                                    if ((t = st._views[i]).isVisible()) {
                                                        st._focused = e = t;
                                                        break
                                                    }
                                        }
                                        function A(t, e, i) {
                                            t._handleMouseEvent("mousemove", e, i)
                                        }
                                        function T(t, e, i, n, r, s, a) {
                                            for (var o, h = !1; t && t !== a && !function t(i, a) {
                                                if (i.responds(a)) {
                                                    if (o = o || new ut(a,n,r,e || i,s ? r.subtract(s) : null),
                                                    i.emit(a, o) && (y = !0,
                                                    o.prevented && (x = !0),
                                                        o.stopped))
                                                        return h = !0
                                                } else if (a = b[a])
                                                    return t(i, a)
                                            }(t, i); )
                                                t = t._parent;
                                            return h
                                        }
                                        function P(t, e, i, n, r, s) {
                                            return t._project.removeOn(i),
                                                x = y = !1,
                                            m && T(m, null, i, n, r, s) || e && e !== m && !e.isDescendant(m) && T(e, null, "mousedrag" === i ? "mousemove" : i, n, r, s, m) || T(t, m || e || t, i, n, r, s)
                                        }
                                    }
                                ), at = st.extend({
                                    _class: "CanvasView",
                                    initialize: function(t, e) {
                                        if (!(e instanceof h.HTMLCanvasElement)) {
                                            var i = x.read(arguments, 1);
                                            if (i.isZero())
                                                throw new Error("Cannot create CanvasView with the provided argument: " + u.slice(arguments, 1));
                                            e = mt.getCanvas(i)
                                        }
                                        var n = this._context = e.getContext("2d");
                                        n.save(),
                                            this._pixelRatio = 1,
                                        /^off|false$/.test(d.getAttribute(e, "hidpi")) || (i = h.devicePixelRatio || 1,
                                            n = Y.getPrefixed(n, "backingStorePixelRatio") || 1,
                                            this._pixelRatio = i / n),
                                            st.call(this, t, e),
                                            this._needsUpdate = !0
                                    },
                                    remove: function t() {
                                        return this._context.restore(),
                                            t.base.call(this)
                                    },
                                    _setElementSize: function t(e, i) {
                                        var n, r, s = this._pixelRatio;
                                        t.base.call(this, e * s, i * s),
                                        1 !== s && (r = this._element,
                                            n = this._context,
                                        d.hasAttribute(r, "resize") || ((r = r.style).width = e + "px",
                                            r.height = i + "px"),
                                            n.restore(),
                                            n.save(),
                                            n.scale(s, s))
                                    },
                                    getContext: function() {
                                        return this._context
                                    },
                                    getPixelSize: function t(e) {
                                        var i, n, r = Ut.agent;
                                        return r && r.firefox ? i = t.base.call(this, e) : (r = (n = this._context).font,
                                            n.font = e + " serif",
                                            i = parseFloat(n.font),
                                            n.font = r),
                                            i
                                    },
                                    getTextWidth: function(t, e) {
                                        var i = this._context
                                            , n = i.font
                                            , r = 0;
                                        i.font = t;
                                        for (var s = 0, a = e.length; s < a; s++)
                                            r = Math.max(r, i.measureText(e[s]).width);
                                        return i.font = n,
                                            r
                                    },
                                    update: function() {
                                        if (!this._needsUpdate)
                                            return !1;
                                        var t = this._project
                                            , e = this._context
                                            , i = this._viewSize;
                                        return e.clearRect(0, 0, i.width + 1, i.height + 1),
                                        t && t.draw(e, this._matrix, this._pixelRatio),
                                            !(this._needsUpdate = !1)
                                    }
                                }), ot = u.extend({
                                    _class: "Event",
                                    initialize: function(t) {
                                        this.event = t,
                                            this.type = t && t.type
                                    },
                                    prevented: !1,
                                    stopped: !1,
                                    preventDefault: function() {
                                        this.prevented = !0,
                                            this.event.preventDefault()
                                    },
                                    stopPropagation: function() {
                                        this.stopped = !0,
                                            this.event.stopPropagation()
                                    },
                                    stop: function() {
                                        this.stopPropagation(),
                                            this.preventDefault()
                                    },
                                    getTimeStamp: function() {
                                        return this.event.timeStamp
                                    },
                                    getModifiers: function() {
                                        return lt.modifiers
                                    }
                                }), ht = ot.extend({
                                    _class: "KeyEvent",
                                    initialize: function(t, e, i, n) {
                                        this.type = t,
                                            this.event = e,
                                            this.key = i,
                                            this.character = n
                                    },
                                    toString: function() {
                                        return "{ type: '" + this.type + "', key: '" + this.key + "', character: '" + this.character + "', modifiers: " + this.getModifiers() + " }"
                                    }
                                }), lt = new function() {
                                    var t, e, i = {
                                        "\t": "tab",
                                        " ": "space",
                                        "\b": "backspace",
                                        "": "delete",
                                        Spacebar: "space",
                                        Del: "delete",
                                        Win: "meta",
                                        Esc: "escape"
                                    }, n = {
                                        tab: "\t",
                                        space: " ",
                                        enter: "\r"
                                    }, r = {}, s = {}, a = new u({
                                        shift: !1,
                                        control: !1,
                                        alt: !1,
                                        meta: !1,
                                        capsLock: !1,
                                        space: !1
                                    }).inject({
                                        option: {
                                            get: function() {
                                                return this.alt
                                            }
                                        },
                                        command: {
                                            get: function() {
                                                var t = Ut && Ut.agent;
                                                return t && t.mac ? this.meta : this.control
                                            }
                                        }
                                    });
                                    function c(t) {
                                        var e = t.key || t.keyIdentifier;
                                        e = /^U\+/.test(e) ? String.fromCharCode(parseInt(e.substr(2), 16)) : /^Arrow[A-Z]/.test(e) ? e.substr(5) : "Unidentified" === e || e === o ? String.fromCharCode(t.keyCode) : e;
                                        return i[e] || (1 < e.length ? u.hyphenate(e) : e.toLowerCase())
                                    }
                                    function d(e, i, n, o) {
                                        var h, l = st._focused;
                                        if ((r[i] = e) ? s[i] = n : delete s[i],
                                        1 < i.length && (h = u.camelize(i))in a) {
                                            a[h] = e;
                                            var c = Ut && Ut.agent;
                                            if ("meta" === h && c && c.mac)
                                                if (e)
                                                    t = {};
                                                else {
                                                    for (var p in t)
                                                        p in s && d(!1, p, t[p], o);
                                                    t = null
                                                }
                                        } else
                                            e && t && (t[i] = n);
                                        l && l._handleKeyEvent(e ? "keydown" : "keyup", o, i, n)
                                    }
                                    return Q.add(l, {
                                        keydown: function(t) {
                                            var i = c(t)
                                                , r = Ut && Ut.agent;
                                            1 < i.length || r && r.chrome && (t.altKey || r.mac && t.metaKey || !r.mac && t.ctrlKey) ? d(!0, i, n[i] || (1 < i.length ? "" : i), t) : e = i
                                        },
                                        keypress: function(t) {
                                            var i, n;
                                            e && (i = c(t),
                                                n = 32 <= (n = t.charCode) ? String.fromCharCode(n) : 1 < i.length ? "" : i,
                                                d(!0, i = i !== e ? n.toLowerCase() : i, n, t),
                                                e = null)
                                        },
                                        keyup: function(t) {
                                            var e = c(t);
                                            e in s && d(!1, e, s[e], t)
                                        }
                                    }),
                                        Q.add(h, {
                                            blur: function(t) {
                                                for (var e in s)
                                                    d(!1, e, s[e], t)
                                            }
                                        }),
                                        {
                                            modifiers: a,
                                            isDown: function(t) {
                                                return !!r[t]
                                            }
                                        }
                                }
                                    , ut = ot.extend({
                                    _class: "MouseEvent",
                                    initialize: function(t, e, i, n, r) {
                                        this.type = t,
                                            this.event = e,
                                            this.point = i,
                                            this.target = n,
                                            this.delta = r
                                    },
                                    toString: function() {
                                        return "{ type: '" + this.type + "', point: " + this.point + ", target: " + this.target + (this.delta ? ", delta: " + this.delta : "") + ", modifiers: " + this.getModifiers() + " }"
                                    }
                                }), ct = ot.extend({
                                    _class: "ToolEvent",
                                    _item: null,
                                    initialize: function(t, e, i) {
                                        this.tool = t,
                                            this.type = e,
                                            this.event = i
                                    },
                                    _choosePoint: function(t, e) {
                                        return t || (e ? e.clone() : null)
                                    },
                                    getPoint: function() {
                                        return this._choosePoint(this._point, this.tool._point)
                                    },
                                    setPoint: function(t) {
                                        this._point = t
                                    },
                                    getLastPoint: function() {
                                        return this._choosePoint(this._lastPoint, this.tool._lastPoint)
                                    },
                                    setLastPoint: function(t) {
                                        this._lastPoint = t
                                    },
                                    getDownPoint: function() {
                                        return this._choosePoint(this._downPoint, this.tool._downPoint)
                                    },
                                    setDownPoint: function(t) {
                                        this._downPoint = t
                                    },
                                    getMiddlePoint: function() {
                                        return !this._middlePoint && this.tool._lastPoint ? this.tool._point.add(this.tool._lastPoint).divide(2) : this._middlePoint
                                    },
                                    setMiddlePoint: function(t) {
                                        this._middlePoint = t
                                    },
                                    getDelta: function() {
                                        return !this._delta && this.tool._lastPoint ? this.tool._point.subtract(this.tool._lastPoint) : this._delta
                                    },
                                    setDelta: function(t) {
                                        this._delta = t
                                    },
                                    getCount: function() {
                                        return this.tool[/^mouse(down|up)$/.test(this.type) ? "_downCount" : "_moveCount"]
                                    },
                                    setCount: function(t) {
                                        this.tool[/^mouse(down|up)$/.test(this.type) ? "downCount" : "count"] = t
                                    },
                                    getItem: function() {
                                        if (!this._item) {
                                            var t = this.tool._scope.project.hitTest(this.getPoint());
                                            if (t) {
                                                for (var e = t.item, i = e._parent; /^(Group|CompoundPath)$/.test(i._class); )
                                                    i = (e = i)._parent;
                                                this._item = e
                                            }
                                        }
                                        return this._item
                                    },
                                    setItem: function(t) {
                                        this._item = t
                                    },
                                    toString: function() {
                                        return "{ type: " + this.type + ", point: " + this.getPoint() + ", count: " + this.getCount() + ", modifiers: " + this.getModifiers() + " }"
                                    }
                                }), dt = p.extend({
                                    _class: "Tool",
                                    _list: "tools",
                                    _reference: "tool",
                                    _events: ["onMouseDown", "onMouseUp", "onMouseDrag", "onMouseMove", "onActivate", "onDeactivate", "onEditOptions", "onKeyDown", "onKeyUp"],
                                    initialize: function(t) {
                                        p.call(this),
                                            this._moveCount = -1,
                                            this._downCount = -1,
                                            this.set(t)
                                    },
                                    getMinDistance: function() {
                                        return this._minDistance
                                    },
                                    setMinDistance: function(t) {
                                        null != (this._minDistance = t) && null != this._maxDistance && t > this._maxDistance && (this._maxDistance = t)
                                    },
                                    getMaxDistance: function() {
                                        return this._maxDistance
                                    },
                                    setMaxDistance: function(t) {
                                        this._maxDistance = t,
                                        null != this._minDistance && null != t && t < this._minDistance && (this._minDistance = t)
                                    },
                                    getFixedDistance: function() {
                                        return this._minDistance == this._maxDistance ? this._minDistance : null
                                    },
                                    setFixedDistance: function(t) {
                                        this._minDistance = this._maxDistance = t
                                    },
                                    _handleMouseEvent: function(t, e, i, n) {
                                        Ut = this._scope,
                                        n.drag && !this.responds(t) && (t = "mousemove");
                                        var r = n.move || n.drag
                                            , s = this.responds(t)
                                            , a = this.minDistance
                                            , o = this.maxDistance
                                            , h = !1
                                            , l = this;
                                        function u(t, e) {
                                            var s = i
                                                , a = r ? l._point : l._downPoint || s;
                                            if (r) {
                                                if (0 <= l._moveCount && s.equals(a))
                                                    return;
                                                if (a && (null != t || null != e)) {
                                                    var o = s.subtract(a)
                                                        , h = o.getLength();
                                                    if (h < (t || 0))
                                                        return;
                                                    e && (s = a.add(o.normalize(Math.min(h, e))))
                                                }
                                                l._moveCount++
                                            }
                                            return l._point = s,
                                                l._lastPoint = a || s,
                                            n.down && (l._moveCount = -1,
                                                l._downPoint = s,
                                                l._downCount++),
                                                1
                                        }
                                        function c() {
                                            s && (h = l.emit(t, new ct(l,t,e)) || h)
                                        }
                                        if (n.down)
                                            u(),
                                                c();
                                        else if (n.up)
                                            u(null, o),
                                                c();
                                        else if (s)
                                            for (; u(a, o); )
                                                c();
                                        return h
                                    }
                                }), pt = u.extend(c, {
                                    _class: "Tween",
                                    statics: {
                                        easings: new u({
                                            linear: function(t) {
                                                return t
                                            },
                                            easeInQuad: function(t) {
                                                return t * t
                                            },
                                            easeOutQuad: function(t) {
                                                return t * (2 - t)
                                            },
                                            easeInOutQuad: function(t) {
                                                return t < .5 ? 2 * t * t : 2 * (2 - t) * t - 1
                                            },
                                            easeInCubic: function(t) {
                                                return t * t * t
                                            },
                                            easeOutCubic: function(t) {
                                                return --t * t * t + 1
                                            },
                                            easeInOutCubic: function(t) {
                                                return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1
                                            },
                                            easeInQuart: function(t) {
                                                return t * t * t * t
                                            },
                                            easeOutQuart: function(t) {
                                                return 1 - --t * t * t * t
                                            },
                                            easeInOutQuart: function(t) {
                                                return t < .5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t
                                            },
                                            easeInQuint: function(t) {
                                                return t * t * t * t * t
                                            },
                                            easeOutQuint: function(t) {
                                                return 1 + --t * t * t * t * t
                                            },
                                            easeInOutQuint: function(t) {
                                                return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t
                                            }
                                        })
                                    },
                                    initialize: function t(e, i, n, r, s, a) {
                                        this.object = e;
                                        var o = typeof s;
                                        e = "function" == o;
                                        this.type = e ? o : "string" == o ? s : "linear",
                                            this.easing = e ? s : t.easings[this.type],
                                            this.duration = r,
                                            this.running = !1,
                                            this._then = null,
                                            this._startTime = null,
                                            r = i || n,
                                            this._keys = r ? Object.keys(r) : [],
                                            this._parsedKeys = this._parseKeys(this._keys),
                                            this._from = r && this._getState(i),
                                            this._to = r && this._getState(n),
                                        !1 !== a && this.start()
                                    },
                                    then: function(t) {
                                        return this._then = t,
                                            this
                                    },
                                    start: function() {
                                        return this._startTime = null,
                                            this.running = !0,
                                            this
                                    },
                                    stop: function() {
                                        return this.running = !1,
                                            this
                                    },
                                    update: function(t) {
                                        if (this.running) {
                                            function e(e) {
                                                return "function" == typeof e ? e(i, t) : e
                                            }
                                            1 <= t && (t = 1,
                                                this.running = !1);
                                            for (var i = this.easing(t), n = this._keys, r = 0, s = n && n.length; r < s; r++) {
                                                var a = n[r]
                                                    , o = e(this._from[a])
                                                    , h = e(this._to[a]);
                                                o = o && h && o.__add && h.__add ? h.__subtract(o).__multiply(i).__add(o) : (h - o) * i + o;
                                                this._setProperty(this._parsedKeys[a], o)
                                            }
                                            this.responds("update") && this.emit("update", new u({
                                                progress: t,
                                                factor: i
                                            })),
                                            !this.running && this._then && this._then(this.object)
                                        }
                                        return this
                                    },
                                    _events: {
                                        onUpdate: {}
                                    },
                                    _handleFrame: function(t) {
                                        var e = this._startTime
                                            , i = e ? (t - e) / this.duration : 0;
                                        e || (this._startTime = t),
                                            this.update(i)
                                    },
                                    _getState: function(t) {
                                        for (var e = this._keys, i = {}, n = 0, r = e.length; n < r; n++) {
                                            var s, a = e[n], o = this._parsedKeys[a], h = this._getProperty(o);
                                            t ? (s = this._resolveValue(h, t[a]),
                                                this._setProperty(o, s),
                                                s = (s = this._getProperty(o)) && s.clone ? s.clone() : s,
                                                this._setProperty(o, h)) : s = h && h.clone ? h.clone() : h,
                                                i[a] = s
                                        }
                                        return i
                                    },
                                    _resolveValue: function(t, e) {
                                        if (e) {
                                            if (Array.isArray(e) && 2 === e.length) {
                                                var i = e[0];
                                                return i && i.match && i.match(/^[+\-\*\/]=/) ? this._calculate(t, i[0], e[1]) : e
                                            }
                                            if ("string" == typeof e && (i = e.match(/^[+\-*/]=(.*)/)))
                                                return i = JSON.parse(i[1].replace(/(['"])?([a-zA-Z0-9_]+)(['"])?:/g, '"$2": ')),
                                                    this._calculate(t, e[0], i)
                                        }
                                        return e
                                    },
                                    _calculate: function(t, e, i) {
                                        return Ut.PaperScript.calculateBinary(t, e, i)
                                    },
                                    _parseKeys: function(t) {
                                        for (var e = {}, i = 0, n = t.length; i < n; i++) {
                                            var r = t[i]
                                                , s = r.replace(/\.([^.]*)/g, "/$1").replace(/\[['"]?([^'"\]]*)['"]?\]/g, "/$1");
                                            e[r] = s.split("/")
                                        }
                                        return e
                                    },
                                    _getProperty: function(t, e) {
                                        for (var i = this.object, n = 0, r = t.length - (e || 0); n < r && i; n++)
                                            i = i[t[n]];
                                        return i
                                    },
                                    _setProperty: function(t, e) {
                                        var i = this._getProperty(t, 1);
                                        i && (i[t[t.length - 1]] = e)
                                    }
                                }), ft = function(t) {
                                    var e = new a.XMLHttpRequest;
                                    return e.open((t.method || "get").toUpperCase(), t.url, u.pick(t.async, !0)),
                                    t.mimeType && e.overrideMimeType(t.mimeType),
                                        e.onload = function() {
                                            var i = e.status;
                                            0 === i || 200 === i ? t.onLoad && t.onLoad.call(e, e.responseText) : e.onerror()
                                        }
                                        ,
                                        e.onerror = function() {
                                            var i = e.status
                                                , n = 'Could not load "' + t.url + '" (Status: ' + i + ")";
                                            if (!t.onError)
                                                throw new Error(n);
                                            t.onError(n, i)
                                        }
                                        ,
                                        e.send(null)
                                }, mt = u.exports.CanvasProvider = {
                                    canvases: [],
                                    getCanvas: function(t, e) {
                                        if (!h)
                                            return null;
                                        var i, n = !0;
                                        "object" == typeof t && (e = t.height,
                                            t = t.width),
                                            this.canvases.length ? i = this.canvases.pop() : (i = l.createElement("canvas"),
                                                n = !1);
                                        var r = i.getContext("2d");
                                        if (!r)
                                            throw new Error("Canvas " + i + " is unable to provide a 2D context.");
                                        return i.width === t && i.height === e ? n && r.clearRect(0, 0, t + 1, e + 1) : (i.width = t,
                                            i.height = e),
                                            r.save(),
                                            i
                                    },
                                    getContext: function(t, e) {
                                        return (e = this.getCanvas(t, e)) ? e.getContext("2d") : null
                                    },
                                    release: function(t) {
                                        (t = t && t.canvas ? t.canvas : t) && t.getContext && (t.getContext("2d").restore(),
                                            this.canvases.push(t))
                                    }
                                }, gt = new function() {
                                    var t, e, i, n, r, s, a, o, h, l, c, d = Math.min, p = Math.max, f = Math.abs;
                                    function m(t, e, i) {
                                        return .2989 * t + .587 * e + .114 * i
                                    }
                                    function g(t, e, i, n) {
                                        var r, s = n - m(t, e, i);
                                        n = m(h = t + s, l = e + s, c = i + s),
                                            i = d(h, l, c),
                                            s = p(h, l, c);
                                        i < 0 && (h = n + (h - n) * n / (r = n - i),
                                            l = n + (l - n) * n / r,
                                            c = n + (c - n) * n / r),
                                        255 < s && (h = n + (h - n) * (r = 255 - n) / (s -= n),
                                            l = n + (l - n) * r / s,
                                            c = n + (c - n) * r / s)
                                    }
                                    function v(t, e, i) {
                                        return p(t, e, i) - d(t, e, i)
                                    }
                                    function _(t, e, i, n) {
                                        var r = [t, e, i]
                                            , s = p(t, e, i);
                                        i = d(t, e, i),
                                            e = 0 === d(i = i === t ? 0 : i === e ? 1 : 2, s = s === t ? 0 : s === e ? 1 : 2) ? 1 === p(i, s) ? 2 : 1 : 0;
                                        r[s] > r[i] ? (r[e] = (r[e] - r[i]) * n / (r[s] - r[i]),
                                            r[s] = n) : r[e] = r[s] = 0,
                                            r[i] = 0,
                                            h = r[0],
                                            l = r[1],
                                            c = r[2]
                                    }
                                    var y = {
                                        multiply: function() {
                                            h = r * t / 255,
                                                l = s * e / 255,
                                                c = a * i / 255
                                        },
                                        screen: function() {
                                            h = r + t - r * t / 255,
                                                l = s + e - s * e / 255,
                                                c = a + i - a * i / 255
                                        },
                                        overlay: function() {
                                            h = r < 128 ? 2 * r * t / 255 : 255 - 2 * (255 - r) * (255 - t) / 255,
                                                l = s < 128 ? 2 * s * e / 255 : 255 - 2 * (255 - s) * (255 - e) / 255,
                                                c = a < 128 ? 2 * a * i / 255 : 255 - 2 * (255 - a) * (255 - i) / 255
                                        },
                                        "soft-light": function() {
                                            var n = t * r / 255;
                                            h = n + r * (255 - (255 - r) * (255 - t) / 255 - n) / 255,
                                                l = (n = e * s / 255) + s * (255 - (255 - s) * (255 - e) / 255 - n) / 255,
                                                c = (n = i * a / 255) + a * (255 - (255 - a) * (255 - i) / 255 - n) / 255
                                        },
                                        "hard-light": function() {
                                            h = t < 128 ? 2 * t * r / 255 : 255 - 2 * (255 - t) * (255 - r) / 255,
                                                l = e < 128 ? 2 * e * s / 255 : 255 - 2 * (255 - e) * (255 - s) / 255,
                                                c = i < 128 ? 2 * i * a / 255 : 255 - 2 * (255 - i) * (255 - a) / 255
                                        },
                                        "color-dodge": function() {
                                            h = 0 === r ? 0 : 255 === t ? 255 : d(255, 255 * r / (255 - t)),
                                                l = 0 === s ? 0 : 255 === e ? 255 : d(255, 255 * s / (255 - e)),
                                                c = 0 === a ? 0 : 255 === i ? 255 : d(255, 255 * a / (255 - i))
                                        },
                                        "color-burn": function() {
                                            h = 255 === r ? 255 : 0 === t ? 0 : p(0, 255 - 255 * (255 - r) / t),
                                                l = 255 === s ? 255 : 0 === e ? 0 : p(0, 255 - 255 * (255 - s) / e),
                                                c = 255 === a ? 255 : 0 === i ? 0 : p(0, 255 - 255 * (255 - a) / i)
                                        },
                                        darken: function() {
                                            h = r < t ? r : t,
                                                l = s < e ? s : e,
                                                c = a < i ? a : i
                                        },
                                        lighten: function() {
                                            h = t < r ? r : t,
                                                l = e < s ? s : e,
                                                c = i < a ? a : i
                                        },
                                        difference: function() {
                                            (h = r - t) < 0 && (h = -h),
                                            (l = s - e) < 0 && (l = -l),
                                            (c = a - i) < 0 && (c = -c)
                                        },
                                        exclusion: function() {
                                            h = r + t * (255 - r - r) / 255,
                                                l = s + e * (255 - s - s) / 255,
                                                c = a + i * (255 - a - a) / 255
                                        },
                                        hue: function() {
                                            _(t, e, i, v(r, s, a)),
                                                g(h, l, c, m(r, s, a))
                                        },
                                        saturation: function() {
                                            _(r, s, a, v(t, e, i)),
                                                g(h, l, c, m(r, s, a))
                                        },
                                        luminosity: function() {
                                            g(r, s, a, m(t, e, i))
                                        },
                                        color: function() {
                                            g(t, e, i, m(r, s, a))
                                        },
                                        add: function() {
                                            h = d(r + t, 255),
                                                l = d(s + e, 255),
                                                c = d(a + i, 255)
                                        },
                                        subtract: function() {
                                            h = p(r - t, 0),
                                                l = p(s - e, 0),
                                                c = p(a - i, 0)
                                        },
                                        average: function() {
                                            h = (r + t) / 2,
                                                l = (s + e) / 2,
                                                c = (a + i) / 2
                                        },
                                        negation: function() {
                                            h = 255 - f(255 - t - r),
                                                l = 255 - f(255 - e - s),
                                                c = 255 - f(255 - i - a)
                                        }
                                    }
                                        , x = this.nativeModes = u.each(["source-over", "source-in", "source-out", "source-atop", "destination-over", "destination-in", "destination-out", "destination-atop", "lighter", "darker", "copy", "xor"], (function(t) {
                                            this[t] = !0
                                        }
                                    ), {})
                                        , b = mt.getContext(1, 1);
                                    b && (u.each(y, (function(t, e) {
                                            var i = "darken" === e
                                                , n = !1;
                                            b.save();
                                            try {
                                                b.fillStyle = i ? "#300" : "#a00",
                                                    b.fillRect(0, 0, 1, 1),
                                                    b.globalCompositeOperation = e,
                                                b.globalCompositeOperation === e && (b.fillStyle = i ? "#a00" : "#300",
                                                    b.fillRect(0, 0, 1, 1),
                                                    n = b.getImageData(0, 0, 1, 1).data[0] !== i ? 170 : 51)
                                            } catch (t) {}
                                            b.restore(),
                                                x[e] = n
                                        }
                                    )),
                                        mt.release(b)),
                                        this.process = function(u, d, p, f, m) {
                                            var g = d.canvas
                                                , v = "normal" === u;
                                            if (v || x[u])
                                                p.save(),
                                                    p.setTransform(1, 0, 0, 1, 0, 0),
                                                    p.globalAlpha = f,
                                                v || (p.globalCompositeOperation = u),
                                                    p.drawImage(g, m.x, m.y),
                                                    p.restore();
                                            else {
                                                var _ = y[u];
                                                if (_) {
                                                    for (var b = (u = p.getImageData(m.x, m.y, g.width, g.height)).data, w = d.getImageData(0, 0, g.width, g.height).data, S = 0, M = b.length; S < M; S += 4) {
                                                        t = w[S],
                                                            r = b[S],
                                                            e = w[S + 1],
                                                            s = b[S + 1],
                                                            i = w[S + 2],
                                                            a = b[S + 2],
                                                            n = w[S + 3],
                                                            o = b[S + 3],
                                                            _();
                                                        var C = n * f / 255
                                                            , A = 1 - C;
                                                        b[S] = C * h + A * r,
                                                            b[S + 1] = C * l + A * s,
                                                            b[S + 2] = C * c + A * a,
                                                            b[S + 3] = n * f + A * o
                                                    }
                                                    p.putImageData(u, m.x, m.y)
                                                }
                                            }
                                        }
                                }
                                    , vt = new function() {
                                    var t = "http://www.w3.org/2000/svg"
                                        , e = "http://www.w3.org/2000/xmlns"
                                        , i = "http://www.w3.org/1999/xlink"
                                        , n = {
                                        href: i,
                                        xlink: e,
                                        xmlns: e + "/",
                                        "xmlns:xlink": e + "/"
                                    };
                                    function r(t, e, i) {
                                        for (var r in e) {
                                            var s = e[r]
                                                , a = n[r];
                                            "number" == typeof s && i && (s = i.number(s)),
                                                a ? t.setAttributeNS(a, r, s) : t.setAttribute(r, s)
                                        }
                                        return t
                                    }
                                    return {
                                        svg: t,
                                        xmlns: e,
                                        xlink: i,
                                        create: function(e, i, n) {
                                            return r(l.createElementNS(t, e), i, n)
                                        },
                                        get: function(t, e) {
                                            var i = n[e];
                                            return "null" === (e = i ? t.getAttributeNS(i, e) : t.getAttribute(e)) ? null : e
                                        },
                                        set: r
                                    }
                                }
                                    , _t = u.each({
                                    fillColor: ["fill", "color"],
                                    fillRule: ["fill-rule", "string"],
                                    strokeColor: ["stroke", "color"],
                                    strokeWidth: ["stroke-width", "number"],
                                    strokeCap: ["stroke-linecap", "string"],
                                    strokeJoin: ["stroke-linejoin", "string"],
                                    strokeScaling: ["vector-effect", "lookup", {
                                        true: "none",
                                        false: "non-scaling-stroke"
                                    }, function(t, e) {
                                        return !e && (t instanceof B || t instanceof L || t instanceof j)
                                    }
                                    ],
                                    miterLimit: ["stroke-miterlimit", "number"],
                                    dashArray: ["stroke-dasharray", "array"],
                                    dashOffset: ["stroke-dashoffset", "number"],
                                    fontFamily: ["font-family", "string"],
                                    fontWeight: ["font-weight", "string"],
                                    fontSize: ["font-size", "number"],
                                    justification: ["text-anchor", "lookup", {
                                        left: "start",
                                        center: "middle",
                                        right: "end"
                                    }],
                                    opacity: ["opacity", "number"],
                                    blendMode: ["mix-blend-mode", "style"]
                                }, (function(t, e) {
                                        var i = u.capitalize(e)
                                            , n = t[2];
                                        this[e] = {
                                            type: t[1],
                                            property: e,
                                            attribute: t[0],
                                            toSVG: n,
                                            fromSVG: n && u.each(n, (function(t, e) {
                                                    this[t] = e
                                                }
                                            ), {}),
                                            exportFilter: t[3],
                                            get: "get" + i,
                                            set: "set" + i
                                        }
                                    }
                                ), {});
                                function yt(t, e, i) {
                                    var n, r, s = new u, a = t.getTranslation();
                                    return e && (t.isInvertible() ? (n = (t = t._shiftless())._inverseTransform(a),
                                        a = null) : n = new _,
                                        s[i ? "cx" : "x"] = n.x,
                                        s[i ? "cy" : "y"] = n.y),
                                    t.isIdentity() || ((r = t.decompose()) ? (e = [],
                                        i = r.rotation,
                                        n = r.scaling,
                                        r = r.skewing,
                                    a && !a.isZero() && e.push("translate(" + K.point(a) + ")"),
                                    i && e.push("rotate(" + K.number(i) + ")"),
                                    g.isZero(n.x - 1) && g.isZero(n.y - 1) || e.push("scale(" + K.point(n) + ")"),
                                    r.x && e.push("skewX(" + K.number(r.x) + ")"),
                                    r.y && e.push("skewY(" + K.number(r.y) + ")"),
                                        s.transform = e.join(" ")) : s.transform = "matrix(" + t.getValues().join(",") + ")"),
                                        s
                                }
                                function xt(t, e) {
                                    for (var i = yt(t._matrix), n = t._children, r = vt.create("g", i, K), s = 0, a = n.length; s < a; s++) {
                                        var o, h = n[s], l = Ct(h, e);
                                        l && (h.isClipMask() ? ((o = vt.create("clipPath")).appendChild(l),
                                            St(h, o, "clip"),
                                            vt.set(r, {
                                                "clip-path": "url(#" + o.id + ")"
                                            })) : r.appendChild(l))
                                    }
                                    return r
                                }
                                function bt(t) {
                                    var e, i = t._type, n = t._radius, r = yt(t._matrix, !0, "rectangle" !== i);
                                    return "rectangle" === i && (i = "rect",
                                        t = (e = t._size).width,
                                        e = e.height,
                                        r.x -= t / 2,
                                        r.y -= e / 2,
                                        r.width = t,
                                        r.height = e,
                                    n.isZero() && (n = null)),
                                    n && ("circle" === i ? r.r = n : (r.rx = n.width,
                                        r.ry = n.height)),
                                        vt.create(i, r, K)
                                }
                                function wt(t, e) {
                                    return $ = $ || {
                                        ids: {},
                                        svgs: {}
                                    },
                                    t && $.svgs[e + "-" + (t._id || t.__id || (t.__id = v.get("svg")))]
                                }
                                function St(t, e, i) {
                                    $ || wt();
                                    var n = $.ids[i] = ($.ids[i] || 0) + 1;
                                    e.id = i + "-" + n,
                                        $.svgs[i + "-" + (t._id || t.__id)] = e
                                }
                                function Mt(t, e) {
                                    var i = t
                                        , n = null;
                                    if ($) {
                                        for (var r in i = "svg" === t.nodeName.toLowerCase() && t,
                                            $.svgs)
                                            n || (i || (i = vt.create("svg")).appendChild(t),
                                                n = i.insertBefore(vt.create("defs"), i.firstChild)),
                                                n.appendChild($.svgs[r]);
                                        $ = null
                                    }
                                    return e.asString ? (new a.XMLSerializer).serializeToString(i) : i
                                }
                                function Ct(t, e, i) {
                                    var n = tt[t._class]
                                        , r = n && n(t, e);
                                    return r && ((n = e.onExport) && (r = n(t, r, e) || r),
                                    (e = JSON.stringify(t._data)) && "{}" !== e && "null" !== e && r.setAttribute("data-paper-data", e)),
                                    r && function(t, e, i) {
                                        var n = {}
                                            , r = !i && t.getParent()
                                            , s = [];
                                        return null != t._name && (n.id = t._name),
                                            u.each(_t, (function(e) {
                                                    var i = e.get
                                                        , a = e.type
                                                        , o = t[i]();
                                                    (e.exportFilter ? !e.exportFilter(t, o) : r && u.equals(r[i](), o)) || ("color" !== a || null == o || (i = o.getAlpha()) < 1 && (n[e.attribute + "-opacity"] = i),
                                                        "style" === a ? s.push(e.attribute + ": " + o) : n[e.attribute] = null == o ? "none" : "color" === a ? o.gradient ? function(t) {
                                                            if (!(o = wt(t, "color"))) {
                                                                var e, i, n = t.getGradient(), r = n._radial, s = t.getOrigin(), a = t.getDestination();
                                                                r ? (e = {
                                                                    cx: s.x,
                                                                    cy: s.y,
                                                                    r: s.getDistance(a)
                                                                },
                                                                (i = t.getHighlight()) && (e.fx = i.x,
                                                                    e.fy = i.y)) : e = {
                                                                    x1: s.x,
                                                                    y1: s.y,
                                                                    x2: a.x,
                                                                    y2: a.y
                                                                },
                                                                    e.gradientUnits = "userSpaceOnUse";
                                                                for (var o = vt.create((r ? "radial" : "linear") + "Gradient", e, K), h = n._stops, l = 0, u = h.length; l < u; l++) {
                                                                    var c, d = (c = h[l])._color, p = d.getAlpha();
                                                                    e = {
                                                                        offset: null == (c = c._offset) ? l / (u - 1) : c
                                                                    },
                                                                    d && (e["stop-color"] = d.toCSS(!0)),
                                                                    p < 1 && (e["stop-opacity"] = p),
                                                                        o.appendChild(vt.create("stop", e, K))
                                                                }
                                                                St(t, o, "color")
                                                            }
                                                            return "url(#" + o.id + ")"
                                                        }(o) : o.toCSS(!0) : "array" === a ? o.join(",") : "lookup" === a ? e.toSVG[o] : o)
                                                }
                                            )),
                                        s.length && (n.style = s.join(";")),
                                        1 === n.opacity && delete n.opacity,
                                        t._visible || (n.visibility = "hidden"),
                                            vt.set(e, n, K)
                                    }(t, r, i)
                                }
                                function At(t) {
                                    return K = new m((t = t || {}).precision),
                                        t
                                }
                                function Tt(t, e, i, n, r, s) {
                                    return i = null == (s = vt.get(t, e) || s) ? n ? null : i ? "" : 0 : i ? s : parseFloat(s),
                                        /%\s*$/.test(s) ? i / 100 * (r ? 1 : et[/x|^width/.test(e) ? "width" : "height"]) : i
                                }
                                function Pt(t, e, i, n, r, s, a) {
                                    return e = Tt(t, e || "x", !1, n, r, s),
                                        i = Tt(t, i || "y", !1, n, r, a),
                                        !n || null != e && null != i ? new _(e,i) : null
                                }
                                function Et(t, e, i, n, r) {
                                    return e = Tt(t, e || "width", !1, n, r),
                                        i = Tt(t, i || "height", !1, n, r),
                                        !n || null != e && null != i ? new x(e,i) : null
                                }
                                function Lt(t, e, i) {
                                    return "none" === t ? null : "number" === e ? parseFloat(t) : "array" === e ? t ? t.split(/[\s,]+/g).map(parseFloat) : [] : "color" === e ? Ft(t) || t : "lookup" === e ? i[t] : t
                                }
                                function It(t, e, i, n) {
                                    var r = t.childNodes
                                        , s = "clippath" === e
                                        , a = "defs" === e
                                        , o = new P
                                        , h = o._project
                                        , l = (e = h._currentStyle,
                                        []);
                                    if (s || a || (o = zt(o, t, n),
                                        h._currentStyle = o._style.clone()),
                                        n)
                                        for (var u = t.querySelectorAll("defs"), c = 0, d = u.length; c < d; c++)
                                            Bt(u[c], i, !1);
                                    for (c = 0,
                                             d = r.length; c < d; c++) {
                                        var p, f = r[c];
                                        1 !== f.nodeType || /^defs$/i.test(f.nodeName) || !(p = Bt(f, i, !1)) || p instanceof N || l.push(p)
                                    }
                                    return o.addChildren(l),
                                    s && (o = zt(o.reduce(), t, n)),
                                        h._currentStyle = e,
                                    (s || a) && (o.remove(),
                                        o = null),
                                        o
                                }
                                function kt(t, e) {
                                    for (var i = t.getAttribute("points").match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g), n = [], r = 0, s = i.length; r < s; r += 2)
                                        n.push(new _(parseFloat(i[r]),parseFloat(i[r + 1])));
                                    return t = new V(n),
                                    "polygon" === e && t.closePath(),
                                        t
                                }
                                function Nt(t, e) {
                                    var i;
                                    e = "radialgradient" === e;
                                    if (c = (Tt(t, "href", !0) || "").substring(1))
                                        (i = it[c].getGradient())._radial ^ e && ((i = i.clone())._radial = e);
                                    else {
                                        for (var n = t.childNodes, r = [], s = 0, a = n.length; s < a; s++) {
                                            var o = n[s];
                                            1 === o.nodeType && r.push(zt(new Z, o))
                                        }
                                        i = new X(r,e)
                                    }
                                    var h, l, u, c = "userSpaceOnUse" !== Tt(t, "gradientUnits", !0);
                                    return e ? (l = (h = Pt(t, "cx", "cy", !1, c, "50%", "50%")).add(Tt(t, "r", !1, !1, c, "50%"), 0),
                                        u = Pt(t, "fx", "fy", !0, c)) : (h = Pt(t, "x1", "y1", !1, c, "0%", "0%"),
                                        l = Pt(t, "x2", "y2", !1, c, "100%", "0%")),
                                        zt(new q(i,h,l,u), t)._scaleToBounds = c,
                                        null
                                }
                                function Ot(t, e, i, n) {
                                    if (t.transform) {
                                        for (var r = (n.getAttribute(i) || "").split(/\)\s*/g), s = new M, a = 0, o = r.length; a < o; a++) {
                                            if (!(l = r[a]))
                                                break;
                                            for (var h = l.split(/\(\s*/), l = h[0], u = h[1].split(/[\s,]+/g), c = 0, d = u.length; c < d; c++)
                                                u[c] = parseFloat(u[c]);
                                            switch (l) {
                                                case "matrix":
                                                    s.append(new M(u[0],u[1],u[2],u[3],u[4],u[5]));
                                                    break;
                                                case "rotate":
                                                    s.rotate(u[0], u[1] || 0, u[2] || 0);
                                                    break;
                                                case "translate":
                                                    s.translate(u[0], u[1] || 0);
                                                    break;
                                                case "scale":
                                                    s.scale(u);
                                                    break;
                                                case "skewX":
                                                    s.skew(u[0], 0);
                                                    break;
                                                case "skewY":
                                                    s.skew(0, u[0])
                                            }
                                        }
                                        t.transform(s)
                                    }
                                }
                                function Dt(t, e, i) {
                                    (i = t[i = "fill-opacity" === i ? "getFillColor" : "getStrokeColor"] && t[i]()) && i.setAlpha(parseFloat(e))
                                }
                                function Rt(t, e, i) {
                                    var n;
                                    return !(n = (n = t.attributes[e]) && n.value) && t.style && (e = u.camelize(e),
                                    (n = t.style[e]) || i.node[e] === i.parent[e] || (n = i.node[e])),
                                        n ? "none" === n ? null : n : o
                                }
                                function zt(t, e, i) {
                                    var n = e.parentNode
                                        , r = {
                                        node: Y.getStyles(e) || {},
                                        parent: !i && !/^defs$/i.test(n.tagName) && Y.getStyles(n) || {}
                                    };
                                    return u.each(rt, (function(i, n) {
                                            var s = Rt(e, n, r);
                                            t = s !== o && i(t, s, n, e, r) || t
                                        }
                                    )),
                                        t
                                }
                                function Ft(t) {
                                    return (t = (t = (t = t && t.match(/\((?:["'#]*)([^"')]+)/)) && t[1]) && it[h ? t.replace(h.location.href.split("#")[0] + "#", "") : t]) && t._scaleToBounds && ((t = t.clone())._scaleToBounds = !0),
                                        t
                                }
                                function Bt(t, e, i) {
                                    var n, r, s, a = "#document" !== (f = t.nodeName.toLowerCase()), o = l.body;
                                    i && a && (et = Ut.getView().getSize(),
                                        et = Et(t, null, null, !0) || et,
                                        n = vt.create("svg", {
                                            style: "stroke-width: 1px; stroke-miterlimit: 10"
                                        }),
                                        r = t.parentNode,
                                        s = t.nextSibling,
                                        n.appendChild(t),
                                        o.appendChild(n));
                                    var h = Ut.settings
                                        , c = h.applyMatrix
                                        , d = h.insertItems;
                                    h.applyMatrix = !1,
                                        h.insertItems = !1;
                                    var p = nt[f]
                                        , f = p && p(t, f, e, i) || null;
                                    return h.insertItems = d,
                                        h.applyMatrix = c,
                                    f && (!a || f instanceof P || (f = zt(f, t, i)),
                                        h = e.onImport,
                                        a = a && t.getAttribute("data-paper-data"),
                                    h && (f = h(t, f, e) || f),
                                    e.expandShapes && f instanceof L && (f.remove(),
                                        f = f.toPath()),
                                    a && (f._data = JSON.parse(a))),
                                    n && (o.removeChild(n),
                                    r && (s ? r.insertBefore(t, s) : r.appendChild(t))),
                                    i && (it = {},
                                    f && u.pick(e.applyMatrix, c) && f.matrix.apply(!0, !0)),
                                        f
                                }
                                function Vt(t, e, i) {
                                    if (!t)
                                        return null;
                                    e = "function" == typeof e ? {
                                        onLoad: e
                                    } : e || {};
                                    var n = Ut
                                        , r = null;
                                    function s(s) {
                                        try {
                                            var l = "object" == typeof s ? s : (new a.DOMParser).parseFromString(s.trim(), "image/svg+xml");
                                            if (!l.nodeName)
                                                throw l = null,
                                                    new Error("Unsupported SVG source: " + t);
                                            Ut = n,
                                                r = Bt(l, e, !0),
                                            e && !1 === e.insert || i._insertItem(o, r);
                                            var u = e.onLoad;
                                            u && u(r, s)
                                        } catch (s) {
                                            h(s)
                                        }
                                    }
                                    function h(t, i) {
                                        var n = e.onError;
                                        if (!n)
                                            throw new Error(t);
                                        n(t, i)
                                    }
                                    if ("string" != typeof t || /^[\s\S]*</.test(t)) {
                                        if ("undefined" != typeof File && t instanceof File) {
                                            var u = new FileReader;
                                            return u.onload = function() {
                                                s(u.result)
                                            }
                                                ,
                                                u.onerror = function() {
                                                    h(u.error)
                                                }
                                                ,
                                                u.readAsText(t)
                                        }
                                        s(t)
                                    } else {
                                        var c = l.getElementById(t);
                                        c ? s(c) : ft({
                                            url: t,
                                            async: !0,
                                            onLoad: s,
                                            onError: h
                                        })
                                    }
                                    return r
                                }
                                tt = {
                                    Group: xt,
                                    Layer: xt,
                                    Raster: function(t, e) {
                                        var i = yt(t._matrix, !0)
                                            , n = t.getSize()
                                            , r = t.getImage();
                                        return i.x -= n.width / 2,
                                            i.y -= n.height / 2,
                                            i.width = n.width,
                                            i.height = n.height,
                                            i.href = 0 == e.embedImages && r && r.src || t.toDataURL(),
                                            vt.create("image", i, K)
                                    },
                                    Path: function(t, e) {
                                        var i = e.matchShapes;
                                        if (i) {
                                            var n = t.toShape(!1);
                                            if (n)
                                                return bt(n)
                                        }
                                        var r = t._segments
                                            , s = r.length
                                            , a = yt(t._matrix);
                                        if (i && 2 <= s && !t.hasHandles())
                                            if (2 < s) {
                                                for (var o = t._closed ? "polygon" : "polyline", h = [], l = 0; l < s; l++)
                                                    h.push(K.point(r[l]._point));
                                                a.points = h.join(" ")
                                            } else
                                                o = "line",
                                                    n = r[0]._point,
                                                    i = r[1]._point,
                                                    a.set({
                                                        x1: n.x,
                                                        y1: n.y,
                                                        x2: i.x,
                                                        y2: i.y
                                                    });
                                        else
                                            o = "path",
                                                a.d = t.getPathData(null, e.precision);
                                        return vt.create(o, a, K)
                                    },
                                    Shape: bt,
                                    CompoundPath: function(t, e) {
                                        var i = yt(t._matrix);
                                        return (e = t.getPathData(null, e.precision)) && (i.d = e),
                                            vt.create("path", i, K)
                                    },
                                    SymbolItem: function(t, e) {
                                        var i = yt(t._matrix, !0)
                                            , n = t._definition
                                            , r = wt(n, "symbol")
                                            , s = n._item;
                                        t = s.getStrokeBounds();
                                        return r || ((r = vt.create("symbol", {
                                            viewBox: K.rectangle(t)
                                        })).appendChild(Ct(s, e)),
                                            St(n, r, "symbol")),
                                            i.href = "#" + r.id,
                                            i.x += t.x,
                                            i.y += t.y,
                                            i.width = t.width,
                                            i.height = t.height,
                                            i.overflow = "visible",
                                            vt.create("use", i, K)
                                    },
                                    PointText: function(t) {
                                        var e = vt.create("text", yt(t._matrix, !0), K);
                                        return e.textContent = t._content,
                                            e
                                    }
                                },
                                    T.inject({
                                        exportSVG: function(t) {
                                            return Mt(Ct(this, t = At(t), !0), t)
                                        }
                                    }),
                                    A.inject({
                                        exportSVG: function(t) {
                                            t = At(t);
                                            var e = this._children
                                                , i = this.getView()
                                                , n = u.pick(t.bounds, "view")
                                                , r = (r = t.matrix || "view" === n && i._matrix) && M.read([r]);
                                            i = "view" === n ? new w([0, 0],i.getViewSize()) : "content" === n ? T._getBounds(e, r, {
                                                stroke: !0
                                            }).rect : w.read([n], 0, {
                                                readNull: !0
                                            }),
                                                n = {
                                                    version: "1.1",
                                                    xmlns: vt.svg,
                                                    "xmlns:xlink": vt.xlink
                                                };
                                            i && (n.width = i.width,
                                                n.height = i.height,
                                            (i.x || 0 === i.x || i.y || 0 === i.y) && (n.viewBox = K.rectangle(i)));
                                            var s = n = vt.create("svg", n, K);
                                            r && !r.isIdentity() && (s = n.appendChild(vt.create("g", yt(r), K)));
                                            for (var a = 0, o = e.length; a < o; a++)
                                                s.appendChild(Ct(e[a], t, !0));
                                            return Mt(n, t)
                                        }
                                    }),
                                    it = {},
                                    nt = {
                                        "#document": function(t, e, i, n) {
                                            for (var r = t.childNodes, s = 0, a = r.length; s < a; s++) {
                                                var o = r[s];
                                                if (1 === o.nodeType)
                                                    return Bt(o, i, n)
                                            }
                                        },
                                        g: It,
                                        svg: It,
                                        clippath: It,
                                        polygon: kt,
                                        polyline: kt,
                                        path: function(t) {
                                            return B.create(t.getAttribute("d"))
                                        },
                                        lineargradient: Nt,
                                        radialgradient: Nt,
                                        image: function(t) {
                                            var e = new I(Tt(t, "href", !0));
                                            return e.on("load", (function() {
                                                    var e = Et(t);
                                                    this.setSize(e),
                                                        e = Pt(t).add(e.divide(2)),
                                                        this._matrix.append((new M).translate(e))
                                                }
                                            )),
                                                e
                                        },
                                        symbol: function(t, e, i, n) {
                                            return new N(It(t, e, i, n),!0)
                                        },
                                        defs: It,
                                        use: function(t) {
                                            var e = (Tt(t, "href", !0) || "").substring(1);
                                            e = it[e],
                                                t = Pt(t);
                                            return e ? e instanceof N ? e.place(t) : e.clone().translate(t) : null
                                        },
                                        circle: function(t) {
                                            return new L.Circle(Pt(t, "cx", "cy"),Tt(t, "r"))
                                        },
                                        ellipse: function(t) {
                                            return new L.Ellipse({
                                                center: Pt(t, "cx", "cy"),
                                                radius: Et(t, "rx", "ry")
                                            })
                                        },
                                        rect: function(t) {
                                            return new L.Rectangle(new w(Pt(t),Et(t)),Et(t, "rx", "ry"))
                                        },
                                        line: function(t) {
                                            return new V.Line(Pt(t, "x1", "y1"),Pt(t, "x2", "y2"))
                                        },
                                        text: function(t) {
                                            var e = new H(Pt(t).add(Pt(t, "dx", "dy")));
                                            return e.setContent(t.textContent.trim() || ""),
                                                e
                                        },
                                        switch: It
                                    },
                                    rt = u.set(u.each(_t, (function(t) {
                                            this[t.attribute] = function(e, i) {
                                                e[t.set] && (e[t.set](Lt(i, t.type, t.fromSVG)),
                                                "color" !== t.type || (i = e[t.get]()) && i._scaleToBounds && (e = e.getBounds(),
                                                    i.transform((new M).translate(e.getPoint()).scale(e.getSize()))))
                                            }
                                        }
                                    ), {}), {
                                        id: function(t, e) {
                                            (it[e] = t).setName && t.setName(e)
                                        },
                                        "clip-path": function(t, e) {
                                            if (e = Ft(e)) {
                                                if ((e = e.clone()).setClipMask(!0),
                                                    !(t instanceof P))
                                                    return new P(e,t);
                                                t.insertChild(0, e)
                                            }
                                        },
                                        gradientTransform: Ot,
                                        transform: Ot,
                                        "fill-opacity": Dt,
                                        "stroke-opacity": Dt,
                                        visibility: function(t, e) {
                                            t.setVisible && t.setVisible("visible" === e)
                                        },
                                        display: function(t, e) {
                                            t.setVisible && t.setVisible(null !== e)
                                        },
                                        "stop-color": function(t, e) {
                                            t.setColor && t.setColor(e)
                                        },
                                        "stop-opacity": function(t, e) {
                                            t._color && t._color.setAlpha(parseFloat(e))
                                        },
                                        offset: function(t, e) {
                                            var i;
                                            t.setOffset && (i = e.match(/(.*)%$/),
                                                t.setOffset(i ? i[1] / 100 : parseFloat(e)))
                                        },
                                        viewBox: function(t, e, i, n, r) {
                                            var s, a, o = new w(Lt(e, "array"));
                                            e = Et(n, null, null, !0);
                                            t instanceof P ? (a = e ? e.divide(o.getSize()) : 1,
                                                s = (new M).scale(a).translate(o.getPoint().negate()),
                                                a = t) : t instanceof N && (e && o.setSize(e),
                                                a = t._item),
                                            a && ("visible" !== Rt(n, "overflow", r) && ((o = new L.Rectangle(o)).setClipMask(!0),
                                                a.addChild(o)),
                                            s && a.transform(s))
                                        }
                                    }),
                                    T.inject({
                                        importSVG: function(t, e) {
                                            return Vt(t, e, this)
                                        }
                                    }),
                                    A.inject({
                                        importSVG: function(t, e) {
                                            return this.activate(),
                                                Vt(t, e, this)
                                        }
                                    }),
                                    u.exports.PaperScript = function() {
                                        var t, e, c = this, p = c.acorn;
                                        if (!p)
                                            try {
                                                p = i(1234)
                                            } catch (t) {}
                                        function f(t, e) {
                                            return (c.acorn || p).parse(t, e)
                                        }
                                        p || (p = t = v = {},
                                            e = function(t) {
                                                "use strict";
                                                var e, i, n, r;
                                                t.version = "0.5.0",
                                                    t.parse = function(t, r) {
                                                        return i = String(t),
                                                            n = i.length,
                                                            a(r),
                                                            qt(),
                                                            function(t) {
                                                                v = _ = o,
                                                                e.locations && (y = new Ht),
                                                                    x = w = null,
                                                                    b = [],
                                                                    Yt();
                                                                var i = t || he()
                                                                    , n = !0;
                                                                for (t || (i.body = []); d !== I; ) {
                                                                    var r = xe();
                                                                    i.body.push(r),
                                                                    n && ce(r) && se(!0),
                                                                        n = !1
                                                                }
                                                                return ue(i, "Program")
                                                            }(e.program)
                                                    }
                                                ;
                                                var s = t.defaultOptions = {
                                                    ecmaVersion: 5,
                                                    strictSemicolons: !1,
                                                    allowTrailingCommas: !0,
                                                    forbidReserved: !1,
                                                    allowReturnOutsideFunction: !1,
                                                    locations: !1,
                                                    onComment: null,
                                                    ranges: !1,
                                                    program: null,
                                                    sourceFile: null,
                                                    directSourceFile: null
                                                };
                                                function a(t) {
                                                    for (var i in e = t || {},
                                                        s)
                                                        Object.prototype.hasOwnProperty.call(e, i) || (e[i] = s[i]);
                                                    r = e.sourceFile || null
                                                }
                                                var o, h, l, u, c, d, p, f, m, g, v, _, y, x, b, w, S = t.getLineInfo = function(t, e) {
                                                        for (var i = 1, n = 0; ; ) {
                                                            Gt.lastIndex = n;
                                                            var r = Gt.exec(t);
                                                            if (!(r && r.index < e))
                                                                break;
                                                            ++i,
                                                                n = r.index + r[0].length
                                                        }
                                                        return {
                                                            line: i,
                                                            column: e - n
                                                        }
                                                    }
                                                ;
                                                function M(t, e) {
                                                    var n = S(i, t);
                                                    throw e += " (" + n.line + ":" + n.column + ")",
                                                        (e = new SyntaxError(e)).pos = t,
                                                        e.loc = n,
                                                        e.raisedAt = o,
                                                        e
                                                }
                                                t.tokenize = function(t, r) {
                                                    i = String(t),
                                                        n = i.length,
                                                        a(r),
                                                        qt();
                                                    var s = {};
                                                    function v(t) {
                                                        return _ = l,
                                                            Yt(t),
                                                            s.start = h,
                                                            s.end = l,
                                                            s.startLoc = u,
                                                            s.endLoc = c,
                                                            s.type = d,
                                                            s.value = p,
                                                            s
                                                    }
                                                    return v.jumpTo = function(t, n) {
                                                        var r;
                                                        if (o = t,
                                                            e.locations)
                                                            for (m = 1,
                                                                     g = Gt.lastIndex = 0; (r = Gt.exec(i)) && r.index < t; )
                                                                ++m,
                                                                    g = r.index + r[0].length;
                                                        f = n,
                                                            Jt()
                                                    }
                                                        ,
                                                        v
                                                }
                                                ;
                                                var C, A = [], T = {
                                                    type: "num"
                                                }, P = {
                                                    type: "regexp"
                                                }, E = {
                                                    type: "string"
                                                }, L = {
                                                    type: "name"
                                                }, I = {
                                                    type: "eof"
                                                }, k = {
                                                    keyword: "break"
                                                }, N = {
                                                    keyword: "case",
                                                    beforeExpr: !0
                                                }, O = {
                                                    keyword: "catch"
                                                }, D = {
                                                    keyword: "continue"
                                                }, R = {
                                                    keyword: "debugger"
                                                }, z = {
                                                    keyword: "default"
                                                }, F = {
                                                    keyword: "do",
                                                    isLoop: !0
                                                }, B = {
                                                    keyword: "else",
                                                    beforeExpr: !0
                                                }, V = {
                                                    keyword: "finally"
                                                }, U = {
                                                    keyword: "for",
                                                    isLoop: !0
                                                }, G = {
                                                    keyword: "function"
                                                }, W = {
                                                    keyword: "if"
                                                }, j = {
                                                    keyword: "return",
                                                    beforeExpr: !0
                                                }, H = {
                                                    keyword: "switch"
                                                }, q = {
                                                    keyword: "throw",
                                                    beforeExpr: !0
                                                }, X = {
                                                    keyword: "try"
                                                }, Z = {
                                                    keyword: "var"
                                                }, J = {
                                                    keyword: "while",
                                                    isLoop: !0
                                                }, Y = {
                                                    keyword: "with"
                                                }, Q = {
                                                    keyword: "new",
                                                    beforeExpr: !0
                                                }, K = {
                                                    keyword: "this"
                                                }, $ = {
                                                    keyword: "null",
                                                    atomValue: null
                                                }, tt = {
                                                    keyword: "true",
                                                    atomValue: !0
                                                }, et = {
                                                    keyword: "false",
                                                    atomValue: !1
                                                }, it = {
                                                    keyword: "in",
                                                    binop: 7,
                                                    beforeExpr: !0
                                                }, nt = {
                                                    break: k,
                                                    case: N,
                                                    catch: O,
                                                    continue: D,
                                                    debugger: R,
                                                    default: z,
                                                    do: F,
                                                    else: B,
                                                    finally: V,
                                                    for: U,
                                                    function: G,
                                                    if: W,
                                                    return: j,
                                                    switch: H,
                                                    throw: q,
                                                    try: X,
                                                    var: Z,
                                                    while: J,
                                                    with: Y,
                                                    null: $,
                                                    true: tt,
                                                    false: et,
                                                    new: Q,
                                                    in: it,
                                                    instanceof: {
                                                        keyword: "instanceof",
                                                        binop: 7,
                                                        beforeExpr: !0
                                                    },
                                                    this: K,
                                                    typeof: {
                                                        keyword: "typeof",
                                                        prefix: !0,
                                                        beforeExpr: !0
                                                    },
                                                    void: {
                                                        keyword: "void",
                                                        prefix: !0,
                                                        beforeExpr: !0
                                                    },
                                                    delete: {
                                                        keyword: "delete",
                                                        prefix: !0,
                                                        beforeExpr: !0
                                                    }
                                                }, rt = {
                                                    type: "[",
                                                    beforeExpr: !0
                                                }, st = {
                                                    type: "]"
                                                }, at = {
                                                    type: "{",
                                                    beforeExpr: !0
                                                }, ot = {
                                                    type: "}"
                                                }, ht = {
                                                    type: "(",
                                                    beforeExpr: !0
                                                }, lt = {
                                                    type: ")"
                                                }, ut = {
                                                    type: ",",
                                                    beforeExpr: !0
                                                }, ct = {
                                                    type: ";",
                                                    beforeExpr: !0
                                                }, dt = {
                                                    type: ":",
                                                    beforeExpr: !0
                                                }, pt = {
                                                    type: "."
                                                }, ft = {
                                                    type: "?",
                                                    beforeExpr: !0
                                                }, mt = {
                                                    binop: 10,
                                                    beforeExpr: !0
                                                }, gt = {
                                                    isAssign: !0,
                                                    beforeExpr: !0
                                                }, vt = {
                                                    isAssign: !0,
                                                    beforeExpr: !0
                                                }, _t = {
                                                    postfix: !0,
                                                    prefix: !0,
                                                    isUpdate: !0
                                                }, yt = {
                                                    prefix: !0,
                                                    beforeExpr: !0
                                                }, xt = {
                                                    binop: 1,
                                                    beforeExpr: !0
                                                }, bt = {
                                                    binop: 2,
                                                    beforeExpr: !0
                                                }, wt = {
                                                    binop: 3,
                                                    beforeExpr: !0
                                                }, St = {
                                                    binop: 4,
                                                    beforeExpr: !0
                                                }, Mt = {
                                                    binop: 5,
                                                    beforeExpr: !0
                                                }, Ct = {
                                                    binop: 6,
                                                    beforeExpr: !0
                                                }, At = {
                                                    binop: 7,
                                                    beforeExpr: !0
                                                }, Tt = {
                                                    binop: 8,
                                                    beforeExpr: !0
                                                }, Pt = {
                                                    binop: 9,
                                                    prefix: !0,
                                                    beforeExpr: !0
                                                }, Et = {
                                                    binop: 10,
                                                    beforeExpr: !0
                                                };
                                                for (C in t.tokTypes = {
                                                    bracketL: rt,
                                                    bracketR: st,
                                                    braceL: at,
                                                    braceR: ot,
                                                    parenL: ht,
                                                    parenR: lt,
                                                    comma: ut,
                                                    semi: ct,
                                                    colon: dt,
                                                    dot: pt,
                                                    question: ft,
                                                    slash: mt,
                                                    eq: gt,
                                                    name: L,
                                                    eof: I,
                                                    num: T,
                                                    regexp: P,
                                                    string: E
                                                },
                                                    nt)
                                                    t.tokTypes["_" + C] = nt[C];
                                                function Lt(t) {
                                                    t = t.split(" ");
                                                    var e = ""
                                                        , i = [];
                                                    t: for (var n = 0; n < t.length; ++n) {
                                                        for (var r = 0; r < i.length; ++r)
                                                            if (i[r][0].length == t[n].length) {
                                                                i[r].push(t[n]);
                                                                continue t
                                                            }
                                                        i.push([t[n]])
                                                    }
                                                    function s(t) {
                                                        if (1 == t.length)
                                                            return e += "return str === " + JSON.stringify(t[0]) + ";";
                                                        e += "switch(str){";
                                                        for (var i = 0; i < t.length; ++i)
                                                            e += "case " + JSON.stringify(t[i]) + ":";
                                                        e += "return true}return false;"
                                                    }
                                                    if (3 < i.length) {
                                                        for (i.sort((function(t, e) {
                                                                return e.length - t.length
                                                            }
                                                        )),
                                                                 e += "switch(str.length){",
                                                                 n = 0; n < i.length; ++n) {
                                                            var a = i[n];
                                                            e += "case " + a[0].length + ":",
                                                                s(a)
                                                        }
                                                        e += "}"
                                                    } else
                                                        s(t);
                                                    return new Function("str",e)
                                                }
                                                var It, kt = Lt("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile"), Nt = Lt("class enum extends super const export import"), Ot = Lt("implements interface let package private protected public static yield"), Dt = Lt("eval arguments"), Rt = Lt("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this"), zt = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/, Ft = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ", Bt = new RegExp("[" + Ft + "]"), Vt = new RegExp("[" + Ft + "̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿]"), Ut = /[\n\r\u2028\u2029]/, Gt = /\r\n|[\n\r\u2028\u2029]/g, Wt = t.isIdentifierStart = function(t) {
                                                        return t < 65 ? 36 === t : t < 91 || (t < 97 ? 95 === t : t < 123 || 170 <= t && Bt.test(String.fromCharCode(t)))
                                                    }
                                                    , jt = t.isIdentifierChar = function(t) {
                                                        return t < 48 ? 36 === t : t < 58 || !(t < 65) && (t < 91 || (t < 97 ? 95 === t : t < 123 || 170 <= t && Vt.test(String.fromCharCode(t))))
                                                    }
                                                ;
                                                function Ht() {
                                                    this.line = m,
                                                        this.column = o - g
                                                }
                                                function qt() {
                                                    m = 1,
                                                        o = g = 0,
                                                        f = !0,
                                                        Jt()
                                                }
                                                function Xt(t, i) {
                                                    l = o,
                                                    e.locations && (c = new Ht),
                                                        d = t,
                                                        Jt(),
                                                        p = i,
                                                        f = t.beforeExpr
                                                }
                                                function Zt() {
                                                    for (var t = o, r = e.onComment && e.locations && new Ht, s = i.charCodeAt(o += 2); o < n && 10 !== s && 13 !== s && 8232 !== s && 8233 !== s; )
                                                        ++o,
                                                            s = i.charCodeAt(o);
                                                    e.onComment && e.onComment(!1, i.slice(t + 2, o), t, o, r, e.locations && new Ht)
                                                }
                                                function Jt() {
                                                    for (; o < n; ) {
                                                        var t, r = i.charCodeAt(o);
                                                        if (32 === r)
                                                            ++o;
                                                        else if (13 === r)
                                                            ++o,
                                                            10 === (t = i.charCodeAt(o)) && ++o,
                                                            e.locations && (++m,
                                                                g = o);
                                                        else if (10 === r || 8232 === r || 8233 === r)
                                                            ++o,
                                                            e.locations && (++m,
                                                                g = o);
                                                        else if (8 < r && r < 14)
                                                            ++o;
                                                        else if (47 === r)
                                                            if (42 === (t = i.charCodeAt(o + 1)))
                                                                !function() {
                                                                    var t, n = e.onComment && e.locations && new Ht, r = o, s = i.indexOf("*/", o += 2);
                                                                    if (-1 === s && M(o - 2, "Unterminated comment"),
                                                                        o = s + 2,
                                                                        e.locations)
                                                                        for (Gt.lastIndex = r; (t = Gt.exec(i)) && t.index < o; )
                                                                            ++m,
                                                                                g = t.index + t[0].length;
                                                                    e.onComment && e.onComment(!0, i.slice(r + 2, s), r, o, n, e.locations && new Ht)
                                                                }();
                                                            else {
                                                                if (47 !== t)
                                                                    break;
                                                                Zt()
                                                            }
                                                        else if (160 === r)
                                                            ++o;
                                                        else {
                                                            if (!(5760 <= r && zt.test(String.fromCharCode(r))))
                                                                break;
                                                            ++o
                                                        }
                                                    }
                                                }
                                                function Yt(t) {
                                                    if (t ? o = h + 1 : h = o,
                                                    e.locations && (u = new Ht),
                                                        t)
                                                        return Kt();
                                                    if (n <= o)
                                                        return Xt(I);
                                                    var r = i.charCodeAt(o);
                                                    if (Wt(r) || 92 === r)
                                                        return ne();
                                                    if (t = function(t) {
                                                        switch (t) {
                                                            case 46:
                                                                return 48 <= (c = i.charCodeAt(o + 1)) && c <= 57 ? te(!0) : (++o,
                                                                    Xt(pt));
                                                            case 40:
                                                                return ++o,
                                                                    Xt(ht);
                                                            case 41:
                                                                return ++o,
                                                                    Xt(lt);
                                                            case 59:
                                                                return ++o,
                                                                    Xt(ct);
                                                            case 44:
                                                                return ++o,
                                                                    Xt(ut);
                                                            case 91:
                                                                return ++o,
                                                                    Xt(rt);
                                                            case 93:
                                                                return ++o,
                                                                    Xt(st);
                                                            case 123:
                                                                return ++o,
                                                                    Xt(at);
                                                            case 125:
                                                                return ++o,
                                                                    Xt(ot);
                                                            case 58:
                                                                return ++o,
                                                                    Xt(dt);
                                                            case 63:
                                                                return ++o,
                                                                    Xt(ft);
                                                            case 48:
                                                                var r = i.charCodeAt(o + 1);
                                                                if (120 === r || 88 === r)
                                                                    return function() {
                                                                        o += 2;
                                                                        var t = $t(16);
                                                                        return null == t && M(h + 2, "Expected hexadecimal number"),
                                                                        Wt(i.charCodeAt(o)) && M(o, "Identifier directly after number"),
                                                                            Xt(T, t)
                                                                    }();
                                                            case 49:
                                                            case 50:
                                                            case 51:
                                                            case 52:
                                                            case 53:
                                                            case 54:
                                                            case 55:
                                                            case 56:
                                                            case 57:
                                                                return te(!1);
                                                            case 34:
                                                            case 39:
                                                                return function(t) {
                                                                    o++;
                                                                    for (var r = ""; ; ) {
                                                                        n <= o && M(h, "Unterminated string constant");
                                                                        var s = i.charCodeAt(o);
                                                                        if (s === t)
                                                                            return ++o,
                                                                                Xt(E, r);
                                                                        if (92 === s) {
                                                                            s = i.charCodeAt(++o);
                                                                            var a = /^[0-7]+/.exec(i.slice(o, o + 3));
                                                                            for (a = a && a[0]; a && 255 < parseInt(a, 8); )
                                                                                a = a.slice(0, -1);
                                                                            if (++o,
                                                                                a = "0" === a ? null : a)
                                                                                w && M(o - 2, "Octal literal in strict mode"),
                                                                                    r += String.fromCharCode(parseInt(a, 8)),
                                                                                    o += a.length - 1;
                                                                            else
                                                                                switch (s) {
                                                                                    case 110:
                                                                                        r += "\n";
                                                                                        break;
                                                                                    case 114:
                                                                                        r += "\r";
                                                                                        break;
                                                                                    case 120:
                                                                                        r += String.fromCharCode(ee(2));
                                                                                        break;
                                                                                    case 117:
                                                                                        r += String.fromCharCode(ee(4));
                                                                                        break;
                                                                                    case 85:
                                                                                        r += String.fromCharCode(ee(8));
                                                                                        break;
                                                                                    case 116:
                                                                                        r += "\t";
                                                                                        break;
                                                                                    case 98:
                                                                                        r += "\b";
                                                                                        break;
                                                                                    case 118:
                                                                                        r += "\v";
                                                                                        break;
                                                                                    case 102:
                                                                                        r += "\f";
                                                                                        break;
                                                                                    case 48:
                                                                                        r += "\0";
                                                                                        break;
                                                                                    case 13:
                                                                                        10 === i.charCodeAt(o) && ++o;
                                                                                    case 10:
                                                                                        e.locations && (g = o,
                                                                                            ++m);
                                                                                        break;
                                                                                    default:
                                                                                        r += String.fromCharCode(s)
                                                                                }
                                                                        } else
                                                                            13 !== s && 10 !== s && 8232 !== s && 8233 !== s || M(h, "Unterminated string constant"),
                                                                                r += String.fromCharCode(s),
                                                                                ++o
                                                                    }
                                                                }(t);
                                                            case 47:
                                                                return u = i.charCodeAt(o + 1),
                                                                    f ? (++o,
                                                                        Kt()) : 61 === u ? Qt(vt, 2) : Qt(mt, 1);
                                                            case 37:
                                                            case 42:
                                                                return 61 === i.charCodeAt(o + 1) ? Qt(vt, 2) : Qt(Et, 1);
                                                            case 124:
                                                            case 38:
                                                                return r = t,
                                                                    (u = i.charCodeAt(o + 1)) === r ? Qt(124 === r ? xt : bt, 2) : 61 === u ? Qt(vt, 2) : Qt(124 === r ? wt : Mt, 1);
                                                            case 94:
                                                                return 61 === i.charCodeAt(o + 1) ? Qt(vt, 2) : Qt(St, 1);
                                                            case 43:
                                                            case 45:
                                                                return a = t,
                                                                    (l = i.charCodeAt(o + 1)) === a ? 45 == l && 62 == i.charCodeAt(o + 2) && Ut.test(i.slice(_, o)) ? (o += 3,
                                                                        Zt(),
                                                                        Jt(),
                                                                        Yt()) : Qt(_t, 2) : 61 === l ? Qt(vt, 2) : Qt(Pt, 1);
                                                            case 60:
                                                            case 62:
                                                                return a = t,
                                                                    s = 1,
                                                                    (l = i.charCodeAt(o + 1)) === a ? (s = 62 === a && 62 === i.charCodeAt(o + 2) ? 3 : 2,
                                                                        61 === i.charCodeAt(o + s) ? Qt(vt, s + 1) : Qt(Tt, s)) : 33 == l && 60 == a && 45 == i.charCodeAt(o + 2) && 45 == i.charCodeAt(o + 3) ? (o += 4,
                                                                        Zt(),
                                                                        Jt(),
                                                                        Yt()) : (61 === l && (s = 61 === i.charCodeAt(o + 2) ? 3 : 2),
                                                                        Qt(At, s));
                                                            case 61:
                                                            case 33:
                                                                return s = t,
                                                                    61 === i.charCodeAt(o + 1) ? Qt(Ct, 61 === i.charCodeAt(o + 2) ? 3 : 2) : Qt(61 === s ? gt : yt, 1);
                                                            case 126:
                                                                return Qt(yt, 1)
                                                        }
                                                        var s, a, l, u, c;
                                                        return !1
                                                    }(r),
                                                    !1 === t) {
                                                        if ("\\" === (r = String.fromCharCode(r)) || Bt.test(r))
                                                            return ne();
                                                        M(o, "Unexpected character '" + r + "'")
                                                    }
                                                    return t
                                                }
                                                function Qt(t, e) {
                                                    var n = i.slice(o, o + e);
                                                    o += e,
                                                        Xt(t, n)
                                                }
                                                function Kt() {
                                                    for (var t, e, r = o; ; ) {
                                                        n <= o && M(r, "Unterminated regular expression");
                                                        var s = i.charAt(o);
                                                        if (Ut.test(s) && M(r, "Unterminated regular expression"),
                                                            t)
                                                            t = !1;
                                                        else {
                                                            if ("[" === s)
                                                                e = !0;
                                                            else if ("]" === s && e)
                                                                e = !1;
                                                            else if ("/" === s && !e)
                                                                break;
                                                            t = "\\" === s
                                                        }
                                                        ++o
                                                    }
                                                    var a = i.slice(r, o);
                                                    ++o;
                                                    var h = ie();
                                                    h && !/^[gmsiy]*$/.test(h) && M(r, "Invalid regexp flag");
                                                    try {
                                                        var l = new RegExp(a,h)
                                                    } catch (t) {
                                                        t instanceof SyntaxError && M(r, t.message),
                                                            M(t)
                                                    }
                                                    return Xt(P, l)
                                                }
                                                function $t(t, e) {
                                                    for (var n = o, r = 0, s = 0, a = null == e ? 1 / 0 : e; s < a; ++s) {
                                                        var h;
                                                        if (t <= (h = 97 <= (h = i.charCodeAt(o)) ? h - 97 + 10 : 65 <= h ? h - 65 + 10 : 48 <= h && h <= 57 ? h - 48 : 1 / 0))
                                                            break;
                                                        ++o,
                                                            r = r * t + h
                                                    }
                                                    return o === n || null != e && o - n !== e ? null : r
                                                }
                                                function te(t) {
                                                    var e = o
                                                        , n = !1
                                                        , r = 48 === i.charCodeAt(o);
                                                    t || null !== $t(10) || M(e, "Invalid number"),
                                                    46 === i.charCodeAt(o) && (++o,
                                                        $t(10),
                                                        n = !0),
                                                    69 !== (t = i.charCodeAt(o)) && 101 !== t || (43 !== (t = i.charCodeAt(++o)) && 45 !== t || ++o,
                                                    null === $t(10) && M(e, "Invalid number"),
                                                        n = !0),
                                                    Wt(i.charCodeAt(o)) && M(o, "Identifier directly after number");
                                                    var s;
                                                    t = i.slice(e, o);
                                                    return n ? s = parseFloat(t) : r && 1 !== t.length ? /[89]/.test(t) || w ? M(e, "Invalid number") : s = parseInt(t, 8) : s = parseInt(t, 10),
                                                        Xt(T, s)
                                                }
                                                function ee(t) {
                                                    return null === (t = $t(16, t)) && M(h, "Bad character escape sequence"),
                                                        t
                                                }
                                                function ie() {
                                                    for (var t, e = !(It = !1), n = o; ; ) {
                                                        var r = i.charCodeAt(o);
                                                        if (jt(r))
                                                            It && (t += i.charAt(o)),
                                                                ++o;
                                                        else {
                                                            if (92 !== r)
                                                                break;
                                                            It || (t = i.slice(n, o)),
                                                                It = !0,
                                                            117 != i.charCodeAt(++o) && M(o, "Expecting Unicode escape sequence \\uXXXX"),
                                                                ++o;
                                                            var s = ee(4);
                                                            (r = String.fromCharCode(s)) || M(o - 1, "Invalid Unicode escape"),
                                                            (e ? Wt : jt)(s) || M(o - 4, "Invalid Unicode escape"),
                                                                t += r
                                                        }
                                                        e = !1
                                                    }
                                                    return It ? t : i.slice(n, o)
                                                }
                                                function ne() {
                                                    var t = ie()
                                                        , e = L;
                                                    return Xt(e = !It && Rt(t) ? nt[t] : e, t)
                                                }
                                                function re() {
                                                    v = h,
                                                        _ = l,
                                                        y = c,
                                                        Yt()
                                                }
                                                function se(t) {
                                                    if (w = t,
                                                        o = h,
                                                        e.locations)
                                                        for (; o < g; )
                                                            g = i.lastIndexOf("\n", g - 2) + 1,
                                                                --m;
                                                    Jt(),
                                                        Yt()
                                                }
                                                function ae() {
                                                    this.type = null,
                                                        this.start = h,
                                                        this.end = null
                                                }
                                                function oe() {
                                                    this.start = u,
                                                    (this.end = null) !== r && (this.source = r)
                                                }
                                                function he() {
                                                    var t = new ae;
                                                    return e.locations && (t.loc = new oe),
                                                    e.directSourceFile && (t.sourceFile = e.directSourceFile),
                                                    e.ranges && (t.range = [h, 0]),
                                                        t
                                                }
                                                function le(t) {
                                                    var i = new ae;
                                                    return i.start = t.start,
                                                    e.locations && (i.loc = new oe,
                                                        i.loc.start = t.loc.start),
                                                    e.ranges && (i.range = [t.range[0], 0]),
                                                        i
                                                }
                                                function ue(t, i) {
                                                    return t.type = i,
                                                        t.end = _,
                                                    e.locations && (t.loc.end = y),
                                                    e.ranges && (t.range[1] = _),
                                                        t
                                                }
                                                function ce(t) {
                                                    return 5 <= e.ecmaVersion && "ExpressionStatement" === t.type && "Literal" === t.expression.type && "use strict" === t.expression.value
                                                }
                                                function de(t) {
                                                    return d === t && (re(),
                                                        1)
                                                }
                                                function pe() {
                                                    return !e.strictSemicolons && (d === I || d === ot || Ut.test(i.slice(_, h)))
                                                }
                                                function fe() {
                                                    de(ct) || pe() || ge()
                                                }
                                                function me(t) {
                                                    (d === t ? re : ge)()
                                                }
                                                function ge() {
                                                    M(h, "Unexpected token")
                                                }
                                                function ve(t) {
                                                    "Identifier" !== t.type && "MemberExpression" !== t.type && M(t.start, "Assigning to rvalue"),
                                                    w && "Identifier" === t.type && Dt(t.name) && M(t.start, "Assigning to " + t.name + " in strict mode")
                                                }
                                                var _e = {
                                                    kind: "loop"
                                                }
                                                    , ye = {
                                                    kind: "switch"
                                                };
                                                function xe() {
                                                    (d === mt || d === vt && "/=" == p) && Yt(!0);
                                                    var t, n, r, s = d, a = he();
                                                    switch (s) {
                                                        case k:
                                                        case D:
                                                            re();
                                                            var o = s === k;
                                                            de(ct) || pe() ? a.label = null : d !== L ? ge() : (a.label = Oe(),
                                                                fe());
                                                            for (var l = 0; l < b.length; ++l) {
                                                                var u = b[l];
                                                                if (null == a.label || u.name === a.label.name) {
                                                                    if (null != u.kind && (o || "loop" === u.kind))
                                                                        break;
                                                                    if (a.label && o)
                                                                        break
                                                                }
                                                            }
                                                            return l === b.length && M(a.start, "Unsyntactic " + s.keyword),
                                                                ue(a, o ? "BreakStatement" : "ContinueStatement");
                                                        case R:
                                                            return re(),
                                                                fe(),
                                                                ue(a, "DebuggerStatement");
                                                        case F:
                                                            return re(),
                                                                b.push(_e),
                                                                a.body = xe(),
                                                                b.pop(),
                                                                me(J),
                                                                a.test = be(),
                                                                fe(),
                                                                ue(a, "DoWhileStatement");
                                                        case U:
                                                            if (re(),
                                                                b.push(_e),
                                                                me(ht),
                                                            d === ct)
                                                                return Se(a, null);
                                                            if (d === Z) {
                                                                var c = he();
                                                                return re(),
                                                                    Ce(c, !0),
                                                                    ue(c, "VariableDeclaration"),
                                                                    1 === c.declarations.length && de(it) ? Me(a, c) : Se(a, c)
                                                            }
                                                            return c = Ae(!1, !0),
                                                                de(it) ? (ve(c),
                                                                    Me(a, c)) : Se(a, c);
                                                        case G:
                                                            return re(),
                                                                ke(a, !0);
                                                        case W:
                                                            return re(),
                                                                a.test = be(),
                                                                a.consequent = xe(),
                                                                a.alternate = de(B) ? xe() : null,
                                                                ue(a, "IfStatement");
                                                        case j:
                                                            return x || e.allowReturnOutsideFunction || M(h, "'return' outside of function"),
                                                                re(),
                                                                de(ct) || pe() ? a.argument = null : (a.argument = Ae(),
                                                                    fe()),
                                                                ue(a, "ReturnStatement");
                                                        case H:
                                                            for (re(),
                                                                     a.discriminant = be(),
                                                                     a.cases = [],
                                                                     me(at),
                                                                     b.push(ye); d != ot; )
                                                                d === N || d === z ? (r = d === N,
                                                                t && ue(t, "SwitchCase"),
                                                                    a.cases.push(t = he()),
                                                                    t.consequent = [],
                                                                    re(),
                                                                    r ? t.test = Ae() : (n && M(v, "Multiple default clauses"),
                                                                        n = !0,
                                                                        t.test = null),
                                                                    me(dt)) : (t || ge(),
                                                                    t.consequent.push(xe()));
                                                            return t && ue(t, "SwitchCase"),
                                                                re(),
                                                                b.pop(),
                                                                ue(a, "SwitchStatement");
                                                        case q:
                                                            return re(),
                                                            Ut.test(i.slice(_, h)) && M(_, "Illegal newline after throw"),
                                                                a.argument = Ae(),
                                                                fe(),
                                                                ue(a, "ThrowStatement");
                                                        case X:
                                                            return re(),
                                                                a.block = we(),
                                                                a.handler = null,
                                                            d === O && (g = he(),
                                                                re(),
                                                                me(ht),
                                                                g.param = Oe(),
                                                            w && Dt(g.param.name) && M(g.param.start, "Binding " + g.param.name + " in strict mode"),
                                                                me(lt),
                                                                g.guard = null,
                                                                g.body = we(),
                                                                a.handler = ue(g, "CatchClause")),
                                                                a.guardedHandlers = A,
                                                                a.finalizer = de(V) ? we() : null,
                                                            a.handler || a.finalizer || M(a.start, "Missing catch or finally clause"),
                                                                ue(a, "TryStatement");
                                                        case Z:
                                                            return re(),
                                                                Ce(a),
                                                                fe(),
                                                                ue(a, "VariableDeclaration");
                                                        case J:
                                                            return re(),
                                                                a.test = be(),
                                                                b.push(_e),
                                                                a.body = xe(),
                                                                b.pop(),
                                                                ue(a, "WhileStatement");
                                                        case Y:
                                                            return w && M(h, "'with' in strict mode"),
                                                                re(),
                                                                a.object = be(),
                                                                a.body = xe(),
                                                                ue(a, "WithStatement");
                                                        case at:
                                                            return we();
                                                        case ct:
                                                            return re(),
                                                                ue(a, "EmptyStatement");
                                                        default:
                                                            var f = p
                                                                , m = Ae();
                                                            if (s === L && "Identifier" === m.type && de(dt)) {
                                                                for (l = 0; l < b.length; ++l)
                                                                    b[l].name === f && M(m.start, "Label '" + f + "' is already declared");
                                                                var g = d.isLoop ? "loop" : d === H ? "switch" : null;
                                                                return b.push({
                                                                    name: f,
                                                                    kind: g
                                                                }),
                                                                    a.body = xe(),
                                                                    b.pop(),
                                                                    a.label = m,
                                                                    ue(a, "LabeledStatement")
                                                            }
                                                            return a.expression = m,
                                                                fe(),
                                                                ue(a, "ExpressionStatement")
                                                    }
                                                }
                                                function be() {
                                                    me(ht);
                                                    var t = Ae();
                                                    return me(lt),
                                                        t
                                                }
                                                function we(t) {
                                                    var e, i = he(), n = !0, r = !1;
                                                    for (i.body = [],
                                                             me(at); !de(ot); ) {
                                                        var s = xe();
                                                        i.body.push(s),
                                                        n && t && ce(s) && (e = r,
                                                            se(r = !0)),
                                                            n = !1
                                                    }
                                                    return r && !e && se(!1),
                                                        ue(i, "BlockStatement")
                                                }
                                                function Se(t, e) {
                                                    return t.init = e,
                                                        me(ct),
                                                        t.test = d === ct ? null : Ae(),
                                                        me(ct),
                                                        t.update = d === lt ? null : Ae(),
                                                        me(lt),
                                                        t.body = xe(),
                                                        b.pop(),
                                                        ue(t, "ForStatement")
                                                }
                                                function Me(t, e) {
                                                    return t.left = e,
                                                        t.right = Ae(),
                                                        me(lt),
                                                        t.body = xe(),
                                                        b.pop(),
                                                        ue(t, "ForInStatement")
                                                }
                                                function Ce(t, e) {
                                                    for (t.declarations = [],
                                                             t.kind = "var"; ; ) {
                                                        var i = he();
                                                        if (i.id = Oe(),
                                                        w && Dt(i.id.name) && M(i.id.start, "Binding " + i.id.name + " in strict mode"),
                                                            i.init = de(gt) ? Ae(!0, e) : null,
                                                            t.declarations.push(ue(i, "VariableDeclarator")),
                                                            !de(ut))
                                                            break
                                                    }
                                                    return t
                                                }
                                                function Ae(t, e) {
                                                    var i = Te(e);
                                                    if (t || d !== ut)
                                                        return i;
                                                    var n = le(i);
                                                    for (n.expressions = [i]; de(ut); )
                                                        n.expressions.push(Te(e));
                                                    return ue(n, "SequenceExpression")
                                                }
                                                function Te(t) {
                                                    var e = function(t) {
                                                        var e = function(t) {
                                                            return function t(e, i, n) {
                                                                var r = d.binop;
                                                                if (null != r && (!n || d !== it) && i < r) {
                                                                    var s = le(e);
                                                                    s.left = e,
                                                                        s.operator = p;
                                                                    var a = d;
                                                                    return re(),
                                                                        s.right = t(Pe(), r, n),
                                                                        t(a = ue(s, a === xt || a === bt ? "LogicalExpression" : "BinaryExpression"), i, n)
                                                                }
                                                                return e
                                                            }(Pe(), -1, t)
                                                        }(t);
                                                        if (de(ft)) {
                                                            var i = le(e);
                                                            return i.test = e,
                                                                i.consequent = Ae(!0),
                                                                me(dt),
                                                                i.alternate = Ae(!0, t),
                                                                ue(i, "ConditionalExpression")
                                                        }
                                                        return e
                                                    }(t);
                                                    if (d.isAssign) {
                                                        var i = le(e);
                                                        return i.operator = p,
                                                            i.left = e,
                                                            re(),
                                                            i.right = Te(t),
                                                            ve(e),
                                                            ue(i, "AssignmentExpression")
                                                    }
                                                    return e
                                                }
                                                function Pe() {
                                                    if (d.prefix) {
                                                        var t = he()
                                                            , e = d.isUpdate;
                                                        return t.operator = p,
                                                            t.prefix = !0,
                                                            f = !0,
                                                            re(),
                                                            t.argument = Pe(),
                                                            e ? ve(t.argument) : w && "delete" === t.operator && "Identifier" === t.argument.type && M(t.start, "Deleting local variable in strict mode"),
                                                            ue(t, e ? "UpdateExpression" : "UnaryExpression")
                                                    }
                                                    for (var i = Ee(Le()); d.postfix && !pe(); )
                                                        (t = le(i)).operator = p,
                                                            t.prefix = !1,
                                                            ve(t.argument = i),
                                                            re(),
                                                            i = ue(t, "UpdateExpression");
                                                    return i
                                                }
                                                function Ee(t, e) {
                                                    var i;
                                                    return de(pt) ? ((i = le(t)).object = t,
                                                        i.property = Oe(!0),
                                                        i.computed = !1,
                                                        Ee(ue(i, "MemberExpression"), e)) : de(rt) ? ((i = le(t)).object = t,
                                                        i.property = Ae(),
                                                        i.computed = !0,
                                                        me(st),
                                                        Ee(ue(i, "MemberExpression"), e)) : e || !de(ht) ? t : ((i = le(t)).callee = t,
                                                        i.arguments = Ne(lt, !1),
                                                        Ee(ue(i, "CallExpression"), e))
                                                }
                                                function Le() {
                                                    switch (d) {
                                                        case K:
                                                            var t = he();
                                                            return re(),
                                                                ue(t, "ThisExpression");
                                                        case L:
                                                            return Oe();
                                                        case T:
                                                        case E:
                                                        case P:
                                                            return (t = he()).value = p,
                                                                t.raw = i.slice(h, l),
                                                                re(),
                                                                ue(t, "Literal");
                                                        case $:
                                                        case tt:
                                                        case et:
                                                            return (t = he()).value = d.atomValue,
                                                                t.raw = d.keyword,
                                                                re(),
                                                                ue(t, "Literal");
                                                        case ht:
                                                            var n = u
                                                                , r = h;
                                                            re();
                                                            var s = Ae();
                                                            return s.start = r,
                                                                s.end = l,
                                                            e.locations && (s.loc.start = n,
                                                                s.loc.end = c),
                                                            e.ranges && (s.range = [r, l]),
                                                                me(lt),
                                                                s;
                                                        case rt:
                                                            return t = he(),
                                                                re(),
                                                                t.elements = Ne(st, !0, !0),
                                                                ue(t, "ArrayExpression");
                                                        case at:
                                                            return function() {
                                                                var t = he()
                                                                    , i = !0
                                                                    , n = !1;
                                                                for (t.properties = [],
                                                                         re(); !de(ot); ) {
                                                                    if (i)
                                                                        i = !1;
                                                                    else if (me(ut),
                                                                    e.allowTrailingCommas && de(ot))
                                                                        break;
                                                                    var r, s = {
                                                                        key: Ie()
                                                                    }, a = !1;
                                                                    if (de(dt) ? (s.value = Ae(!0),
                                                                        r = s.kind = "init") : 5 <= e.ecmaVersion && "Identifier" === s.key.type && ("get" === s.key.name || "set" === s.key.name) ? (a = n = !0,
                                                                        r = s.kind = s.key.name,
                                                                        s.key = Ie(),
                                                                    d !== ht && ge(),
                                                                        s.value = ke(he(), !1)) : ge(),
                                                                    "Identifier" === s.key.type && (w || n))
                                                                        for (var o = 0; o < t.properties.length; ++o) {
                                                                            var h, l = t.properties[o];
                                                                            l.key.name !== s.key.name || (h = !((h = r == l.kind || a && "init" === l.kind || "init" === r && ("get" === l.kind || "set" === l.kind)) && !w && "init" === r && "init" === l.kind) && h) && M(s.key.start, "Redefinition of property")
                                                                        }
                                                                    t.properties.push(s)
                                                                }
                                                                return ue(t, "ObjectExpression")
                                                            }();
                                                        case G:
                                                            return t = he(),
                                                                re(),
                                                                ke(t, !1);
                                                        case Q:
                                                            return function() {
                                                                var t = he();
                                                                return re(),
                                                                    t.callee = Ee(Le(), !0),
                                                                    de(ht) ? t.arguments = Ne(lt, !1) : t.arguments = A,
                                                                    ue(t, "NewExpression")
                                                            }();
                                                        default:
                                                            ge()
                                                    }
                                                }
                                                function Ie() {
                                                    return d === T || d === E ? Le() : Oe(!0)
                                                }
                                                function ke(t, e) {
                                                    d === L ? t.id = Oe() : e ? ge() : t.id = null,
                                                        t.params = [];
                                                    var i = !0;
                                                    for (me(ht); !de(lt); )
                                                        i ? i = !1 : me(ut),
                                                            t.params.push(Oe());
                                                    var n = x
                                                        , r = b;
                                                    if (x = !0,
                                                        b = [],
                                                        t.body = we(!0),
                                                        x = n,
                                                        b = r,
                                                    w || t.body.body.length && ce(t.body.body[0]))
                                                        for (var s = t.id ? -1 : 0; s < t.params.length; ++s) {
                                                            var a = s < 0 ? t.id : t.params[s];
                                                            if ((Ot(a.name) || Dt(a.name)) && M(a.start, "Defining '" + a.name + "' in strict mode"),
                                                            0 <= s)
                                                                for (var o = 0; o < s; ++o)
                                                                    a.name === t.params[o].name && M(a.start, "Argument name clash in strict mode")
                                                        }
                                                    return ue(t, e ? "FunctionDeclaration" : "FunctionExpression")
                                                }
                                                function Ne(t, i, n) {
                                                    for (var r = [], s = !0; !de(t); ) {
                                                        if (s)
                                                            s = !1;
                                                        else if (me(ut),
                                                        i && e.allowTrailingCommas && de(t))
                                                            break;
                                                        n && d === ut ? r.push(null) : r.push(Ae(!0))
                                                    }
                                                    return r
                                                }
                                                function Oe(t) {
                                                    var n = he();
                                                    return t && "everywhere" == e.forbidReserved && (t = !1),
                                                        d === L ? (!t && (e.forbidReserved && (3 === e.ecmaVersion ? kt : Nt)(p) || w && Ot(p)) && -1 == i.slice(h, l).indexOf("\\") && M(h, "The keyword '" + p + "' is reserved"),
                                                            n.name = p) : t && d.keyword ? n.name = d.keyword : ge(),
                                                        f = !1,
                                                        re(),
                                                        ue(n, "Identifier")
                                                }
                                            }
                                            ,
                                            "object" == typeof t && "object" == typeof v ? e(t) : (n = [t],
                                            (s = "function" == typeof (r = e) ? r.apply(t, n) : r) === o || (v.exports = s)),
                                        p.version || (p = null));
                                        var m = {
                                            "+": "__add",
                                            "-": "__subtract",
                                            "*": "__multiply",
                                            "/": "__divide",
                                            "%": "__modulo",
                                            "==": "__equals",
                                            "!=": "__equals"
                                        }
                                            , g = {
                                            "-": "__negate",
                                            "+": "__self"
                                        }
                                            , v = u.each(["add", "subtract", "multiply", "divide", "modulo", "equals", "negate"], (function(t) {
                                                this["__" + t] = "#" + t
                                            }
                                        ), {
                                            __self: function() {
                                                return this
                                            }
                                        });
                                        function y(t, e, i) {
                                            var n = m[e];
                                            if (t && t[n])
                                                return n = t[n](i),
                                                    "!=" === e ? !n : n;
                                            switch (e) {
                                                case "+":
                                                    return t + i;
                                                case "-":
                                                    return t - i;
                                                case "*":
                                                    return t * i;
                                                case "/":
                                                    return t / i;
                                                case "%":
                                                    return t % i;
                                                case "==":
                                                    return t == i;
                                                case "!=":
                                                    return t != i
                                            }
                                        }
                                        function b(t, e) {
                                            var i = g[t];
                                            if (e && e[i])
                                                return e[i]();
                                            switch (t) {
                                                case "+":
                                                    return +e;
                                                case "-":
                                                    return -e
                                            }
                                        }
                                        function w(t, e) {
                                            if (!t)
                                                return "";
                                            var i = [];
                                            function n(t) {
                                                for (var e = 0, n = i.length; e < n; e++) {
                                                    var r = i[e];
                                                    if (r[0] >= t)
                                                        break;
                                                    t += r[1]
                                                }
                                                return t
                                            }
                                            function r(e) {
                                                return t.substring(n(e.range[0]), n(e.range[1]))
                                            }
                                            function s(e, r) {
                                                for (var s = n(e.range[0]), a = (e = n(e.range[1]),
                                                    0), o = i.length - 1; 0 <= o; o--)
                                                    if (s > i[o][0]) {
                                                        a = o + 1;
                                                        break
                                                    }
                                                i.splice(a, 0, [s, r.length - e + s]),
                                                    t = t.substring(0, s) + r + t.substring(e)
                                            }
                                            var o, u = (e = e || {}).url || "", c = e.sourceMaps, d = e.paperFeatures || {}, p = e.source || t, v = e.offset || 0, _ = Ut.agent, y = _.versionNumber, x = !1;
                                            e = /\r\n|\n|\r/gm;
                                            return c && (_.chrome && 30 <= y || _.webkit && 537.76 <= y || _.firefox && 23 <= y || _.node) && (_.node ? v -= 2 : h && u && !h.location.href.indexOf(u) && (v = (o = l.getElementsByTagName("html")[0].innerHTML).substr(0, o.indexOf(t) + 1).match(e).length + 1),
                                                (o = ["AA" + function(t) {
                                                    var e = "";
                                                    for (t = (Math.abs(t) << 1) + (t < 0 ? 1 : 0); t || !e; ) {
                                                        var i = 31 & t;
                                                        (t >>= 5) && (i |= 32),
                                                            e += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[i]
                                                    }
                                                    return e
                                                }((x = 0 < v && !(_.chrome && 36 <= y || _.safari && 600 <= y || _.firefox && 40 <= y || _.node)) ? 0 : v) + "A"]).length = (t.match(e) || []).length + 1 + (x ? v : 0),
                                                o = {
                                                    version: 3,
                                                    file: u,
                                                    names: [],
                                                    mappings: o.join(";AACA"),
                                                    sourceRoot: "",
                                                    sources: [u],
                                                    sourcesContent: [p]
                                                }),
                                            !1 === d.operatorOverloading && !1 === d.moduleExports || function e(i, a, o) {
                                                if (i) {
                                                    for (var h in i)
                                                        if ("range" !== h && "loc" !== h) {
                                                            var l = i[h];
                                                            if (Array.isArray(l))
                                                                for (var u = 0, c = l.length; u < c; u++)
                                                                    e(l[u], i, o);
                                                            else
                                                                l && "object" == typeof l && e(l, i, o)
                                                        }
                                                    !1 !== o.operatorOverloading && function(e, i) {
                                                        switch (e.type) {
                                                            case "UnaryExpression":
                                                                e.operator in g && "Literal" !== e.argument.type && (a = r(e.argument),
                                                                    s(e, '$__("' + e.operator + '", ' + a + ")"));
                                                                break;
                                                            case "BinaryExpression":
                                                                e.operator in m && "Literal" !== e.left.type && (o = r(e.left),
                                                                    h = r(e.right),
                                                                    u = e.left,
                                                                    c = e.right,
                                                                    u = t.substring(n(u.range[1]), n(c.range[0])),
                                                                    c = e.operator,
                                                                    s(e, "__$__(" + o + "," + u.replace(new RegExp("\\" + c), '"' + c + '"') + ", " + h + ")"));
                                                                break;
                                                            case "UpdateExpression":
                                                            case "AssignmentExpression":
                                                                var a, o, h, l;
                                                                "ForStatement" === (u = i && i.type) || "BinaryExpression" === u && /^[=!<>]/.test(i.operator) || "MemberExpression" === u && i.computed || ("UpdateExpression" === e.type ? (c = (a = r(e.argument)) + " = " + (l = "__$__(" + a + ', "' + e.operator[0] + '", 1)'),
                                                                    e.prefix ? c = "(" + c + ")" : "AssignmentExpression" !== u && "VariableDeclarator" !== u && "BinaryExpression" !== u || (c = a + "; " + (c = r(i.left || i.id) === a ? l : c)),
                                                                    s(e, c)) : /^.=$/.test(e.operator) && "Literal" !== e.left.type && (o = r(e.left),
                                                                    h = r(e.right),
                                                                    l = o + " = __$__(" + o + ', "' + e.operator[0] + '", ' + h + ")",
                                                                    s(e, /^\(.*\)$/.test(r(e)) ? "(" + l + ")" : l)))
                                                        }
                                                        var u, c
                                                    }(i, a),
                                                    !1 !== o.moduleExports && function(t) {
                                                        switch (t.type) {
                                                            case "ExportDefaultDeclaration":
                                                                s({
                                                                    range: [t.start, t.declaration.start]
                                                                }, "module.exports = ");
                                                                break;
                                                            case "ExportNamedDeclaration":
                                                                var e, i = t.declaration, n = t.specifiers;
                                                                i ? (e = i.declarations) && (e.forEach((function(t) {
                                                                        s(t, "module.exports." + r(t))
                                                                    }
                                                                )),
                                                                    s({
                                                                        range: [t.start, i.start + i.kind.length]
                                                                    }, "")) : !n || (n = n.map((function(t) {
                                                                        return "module.exports." + (t = r(t)) + " = " + t + "; "
                                                                    }
                                                                )).join("")) && s(t, n)
                                                        }
                                                    }(i)
                                                }
                                            }(f(t, {
                                                ranges: !0,
                                                preserveParens: !0,
                                                sourceType: "module"
                                            }), null, d),
                                            o && (x && (t = new Array(v + 1).join("\n") + t),
                                            /^(inline|both)$/.test(c) && (t += "\n//# sourceMappingURL=data:application/json;base64," + a.btoa(unescape(encodeURIComponent(JSON.stringify(o))))),
                                                t += "\n//# sourceURL=" + (u || "paperscript")),
                                                {
                                                    url: u,
                                                    source: p,
                                                    code: t,
                                                    map: o
                                                }
                                        }
                                        function S(t, e, i) {
                                            var n, r = (Ut = e).getView(), s = /\btool\.\w+|\s+on(?:Key|Mouse)(?:Up|Down|Move|Drag)\b/.test(t) && !/\bnew\s+Tool\b/.test(t) ? new dt : null, a = s ? s._events : [], o = ["onFrame", "onResize"].concat(a), h = [], c = [], d = "object" == typeof t ? t : w(t, i);
                                            function p(e, i) {
                                                for (var n in e)
                                                    !i && /^_/.test(n) || !new RegExp("([\\b\\s\\W]|^)" + n.replace(/\$/g, "\\$") + "\\b").test(t) || (h.push(n),
                                                        c.push(e[n]))
                                            }
                                            t = d.code,
                                                p({
                                                    __$__: y,
                                                    $__: b,
                                                    paper: e,
                                                    tool: s
                                                }, !0),
                                                p(e),
                                                t = "var module = { exports: {} }; " + t;
                                            var f = u.each(o, (function(e) {
                                                    new RegExp("\\s+" + e + "\\b").test(t) && (h.push(e),
                                                        this.push("module.exports." + e + " = " + e + ";"))
                                                }
                                            ), []).join("\n");
                                            f && (t += "\n" + f),
                                                t += "\nreturn module.exports;",
                                                i = Ut.agent,
                                                l && (i.chrome || i.firefox && i.versionNumber < 40) ? (d = l.createElement("script"),
                                                    o = l.head || l.getElementsByTagName("head")[0],
                                                i.firefox && (t = "\n" + t),
                                                    d.appendChild(l.createTextNode("document.__paperscript__ = function(" + h + ") {" + t + "\n}")),
                                                    o.appendChild(d),
                                                    n = l.__paperscript__,
                                                    delete l.__paperscript__,
                                                    o.removeChild(d)) : n = Function(h, t);
                                            var m = (f = n && n.apply(e, c)) || {};
                                            return u.each(a, (function(t) {
                                                    var e = m[t];
                                                    e && (s[t] = e)
                                                }
                                            )),
                                            r && (m.onResize && r.setOnResize(m.onResize),
                                                r.emit("resize", {
                                                    size: r.size,
                                                    delta: new _
                                                }),
                                            m.onFrame && r.setOnFrame(m.onFrame),
                                                r.requestUpdate()),
                                                f
                                        }
                                        function M(t) {
                                            if (/^text\/(?:x-|)paperscript$/.test(t.type) && "true" !== d.getAttribute(t, "ignore")) {
                                                var e = d.getAttribute(t, "canvas")
                                                    , i = l.getElementById(e)
                                                    , n = t.src || t.getAttribute("data-src")
                                                    , r = d.hasAttribute(t, "async")
                                                    , s = "data-paper-scope";
                                                if (!i)
                                                    throw new Error('Unable to find canvas with id "' + e + '"');
                                                var a = d.get(i.getAttribute(s)) || (new d).setup(i);
                                                return i.setAttribute(s, a._id),
                                                    n ? ft({
                                                        url: n,
                                                        async: r,
                                                        mimeType: "text/plain",
                                                        onLoad: function(t) {
                                                            S(t, a, n)
                                                        }
                                                    }) : S(t.innerHTML, a, t.baseURI),
                                                    t.setAttribute("data-paper-ignore", "true"),
                                                    a
                                            }
                                        }
                                        function C() {
                                            u.each(l && l.getElementsByTagName("script"), M)
                                        }
                                        return _.inject(v),
                                            x.inject(v),
                                            q.inject(v),
                                        h && ("complete" === l.readyState ? setTimeout(C) : Q.add(h, {
                                            load: C
                                        })),
                                            {
                                                compile: w,
                                                execute: S,
                                                load: function(t) {
                                                    return t ? M(t) : C()
                                                },
                                                parse: f,
                                                calculateBinary: y,
                                                calculateUnary: b
                                            }
                                    }
                                        .call(this);
                                var Ut = new (d.inject(u.exports, {
                                    Base: u,
                                    Numerical: g,
                                    Key: lt,
                                    DomEvent: Q,
                                    DomElement: Y,
                                    document: l,
                                    window: h,
                                    Symbol: N,
                                    PlacedSymbol: k
                                }));
                                return Ut.agent.node && i(858)(Ut),
                                (s = "function" == typeof (r = Ut) ? r.call(e, i, e, t) : r) === o || (t.exports = s),
                                    Ut
                            }
                        ).call(this, "object" == typeof self ? self : null)
                    },
                    2321: (t,e,i)=>{
                        "use strict";
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        }),
                            e.Vector = e.Matrix = void 0;
                        var n = r(i(8993));
                        i = r(i(715));
                        function r(t) {
                            return t && t.__esModule ? t : {
                                default: t
                            }
                        }
                        e.Matrix = n.default,
                            e.Vector = i.default
                    }
                    ,
                    8993: (t,e)=>{
                        "use strict";
                        function i(t) {
                            this.m = [(t = t || [1, 0, 0, 1, 0, 0])[0], t[1], t[2], t[3], t[4], t[5]]
                        }
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        }),
                            i.prototype.unit = function() {
                                return this.m = [1, 0, 0, 1, 0, 0],
                                    this
                            }
                            ,
                            i.prototype.multiply = function(t) {
                                var e = this.m
                                    , n = void 0
                                    , r = (n = t instanceof i ? t.m : t,
                                e[0] * n[0] + e[2] * n[1])
                                    , s = e[1] * n[0] + e[3] * n[1]
                                    , a = e[0] * n[2] + e[2] * n[3]
                                    , o = e[1] * n[2] + e[3] * n[3];
                                t = e[0] * n[4] + e[2] * n[5] + e[4],
                                    n = e[1] * n[4] + e[3] * n[5] + e[5];
                                return e[0] = r,
                                    e[1] = s,
                                    e[2] = a,
                                    e[3] = o,
                                    e[4] = t,
                                    e[5] = n,
                                    this
                            }
                            ,
                            i.prototype.inverse = function() {
                                var t = new i(this.m)
                                    , e = t.m
                                    , n = 1 / (e[0] * e[3] - e[1] * e[2])
                                    , r = e[3] * n
                                    , s = -e[1] * n
                                    , a = -e[2] * n
                                    , o = e[0] * n
                                    , h = n * (e[2] * e[5] - e[3] * e[4]);
                                n *= e[1] * e[4] - e[0] * e[5];
                                return e[0] = r,
                                    e[1] = s,
                                    e[2] = a,
                                    e[3] = o,
                                    e[4] = h,
                                    e[5] = n,
                                    t
                            }
                            ,
                            i.prototype.translate = function(t, e) {
                                return this.multiply([1, 0, 0, 1, t, e])
                            }
                            ,
                            i.prototype.rotate = function(t) {
                                var e = t * Math.PI / 180;
                                t = Math.cos(e),
                                    e = Math.sin(e);
                                return this.multiply([t, e, -e, t, 0, 0])
                            }
                            ,
                            i.prototype.skew = function(t, e) {
                                return e |= 0,
                                    t = t * Math.PI / 180,
                                    e = e * Math.PI / 180,
                                    t = Math.tan(t),
                                    e = Math.tan(e),
                                    this.multiply([1, e, t, 1, 0, 0])
                            }
                            ,
                            i.prototype.scale = function(t, e) {
                                return this.multiply([t, 0, 0, e, 0, 0])
                            }
                            ,
                            i.prototype.transformPoint = function(t, e) {
                                var i = t
                                    , n = e;
                                return [t = i * this.m[0] + n * this.m[2] + this.m[4], e = i * this.m[1] + n * this.m[3] + this.m[5]]
                            }
                            ,
                            i.prototype.transformVector = function(t, e) {
                                var i = t
                                    , n = e;
                                return [t = i * this.m[0] + n * this.m[2], e = i * this.m[1] + n * this.m[3]]
                            }
                            ,
                            e.default = i
                    }
                    ,
                    715: (t,e,i)=>{
                        "use strict";
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        });
                        var n = s(i(2424))
                            , r = s(i(9663));
                        function s(t) {
                            return t && t.__esModule ? t : {
                                default: t
                            }
                        }
                        function a(t) {
                            var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : [0, 0, 0];
                            (0,
                                r.default)(this, a);
                            var i = (h = (0,
                                n.default)(t, 3))[0]
                                , s = h[1]
                                , o = h[2]
                                , h = (t = (0,
                                n.default)(e, 3))[0];
                            e = t[1],
                                o = o || 0,
                                t = (t = t[2]) || 0;
                            this.x = i - h,
                                this.y = s - e,
                                this.z = o - t
                        }
                        (0,
                            s(i(2600)).default)(a, [{
                            key: "unit",
                            value: function() {
                                var t = this.length;
                                return new a([this.x / t, this.y / t, this.z / t])
                            }
                        }, {
                            key: "dot",
                            value: function(t) {
                                return this.x * t.x + this.y * t.y + this.z * t.z
                            }
                        }, {
                            key: "cross",
                            value: function(t) {
                                var e = this.x
                                    , i = this.y
                                    , n = this.z
                                    , r = t.x
                                    , s = t.y;
                                return new a([i * (t = t.z) - n * s, n * r - e * t, e * s - r * i])
                            }
                        }, {
                            key: "length",
                            get: function() {
                                var t = this.x
                                    , e = this.y
                                    , i = this.z;
                                return Math.sqrt(t * t + e * e + i * i)
                            }
                        }]),
                            i = a,
                            e.default = i
                    }
                    ,
                    1820: (t,e)=>{
                        "use strict";
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        }),
                            e.default = function(t, e, r, s, a, o, h, l, u) {
                                var c = Math.sin(u * i / 360)
                                    , d = Math.cos(u * i / 360)
                                    , p = d * (t - r) / 2 + c * (e - s) / 2;
                                u = -c * (t - r) / 2 + d * (e - s) / 2;
                                if (0 == p && 0 == u)
                                    return [];
                                if (0 === h || 0 === l)
                                    return [];
                                h = Math.abs(h),
                                    l = Math.abs(l),
                                1 < (u = p * p / (h * h) + u * u / (l * l)) && (h *= Math.sqrt(u),
                                    l *= Math.sqrt(u));
                                var f = function(t, e, r, s, a, o, h, l, u, c) {
                                    var d = c * (t - r) / 2 + u * (e - s) / 2
                                        , p = -u * (t - r) / 2 + c * (e - s) / 2
                                        , f = h * h
                                        , m = l * l
                                        , g = d * d
                                        , v = p * p
                                        , _ = f * m - f * v - m * g;
                                    return _ < 0 && (_ = 0),
                                        _ /= f * v + m * g,
                                        r = c * (a = (_ = Math.sqrt(_) * (a === o ? -1 : 1)) * h / l * p) - u * (_ = _ * -l / h * d) + (t + r) / 2,
                                        c = u * a + c * _ + (e + s) / 2,
                                        e = (d - a) / h,
                                        s = (p - _) / l,
                                        h = (-d - a) / h,
                                        _ = (-p - _) / l,
                                        l = n(1, 0, e, s),
                                        _ = n(e, s, h, _),
                                    0 === o && 0 < _ && (_ -= i),
                                    1 === o && _ < 0 && (_ += i),
                                        [r, c, l, _]
                                }(t, e, r, s, a, o, h, l, c, d)
                                    , m = []
                                    , g = f[2]
                                    , v = f[3]
                                    , _ = Math.max(Math.ceil(Math.abs(v) / (i / 4)), 1);
                                v /= _;
                                for (var y = 0; y < _; y++)
                                    m.push(function(t, e) {
                                        var i = 4 / 3 * Math.tan(e / 4)
                                            , n = Math.cos(t)
                                            , r = Math.sin(t)
                                            , s = Math.cos(t + e);
                                        return [n, r, n - r * i, r + n * i, s + (e = Math.sin(t + e)) * i, e - s * i, s, e]
                                    }(g, v)),
                                        g += v;
                                return m.map((function(t) {
                                        for (var e = 0; e < t.length; e += 2) {
                                            var i = t[e + 0]
                                                , n = t[e + 1]
                                                , r = c * (i *= h) + d * (n *= l);
                                            t[e + 0] = d * i - c * n + f[0],
                                                t[e + 1] = r + f[1]
                                        }
                                        return t
                                    }
                                ))
                            }
                        ;
                        var i = 2 * Math.PI;
                        function n(t, e, i, n) {
                            var r = t * i + e * n;
                            return (r = 1 < r ? 1 : r) < -1 && (r = -1),
                            (t * n - e * i < 0 ? -1 : 1) * Math.acos(r)
                        }
                    }
                    ,
                    9011: (t,e)=>{
                        "use strict";
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        }),
                            e.default = function(t) {
                                var e = 0
                                    , i = 0
                                    , n = 0
                                    , r = 0;
                                return t.map((function(t) {
                                        var s = (t = t.slice())[0]
                                            , a = s.toUpperCase();
                                        if (s != a)
                                            switch (t[0] = a,
                                                s) {
                                                case "a":
                                                    t[6] += n,
                                                        t[7] += r;
                                                    break;
                                                case "v":
                                                    t[1] += r;
                                                    break;
                                                case "h":
                                                    t[1] += n;
                                                    break;
                                                default:
                                                    for (var o = 1; o < t.length; )
                                                        t[o++] += n,
                                                            t[o++] += r
                                            }
                                        switch (a) {
                                            case "Z":
                                                n = e,
                                                    r = i;
                                                break;
                                            case "H":
                                                n = t[1];
                                                break;
                                            case "V":
                                                r = t[1];
                                                break;
                                            case "M":
                                                n = e = t[1],
                                                    r = i = t[2];
                                                break;
                                            default:
                                                n = t[t.length - 2],
                                                    r = t[t.length - 1]
                                        }
                                        return t
                                    }
                                ))
                            }
                    }
                    ,
                    9944: (t,e,i)=>{
                        "use strict";
                        var n = g(i(5315))
                            , r = g(i(2424))
                            , s = g(i(542))
                            , a = g(i(2945))
                            , o = g(i(9663))
                            , h = g(i(2600))
                            , l = g(i(3516))
                            , u = i(2321)
                            , c = i(817)
                            , d = g(i(3653))
                            , p = g(i(9011))
                            , f = g(i(2061))
                            , m = g(i(4049));
                        function g(t) {
                            return t && t.__esModule ? t : {
                                default: t
                            }
                        }
                        var v = (0,
                            l.default)("initialPath")
                            , _ = (0,
                            l.default)("path")
                            , y = (0,
                            l.default)("bounds")
                            , x = (0,
                            l.default)("savedPaths")
                            , b = (0,
                            l.default)("renderProps")
                            , w = (0,
                            l.default)("beginPath");
                        (0,
                            h.default)(S, [{
                            key: "save",
                            value: function() {
                                return this[x].push({
                                    path: this[_],
                                    bounds: this[y],
                                    renderProps: (0,
                                        a.default)({}, this[b])
                                }),
                                    this
                            }
                        }, {
                            key: "restore",
                            value: function() {
                                var t, e, i;
                                return this[x].length && (t = (i = this[x].pop()).path,
                                    e = i.bounds,
                                    i = i.renderProps,
                                    this[_] = t,
                                    this[y] = e,
                                    this[b] = i),
                                    this
                            }
                        }, {
                            key: "isPointInPath",
                            value: function(t, e) {
                                return (0,
                                    c.isPointInPath)(this, t, e)
                            }
                        }, {
                            key: "isPointInStroke",
                            value: function(t, e, i) {
                                var n = i.lineWidth
                                    , r = i.lineCap;
                                i = i.lineJoin;
                                if (c.isPointInStroke)
                                    return (0,
                                        c.isPointInStroke)(this, t, e, {
                                        lineWidth: void 0 === n ? 1 : n,
                                        lineCap: void 0 === r ? "butt" : r,
                                        lineJoin: void 0 === i ? "miter" : i
                                    })
                            }
                        }, {
                            key: "getPointAtLength",
                            value: function(t) {
                                return (0,
                                    c.getPointAtLength)(this.d, t)
                            }
                        }, {
                            key: "getTotalLength",
                            value: function() {
                                return (0,
                                    c.getTotalLength)(this.d)
                            }
                        }, {
                            key: "transform",
                            value: function() {
                                for (var t = arguments.length, e = Array(t), i = 0; i < t; i++)
                                    e[i] = arguments[i];
                                this[y] = null;
                                var n = new u.Matrix(e)
                                    , a = this[_];
                                return this[_] = a.map((function(t) {
                                        for (var e = (0,
                                            s.default)(t), i = (t = e[0],
                                            e.slice(1)), a = [t], o = 0; o < i.length; o += 2) {
                                            var h = i[o]
                                                , l = i[o + 1];
                                            h = n.transformPoint(h, l),
                                                h = (l = (0,
                                                    r.default)(h, 2))[0],
                                                l = l[1];
                                            a.push(h, l)
                                        }
                                        return a
                                    }
                                )),
                                    this
                            }
                        }, {
                            key: "translate",
                            value: function(t, e) {
                                return e = (new u.Matrix).translate(t, e),
                                    this.transform.apply(this, (0,
                                        n.default)(e.m))
                            }
                        }, {
                            key: "rotate",
                            value: function(t) {
                                return t = (new u.Matrix).rotate(t),
                                    this.transform.apply(this, (0,
                                        n.default)(t.m))
                            }
                        }, {
                            key: "scale",
                            value: function(t, e) {
                                return null == e && (e = t),
                                    e = (new u.Matrix).scale(t, e),
                                    this.transform.apply(this, (0,
                                        n.default)(e.m))
                            }
                        }, {
                            key: "skew",
                            value: function(t, e) {
                                return e = (new u.Matrix).skew(t, e),
                                    this.transform.apply(this, (0,
                                        n.default)(e.m))
                            }
                        }, {
                            key: "trim",
                            value: function() {
                                var t = (e = (0,
                                    r.default)(this.bounds, 2))[0]
                                    , e = e[1];
                                return this.translate(-t, -e),
                                    this
                            }
                        }, {
                            key: "beginPath",
                            value: function() {
                                return this[w] = !0,
                                    this
                            }
                        }, {
                            key: "to",
                            value: function(t) {
                                var e = this[_]
                                    , i = this[b];
                                return e.length && (this[w] && t.beginPath(),
                                    e.forEach((function(e) {
                                            e = (i = (0,
                                                s.default)(e))[0];
                                            var i = i.slice(1);
                                            ("M" === e ? t.moveTo : t.bezierCurveTo).apply(t, (0,
                                                n.default)(i))
                                        }
                                    )),
                                this.isClosed && t.closePath()),
                                    (0,
                                        a.default)(t, i),
                                    {
                                        stroke: function() {
                                            return t.stroke(),
                                                this
                                        },
                                        fill: function() {
                                            return t.fill(),
                                                this
                                        }
                                    }
                            }
                        }, {
                            key: "strokeStyle",
                            value: function(t) {
                                return this[b].strokeStyle = t,
                                    this
                            }
                        }, {
                            key: "fillStyle",
                            value: function(t) {
                                return this[b].fillStyle = t,
                                    this
                            }
                        }, {
                            key: "lineWidth",
                            value: function(t) {
                                return this[b].lineWidth = t,
                                    this
                            }
                        }, {
                            key: "lineCap",
                            value: function(t) {
                                return this[b].lineCap = t,
                                    this
                            }
                        }, {
                            key: "lineJoin",
                            value: function(t) {
                                return this[b].lineJoin = t,
                                    this
                            }
                        }, {
                            key: "bounds",
                            get: function() {
                                if (!this[y]) {
                                    var t = this[_];
                                    if (this[y] = [0, 0, 0, 0],
                                        t.length) {
                                        for (var e = [1 / 0, 1 / 0, -1 / 0, -1 / 0], i = 0, n = t.length; i < n; i++)
                                            for (var r = t[i].slice(1), s = 0; s < r.length; s += 2)
                                                r[s + 0] < e[0] && (e[0] = r[s + 0]),
                                                r[s + 1] < e[1] && (e[1] = r[s + 1]),
                                                r[s + 0] > e[2] && (e[2] = r[s + 0]),
                                                r[s + 1] > e[3] && (e[3] = r[s + 1]);
                                        this[y] = e
                                    }
                                }
                                return this[y]
                            }
                        }, {
                            key: "size",
                            get: function() {
                                var t = this.bounds;
                                return [t[2] - t[0], t[3] - t[1]]
                            }
                        }, {
                            key: "center",
                            get: function() {
                                var t = (0,
                                    r.default)(this.bounds, 4)
                                    , e = t[0]
                                    , i = t[1];
                                return [(e + t[2]) / 2, (i + t[3]) / 2]
                            }
                        }, {
                            key: "d",
                            get: function() {
                                var t = this[_].map((function(t) {
                                        return (t = (0,
                                            s.default)(t))[0] + t.slice(1).join()
                                    }
                                )).join("");
                                return this.isClosed && (t += "Z"),
                                    t
                            }
                        }, {
                            key: "path",
                            get: function() {
                                return this[_]
                            }
                        }, {
                            key: "isClosed",
                            get: function() {
                                var t = this[v][this[v].length - 1];
                                return t && "Z" === t[0]
                            }
                        }]),
                            h = S;
                        function S(t) {
                            if ((0,
                                o.default)(this, S),
                                !(0,
                                    m.default)(t))
                                throw new Error("Not an SVG path!");
                            this[v] = (0,
                                p.default)((0,
                                d.default)(t)),
                                this[_] = (0,
                                    f.default)(this[v]),
                                this[y] = null,
                                this[x] = [],
                                this[b] = {},
                                this[w] = !1
                        }
                        e.Z = h
                    }
                    ,
                    4049: (t,e)=>{
                        "use strict";
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        }),
                            e.default = function(t) {
                                return "string" == typeof t && (t = t.trim(),
                                    !!(/^[mzlhvcsqta]\s*[-+.0-9][^mlhvzcsqta]+/i.test(t) && /[\dz]$/i.test(t) && 4 < t.length))
                            }
                    }
                    ,
                    2061: (t,e,i)=>{
                        "use strict";
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        });
                        var n = s(i(2424));
                        e.default = function(t) {
                            for (var e, i = [], s = 0, h = 0, l = 0, u = 0, c = null, d = null, p = 0, f = 0, m = 0, g = t.length; m < g; m++) {
                                var v = t[m]
                                    , _ = v[0];
                                switch (_) {
                                    case "M":
                                        l = v[1],
                                            u = v[2];
                                        break;
                                    case "A":
                                        var y = (0,
                                            r.default)(p, f, v[6], v[7], v[4], v[5], v[1], v[2], v[3]);
                                        if (!y.length)
                                            continue;
                                        y = y.map((function(t) {
                                                return (t = (0,
                                                    n.default)(t, 8))[0],
                                                    t[1],
                                                    {
                                                        x1: t[2],
                                                        y1: t[3],
                                                        x2: t[4],
                                                        y2: t[5],
                                                        x: t[6],
                                                        y: t[7]
                                                    }
                                            }
                                        ));
                                        for (var x, b = 0; b < y.length; b++)
                                            v = ["C", (x = y[b]).x1, x.y1, x.x2, x.y2, x.x, x.y],
                                            b < y.length - 1 && i.push(v);
                                        break;
                                    case "S":
                                        var w = p
                                            , S = f;
                                        "C" != e && "S" != e || (w += w - s,
                                            S += S - h),
                                            v = ["C", w, S, v[1], v[2], v[3], v[4]];
                                        break;
                                    case "T":
                                        d = "Q" == e || "T" == e ? (c = 2 * p - c,
                                        2 * f - d) : (c = p,
                                            f),
                                            v = o(p, f, c, d, v[1], v[2]);
                                        break;
                                    case "Q":
                                        c = v[1],
                                            d = v[2],
                                            v = o(p, f, v[1], v[2], v[3], v[4]);
                                        break;
                                    case "L":
                                        v = a(p, f, v[1], v[2]);
                                        break;
                                    case "H":
                                        v = a(p, f, v[1], f);
                                        break;
                                    case "V":
                                        v = a(p, f, p, v[1]);
                                        break;
                                    case "Z":
                                        v = a(p, f, l, u)
                                }
                                e = _,
                                    p = v[v.length - 2],
                                    f = v[v.length - 1],
                                    h = 4 < v.length ? (s = v[v.length - 4],
                                        v[v.length - 3]) : (s = p,
                                        f),
                                    i.push(v)
                            }
                            return i
                        }
                        ;
                        var r = s(i(1820));
                        function s(t) {
                            return t && t.__esModule ? t : {
                                default: t
                            }
                        }
                        function a(t, e, i, n) {
                            return ["C", t, e, i, n, i, n]
                        }
                        function o(t, e, i, n, r, s) {
                            return ["C", t / 3 + 2 / 3 * i, e / 3 + 2 / 3 * n, r / 3 + 2 / 3 * i, s / 3 + 2 / 3 * n, r, s]
                        }
                    }
                    ,
                    3653: (t,e)=>{
                        "use strict";
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        }),
                            e.default = function(t) {
                                var e = [];
                                return t.replace(n, (function(t, n, s) {
                                        var a = n.toLowerCase();
                                        for (s = function(t) {
                                            return (t = t.match(r)) ? t.map(Number) : []
                                        }(s),
                                             "m" == a && 2 < s.length && (e.push([n].concat(s.splice(0, 2))),
                                                 a = "l",
                                                 n = "m" == n ? "l" : "L"); ; ) {
                                            if (s.length == i[a])
                                                return s.unshift(n),
                                                    e.push(s);
                                            if (s.length < i[a])
                                                throw new Error("malformed path data");
                                            e.push([n].concat(s.splice(0, i[a])))
                                        }
                                    }
                                )),
                                    e
                            }
                        ;
                        var i = {
                            a: 7,
                            c: 6,
                            h: 1,
                            l: 2,
                            m: 2,
                            q: 4,
                            s: 4,
                            t: 2,
                            v: 1,
                            z: 0
                        }
                            , n = /([astvzqmhlc])([^astvzqmhlc]*)/gi
                            , r = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/gi
                    }
                    ,
                    817: (t,e)=>{
                        "use strict";
                        function i(t) {
                            var e = document.createElementNS("http://www.w3.org/2000/svg", "path");
                            return e.setAttribute("d", t),
                                e
                        }
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        }),
                            e.getPointAtLength = function(t, e) {
                                return [e = (t = i(t).getPointAtLength(e)).x, t = t.y]
                            }
                            ,
                            e.getTotalLength = function(t, e) {
                                return i(t).getTotalLength(e)
                            }
                            ,
                            e.isPointInPath = function(t, e, i) {
                                return t = t.d,
                                    n = n || document.createElement("canvas").getContext("2d"),
                                    t = new Path2D(t),
                                    n.isPointInPath(t, e, i)
                            }
                            ,
                            e.isPointInStroke = function(t, e, i, r) {
                                var s = t.d
                                    , a = (t = void 0 === (a = r.lineWidth) ? 1 : a,
                                    void 0 === (a = r.lineCap) ? "butt" : a);
                                r = void 0 === (r = r.lineJoin) ? "miter" : r;
                                if ((n = n || document.createElement("canvas").getContext("2d")).isPointInStroke)
                                    return n.save(),
                                        n.lineWidth = t,
                                        n.lineCap = a,
                                        n.lineJoin = r,
                                        s = new Path2D(s),
                                        i = n.isPointInStroke(s, e, i),
                                        n.restore(),
                                        i
                            }
                        ;
                        var n = null
                    }
                    ,
                    858: ()=>{}
                    ,
                    4158: ()=>{}
                }
                    , e = {};
                function i(n) {
                    var r = e[n];
                    return void 0 !== r || (r = e[n] = {
                        exports: {}
                    },
                        t[n].call(r.exports, r, r.exports, i)),
                        r.exports
                }
                i.n = t=>{
                    var e = t && t.__esModule ? ()=>t.default : ()=>t;
                    return i.d(e, {
                        a: e
                    }),
                        e
                }
                    ,
                    i.d = (t,e)=>{
                        for (var n in e)
                            i.o(e, n) && !i.o(t, n) && Object.defineProperty(t, n, {
                                enumerable: !0,
                                get: e[n]
                            })
                    }
                    ,
                    i.o = (t,e)=>Object.prototype.hasOwnProperty.call(t, e),
                    i.r = t=>{
                        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
                            value: "Module"
                        }),
                            Object.defineProperty(t, "__esModule", {
                                value: !0
                            })
                    }
                ;
                var n = {};
                return (()=>{
                        "use strict";
                        i.d(n, {
                            default: ()=>hm
                        });
                        var t = {};
                        function e(t, e) {
                            if (!(t instanceof e))
                                throw new TypeError("Cannot call a class as a function")
                        }
                        function r(t, e) {
                            for (var i = 0; i < e.length; i++) {
                                var n = e[i];
                                n.enumerable = n.enumerable || !1,
                                    n.configurable = !0,
                                "value"in n && (n.writable = !0),
                                    Object.defineProperty(t, n.key, n)
                            }
                        }
                        function s(t, e, i) {
                            return e && r(t.prototype, e),
                            i && r(t, i),
                                Object.defineProperty(t, "prototype", {
                                    writable: !1
                                }),
                                t
                        }
                        function a(t, e, i) {
                            return e in t ? Object.defineProperty(t, e, {
                                value: i,
                                enumerable: !0,
                                configurable: !0,
                                writable: !0
                            }) : t[e] = i,
                                t
                        }
                        function o(t, e, i, n, r, s, a) {
                            try {
                                var o = t[s](a)
                                    , h = o.value
                            } catch (t) {
                                return void i(t)
                            }
                            o.done ? e(h) : Promise.resolve(h).then(n, r)
                        }
                        function h(t) {
                            return function() {
                                var e = this
                                    , i = arguments;
                                return new Promise((function(n, r) {
                                        var s = t.apply(e, i);
                                        function a(t) {
                                            o(s, n, r, a, h, "next", t)
                                        }
                                        function h(t) {
                                            o(s, n, r, a, h, "throw", t)
                                        }
                                        a(void 0)
                                    }
                                ))
                            }
                        }
                        i.r(t),
                            i.d(t, {
                                ACESFilmicToneMapping: ()=>Rt,
                                AddEquation: ()=>st,
                                AddOperation: ()=>It,
                                AdditiveAnimationBlendMode: ()=>Ci,
                                AdditiveBlending: ()=>et,
                                AlphaFormat: ()=>ge,
                                AlwaysDepth: ()=>wt,
                                AlwaysStencilFunc: ()=>Yi,
                                AmbientLight: ()=>bd,
                                AmbientLightProbe: ()=>Fd,
                                AnimationClip: ()=>Xc,
                                AnimationLoader: ()=>td,
                                AnimationMixer: ()=>up,
                                AnimationObjectGroup: ()=>hp,
                                AnimationUtils: ()=>Nc,
                                ArcCurve: ()=>bu,
                                ArrayCamera: ()=>jh,
                                ArrowHelper: ()=>Kp,
                                Audio: ()=>Yd,
                                AudioAnalyser: ()=>ip,
                                AudioContext: ()=>Dd,
                                AudioListener: ()=>Jd,
                                AudioLoader: ()=>Rd,
                                AxesHelper: ()=>$p,
                                AxisHelper: ()=>function(t) {
                                    return new $p(t)
                                }
                                ,
                                BackSide: ()=>J,
                                BasicDepthPacking: ()=>Ii,
                                BasicShadowMap: ()=>j,
                                BinaryTextureLoader: ()=>function(t) {
                                    return new rd(t)
                                }
                                ,
                                Bone: ()=>Ll,
                                BooleanKeyframeTrack: ()=>Bc,
                                BoundingBoxHelper: ()=>function(t, e) {
                                    return new qp(t,e)
                                }
                                ,
                                Box2: ()=>xp,
                                Box3: ()=>Un,
                                Box3Helper: ()=>Xp,
                                BoxBufferGeometry: ()=>Zs,
                                BoxGeometry: ()=>Zs,
                                BoxHelper: ()=>qp,
                                BufferAttribute: ()=>us,
                                BufferGeometry: ()=>Ps,
                                BufferGeometryLoader: ()=>Pd,
                                ByteType: ()=>se,
                                Cache: ()=>Zc,
                                Camera: ()=>$s,
                                CameraHelper: ()=>Wp,
                                CanvasRenderer: ()=>function() {}
                                ,
                                CanvasTexture: ()=>hu,
                                CatmullRomCurve3: ()=>Tu,
                                CineonToneMapping: ()=>Dt,
                                CircleBufferGeometry: ()=>lu,
                                CircleGeometry: ()=>lu,
                                ClampToEdgeWrapping: ()=>qt,
                                Clock: ()=>Wd,
                                Color: ()=>as,
                                ColorKeyframeTrack: ()=>Vc,
                                CompressedTexture: ()=>ou,
                                CompressedTextureLoader: ()=>ed,
                                ConeBufferGeometry: ()=>cu,
                                ConeGeometry: ()=>cu,
                                CubeCamera: ()=>ea,
                                CubeReflectionMapping: ()=>Bt,
                                CubeRefractionMapping: ()=>Vt,
                                CubeTexture: ()=>ia,
                                CubeTextureLoader: ()=>nd,
                                CubeUVReflectionMapping: ()=>Wt,
                                CubeUVRefractionMapping: ()=>jt,
                                CubicBezierCurve: ()=>Iu,
                                CubicBezierCurve3: ()=>ku,
                                CubicInterpolant: ()=>Dc,
                                CullFaceBack: ()=>U,
                                CullFaceFront: ()=>G,
                                CullFaceFrontBack: ()=>W,
                                CullFaceNone: ()=>V,
                                Curve: ()=>yu,
                                CurvePath: ()=>Bu,
                                CustomBlending: ()=>rt,
                                CustomToneMapping: ()=>zt,
                                CylinderBufferGeometry: ()=>uu,
                                CylinderGeometry: ()=>uu,
                                Cylindrical: ()=>_p,
                                DataTexture: ()=>Il,
                                DataTexture2DArray: ()=>Za,
                                DataTexture3D: ()=>to,
                                DataTextureLoader: ()=>rd,
                                DataUtils: ()=>rf,
                                DecrementStencilOp: ()=>Bi,
                                DecrementWrapStencilOp: ()=>Ui,
                                DefaultLoadingManager: ()=>Yc,
                                DepthFormat: ()=>be,
                                DepthStencilFormat: ()=>we,
                                DepthTexture: ()=>Zh,
                                DirectionalLight: ()=>xd,
                                DirectionalLightHelper: ()=>Vp,
                                DiscreteInterpolant: ()=>zc,
                                DodecahedronBufferGeometry: ()=>pu,
                                DodecahedronGeometry: ()=>pu,
                                DoubleSide: ()=>Y,
                                DstAlphaFactor: ()=>gt,
                                DstColorFactor: ()=>_t,
                                DynamicBufferAttribute: ()=>function(t, e) {
                                    return new us(t,e).setUsage(Ki)
                                }
                                ,
                                DynamicCopyUsage: ()=>sn,
                                DynamicDrawUsage: ()=>Ki,
                                DynamicReadUsage: ()=>en,
                                EdgesGeometry: ()=>_u,
                                EdgesHelper: ()=>function(t, e) {
                                    return new Yl(new _u(t.geometry),new Ul({
                                        color: void 0 !== e ? e : 16777215
                                    }))
                                }
                                ,
                                EllipseCurve: ()=>xu,
                                EqualDepth: ()=>Ct,
                                EqualStencilFunc: ()=>Hi,
                                EquirectangularReflectionMapping: ()=>Ut,
                                EquirectangularRefractionMapping: ()=>Gt,
                                Euler: ()=>Cr,
                                EventDispatcher: ()=>ln,
                                ExtrudeBufferGeometry: ()=>hc,
                                ExtrudeGeometry: ()=>hc,
                                FaceColors: ()=>hf,
                                FileLoader: ()=>$c,
                                FlatShading: ()=>Q,
                                Float16BufferAttribute: ()=>_s,
                                Float32Attribute: ()=>function(t, e) {
                                    return new ys(t,e)
                                }
                                ,
                                Float32BufferAttribute: ()=>ys,
                                Float64Attribute: ()=>function(t, e) {
                                    return new xs(t,e)
                                }
                                ,
                                Float64BufferAttribute: ()=>xs,
                                FloatType: ()=>ue,
                                Fog: ()=>tl,
                                FogExp2: ()=>$h,
                                Font: ()=>function() {}
                                ,
                                FontLoader: ()=>function() {}
                                ,
                                FramebufferTexture: ()=>au,
                                FrontSide: ()=>Z,
                                Frustum: ()=>ua,
                                GLBufferAttribute: ()=>pp,
                                GLSL1: ()=>on,
                                GLSL3: ()=>hn,
                                GreaterDepth: ()=>Tt,
                                GreaterEqualDepth: ()=>At,
                                GreaterEqualStencilFunc: ()=>Ji,
                                GreaterStencilFunc: ()=>Xi,
                                GridHelper: ()=>Dp,
                                Group: ()=>Hh,
                                HalfFloatType: ()=>ce,
                                HemisphereLight: ()=>od,
                                HemisphereLightHelper: ()=>Op,
                                HemisphereLightProbe: ()=>zd,
                                IcosahedronBufferGeometry: ()=>uc,
                                IcosahedronGeometry: ()=>uc,
                                ImageBitmapLoader: ()=>Nd,
                                ImageLoader: ()=>id,
                                ImageUtils: ()=>En,
                                ImmediateRenderObject: ()=>function() {}
                                ,
                                IncrementStencilOp: ()=>Fi,
                                IncrementWrapStencilOp: ()=>Vi,
                                InstancedBufferAttribute: ()=>Dl,
                                InstancedBufferGeometry: ()=>Td,
                                InstancedInterleavedBuffer: ()=>dp,
                                InstancedMesh: ()=>Vl,
                                Int16Attribute: ()=>function(t, e) {
                                    return new fs(t,e)
                                }
                                ,
                                Int16BufferAttribute: ()=>fs,
                                Int32Attribute: ()=>function(t, e) {
                                    return new gs(t,e)
                                }
                                ,
                                Int32BufferAttribute: ()=>gs,
                                Int8Attribute: ()=>function(t, e) {
                                    return new cs(t,e)
                                }
                                ,
                                Int8BufferAttribute: ()=>cs,
                                IntType: ()=>he,
                                InterleavedBuffer: ()=>il,
                                InterleavedBufferAttribute: ()=>rl,
                                Interpolant: ()=>Oc,
                                InterpolateDiscrete: ()=>_i,
                                InterpolateLinear: ()=>yi,
                                InterpolateSmooth: ()=>xi,
                                InvertStencilOp: ()=>Gi,
                                JSONLoader: ()=>function() {}
                                ,
                                KeepStencilOp: ()=>Ri,
                                KeyframeTrack: ()=>Fc,
                                LOD: ()=>Sl,
                                LatheBufferGeometry: ()=>cc,
                                LatheGeometry: ()=>cc,
                                Layers: ()=>Ar,
                                LensFlare: ()=>function() {}
                                ,
                                LessDepth: ()=>St,
                                LessEqualDepth: ()=>Mt,
                                LessEqualStencilFunc: ()=>qi,
                                LessStencilFunc: ()=>ji,
                                Light: ()=>ad,
                                LightProbe: ()=>Md,
                                Line: ()=>Xl,
                                Line3: ()=>Sp,
                                LineBasicMaterial: ()=>Ul,
                                LineCurve: ()=>Nu,
                                LineCurve3: ()=>Ou,
                                LineDashedMaterial: ()=>Ic,
                                LineLoop: ()=>Ql,
                                LinePieces: ()=>af,
                                LineSegments: ()=>Yl,
                                LineStrip: ()=>sf,
                                LinearEncoding: ()=>Ei,
                                LinearFilter: ()=>$t,
                                LinearInterpolant: ()=>Rc,
                                LinearMipMapLinearFilter: ()=>ne,
                                LinearMipMapNearestFilter: ()=>ee,
                                LinearMipmapLinearFilter: ()=>ie,
                                LinearMipmapNearestFilter: ()=>te,
                                LinearToneMapping: ()=>Nt,
                                Loader: ()=>Qc,
                                LoaderUtils: ()=>Ad,
                                LoadingManager: ()=>Jc,
                                LoopOnce: ()=>mi,
                                LoopPingPong: ()=>vi,
                                LoopRepeat: ()=>gi,
                                LuminanceAlphaFormat: ()=>xe,
                                LuminanceFormat: ()=>ye,
                                MOUSE: ()=>F,
                                Material: ()=>$r,
                                MaterialLoader: ()=>Cd,
                                Math: ()=>bn,
                                MathUtils: ()=>bn,
                                Matrix3: ()=>Sn,
                                Matrix4: ()=>mr,
                                MaxEquation: ()=>lt,
                                Mesh: ()=>qs,
                                MeshBasicMaterial: ()=>os,
                                MeshDepthMaterial: ()=>Fh,
                                MeshDistanceMaterial: ()=>Bh,
                                MeshFaceMaterial: ()=>function(t) {
                                    return t
                                }
                                ,
                                MeshLambertMaterial: ()=>Ec,
                                MeshMatcapMaterial: ()=>Lc,
                                MeshNormalMaterial: ()=>Pc,
                                MeshPhongMaterial: ()=>Ac,
                                MeshPhysicalMaterial: ()=>Cc,
                                MeshStandardMaterial: ()=>Mc,
                                MeshToonMaterial: ()=>Tc,
                                MinEquation: ()=>ht,
                                MirroredRepeatWrapping: ()=>Xt,
                                MixOperation: ()=>Lt,
                                MultiMaterial: ()=>function(t=[]) {
                                    return t.isMultiMaterial = !0,
                                        (t.materials = t).clone = function() {
                                            return t.slice()
                                        }
                                        ,
                                        t
                                }
                                ,
                                MultiplyBlending: ()=>nt,
                                MultiplyOperation: ()=>Et,
                                NearestFilter: ()=>Zt,
                                NearestMipMapLinearFilter: ()=>Kt,
                                NearestMipMapNearestFilter: ()=>Yt,
                                NearestMipmapLinearFilter: ()=>Qt,
                                NearestMipmapNearestFilter: ()=>Jt,
                                NeverDepth: ()=>bt,
                                NeverStencilFunc: ()=>Wi,
                                NoBlending: ()=>$,
                                NoColors: ()=>of,
                                NoToneMapping: ()=>kt,
                                NormalAnimationBlendMode: ()=>Mi,
                                NormalBlending: ()=>tt,
                                NotEqualDepth: ()=>Pt,
                                NotEqualStencilFunc: ()=>Zi,
                                NumberKeyframeTrack: ()=>Gc,
                                Object3D: ()=>Vr,
                                ObjectLoader: ()=>Ed,
                                ObjectSpaceNormalMap: ()=>Oi,
                                OctahedronBufferGeometry: ()=>dc,
                                OctahedronGeometry: ()=>dc,
                                OneFactor: ()=>ct,
                                OneMinusDstAlphaFactor: ()=>vt,
                                OneMinusDstColorFactor: ()=>yt,
                                OneMinusSrcAlphaFactor: ()=>mt,
                                OneMinusSrcColorFactor: ()=>pt,
                                OrthographicCamera: ()=>Sa,
                                PCFShadowMap: ()=>H,
                                PCFSoftShadowMap: ()=>q,
                                PMREMGenerator: ()=>Ra,
                                ParametricGeometry: ()=>function() {
                                    return new Ps
                                }
                                ,
                                Particle: ()=>function(t) {
                                    return new yl(t)
                                }
                                ,
                                ParticleBasicMaterial: ()=>function(t) {
                                    return new Kl(t)
                                }
                                ,
                                ParticleSystem: ()=>function(t, e) {
                                    return new nu(t,e)
                                }
                                ,
                                ParticleSystemMaterial: ()=>function(t) {
                                    return new Kl(t)
                                }
                                ,
                                Path: ()=>Vu,
                                PerspectiveCamera: ()=>ta,
                                Plane: ()=>oa,
                                PlaneBufferGeometry: ()=>pa,
                                PlaneGeometry: ()=>pa,
                                PlaneHelper: ()=>Zp,
                                PointCloud: ()=>function(t, e) {
                                    return new nu(t,e)
                                }
                                ,
                                PointCloudMaterial: ()=>function(t) {
                                    return new Kl(t)
                                }
                                ,
                                PointLight: ()=>_d,
                                PointLightHelper: ()=>Lp,
                                Points: ()=>nu,
                                PointsMaterial: ()=>Kl,
                                PolarGridHelper: ()=>Rp,
                                PolyhedronBufferGeometry: ()=>du,
                                PolyhedronGeometry: ()=>du,
                                PositionalAudio: ()=>ep,
                                PropertyBinding: ()=>op,
                                PropertyMixer: ()=>np,
                                QuadraticBezierCurve: ()=>Du,
                                QuadraticBezierCurve3: ()=>Ru,
                                Quaternion: ()=>zn,
                                QuaternionKeyframeTrack: ()=>jc,
                                QuaternionLinearInterpolant: ()=>Wc,
                                REVISION: ()=>z,
                                RGBADepthPacking: ()=>ki,
                                RGBAFormat: ()=>_e,
                                RGBAIntegerFormat: ()=>Pe,
                                RGBA_ASTC_10x10_Format: ()=>Qe,
                                RGBA_ASTC_10x5_Format: ()=>Ze,
                                RGBA_ASTC_10x6_Format: ()=>Je,
                                RGBA_ASTC_10x8_Format: ()=>Ye,
                                RGBA_ASTC_12x10_Format: ()=>Ke,
                                RGBA_ASTC_12x12_Format: ()=>$e,
                                RGBA_ASTC_4x4_Format: ()=>Ve,
                                RGBA_ASTC_5x4_Format: ()=>Ue,
                                RGBA_ASTC_5x5_Format: ()=>Ge,
                                RGBA_ASTC_6x5_Format: ()=>We,
                                RGBA_ASTC_6x6_Format: ()=>je,
                                RGBA_ASTC_8x5_Format: ()=>He,
                                RGBA_ASTC_8x6_Format: ()=>qe,
                                RGBA_ASTC_8x8_Format: ()=>Xe,
                                RGBA_BPTC_Format: ()=>ti,
                                RGBA_ETC2_EAC_Format: ()=>Be,
                                RGBA_PVRTC_2BPPV1_Format: ()=>Re,
                                RGBA_PVRTC_4BPPV1_Format: ()=>De,
                                RGBA_S3TC_DXT1_Format: ()=>Le,
                                RGBA_S3TC_DXT3_Format: ()=>Ie,
                                RGBA_S3TC_DXT5_Format: ()=>ke,
                                RGBFormat: ()=>ve,
                                RGBIntegerFormat: ()=>Te,
                                RGB_ETC1_Format: ()=>ze,
                                RGB_ETC2_Format: ()=>Fe,
                                RGB_PVRTC_2BPPV1_Format: ()=>Oe,
                                RGB_PVRTC_4BPPV1_Format: ()=>Ne,
                                RGB_S3TC_DXT1_Format: ()=>Ee,
                                RGFormat: ()=>Ce,
                                RGIntegerFormat: ()=>Ae,
                                RawShaderMaterial: ()=>Ma,
                                Ray: ()=>fr,
                                Raycaster: ()=>fp,
                                RectAreaLight: ()=>wd,
                                RedFormat: ()=>Se,
                                RedIntegerFormat: ()=>Me,
                                ReinhardToneMapping: ()=>Ot,
                                RepeatWrapping: ()=>Ht,
                                ReplaceStencilOp: ()=>zi,
                                ReverseSubtractEquation: ()=>ot,
                                RingBufferGeometry: ()=>pc,
                                RingGeometry: ()=>pc,
                                SRGB8_ALPHA8_ASTC_10x10_Format: ()=>di,
                                SRGB8_ALPHA8_ASTC_10x5_Format: ()=>li,
                                SRGB8_ALPHA8_ASTC_10x6_Format: ()=>ui,
                                SRGB8_ALPHA8_ASTC_10x8_Format: ()=>ci,
                                SRGB8_ALPHA8_ASTC_12x10_Format: ()=>pi,
                                SRGB8_ALPHA8_ASTC_12x12_Format: ()=>fi,
                                SRGB8_ALPHA8_ASTC_4x4_Format: ()=>ei,
                                SRGB8_ALPHA8_ASTC_5x4_Format: ()=>ii,
                                SRGB8_ALPHA8_ASTC_5x5_Format: ()=>ni,
                                SRGB8_ALPHA8_ASTC_6x5_Format: ()=>ri,
                                SRGB8_ALPHA8_ASTC_6x6_Format: ()=>si,
                                SRGB8_ALPHA8_ASTC_8x5_Format: ()=>ai,
                                SRGB8_ALPHA8_ASTC_8x6_Format: ()=>oi,
                                SRGB8_ALPHA8_ASTC_8x8_Format: ()=>hi,
                                Scene: ()=>el,
                                SceneUtils: ()=>uf,
                                ShaderChunk: ()=>fa,
                                ShaderLib: ()=>ga,
                                ShaderMaterial: ()=>Ks,
                                ShadowMaterial: ()=>Sc,
                                Shape: ()=>Uu,
                                ShapeBufferGeometry: ()=>fc,
                                ShapeGeometry: ()=>fc,
                                ShapePath: ()=>tf,
                                ShapeUtils: ()=>sc,
                                ShortType: ()=>ae,
                                Skeleton: ()=>Ol,
                                SkeletonHelper: ()=>Ep,
                                SkinnedMesh: ()=>El,
                                SmoothShading: ()=>K,
                                Sphere: ()=>ar,
                                SphereBufferGeometry: ()=>mc,
                                SphereGeometry: ()=>mc,
                                Spherical: ()=>vp,
                                SphericalHarmonics3: ()=>Sd,
                                SplineCurve: ()=>zu,
                                SpotLight: ()=>pd,
                                SpotLightHelper: ()=>Cp,
                                Sprite: ()=>yl,
                                SpriteMaterial: ()=>sl,
                                SrcAlphaFactor: ()=>ft,
                                SrcAlphaSaturateFactor: ()=>xt,
                                SrcColorFactor: ()=>dt,
                                StaticCopyUsage: ()=>rn,
                                StaticDrawUsage: ()=>Qi,
                                StaticReadUsage: ()=>tn,
                                StereoCamera: ()=>Gd,
                                StreamCopyUsage: ()=>an,
                                StreamDrawUsage: ()=>$i,
                                StreamReadUsage: ()=>nn,
                                StringKeyframeTrack: ()=>Hc,
                                SubtractEquation: ()=>at,
                                SubtractiveBlending: ()=>it,
                                TOUCH: ()=>B,
                                TangentSpaceNormalMap: ()=>Ni,
                                TetrahedronBufferGeometry: ()=>gc,
                                TetrahedronGeometry: ()=>gc,
                                TextGeometry: ()=>function() {
                                    return new Ps
                                }
                                ,
                                Texture: ()=>In,
                                TextureLoader: ()=>sd,
                                TorusBufferGeometry: ()=>vc,
                                TorusGeometry: ()=>vc,
                                TorusKnotBufferGeometry: ()=>_c,
                                TorusKnotGeometry: ()=>_c,
                                Triangle: ()=>Qr,
                                TriangleFanDrawMode: ()=>Pi,
                                TriangleStripDrawMode: ()=>Ti,
                                TrianglesDrawMode: ()=>Ai,
                                TubeBufferGeometry: ()=>yc,
                                TubeGeometry: ()=>yc,
                                UVMapping: ()=>Ft,
                                Uint16Attribute: ()=>function(t, e) {
                                    return new ms(t,e)
                                }
                                ,
                                Uint16BufferAttribute: ()=>ms,
                                Uint32Attribute: ()=>function(t, e) {
                                    return new vs(t,e)
                                }
                                ,
                                Uint32BufferAttribute: ()=>vs,
                                Uint8Attribute: ()=>function(t, e) {
                                    return new ds(t,e)
                                }
                                ,
                                Uint8BufferAttribute: ()=>ds,
                                Uint8ClampedAttribute: ()=>function(t, e) {
                                    return new ps(t,e)
                                }
                                ,
                                Uint8ClampedBufferAttribute: ()=>ps,
                                Uniform: ()=>cp,
                                UniformsLib: ()=>ma,
                                UniformsUtils: ()=>Qs,
                                UnsignedByteType: ()=>re,
                                UnsignedInt248Type: ()=>me,
                                UnsignedIntType: ()=>le,
                                UnsignedShort4444Type: ()=>de,
                                UnsignedShort5551Type: ()=>pe,
                                UnsignedShort565Type: ()=>fe,
                                UnsignedShortType: ()=>oe,
                                VSMShadowMap: ()=>X,
                                Vector2: ()=>wn,
                                Vector3: ()=>Fn,
                                Vector4: ()=>Nn,
                                VectorKeyframeTrack: ()=>qc,
                                Vertex: ()=>function(t, e, i) {
                                    return new Fn(t,e,i)
                                }
                                ,
                                VertexColors: ()=>lf,
                                VideoTexture: ()=>su,
                                WebGL1Renderer: ()=>Kh,
                                WebGLCubeRenderTarget: ()=>na,
                                WebGLMultipleRenderTargets: ()=>Dn,
                                WebGLMultisampleRenderTarget: ()=>Rn,
                                WebGLRenderTarget: ()=>On,
                                WebGLRenderTargetCube: ()=>function(t, e, i) {
                                    return new na(t,i)
                                }
                                ,
                                WebGLRenderer: ()=>Qh,
                                WebGLUtils: ()=>Wh,
                                WireframeGeometry: ()=>xc,
                                WireframeHelper: ()=>function(t, e) {
                                    return new Yl(new xc(t.geometry),new Ul({
                                        color: void 0 !== e ? e : 16777215
                                    }))
                                }
                                ,
                                WrapAroundEnding: ()=>Si,
                                XHRLoader: ()=>function(t) {
                                    return new $c(t)
                                }
                                ,
                                ZeroCurvatureEnding: ()=>bi,
                                ZeroFactor: ()=>ut,
                                ZeroSlopeEnding: ()=>wi,
                                ZeroStencilOp: ()=>Di,
                                sRGBEncoding: ()=>Li
                            });
                        var l = i(7757)
                            , u = i.n(l)
                            , c = i(5809)
                            , d = i.n(c);
                        function p(t, e) {
                            var i = m
                                , n = "undefined" != typeof Symbol && t[Symbol[i(134)]] || t["@@iterator"];
                            if (!n) {
                                if (Array[i(182)](t) || (n = function(t, e) {
                                    var i = m;
                                    if (t) {
                                        if (typeof t === i(114))
                                            return f(t, e);
                                        var n = Object[i(141)][i(193)][i(162)](t).slice(8, -1);
                                        return (n = n === i(133) && t[i(142)] ? t.constructor[i(211)] : n) === i(163) || "Set" === n ? Array[i(190)](t) : n === i(149) || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/[i(158)](n) ? f(t, e) : void 0
                                    }
                                }(t)) || e && t && typeof t[i(198)] === i(157)) {
                                    n && (t = n);
                                    var r = 0;
                                    return {
                                        s: e = function() {}
                                        ,
                                        n: function() {
                                            return r >= t[i(198)] ? {
                                                done: !0
                                            } : {
                                                done: !1,
                                                value: t[r++]
                                            }
                                        },
                                        e: function(t) {
                                            throw t
                                        },
                                        f: e
                                    }
                                }
                                throw new TypeError(i(113))
                            }
                            var s, a = !0, o = !1;
                            return {
                                s: function() {
                                    n = n[i(162)](t)
                                },
                                n: function() {
                                    var t = i
                                        , e = n[t(202)]();
                                    return a = e[t(161)],
                                        e
                                },
                                e: function(t) {
                                    o = !0,
                                        s = t
                                },
                                f: function() {
                                    var t = i;
                                    try {
                                        a || null == n[t(205)] || n.return()
                                    } finally {
                                        if (o)
                                            throw s
                                    }
                                }
                            }
                        }
                        function f(t, e) {
                            var i = m;
                            (null == e || e > t[i(198)]) && (e = t[i(198)]);
                            for (var n = 0, r = new Array(e); n < e; n++)
                                r[n] = t[n];
                            return r
                        }
                        function m(t, e) {
                            var i = x();
                            return (m = function(t, e) {
                                    return i[t -= 113]
                                }
                            )(t, e)
                        }
                        !function() {
                            for (var t = m, e = x(); ; )
                                try {
                                    if (627684 == +parseInt(t(206)) + parseInt(t(156)) / 2 + parseInt(t(122)) / 3 * (parseInt(t(210)) / 4) + -parseInt(t(135)) / 5 * (-parseInt(t(170)) / 6) + parseInt(t(188)) / 7 + -parseInt(t(179)) / 8 + -parseInt(t(119)) / 9 * (parseInt(t(125)) / 10))
                                        break;
                                    e.push(e.shift())
                                } catch (t) {
                                    e.push(e.shift())
                                }
                        }();
                        var g, v = (s(_, [{
                            key: (g = m)(167),
                            value: function() {
                                var t = g
                                    , e = (n = this[t(155)]())[t(164)]
                                    , i = n[t(147)]
                                    , n = n[t(180)];
                                return this[t(126)][t(191)](e),
                                    this[t(147)] = i,
                                    this[t(164)] = e,
                                    this[t(180)] = n,
                                    this[t(174)](n),
                                    this[t(171)](i),
                                    this.createSwiper(e)
                            }
                        }, {
                            key: g(194),
                            value: function(t) {
                                var e = g;
                                this[e(116)] && this[e(116)](t)
                            }
                        }, {
                            key: g(155),
                            value: function() {
                                var t = g
                                    , e = document[t(159)](t(154));
                                e[t(181)][t(169)] = t(196),
                                    e[t(181)][t(128)] = "relative",
                                    e[t(189)] = this[t(131)];
                                var i = document[t(159)](t(154));
                                i[t(181)][t(169)] = "hidden",
                                    i[t(181)][t(128)] = t(212);
                                var n = document[t(159)](t(154));
                                return n[t(189)] = t(208),
                                    n[t(181)][t(151)] = t(136),
                                    n[t(181)][t(185)] = t(183),
                                    n[t(181)].justifyContent = t(183),
                                    n[t(181)][t(213)] = t(146),
                                    e[t(191)](i),
                                    e[t(191)](n),
                                    {
                                        swiperEl: e,
                                        swiperWrap: i,
                                        dotWrap: n
                                    }
                            }
                        }, {
                            key: "renderDots",
                            value: function(t) {
                                var e, i = g, n = 1, r = p(this[i(173)]);
                                try {
                                    for (r.s(); !(e = r.n()).done; ) {
                                        e[i(160)];
                                        var s = document[i(159)](i(154));
                                        s[i(189)] = i(115),
                                            s.style[i(192)] = "10px",
                                            s.style[i(117)] = i(146),
                                            s[i(181)][i(172)] = i(146),
                                            s[i(181)][i(197)] = i(166),
                                            s.style[i(127)] = i(178),
                                        1 == n && (s.style[i(197)] = i(209)),
                                            t[i(191)](s),
                                            n++
                                    }
                                } catch (t) {
                                    r.e(t)
                                } finally {
                                    r.f()
                                }
                            }
                        }, {
                            key: g(171),
                            value: function(t) {
                                var e, i = g, n = 1, r = p(this[i(173)]);
                                try {
                                    for (r.s(); !(e = r.n())[i(161)]; ) {
                                        var s = e[i(160)]
                                            , a = document[i(159)](i(154));
                                        a.style.float = "left",
                                            a[i(181)][i(128)] = i(212),
                                            a[i(181)][i(117)] = i(124);
                                        var o = document.createElement(i(165));
                                        o.id = i(199).concat(n),
                                            o.style.position = "absolute",
                                            o[i(181)][i(201)] = i(186),
                                            o[i(181)].top = i(186),
                                            o.style[i(195)] = i(203),
                                            o[i(181)][i(168)] = 3,
                                            o[i(181)].maxWidth = i(124),
                                            o[i(181)][i(172)] = "100%",
                                            o[i(187)] = s[i(153)] + i(118),
                                            a.appendChild(o);
                                        var h = document[i(159)]("canvas");
                                        h.width = 1e3 < this.baseWidth ? this[i(148)] : 1e3,
                                            h[i(172)] = 1e3 < this[i(145)] ? this[i(145)] : 1e3,
                                            h[i(181)][i(117)] = "".concat(this.baseWidth, "px"),
                                            h[i(181)][i(172)] = ""[i(130)](this[i(145)], "px"),
                                            h.id = "foxpsd_preview_".concat(n),
                                            a.appendChild(h),
                                            t[i(191)](a),
                                            n++
                                    }
                                } catch (t) {
                                    r.e(t)
                                } finally {
                                    r.f()
                                }
                            }
                        }, {
                            key: g(144),
                            value: function(t) {
                                var e = g
                                    , i = this
                                    , n = this;
                                this[e(150)] = new (d())(document[e(204)]("."[e(130)](this[e(131)])),{
                                    callback: function(t, i) {
                                        var r = e;
                                        n[r(194)] && n[r(194)](t);
                                        for (var s = document[r(177)]("."[r(130)](n[r(131)], r(120))), a = 0; a < s[r(198)]; a++)
                                            a == t ? s[a].style[r(197)] = r(209) : s[a].style.background = r(166)
                                    }
                                });
                                var r = y("https://img.foxpsd.com/foxpsd_left.png");
                                r[e(189)] = e(137),
                                    t[e(191)](r);
                                var s = this[e(150)][e(140)]();
                                r.onclick = function() {
                                    var t = e;
                                    0 == i.mySwiper[t(176)]() ? i[t(150)][t(138)](s - 1) : i.mySwiper.prev()
                                }
                                    ,
                                    (r = y(e(143)))[e(189)] = e(184),
                                    r[e(181)][e(201)] = e(207),
                                    r[e(181)][e(175)] = "10px",
                                    t[e(191)](r),
                                    r[e(121)] = function() {
                                        var t = e;
                                        i[t(150)][t(176)]() == s - 1 ? i[t(150)][t(138)](0) : i[t(150)][t(202)]()
                                    }
                            }
                        }]),
                            _);
                        function _(t, i) {
                            var n = m
                                , r = void 0 === (s = i.baseWidth) ? 0 : s
                                , s = void 0 === (a = i.baseHeight) ? 0 : a
                                , a = void 0 === (a = i[n(126)]) ? null : a;
                            i = i[n(194)];
                            e(this, _),
                                this[n(126)] = a,
                                this[n(173)] = t,
                                this[n(148)] = r,
                                this.baseHeight = s,
                                this._onchange = i,
                                this[n(164)] = null,
                                this.swiperWrap = null,
                                this[n(180)] = null,
                                this[n(150)] = null,
                                this.swiperClass = n(129)
                        }
                        function y(t) {
                            var e, i = m, n = document[i(159)](i(154));
                            return n.style.position = "absolute",
                                n[i(181)][i(201)] = i(132),
                                n[i(181)][i(117)] = i(123),
                                n[i(181)][i(172)] = i(123),
                                n.style[i(152)] = i(186),
                                n[i(181)][i(168)] = "10",
                                n[i(181)][i(213)] = i(139),
                                n.style[i(197)] = "rgba(0,0,0,.3)",
                                n[i(181)].borderRadius = "1000px",
                                n[i(181)].padding = i(146),
                                n[i(191)]((e = t,
                                    i = m,
                                    (t = document[i(159)](i(165))).src = e,
                                    t[i(181)][i(117)] = i(124),
                                    t[i(181)][i(172)] = i(124),
                                    t[i(181)][i(192)] = i(200),
                                    t)),
                                n
                        }
                        function x() {
                            var t = ["50%", "src", "7282499woIVyp", "className", "from", "appendChild", "borderRadius", "toString", "onchange", "transform", "hidden", "background", "length", "foxpsd_mask_", "1000px", "left", "next", "translate(-50%,-50%)", "querySelector", "return", "563340vrJwkn", "auto", "foxpsd-dot-wrap", "#38f", "372FwMEXB", "name", "relative", "marginTop", "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.", "string", "foxpsd-dot", "_onchange", "width", "?imageMogr2/thumbnail/500x/strip/quality/70/format/webp", "24508989wOoifg", " .foxpsd-dot", "onclick", "24246ltmvVv", "30px", "100%", "10dPRoVt", "element", "margin", "position", "foxpsd-swiper", "concat", "swiperClass", "10px", "Object", "iterator", "10VtFtNX", "flex", "foxpsd-left-btn", "slide", "-15px", "getNumSlides", "prototype", "constructor", "https://img.foxpsd.com/foxpsd_right.png", "createSwiper", "baseHeight", "5px", "swiperWrap", "baseWidth", "Arguments", "mySwiper", "display", "top", "img_url", "div", "renderHtml", "592586zCuvab", "number", "test", "createElement", "value", "done", "call", "Map", "swiperEl", "img", "#999", "int", "zIndex", "overflow", "3630972XkyBLm", "renderSwiperItem", "height", "xiaoguotuList", "renderDots", "right", "getPos", "querySelectorAll", "0 5px", "4088280GAqRsW", "dotWrap", "style", "isArray", "center", "foxpsd-right-btn", "alignItems"];
                            return (x = function() {
                                    return t
                                }
                            )()
                        }
                        var b = i(3267)
                            , w = i.n(b)
                            , S = i(9669)
                            , M = i.n(S);
                        function C(t, e) {
                            var i = L
                                , n = "undefined" != typeof Symbol && t[Symbol[i(358)]] || t["@@iterator"];
                            if (!n) {
                                if (Array[i(408)](t) || (n = function(t, e) {
                                    var i = L;
                                    if (t) {
                                        if (typeof t === i(366))
                                            return A(t, e);
                                        var n = Object[i(365)][i(375)][i(421)](t).slice(8, -1);
                                        return (n = n === i(367) && t[i(373)] ? t[i(373)][i(355)] : n) === i(368) || n === i(377) ? Array.from(t) : n === i(390) || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/[i(349)](n) ? A(t, e) : void 0
                                    }
                                }(t)) || e && t && typeof t[i(350)] === i(394)) {
                                    n && (t = n);
                                    var r = 0;
                                    return {
                                        s: e = function() {}
                                        ,
                                        n: function() {
                                            return r >= t.length ? {
                                                done: !0
                                            } : {
                                                done: !1,
                                                value: t[r++]
                                            }
                                        },
                                        e: function(t) {
                                            throw t
                                        },
                                        f: e
                                    }
                                }
                                throw new TypeError(i(343))
                            }
                            var s, a = !0, o = !1;
                            return {
                                s: function() {
                                    n = n[i(421)](t)
                                },
                                n: function() {
                                    var t = n[i(410)]();
                                    return a = t.done,
                                        t
                                },
                                e: function(t) {
                                    o = !0,
                                        s = t
                                },
                                f: function() {
                                    try {
                                        a || null == n.return || n.return()
                                    } finally {
                                        if (o)
                                            throw s
                                    }
                                }
                            }
                        }
                        function A(t, e) {
                            var i = L;
                            (null == e || e > t[i(350)]) && (e = t[i(350)]);
                            for (var n = 0, r = new Array(e); n < e; n++)
                                r[n] = t[n];
                            return r
                        }
                        function T() {
                            var t = ["rect", "prev", "split", "width", "height", "Arguments", "get", "replace", "src", "number", "push", "readAsDataURL", "3427925tdngOE", "?imageMogr2", "6VDEVON", "apply", "lastIndexOf", "Matrix3", "abrupt", "result", "setAttribute", "Anonymous", "mark", "isArray", "responseXML", "next", "substring", "data-matrix3", "path", "svg", "getAttribute", "?imageView2", "wrap", "return", "getTime", "10DqNNzY", "call", "end", "xlink:href", ":application/octet-stream;", "href", "concat", "12422RtNPby", "sent", "wrapHeight", "8sptldt", "2787333MxmnwC", "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.", "84276VEJXPq", "indexOf", "4FBVhDT", "map", "2413098drBXHI", "test", "length", "___", "wrapWidth", "data-rect", "originalSize", "name", "data", "blob", "iterator", "4017kgxDeF", "8375631mTxVaJ", "getElementsByTagName", "image", "abs", "forEach", "prototype", "string", "Object", "Map", "BoundingRect", "parentNode", ":image/", "points", "constructor", "random", "toString", "6791337VECDHK", "Set", "getElementById", "stop", "img_url", "crossorigin", "187whyKRa", "transform", "value"];
                            return (T = function() {
                                    return t
                                }
                            )()
                        }
                        function P() {
                            var t = L
                                , e = (new Date)[t(419)]();
                            return Math[t(363)]((1 + Math[t(374)]()) * e | 0).toString(16)
                        }
                        !function() {
                            for (var t = L, e = T(); ; )
                                try {
                                    if (623612 == -parseInt(t(382)) * (parseInt(t(338)) / 2) + parseInt(t(342)) / 3 * (parseInt(t(346)) / 4) + -parseInt(t(397)) / 5 * (-parseInt(t(399)) / 6) + parseInt(t(376)) / 7 * (-parseInt(t(341)) / 8) + -parseInt(t(348)) / 9 + -parseInt(t(420)) / 10 * (parseInt(t(360)) / 11) + parseInt(t(344)) / 12 * (parseInt(t(359)) / 13))
                                        break;
                                    e.push(e.shift())
                                } catch (t) {
                                    e.push(e.shift())
                                }
                        }();
                        var E = "?imageMogr2/strip/quality/70/format/webp";
                        function L(t, e) {
                            var i = T();
                            return (L = function(t, e) {
                                    return i[t -= 334]
                                }
                            )(t, e)
                        }
                        function I() {
                            var t = L;
                            return (I = h(u()[t(407)]((function t(e) {
                                    var i, n, r, s, a, o, h, l, c, d, p, f, m, g, v, _, y;
                                    return u().wrap((function(t) {
                                            for (var u = L; ; )
                                                switch (t[u(386)] = t[u(410)]) {
                                                    case 0:
                                                        return t[u(410)] = 2,
                                                            M()[u(391)](e);
                                                    case 2:
                                                        g = t[u(339)],
                                                            i = g.request[u(409)],
                                                            n = [],
                                                            r = [],
                                                            g = i[u(361)](u(414))[0],
                                                            s = Number(g[u(415)]("width")),
                                                            a = Number(g[u(415)](u(389))),
                                                            g = i.getElementsByTagName(u(362)),
                                                            o = C(g);
                                                        try {
                                                            for (o.s(); !(h = o.n()).done; )
                                                                l = h[u(384)],
                                                                    c = l.getAttribute(u(334)),
                                                                -1 != (d = l[u(415)](u(336)))[u(345)](u(416)) && -1 != d[u(345)](u(398)) || (l[u(405)](u(336), d + E),
                                                                    l[u(405)](u(334), c + E))
                                                        } catch (t) {
                                                            o.e(t)
                                                        } finally {
                                                            o.f()
                                                        }
                                                        for (p = i[u(361)]("g"),
                                                                 f = 0; f < p[u(350)]; f++)
                                                            m = p[f][u(415)]("id"),
                                                                p[f][u(405)]("id", "".concat(P(), "_")[u(337)](m));
                                                        g = i[u(361)]("use"),
                                                            v = C(g);
                                                        try {
                                                            for (y = function() {
                                                                var t, e, o = u, h = _.value, l = {}, c = h[o(415)](o(334))[o(392)]("#", ""), d = (e = i[o(378)](c))[o(415)]("href");
                                                                l[o(380)] = d,
                                                                    r[o(395)](k(d)),
                                                                    c = Number(e.getAttribute(o(388))),
                                                                    d = Number(e[o(415)](o(389))),
                                                                    l[o(354)] = "".concat(c, ",")[o(337)](d),
                                                                    l[o(352)] = s,
                                                                    l[o(340)] = a,
                                                                    (e = h[o(415)](o(383))) ? (t = (t = e[o(411)](7, e.length - 1)[o(387)](",")).map((function(t) {
                                                                            return Number(t)
                                                                        }
                                                                    )),
                                                                        e = [1, 0, 0, 1, c / 2, d / 2],
                                                                        t = [(t = t)[0] * e[0] + t[2] * e[1], t[1] * e[0] + t[3] * e[1], t[0] * e[2] + t[2] * e[3], t[1] * e[2] + t[3] * e[3], t[0] * e[4] + t[2] * e[5] + t[4], t[1] * e[4] + t[3] * e[5] + t[5]],
                                                                        h.setAttribute(o(383), "matrix(".concat(t.join(), ")"))) : (t = Number(h[o(415)]("x")) || 0,
                                                                        m = Number(h[o(415)]("y")) || 0,
                                                                        h[o(405)]("x", t + c / 2),
                                                                        h.setAttribute("y", m + d / 2));
                                                                var p, f, m = h[o(370)][o(415)]("clip-path");
                                                                m && (m = m[o(411)](5, m[o(350)] - 1),
                                                                    p = i[o(378)](m).getElementsByTagName(o(413))[0].getAttribute("d"),
                                                                    l.clipPath = p),
                                                                    l[o(402)] = h[o(415)](o(412)),
                                                                l[o(402)] && (l[o(402)] = l.Matrix3[o(387)](",")[o(347)]((function(t) {
                                                                        return Number(t)
                                                                    }
                                                                )),
                                                                    l.Matrix3 = [l[o(402)][0], l[o(402)][3], l[o(402)][6], l.Matrix3[1], l[o(402)][4], l[o(402)][7], l[o(402)][2], l[o(402)][5], l[o(402)][8]]),
                                                                    l[o(385)] = h[o(415)](o(353)),
                                                                l[o(385)] && (l[o(385)] = l[o(385)].split(",")[o(347)]((function(t) {
                                                                        return Number(t)
                                                                    }
                                                                ))),
                                                                    l.BoundingRect = h[o(415)]("data-BoundingRect"),
                                                                l[o(369)] && (l[o(369)] = l[o(369)][o(387)](",")[o(347)]((function(t) {
                                                                        return Number(t)
                                                                    }
                                                                ))),
                                                                h[o(415)]("data-points-x") && (l[o(372)] = (m = h[(d = o)(415)]("data-points-x").split(","),
                                                                    p = h[d(415)]("data-points-y")[d(387)](","),
                                                                    f = [],
                                                                    [m, p][d(364)]((function(t, e) {
                                                                            t.forEach((function(t, i) {
                                                                                    f[i] || (f[i] = {}),
                                                                                        f[i][0 == e ? "x" : "y"] = Number(t)
                                                                                }
                                                                            ))
                                                                        }
                                                                    )),
                                                                    f)),
                                                                h[o(415)]("id") && (l.id = h[o(415)]("id") + o(351) + P(),
                                                                    h.setAttribute("id", l.id)),
                                                                    n[o(395)](l)
                                                            }
                                                                     ,
                                                                     v.s(); !(_ = v.n()).done; )
                                                                y()
                                                        } catch (t) {
                                                            v.e(t)
                                                        } finally {
                                                            v.f()
                                                        }
                                                        return t[u(403)](u(418), {
                                                            layerInfo: n,
                                                            docementSvg: i,
                                                            wrapWidth: s,
                                                            wrapHeight: a
                                                        });
                                                    case 18:
                                                    case u(422):
                                                        return t[u(379)]()
                                                }
                                        }
                                    ), t)
                                }
                            ))))[t(400)](this, arguments)
                        }
                        function k(t) {
                            return new Promise((e = L,
                                    i = h(u()[e(407)]((function i(n) {
                                            var r, s = e;
                                            return u()[s(417)]((function(e) {
                                                    for (var i = s; ; )
                                                        switch (e.prev = e[i(410)]) {
                                                            case 0:
                                                                (r = new Image)[i(381)] = i(406),
                                                                    r.onload = function() {
                                                                        n(r)
                                                                    }
                                                                    ,
                                                                    r[i(393)] = t;
                                                            case 4:
                                                            case "end":
                                                                return e[i(379)]()
                                                        }
                                                }
                                            ), i)
                                        }
                                    ))),
                                    function(t) {
                                        return i[e(400)](this, arguments)
                                    }
                            ));
                            var e, i
                        }
                        function N(t, e) {
                            (null == e || e > t.length) && (e = t.length);
                            for (var i = 0, n = new Array(e); i < e; i++)
                                n[i] = t[i];
                            return n
                        }
                        function O(t, e) {
                            if (t) {
                                if ("string" == typeof t)
                                    return N(t, e);
                                var i = Object.prototype.toString.call(t).slice(8, -1);
                                return "Map" === (i = "Object" === i && t.constructor ? t.constructor.name : i) || "Set" === i ? Array.from(t) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? N(t, e) : void 0
                            }
                        }
                        function D(t, e) {
                            return function(t) {
                                if (Array.isArray(t))
                                    return t
                            }(t) || function(t, e) {
                                var i = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                                if (null != i) {
                                    var n, r, s = [], a = !0, o = !1;
                                    try {
                                        for (i = i.call(t); !(a = (n = i.next()).done) && (s.push(n.value),
                                        !e || s.length !== e); a = !0)
                                            ;
                                    } catch (t) {
                                        o = !0,
                                            r = t
                                    } finally {
                                        try {
                                            a || null == i.return || i.return()
                                        } finally {
                                            if (o)
                                                throw r
                                        }
                                    }
                                    return s
                                }
                            }(t, e) || O(t, e) || function() {
                                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
                            }()
                        }
                        function R(t) {
                            return function(t) {
                                if (Array.isArray(t))
                                    return N(t)
                            }(t) || function(t) {
                                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"])
                                    return Array.from(t)
                            }(t) || O(t) || function() {
                                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
                            }()
                        }
                        const z = "136"
                            , F = {
                            LEFT: 0,
                            MIDDLE: 1,
                            RIGHT: 2,
                            ROTATE: 0,
                            DOLLY: 1,
                            PAN: 2
                        }
                            , B = {
                            ROTATE: 0,
                            PAN: 1,
                            DOLLY_PAN: 2,
                            DOLLY_ROTATE: 3
                        }
                            , V = 0
                            , U = 1
                            , G = 2
                            , W = 3
                            , j = 0
                            , H = 1
                            , q = 2
                            , X = 3
                            , Z = 0
                            , J = 1
                            , Y = 2
                            , Q = 1
                            , K = 2
                            , $ = 0
                            , tt = 1
                            , et = 2
                            , it = 3
                            , nt = 4
                            , rt = 5
                            , st = 100
                            , at = 101
                            , ot = 102
                            , ht = 103
                            , lt = 104
                            , ut = 200
                            , ct = 201
                            , dt = 202
                            , pt = 203
                            , ft = 204
                            , mt = 205
                            , gt = 206
                            , vt = 207
                            , _t = 208
                            , yt = 209
                            , xt = 210
                            , bt = 0
                            , wt = 1
                            , St = 2
                            , Mt = 3
                            , Ct = 4
                            , At = 5
                            , Tt = 6
                            , Pt = 7
                            , Et = 0
                            , Lt = 1
                            , It = 2
                            , kt = 0
                            , Nt = 1
                            , Ot = 2
                            , Dt = 3
                            , Rt = 4
                            , zt = 5
                            , Ft = 300
                            , Bt = 301
                            , Vt = 302
                            , Ut = 303
                            , Gt = 304
                            , Wt = 306
                            , jt = 307
                            , Ht = 1e3
                            , qt = 1001
                            , Xt = 1002
                            , Zt = 1003
                            , Jt = 1004
                            , Yt = 1004
                            , Qt = 1005
                            , Kt = 1005
                            , $t = 1006
                            , te = 1007
                            , ee = 1007
                            , ie = 1008
                            , ne = 1008
                            , re = 1009
                            , se = 1010
                            , ae = 1011
                            , oe = 1012
                            , he = 1013
                            , le = 1014
                            , ue = 1015
                            , ce = 1016
                            , de = 1017
                            , pe = 1018
                            , fe = 1019
                            , me = 1020
                            , ge = 1021
                            , ve = 1022
                            , _e = 1023
                            , ye = 1024
                            , xe = 1025
                            , be = 1026
                            , we = 1027
                            , Se = 1028
                            , Me = 1029
                            , Ce = 1030
                            , Ae = 1031
                            , Te = 1032
                            , Pe = 1033
                            , Ee = 33776
                            , Le = 33777
                            , Ie = 33778
                            , ke = 33779
                            , Ne = 35840
                            , Oe = 35841
                            , De = 35842
                            , Re = 35843
                            , ze = 36196
                            , Fe = 37492
                            , Be = 37496
                            , Ve = 37808
                            , Ue = 37809
                            , Ge = 37810
                            , We = 37811
                            , je = 37812
                            , He = 37813
                            , qe = 37814
                            , Xe = 37815
                            , Ze = 37816
                            , Je = 37817
                            , Ye = 37818
                            , Qe = 37819
                            , Ke = 37820
                            , $e = 37821
                            , ti = 36492
                            , ei = 37840
                            , ii = 37841
                            , ni = 37842
                            , ri = 37843
                            , si = 37844
                            , ai = 37845
                            , oi = 37846
                            , hi = 37847
                            , li = 37848
                            , ui = 37849
                            , ci = 37850
                            , di = 37851
                            , pi = 37852
                            , fi = 37853
                            , mi = 2200
                            , gi = 2201
                            , vi = 2202
                            , _i = 2300
                            , yi = 2301
                            , xi = 2302
                            , bi = 2400
                            , wi = 2401
                            , Si = 2402
                            , Mi = 2500
                            , Ci = 2501
                            , Ai = 0
                            , Ti = 1
                            , Pi = 2
                            , Ei = 3e3
                            , Li = 3001
                            , Ii = 3200
                            , ki = 3201
                            , Ni = 0
                            , Oi = 1
                            , Di = 0
                            , Ri = 7680
                            , zi = 7681
                            , Fi = 7682
                            , Bi = 7683
                            , Vi = 34055
                            , Ui = 34056
                            , Gi = 5386
                            , Wi = 512
                            , ji = 513
                            , Hi = 514
                            , qi = 515
                            , Xi = 516
                            , Zi = 517
                            , Ji = 518
                            , Yi = 519
                            , Qi = 35044
                            , Ki = 35048
                            , $i = 35040
                            , tn = 35045
                            , en = 35049
                            , nn = 35041
                            , rn = 35046
                            , sn = 35050
                            , an = 35042
                            , on = "100"
                            , hn = "300 es";
                        class ln {
                            addEventListener(t, e) {
                                void 0 === this._listeners && (this._listeners = {});
                                const i = this._listeners;
                                void 0 === i[t] && (i[t] = []),
                                -1 === i[t].indexOf(e) && i[t].push(e)
                            }
                            hasEventListener(t, e) {
                                if (void 0 === this._listeners)
                                    return !1;
                                const i = this._listeners;
                                return void 0 !== i[t] && -1 !== i[t].indexOf(e)
                            }
                            removeEventListener(t, e) {
                                if (void 0 !== this._listeners) {
                                    const i = this._listeners[t];
                                    void 0 === i || -1 !== (e = i.indexOf(e)) && i.splice(e, 1)
                                }
                            }
                            dispatchEvent(t) {
                                if (void 0 !== this._listeners) {
                                    const e = this._listeners[t.type];
                                    if (void 0 !== e) {
                                        t.target = this;
                                        const i = e.slice(0);
                                        for (let e = 0, n = i.length; e < n; e++)
                                            i[e].call(this, t);
                                        t.target = null
                                    }
                                }
                            }
                        }
                        const un = [];
                        for (let t = 0; t < 256; t++)
                            un[t] = (t < 16 ? "0" : "") + t.toString(16);
                        let cn = 1234567;
                        const dn = Math.PI / 180
                            , pn = 180 / Math.PI;
                        function fn() {
                            var t = 4294967295 * Math.random() | 0
                                , e = 4294967295 * Math.random() | 0
                                , i = 4294967295 * Math.random() | 0
                                , n = 4294967295 * Math.random() | 0;
                            return (un[255 & t] + un[t >> 8 & 255] + un[t >> 16 & 255] + un[t >> 24 & 255] + "-" + un[255 & e] + un[e >> 8 & 255] + "-" + un[e >> 16 & 15 | 64] + un[e >> 24 & 255] + "-" + un[63 & i | 128] + un[i >> 8 & 255] + "-" + un[i >> 16 & 255] + un[i >> 24 & 255] + un[255 & n] + un[n >> 8 & 255] + un[n >> 16 & 255] + un[n >> 24 & 255]).toUpperCase()
                        }
                        function mn(t, e, i) {
                            return Math.max(e, Math.min(i, t))
                        }
                        function gn(t, e) {
                            return (t % e + e) % e
                        }
                        function vn(t, e, i) {
                            return (1 - i) * t + i * e
                        }
                        function _n(t) {
                            return 0 == (t & t - 1) && 0 !== t
                        }
                        function yn(t) {
                            return Math.pow(2, Math.ceil(Math.log(t) / Math.LN2))
                        }
                        function xn(t) {
                            return Math.pow(2, Math.floor(Math.log(t) / Math.LN2))
                        }
                        var bn = Object.freeze({
                            __proto__: null,
                            DEG2RAD: dn,
                            RAD2DEG: pn,
                            generateUUID: fn,
                            clamp: mn,
                            euclideanModulo: gn,
                            mapLinear: function(t, e, i, n, r) {
                                return n + (t - e) * (r - n) / (i - e)
                            },
                            inverseLerp: function(t, e, i) {
                                return t !== e ? (i - t) / (e - t) : 0
                            },
                            lerp: vn,
                            damp: function(t, e, i, n) {
                                return vn(t, e, 1 - Math.exp(-i * n))
                            },
                            pingpong: function(t, e=1) {
                                return e - Math.abs(gn(t, 2 * e) - e)
                            },
                            smoothstep: function(t, e, i) {
                                return t <= e ? 0 : i <= t ? 1 : (t = (t - e) / (i - e)) * t * (3 - 2 * t)
                            },
                            smootherstep: function(t, e, i) {
                                return t <= e ? 0 : i <= t ? 1 : (t = (t - e) / (i - e)) * t * t * (t * (6 * t - 15) + 10)
                            },
                            randInt: function(t, e) {
                                return t + Math.floor(Math.random() * (e - t + 1))
                            },
                            randFloat: function(t, e) {
                                return t + Math.random() * (e - t)
                            },
                            randFloatSpread: function(t) {
                                return t * (.5 - Math.random())
                            },
                            seededRandom: function(t) {
                                return void 0 !== t && (cn = t % 2147483647),
                                    cn = 16807 * cn % 2147483647,
                                (cn - 1) / 2147483646
                            },
                            degToRad: function(t) {
                                return t * dn
                            },
                            radToDeg: function(t) {
                                return t * pn
                            },
                            isPowerOfTwo: _n,
                            ceilPowerOfTwo: yn,
                            floorPowerOfTwo: xn,
                            setQuaternionFromProperEuler: function(t, e, i, n, r) {
                                const s = Math.cos
                                    , a = Math.sin;
                                var o = s(i / 2)
                                    , h = a(i / 2)
                                    , l = s((e + n) / 2)
                                    , u = a((e + n) / 2)
                                    , c = s((e - n) / 2)
                                    , d = a((e - n) / 2)
                                    , p = s((n - e) / 2)
                                    , f = a((n - e) / 2);
                                switch (r) {
                                    case "XYX":
                                        t.set(o * u, h * c, h * d, o * l);
                                        break;
                                    case "YZY":
                                        t.set(h * d, o * u, h * c, o * l);
                                        break;
                                    case "ZXZ":
                                        t.set(h * c, h * d, o * u, o * l);
                                        break;
                                    case "XZX":
                                        t.set(o * u, h * f, h * p, o * l);
                                        break;
                                    case "YXY":
                                        t.set(h * p, o * u, h * f, o * l);
                                        break;
                                    case "ZYZ":
                                        t.set(h * f, h * p, o * u, o * l)
                                }
                            }
                        });
                        class wn {
                            constructor(t=0, e=0) {
                                this.x = t,
                                    this.y = e
                            }
                            get width() {
                                return this.x
                            }
                            set width(t) {
                                this.x = t
                            }
                            get height() {
                                return this.y
                            }
                            set height(t) {
                                this.y = t
                            }
                            set(t, e) {
                                return this.x = t,
                                    this.y = e,
                                    this
                            }
                            setScalar(t) {
                                return this.x = t,
                                    this.y = t,
                                    this
                            }
                            setX(t) {
                                return this.x = t,
                                    this
                            }
                            setY(t) {
                                return this.y = t,
                                    this
                            }
                            setComponent(t, e) {
                                switch (t) {
                                    case 0:
                                        this.x = e;
                                        break;
                                    case 1:
                                        this.y = e;
                                        break;
                                    default:
                                        throw new Error("index is out of range: " + t)
                                }
                                return this
                            }
                            getComponent(t) {
                                switch (t) {
                                    case 0:
                                        return this.x;
                                    case 1:
                                        return this.y;
                                    default:
                                        throw new Error("index is out of range: " + t)
                                }
                            }
                            clone() {
                                return new this.constructor(this.x,this.y)
                            }
                            copy(t) {
                                return this.x = t.x,
                                    this.y = t.y,
                                    this
                            }
                            add(t, e) {
                                return void 0 !== e ? this.addVectors(t, e) : (this.x += t.x,
                                    this.y += t.y,
                                    this)
                            }
                            addScalar(t) {
                                return this.x += t,
                                    this.y += t,
                                    this
                            }
                            addVectors(t, e) {
                                return this.x = t.x + e.x,
                                    this.y = t.y + e.y,
                                    this
                            }
                            addScaledVector(t, e) {
                                return this.x += t.x * e,
                                    this.y += t.y * e,
                                    this
                            }
                            sub(t, e) {
                                return void 0 !== e ? this.subVectors(t, e) : (this.x -= t.x,
                                    this.y -= t.y,
                                    this)
                            }
                            subScalar(t) {
                                return this.x -= t,
                                    this.y -= t,
                                    this
                            }
                            subVectors(t, e) {
                                return this.x = t.x - e.x,
                                    this.y = t.y - e.y,
                                    this
                            }
                            multiply(t) {
                                return this.x *= t.x,
                                    this.y *= t.y,
                                    this
                            }
                            multiplyScalar(t) {
                                return this.x *= t,
                                    this.y *= t,
                                    this
                            }
                            divide(t) {
                                return this.x /= t.x,
                                    this.y /= t.y,
                                    this
                            }
                            divideScalar(t) {
                                return this.multiplyScalar(1 / t)
                            }
                            applyMatrix3(t) {
                                var e = this.x
                                    , i = this.y;
                                t = t.elements;
                                return this.x = t[0] * e + t[3] * i + t[6],
                                    this.y = t[1] * e + t[4] * i + t[7],
                                    this
                            }
                            min(t) {
                                return this.x = Math.min(this.x, t.x),
                                    this.y = Math.min(this.y, t.y),
                                    this
                            }
                            max(t) {
                                return this.x = Math.max(this.x, t.x),
                                    this.y = Math.max(this.y, t.y),
                                    this
                            }
                            clamp(t, e) {
                                return this.x = Math.max(t.x, Math.min(e.x, this.x)),
                                    this.y = Math.max(t.y, Math.min(e.y, this.y)),
                                    this
                            }
                            clampScalar(t, e) {
                                return this.x = Math.max(t, Math.min(e, this.x)),
                                    this.y = Math.max(t, Math.min(e, this.y)),
                                    this
                            }
                            clampLength(t, e) {
                                var i = this.length();
                                return this.divideScalar(i || 1).multiplyScalar(Math.max(t, Math.min(e, i)))
                            }
                            floor() {
                                return this.x = Math.floor(this.x),
                                    this.y = Math.floor(this.y),
                                    this
                            }
                            ceil() {
                                return this.x = Math.ceil(this.x),
                                    this.y = Math.ceil(this.y),
                                    this
                            }
                            round() {
                                return this.x = Math.round(this.x),
                                    this.y = Math.round(this.y),
                                    this
                            }
                            roundToZero() {
                                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                                    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                                    this
                            }
                            negate() {
                                return this.x = -this.x,
                                    this.y = -this.y,
                                    this
                            }
                            dot(t) {
                                return this.x * t.x + this.y * t.y
                            }
                            cross(t) {
                                return this.x * t.y - this.y * t.x
                            }
                            lengthSq() {
                                return this.x * this.x + this.y * this.y
                            }
                            length() {
                                return Math.sqrt(this.x * this.x + this.y * this.y)
                            }
                            manhattanLength() {
                                return Math.abs(this.x) + Math.abs(this.y)
                            }
                            normalize() {
                                return this.divideScalar(this.length() || 1)
                            }
                            angle() {
                                return Math.atan2(-this.y, -this.x) + Math.PI
                            }
                            distanceTo(t) {
                                return Math.sqrt(this.distanceToSquared(t))
                            }
                            distanceToSquared(t) {
                                var e = this.x - t.x;
                                return e * e + (t = this.y - t.y) * t
                            }
                            manhattanDistanceTo(t) {
                                return Math.abs(this.x - t.x) + Math.abs(this.y - t.y)
                            }
                            setLength(t) {
                                return this.normalize().multiplyScalar(t)
                            }
                            lerp(t, e) {
                                return this.x += (t.x - this.x) * e,
                                    this.y += (t.y - this.y) * e,
                                    this
                            }
                            lerpVectors(t, e, i) {
                                return this.x = t.x + (e.x - t.x) * i,
                                    this.y = t.y + (e.y - t.y) * i,
                                    this
                            }
                            equals(t) {
                                return t.x === this.x && t.y === this.y
                            }
                            fromArray(t, e=0) {
                                return this.x = t[e],
                                    this.y = t[e + 1],
                                    this
                            }
                            toArray(t=[], e=0) {
                                return t[e] = this.x,
                                    t[e + 1] = this.y,
                                    t
                            }
                            fromBufferAttribute(t, e, i) {
                                return this.x = t.getX(e),
                                    this.y = t.getY(e),
                                    this
                            }
                            rotateAround(t, e) {
                                var i = Math.cos(e)
                                    , n = Math.sin(e)
                                    , r = this.x - t.x;
                                e = this.y - t.y;
                                return this.x = r * i - e * n + t.x,
                                    this.y = r * n + e * i + t.y,
                                    this
                            }
                            random() {
                                return this.x = Math.random(),
                                    this.y = Math.random(),
                                    this
                            }
                            *[Symbol.iterator]() {
                                yield this.x,
                                    yield this.y
                            }
                        }
                        wn.prototype.isVector2 = !0;
                        class Sn {
                            constructor() {
                                this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1]
                            }
                            set(t, e, i, n, r, s, a, o, h) {
                                const l = this.elements;
                                return l[0] = t,
                                    l[1] = n,
                                    l[2] = a,
                                    l[3] = e,
                                    l[4] = r,
                                    l[5] = o,
                                    l[6] = i,
                                    l[7] = s,
                                    l[8] = h,
                                    this
                            }
                            identity() {
                                return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1),
                                    this
                            }
                            copy(t) {
                                const e = this.elements;
                                return t = t.elements,
                                    e[0] = t[0],
                                    e[1] = t[1],
                                    e[2] = t[2],
                                    e[3] = t[3],
                                    e[4] = t[4],
                                    e[5] = t[5],
                                    e[6] = t[6],
                                    e[7] = t[7],
                                    e[8] = t[8],
                                    this
                            }
                            extractBasis(t, e, i) {
                                return t.setFromMatrix3Column(this, 0),
                                    e.setFromMatrix3Column(this, 1),
                                    i.setFromMatrix3Column(this, 2),
                                    this
                            }
                            setFromMatrix4(t) {
                                return t = t.elements,
                                    this.set(t[0], t[4], t[8], t[1], t[5], t[9], t[2], t[6], t[10]),
                                    this
                            }
                            multiply(t) {
                                return this.multiplyMatrices(this, t)
                            }
                            premultiply(t) {
                                return this.multiplyMatrices(t, this)
                            }
                            multiplyMatrices(t, e) {
                                var i = t.elements
                                    , n = e.elements;
                                const r = this.elements;
                                var s = i[0]
                                    , a = i[3]
                                    , o = i[6]
                                    , h = i[1]
                                    , l = i[4]
                                    , u = i[7]
                                    , c = i[2]
                                    , d = i[5]
                                    , p = i[8]
                                    , f = n[0]
                                    , m = n[3]
                                    , g = n[6]
                                    , v = n[1]
                                    , _ = n[4];
                                t = n[7],
                                    e = n[2],
                                    i = n[5],
                                    n = n[8];
                                return r[0] = s * f + a * v + o * e,
                                    r[3] = s * m + a * _ + o * i,
                                    r[6] = s * g + a * t + o * n,
                                    r[1] = h * f + l * v + u * e,
                                    r[4] = h * m + l * _ + u * i,
                                    r[7] = h * g + l * t + u * n,
                                    r[2] = c * f + d * v + p * e,
                                    r[5] = c * m + d * _ + p * i,
                                    r[8] = c * g + d * t + p * n,
                                    this
                            }
                            multiplyScalar(t) {
                                const e = this.elements;
                                return e[0] *= t,
                                    e[3] *= t,
                                    e[6] *= t,
                                    e[1] *= t,
                                    e[4] *= t,
                                    e[7] *= t,
                                    e[2] *= t,
                                    e[5] *= t,
                                    e[8] *= t,
                                    this
                            }
                            determinant() {
                                var t, e = (t = this.elements)[0], i = t[1], n = t[2], r = t[3], s = t[4], a = t[5], o = t[6], h = t[7];
                                return e * s * (t = t[8]) - e * a * h - i * r * t + i * a * o + n * r * h - n * s * o
                            }
                            invert() {
                                const t = this.elements
                                    , e = t[0]
                                    , i = t[1]
                                    , n = t[2]
                                    , r = t[3]
                                    , s = t[4]
                                    , a = t[5]
                                    , o = t[6]
                                    , h = t[7]
                                    , l = t[8]
                                    , u = l * s - a * h
                                    , c = a * o - l * r
                                    , d = h * r - s * o
                                    , p = e * u + i * c + n * d;
                                if (0 == p)
                                    return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
                                var f = 1 / p;
                                return t[0] = u * f,
                                    t[1] = (n * h - l * i) * f,
                                    t[2] = (a * i - n * s) * f,
                                    t[3] = c * f,
                                    t[4] = (l * e - n * o) * f,
                                    t[5] = (n * r - a * e) * f,
                                    t[6] = d * f,
                                    t[7] = (i * o - h * e) * f,
                                    t[8] = (s * e - i * r) * f,
                                    this
                            }
                            transpose() {
                                var t;
                                const e = this.elements;
                                return t = e[1],
                                    e[1] = e[3],
                                    e[3] = t,
                                    t = e[2],
                                    e[2] = e[6],
                                    e[6] = t,
                                    t = e[5],
                                    e[5] = e[7],
                                    e[7] = t,
                                    this
                            }
                            getNormalMatrix(t) {
                                return this.setFromMatrix4(t).invert().transpose()
                            }
                            transposeIntoArray(t) {
                                var e = this.elements;
                                return t[0] = e[0],
                                    t[1] = e[3],
                                    t[2] = e[6],
                                    t[3] = e[1],
                                    t[4] = e[4],
                                    t[5] = e[7],
                                    t[6] = e[2],
                                    t[7] = e[5],
                                    t[8] = e[8],
                                    this
                            }
                            setUvTransform(t, e, i, n, r, s, a) {
                                var o = Math.cos(r);
                                r = Math.sin(r);
                                return this.set(i * o, i * r, -i * (o * s + r * a) + s + t, -n * r, n * o, -n * (-r * s + o * a) + a + e, 0, 0, 1),
                                    this
                            }
                            scale(t, e) {
                                const i = this.elements;
                                return i[0] *= t,
                                    i[3] *= t,
                                    i[6] *= t,
                                    i[1] *= e,
                                    i[4] *= e,
                                    i[7] *= e,
                                    this
                            }
                            rotate(t) {
                                var e = Math.cos(t)
                                    , i = Math.sin(t);
                                const n = this.elements;
                                var r = n[0]
                                    , s = n[3]
                                    , a = n[6]
                                    , o = n[1]
                                    , h = n[4];
                                t = n[7];
                                return n[0] = e * r + i * o,
                                    n[3] = e * s + i * h,
                                    n[6] = e * a + i * t,
                                    n[1] = -i * r + e * o,
                                    n[4] = -i * s + e * h,
                                    n[7] = -i * a + e * t,
                                    this
                            }
                            translate(t, e) {
                                const i = this.elements;
                                return i[0] += t * i[2],
                                    i[3] += t * i[5],
                                    i[6] += t * i[8],
                                    i[1] += e * i[2],
                                    i[4] += e * i[5],
                                    i[7] += e * i[8],
                                    this
                            }
                            equals(t) {
                                var e = this.elements
                                    , i = t.elements;
                                for (let t = 0; t < 9; t++)
                                    if (e[t] !== i[t])
                                        return !1;
                                return !0
                            }
                            fromArray(t, e=0) {
                                for (let i = 0; i < 9; i++)
                                    this.elements[i] = t[i + e];
                                return this
                            }
                            toArray(t=[], e=0) {
                                var i = this.elements;
                                return t[e] = i[0],
                                    t[e + 1] = i[1],
                                    t[e + 2] = i[2],
                                    t[e + 3] = i[3],
                                    t[e + 4] = i[4],
                                    t[e + 5] = i[5],
                                    t[e + 6] = i[6],
                                    t[e + 7] = i[7],
                                    t[e + 8] = i[8],
                                    t
                            }
                            clone() {
                                return (new this.constructor).fromArray(this.elements)
                            }
                        }
                        function Mn(t) {
                            if (0 === t.length)
                                return -1 / 0;
                            let e = t[0];
                            for (let i = 1, n = t.length; i < n; ++i)
                                t[i] > e && (e = t[i]);
                            return e
                        }
                        Sn.prototype.isMatrix3 = !0;
                        const Cn = {
                            Int8Array,
                            Uint8Array,
                            Uint8ClampedArray,
                            Int16Array,
                            Uint16Array,
                            Int32Array,
                            Uint32Array,
                            Float32Array,
                            Float64Array
                        };
                        function An(t, e) {
                            return new Cn[t](e)
                        }
                        function Tn(t) {
                            return document.createElementNS("http://www.w3.org/1999/xhtml", t)
                        }
                        let Pn;
                        class En {
                            static getDataURL(t) {
                                if (/^data:/i.test(t.src))
                                    return t.src;
                                if ("undefined" == typeof HTMLCanvasElement)
                                    return t.src;
                                let e;
                                if (t instanceof HTMLCanvasElement)
                                    e = t;
                                else {
                                    void 0 === Pn && (Pn = Tn("canvas")),
                                        Pn.width = t.width,
                                        Pn.height = t.height;
                                    const i = Pn.getContext("2d");
                                    t instanceof ImageData ? i.putImageData(t, 0, 0) : i.drawImage(t, 0, 0, t.width, t.height),
                                        e = Pn
                                }
                                return 2048 < e.width || 2048 < e.height ? e.toDataURL("image/jpeg", .6) : e.toDataURL("image/png")
                            }
                        }
                        let Ln = 0;
                        class In extends ln {
                            constructor(t=In.DEFAULT_IMAGE, e=In.DEFAULT_MAPPING, i=qt, n=qt, r=$t, s=ie, a=_e, o=re, h=1, l=Ei) {
                                super(),
                                    Object.defineProperty(this, "id", {
                                        value: Ln++
                                    }),
                                    this.uuid = fn(),
                                    this.name = "",
                                    this.image = t,
                                    this.mipmaps = [],
                                    this.mapping = e,
                                    this.wrapS = i,
                                    this.wrapT = n,
                                    this.magFilter = r,
                                    this.minFilter = s,
                                    this.anisotropy = h,
                                    this.format = a,
                                    this.internalFormat = null,
                                    this.type = o,
                                    this.offset = new wn(0,0),
                                    this.repeat = new wn(1,1),
                                    this.center = new wn(0,0),
                                    this.rotation = 0,
                                    this.matrixAutoUpdate = !0,
                                    this.matrix = new Sn,
                                    this.generateMipmaps = !0,
                                    this.premultiplyAlpha = !1,
                                    this.flipY = !0,
                                    this.unpackAlignment = 4,
                                    this.encoding = l,
                                    this.userData = {},
                                    this.version = 0,
                                    this.onUpdate = null,
                                    this.isRenderTargetTexture = !1
                            }
                            updateMatrix() {
                                this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y)
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                            copy(t) {
                                return this.name = t.name,
                                    this.image = t.image,
                                    this.mipmaps = t.mipmaps.slice(0),
                                    this.mapping = t.mapping,
                                    this.wrapS = t.wrapS,
                                    this.wrapT = t.wrapT,
                                    this.magFilter = t.magFilter,
                                    this.minFilter = t.minFilter,
                                    this.anisotropy = t.anisotropy,
                                    this.format = t.format,
                                    this.internalFormat = t.internalFormat,
                                    this.type = t.type,
                                    this.offset.copy(t.offset),
                                    this.repeat.copy(t.repeat),
                                    this.center.copy(t.center),
                                    this.rotation = t.rotation,
                                    this.matrixAutoUpdate = t.matrixAutoUpdate,
                                    this.matrix.copy(t.matrix),
                                    this.generateMipmaps = t.generateMipmaps,
                                    this.premultiplyAlpha = t.premultiplyAlpha,
                                    this.flipY = t.flipY,
                                    this.unpackAlignment = t.unpackAlignment,
                                    this.encoding = t.encoding,
                                    this.userData = JSON.parse(JSON.stringify(t.userData)),
                                    this
                            }
                            toJSON(t) {
                                var e = void 0 === t || "string" == typeof t;
                                if (!e && void 0 !== t.textures[this.uuid])
                                    return t.textures[this.uuid];
                                const i = {
                                    metadata: {
                                        version: 4.5,
                                        type: "Texture",
                                        generator: "Texture.toJSON"
                                    },
                                    uuid: this.uuid,
                                    name: this.name,
                                    mapping: this.mapping,
                                    repeat: [this.repeat.x, this.repeat.y],
                                    offset: [this.offset.x, this.offset.y],
                                    center: [this.center.x, this.center.y],
                                    rotation: this.rotation,
                                    wrap: [this.wrapS, this.wrapT],
                                    format: this.format,
                                    type: this.type,
                                    encoding: this.encoding,
                                    minFilter: this.minFilter,
                                    magFilter: this.magFilter,
                                    anisotropy: this.anisotropy,
                                    flipY: this.flipY,
                                    premultiplyAlpha: this.premultiplyAlpha,
                                    unpackAlignment: this.unpackAlignment
                                };
                                if (void 0 !== this.image) {
                                    const n = this.image;
                                    if (void 0 === n.uuid && (n.uuid = fn()),
                                    !e && void 0 === t.images[n.uuid]) {
                                        let e;
                                        if (Array.isArray(n)) {
                                            e = [];
                                            for (let t = 0, i = n.length; t < i; t++)
                                                n[t].isDataTexture ? e.push(kn(n[t].image)) : e.push(kn(n[t]))
                                        } else
                                            e = kn(n);
                                        t.images[n.uuid] = {
                                            uuid: n.uuid,
                                            url: e
                                        }
                                    }
                                    i.image = n.uuid
                                }
                                return "{}" !== JSON.stringify(this.userData) && (i.userData = this.userData),
                                e || (t.textures[this.uuid] = i),
                                    i
                            }
                            dispose() {
                                this.dispatchEvent({
                                    type: "dispose"
                                })
                            }
                            transformUv(t) {
                                if (this.mapping !== Ft)
                                    return t;
                                if (t.applyMatrix3(this.matrix),
                                t.x < 0 || 1 < t.x)
                                    switch (this.wrapS) {
                                        case Ht:
                                            t.x = t.x - Math.floor(t.x);
                                            break;
                                        case qt:
                                            t.x = t.x < 0 ? 0 : 1;
                                            break;
                                        case Xt:
                                            1 === Math.abs(Math.floor(t.x) % 2) ? t.x = Math.ceil(t.x) - t.x : t.x = t.x - Math.floor(t.x)
                                    }
                                if (t.y < 0 || 1 < t.y)
                                    switch (this.wrapT) {
                                        case Ht:
                                            t.y = t.y - Math.floor(t.y);
                                            break;
                                        case qt:
                                            t.y = t.y < 0 ? 0 : 1;
                                            break;
                                        case Xt:
                                            1 === Math.abs(Math.floor(t.y) % 2) ? t.y = Math.ceil(t.y) - t.y : t.y = t.y - Math.floor(t.y)
                                    }
                                return this.flipY && (t.y = 1 - t.y),
                                    t
                            }
                            set needsUpdate(t) {
                                !0 === t && this.version++
                            }
                        }
                        function kn(t) {
                            return "undefined" != typeof HTMLImageElement && t instanceof HTMLImageElement || "undefined" != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement || "undefined" != typeof ImageBitmap && t instanceof ImageBitmap ? En.getDataURL(t) : t.data ? {
                                data: Array.prototype.slice.call(t.data),
                                width: t.width,
                                height: t.height,
                                type: t.data.constructor.name
                            } : {}
                        }
                        In.DEFAULT_IMAGE = void 0,
                            In.DEFAULT_MAPPING = Ft,
                            In.prototype.isTexture = !0;
                        class Nn {
                            constructor(t=0, e=0, i=0, n=1) {
                                this.x = t,
                                    this.y = e,
                                    this.z = i,
                                    this.w = n
                            }
                            get width() {
                                return this.z
                            }
                            set width(t) {
                                this.z = t
                            }
                            get height() {
                                return this.w
                            }
                            set height(t) {
                                this.w = t
                            }
                            set(t, e, i, n) {
                                return this.x = t,
                                    this.y = e,
                                    this.z = i,
                                    this.w = n,
                                    this
                            }
                            setScalar(t) {
                                return this.x = t,
                                    this.y = t,
                                    this.z = t,
                                    this.w = t,
                                    this
                            }
                            setX(t) {
                                return this.x = t,
                                    this
                            }
                            setY(t) {
                                return this.y = t,
                                    this
                            }
                            setZ(t) {
                                return this.z = t,
                                    this
                            }
                            setW(t) {
                                return this.w = t,
                                    this
                            }
                            setComponent(t, e) {
                                switch (t) {
                                    case 0:
                                        this.x = e;
                                        break;
                                    case 1:
                                        this.y = e;
                                        break;
                                    case 2:
                                        this.z = e;
                                        break;
                                    case 3:
                                        this.w = e;
                                        break;
                                    default:
                                        throw new Error("index is out of range: " + t)
                                }
                                return this
                            }
                            getComponent(t) {
                                switch (t) {
                                    case 0:
                                        return this.x;
                                    case 1:
                                        return this.y;
                                    case 2:
                                        return this.z;
                                    case 3:
                                        return this.w;
                                    default:
                                        throw new Error("index is out of range: " + t)
                                }
                            }
                            clone() {
                                return new this.constructor(this.x,this.y,this.z,this.w)
                            }
                            copy(t) {
                                return this.x = t.x,
                                    this.y = t.y,
                                    this.z = t.z,
                                    this.w = void 0 !== t.w ? t.w : 1,
                                    this
                            }
                            add(t, e) {
                                return void 0 !== e ? this.addVectors(t, e) : (this.x += t.x,
                                    this.y += t.y,
                                    this.z += t.z,
                                    this.w += t.w,
                                    this)
                            }
                            addScalar(t) {
                                return this.x += t,
                                    this.y += t,
                                    this.z += t,
                                    this.w += t,
                                    this
                            }
                            addVectors(t, e) {
                                return this.x = t.x + e.x,
                                    this.y = t.y + e.y,
                                    this.z = t.z + e.z,
                                    this.w = t.w + e.w,
                                    this
                            }
                            addScaledVector(t, e) {
                                return this.x += t.x * e,
                                    this.y += t.y * e,
                                    this.z += t.z * e,
                                    this.w += t.w * e,
                                    this
                            }
                            sub(t, e) {
                                return void 0 !== e ? this.subVectors(t, e) : (this.x -= t.x,
                                    this.y -= t.y,
                                    this.z -= t.z,
                                    this.w -= t.w,
                                    this)
                            }
                            subScalar(t) {
                                return this.x -= t,
                                    this.y -= t,
                                    this.z -= t,
                                    this.w -= t,
                                    this
                            }
                            subVectors(t, e) {
                                return this.x = t.x - e.x,
                                    this.y = t.y - e.y,
                                    this.z = t.z - e.z,
                                    this.w = t.w - e.w,
                                    this
                            }
                            multiply(t) {
                                return this.x *= t.x,
                                    this.y *= t.y,
                                    this.z *= t.z,
                                    this.w *= t.w,
                                    this
                            }
                            multiplyScalar(t) {
                                return this.x *= t,
                                    this.y *= t,
                                    this.z *= t,
                                    this.w *= t,
                                    this
                            }
                            applyMatrix4(t) {
                                var e = this.x
                                    , i = this.y
                                    , n = this.z
                                    , r = this.w;
                                t = t.elements;
                                return this.x = t[0] * e + t[4] * i + t[8] * n + t[12] * r,
                                    this.y = t[1] * e + t[5] * i + t[9] * n + t[13] * r,
                                    this.z = t[2] * e + t[6] * i + t[10] * n + t[14] * r,
                                    this.w = t[3] * e + t[7] * i + t[11] * n + t[15] * r,
                                    this
                            }
                            divideScalar(t) {
                                return this.multiplyScalar(1 / t)
                            }
                            setAxisAngleFromQuaternion(t) {
                                this.w = 2 * Math.acos(t.w);
                                var e = Math.sqrt(1 - t.w * t.w);
                                return e < 1e-4 ? (this.x = 1,
                                    this.y = 0,
                                    this.z = 0) : (this.x = t.x / e,
                                    this.y = t.y / e,
                                    this.z = t.z / e),
                                    this
                            }
                            setAxisAngleFromRotationMatrix(t) {
                                let e, i, n, r;
                                var s = (_ = t.elements)[0]
                                    , a = _[4]
                                    , o = _[8]
                                    , h = _[1]
                                    , l = _[5]
                                    , u = _[9]
                                    , c = _[2]
                                    , d = _[6]
                                    , p = _[10];
                                if (Math.abs(a - h) < .01 && Math.abs(o - c) < .01 && Math.abs(u - d) < .01) {
                                    if (Math.abs(a + h) < .1 && Math.abs(o + c) < .1 && Math.abs(u + d) < .1 && Math.abs(s + l + p - 3) < .1)
                                        return this.set(1, 0, 0, 0),
                                            this;
                                    e = Math.PI;
                                    var f = (s + 1) / 2
                                        , m = (l + 1) / 2
                                        , g = (p + 1) / 2
                                        , v = (a + h) / 4
                                        , _ = (t = (o + c) / 4,
                                    (u + d) / 4);
                                    return m < f && g < f ? r = f < .01 ? (i = 0,
                                        n = .707106781) : (i = Math.sqrt(f),
                                        n = v / i,
                                    t / i) : g < m ? r = m < .01 ? (i = .707106781,
                                        n = 0,
                                        .707106781) : (n = Math.sqrt(m),
                                        i = v / n,
                                    _ / n) : g < .01 ? (i = .707106781,
                                        n = .707106781,
                                        r = 0) : (r = Math.sqrt(g),
                                        i = t / r,
                                        n = _ / r),
                                        this.set(i, n, r, e),
                                        this
                                }
                                let y = Math.sqrt((d - u) * (d - u) + (o - c) * (o - c) + (h - a) * (h - a));
                                return Math.abs(y) < .001 && (y = 1),
                                    this.x = (d - u) / y,
                                    this.y = (o - c) / y,
                                    this.z = (h - a) / y,
                                    this.w = Math.acos((s + l + p - 1) / 2),
                                    this
                            }
                            min(t) {
                                return this.x = Math.min(this.x, t.x),
                                    this.y = Math.min(this.y, t.y),
                                    this.z = Math.min(this.z, t.z),
                                    this.w = Math.min(this.w, t.w),
                                    this
                            }
                            max(t) {
                                return this.x = Math.max(this.x, t.x),
                                    this.y = Math.max(this.y, t.y),
                                    this.z = Math.max(this.z, t.z),
                                    this.w = Math.max(this.w, t.w),
                                    this
                            }
                            clamp(t, e) {
                                return this.x = Math.max(t.x, Math.min(e.x, this.x)),
                                    this.y = Math.max(t.y, Math.min(e.y, this.y)),
                                    this.z = Math.max(t.z, Math.min(e.z, this.z)),
                                    this.w = Math.max(t.w, Math.min(e.w, this.w)),
                                    this
                            }
                            clampScalar(t, e) {
                                return this.x = Math.max(t, Math.min(e, this.x)),
                                    this.y = Math.max(t, Math.min(e, this.y)),
                                    this.z = Math.max(t, Math.min(e, this.z)),
                                    this.w = Math.max(t, Math.min(e, this.w)),
                                    this
                            }
                            clampLength(t, e) {
                                var i = this.length();
                                return this.divideScalar(i || 1).multiplyScalar(Math.max(t, Math.min(e, i)))
                            }
                            floor() {
                                return this.x = Math.floor(this.x),
                                    this.y = Math.floor(this.y),
                                    this.z = Math.floor(this.z),
                                    this.w = Math.floor(this.w),
                                    this
                            }
                            ceil() {
                                return this.x = Math.ceil(this.x),
                                    this.y = Math.ceil(this.y),
                                    this.z = Math.ceil(this.z),
                                    this.w = Math.ceil(this.w),
                                    this
                            }
                            round() {
                                return this.x = Math.round(this.x),
                                    this.y = Math.round(this.y),
                                    this.z = Math.round(this.z),
                                    this.w = Math.round(this.w),
                                    this
                            }
                            roundToZero() {
                                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                                    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                                    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z),
                                    this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w),
                                    this
                            }
                            negate() {
                                return this.x = -this.x,
                                    this.y = -this.y,
                                    this.z = -this.z,
                                    this.w = -this.w,
                                    this
                            }
                            dot(t) {
                                return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w
                            }
                            lengthSq() {
                                return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
                            }
                            length() {
                                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)
                            }
                            manhattanLength() {
                                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w)
                            }
                            normalize() {
                                return this.divideScalar(this.length() || 1)
                            }
                            setLength(t) {
                                return this.normalize().multiplyScalar(t)
                            }
                            lerp(t, e) {
                                return this.x += (t.x - this.x) * e,
                                    this.y += (t.y - this.y) * e,
                                    this.z += (t.z - this.z) * e,
                                    this.w += (t.w - this.w) * e,
                                    this
                            }
                            lerpVectors(t, e, i) {
                                return this.x = t.x + (e.x - t.x) * i,
                                    this.y = t.y + (e.y - t.y) * i,
                                    this.z = t.z + (e.z - t.z) * i,
                                    this.w = t.w + (e.w - t.w) * i,
                                    this
                            }
                            equals(t) {
                                return t.x === this.x && t.y === this.y && t.z === this.z && t.w === this.w
                            }
                            fromArray(t, e=0) {
                                return this.x = t[e],
                                    this.y = t[e + 1],
                                    this.z = t[e + 2],
                                    this.w = t[e + 3],
                                    this
                            }
                            toArray(t=[], e=0) {
                                return t[e] = this.x,
                                    t[e + 1] = this.y,
                                    t[e + 2] = this.z,
                                    t[e + 3] = this.w,
                                    t
                            }
                            fromBufferAttribute(t, e, i) {
                                return this.x = t.getX(e),
                                    this.y = t.getY(e),
                                    this.z = t.getZ(e),
                                    this.w = t.getW(e),
                                    this
                            }
                            random() {
                                return this.x = Math.random(),
                                    this.y = Math.random(),
                                    this.z = Math.random(),
                                    this.w = Math.random(),
                                    this
                            }
                            *[Symbol.iterator]() {
                                yield this.x,
                                    yield this.y,
                                    yield this.z,
                                    yield this.w
                            }
                        }
                        Nn.prototype.isVector4 = !0;
                        class On extends ln {
                            constructor(t, e, i={}) {
                                super(),
                                    this.width = t,
                                    this.height = e,
                                    this.depth = 1,
                                    this.scissor = new Nn(0,0,t,e),
                                    this.scissorTest = !1,
                                    this.viewport = new Nn(0,0,t,e),
                                    this.texture = new In(void 0,i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.encoding),
                                    this.texture.isRenderTargetTexture = !0,
                                    this.texture.image = {
                                        width: t,
                                        height: e,
                                        depth: 1
                                    },
                                    this.texture.generateMipmaps = void 0 !== i.generateMipmaps && i.generateMipmaps,
                                    this.texture.internalFormat = void 0 !== i.internalFormat ? i.internalFormat : null,
                                    this.texture.minFilter = void 0 !== i.minFilter ? i.minFilter : $t,
                                    this.depthBuffer = void 0 === i.depthBuffer || i.depthBuffer,
                                    this.stencilBuffer = void 0 !== i.stencilBuffer && i.stencilBuffer,
                                    this.depthTexture = void 0 !== i.depthTexture ? i.depthTexture : null
                            }
                            setTexture(t) {
                                t.image = {
                                    width: this.width,
                                    height: this.height,
                                    depth: this.depth
                                },
                                    this.texture = t
                            }
                            setSize(t, e, i=1) {
                                this.width === t && this.height === e && this.depth === i || (this.width = t,
                                    this.height = e,
                                    this.depth = i,
                                    this.texture.image.width = t,
                                    this.texture.image.height = e,
                                    this.texture.image.depth = i,
                                    this.dispose()),
                                    this.viewport.set(0, 0, t, e),
                                    this.scissor.set(0, 0, t, e)
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                            copy(t) {
                                return this.width = t.width,
                                    this.height = t.height,
                                    this.depth = t.depth,
                                    this.viewport.copy(t.viewport),
                                    this.texture = t.texture.clone(),
                                    this.texture.image = {
                                        ...this.texture.image
                                    },
                                    this.depthBuffer = t.depthBuffer,
                                    this.stencilBuffer = t.stencilBuffer,
                                    this.depthTexture = t.depthTexture,
                                    this
                            }
                            dispose() {
                                this.dispatchEvent({
                                    type: "dispose"
                                })
                            }
                        }
                        On.prototype.isWebGLRenderTarget = !0;
                        class Dn extends On {
                            constructor(t, e, i) {
                                super(t, e);
                                const n = this.texture;
                                this.texture = [];
                                for (let t = 0; t < i; t++)
                                    this.texture[t] = n.clone()
                            }
                            setSize(t, e, i=1) {
                                if (this.width !== t || this.height !== e || this.depth !== i) {
                                    this.width = t,
                                        this.height = e,
                                        this.depth = i;
                                    for (let n = 0, r = this.texture.length; n < r; n++)
                                        this.texture[n].image.width = t,
                                            this.texture[n].image.height = e,
                                            this.texture[n].image.depth = i;
                                    this.dispose()
                                }
                                return this.viewport.set(0, 0, t, e),
                                    this.scissor.set(0, 0, t, e),
                                    this
                            }
                            copy(t) {
                                this.dispose(),
                                    this.width = t.width,
                                    this.height = t.height,
                                    this.depth = t.depth,
                                    this.viewport.set(0, 0, this.width, this.height),
                                    this.scissor.set(0, 0, this.width, this.height),
                                    this.depthBuffer = t.depthBuffer,
                                    this.stencilBuffer = t.stencilBuffer,
                                    this.depthTexture = t.depthTexture;
                                for (let e = this.texture.length = 0, i = t.texture.length; e < i; e++)
                                    this.texture[e] = t.texture[e].clone();
                                return this
                            }
                        }
                        Dn.prototype.isWebGLMultipleRenderTargets = !0;
                        class Rn extends On {
                            constructor(t, e, i={}) {
                                super(t, e, i),
                                    this.samples = 4,
                                    this.ignoreDepthForMultisampleCopy = void 0 === i.ignoreDepth || i.ignoreDepth,
                                    this.useRenderToTexture = void 0 !== i.useRenderToTexture && i.useRenderToTexture,
                                    this.useRenderbuffer = !1 === this.useRenderToTexture
                            }
                            copy(t) {
                                return super.copy.call(this, t),
                                    this.samples = t.samples,
                                    this.useRenderToTexture = t.useRenderToTexture,
                                    this.useRenderbuffer = t.useRenderbuffer,
                                    this
                            }
                        }
                        Rn.prototype.isWebGLMultisampleRenderTarget = !0;
                        class zn {
                            constructor(t=0, e=0, i=0, n=1) {
                                this._x = t,
                                    this._y = e,
                                    this._z = i,
                                    this._w = n
                            }
                            static slerp(t, e, i, n) {
                                return i.slerpQuaternions(t, e, n)
                            }
                            static slerpFlat(t, e, i, n, r, s, a) {
                                let o = i[n + 0]
                                    , h = i[n + 1]
                                    , l = i[n + 2]
                                    , u = i[n + 3];
                                var c = r[s + 0]
                                    , d = r[s + 1]
                                    , p = r[s + 2];
                                i = r[s + 3];
                                if (0 === a)
                                    return t[e + 0] = o,
                                        t[e + 1] = h,
                                        t[e + 2] = l,
                                        void (t[e + 3] = u);
                                if (1 === a)
                                    return t[e + 0] = c,
                                        t[e + 1] = d,
                                        t[e + 2] = p,
                                        void (t[e + 3] = i);
                                if (u !== i || o !== c || h !== d || l !== p) {
                                    let t = 1 - a;
                                    r = 0 <= (n = o * c + h * d + l * p + u * i) ? 1 : -1;
                                    (s = 1 - n * n) > Number.EPSILON && (s = Math.sqrt(s),
                                        n = Math.atan2(s, n * r),
                                        t = Math.sin(t * n) / s,
                                        a = Math.sin(a * n) / s),
                                        o = o * t + c * (r *= a),
                                        h = h * t + d * r,
                                        l = l * t + p * r,
                                        u = u * t + i * r,
                                    t === 1 - a && (o *= a = 1 / Math.sqrt(o * o + h * h + l * l + u * u),
                                        h *= a,
                                        l *= a,
                                        u *= a)
                                }
                                t[e] = o,
                                    t[e + 1] = h,
                                    t[e + 2] = l,
                                    t[e + 3] = u
                            }
                            static multiplyQuaternionsFlat(t, e, i, n, r, s) {
                                var a = i[n]
                                    , o = i[n + 1]
                                    , h = i[n + 2]
                                    , l = i[n + 3]
                                    , u = r[s];
                                i = r[s + 1],
                                    n = r[s + 2],
                                    s = r[s + 3];
                                return t[e] = a * s + l * u + o * n - h * i,
                                    t[e + 1] = o * s + l * i + h * u - a * n,
                                    t[e + 2] = h * s + l * n + a * i - o * u,
                                    t[e + 3] = l * s - a * u - o * i - h * n,
                                    t
                            }
                            get x() {
                                return this._x
                            }
                            set x(t) {
                                this._x = t,
                                    this._onChangeCallback()
                            }
                            get y() {
                                return this._y
                            }
                            set y(t) {
                                this._y = t,
                                    this._onChangeCallback()
                            }
                            get z() {
                                return this._z
                            }
                            set z(t) {
                                this._z = t,
                                    this._onChangeCallback()
                            }
                            get w() {
                                return this._w
                            }
                            set w(t) {
                                this._w = t,
                                    this._onChangeCallback()
                            }
                            set(t, e, i, n) {
                                return this._x = t,
                                    this._y = e,
                                    this._z = i,
                                    this._w = n,
                                    this._onChangeCallback(),
                                    this
                            }
                            clone() {
                                return new this.constructor(this._x,this._y,this._z,this._w)
                            }
                            copy(t) {
                                return this._x = t.x,
                                    this._y = t.y,
                                    this._z = t.z,
                                    this._w = t.w,
                                    this._onChangeCallback(),
                                    this
                            }
                            setFromEuler(t, e) {
                                if (!t || !t.isEuler)
                                    throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
                                var i = t._x
                                    , n = t._y
                                    , r = t._z;
                                t = t._order;
                                const s = Math.cos
                                    , a = Math.sin;
                                var o = s(i / 2)
                                    , h = s(n / 2)
                                    , l = s(r / 2)
                                    , u = a(i / 2)
                                    , c = a(n / 2)
                                    , d = a(r / 2);
                                switch (t) {
                                    case "XYZ":
                                        this._x = u * h * l + o * c * d,
                                            this._y = o * c * l - u * h * d,
                                            this._z = o * h * d + u * c * l,
                                            this._w = o * h * l - u * c * d;
                                        break;
                                    case "YXZ":
                                        this._x = u * h * l + o * c * d,
                                            this._y = o * c * l - u * h * d,
                                            this._z = o * h * d - u * c * l,
                                            this._w = o * h * l + u * c * d;
                                        break;
                                    case "ZXY":
                                        this._x = u * h * l - o * c * d,
                                            this._y = o * c * l + u * h * d,
                                            this._z = o * h * d + u * c * l,
                                            this._w = o * h * l - u * c * d;
                                        break;
                                    case "ZYX":
                                        this._x = u * h * l - o * c * d,
                                            this._y = o * c * l + u * h * d,
                                            this._z = o * h * d - u * c * l,
                                            this._w = o * h * l + u * c * d;
                                        break;
                                    case "YZX":
                                        this._x = u * h * l + o * c * d,
                                            this._y = o * c * l + u * h * d,
                                            this._z = o * h * d - u * c * l,
                                            this._w = o * h * l - u * c * d;
                                        break;
                                    case "XZY":
                                        this._x = u * h * l - o * c * d,
                                            this._y = o * c * l - u * h * d,
                                            this._z = o * h * d + u * c * l,
                                            this._w = o * h * l + u * c * d
                                }
                                return !1 !== e && this._onChangeCallback(),
                                    this
                            }
                            setFromAxisAngle(t, e) {
                                var i = e / 2;
                                e = Math.sin(i);
                                return this._x = t.x * e,
                                    this._y = t.y * e,
                                    this._z = t.z * e,
                                    this._w = Math.cos(i),
                                    this._onChangeCallback(),
                                    this
                            }
                            setFromRotationMatrix(t) {
                                var e, i, n = (i = t.elements)[0], r = i[4], s = i[8], a = i[1], o = i[5], h = i[9], l = i[2], u = i[6];
                                return 0 < (i = n + o + (t = i[10])) ? (i = .5 / Math.sqrt(i + 1),
                                    this._w = .25 / i,
                                    this._x = (u - h) * i,
                                    this._y = (s - l) * i,
                                    this._z = (a - r) * i) : o < n && t < n ? (e = 2 * Math.sqrt(1 + n - o - t),
                                    this._w = (u - h) / e,
                                    this._x = .25 * e,
                                    this._y = (r + a) / e,
                                    this._z = (s + l) / e) : t < o ? (e = 2 * Math.sqrt(1 + o - n - t),
                                    this._w = (s - l) / e,
                                    this._x = (r + a) / e,
                                    this._y = .25 * e,
                                    this._z = (h + u) / e) : (o = 2 * Math.sqrt(1 + t - n - o),
                                    this._w = (a - r) / o,
                                    this._x = (s + l) / o,
                                    this._y = (h + u) / o,
                                    this._z = .25 * o),
                                    this._onChangeCallback(),
                                    this
                            }
                            setFromUnitVectors(t, e) {
                                let i = t.dot(e) + 1;
                                return i < Number.EPSILON ? (i = 0,
                                    Math.abs(t.x) > Math.abs(t.z) ? (this._x = -t.y,
                                        this._y = t.x,
                                        this._z = 0) : (this._x = 0,
                                        this._y = -t.z,
                                        this._z = t.y)) : (this._x = t.y * e.z - t.z * e.y,
                                    this._y = t.z * e.x - t.x * e.z,
                                    this._z = t.x * e.y - t.y * e.x),
                                    this._w = i,
                                    this.normalize()
                            }
                            angleTo(t) {
                                return 2 * Math.acos(Math.abs(mn(this.dot(t), -1, 1)))
                            }
                            rotateTowards(t, e) {
                                var i = this.angleTo(t);
                                return 0 === i || (i = Math.min(1, e / i),
                                    this.slerp(t, i)),
                                    this
                            }
                            identity() {
                                return this.set(0, 0, 0, 1)
                            }
                            invert() {
                                return this.conjugate()
                            }
                            conjugate() {
                                return this._x *= -1,
                                    this._y *= -1,
                                    this._z *= -1,
                                    this._onChangeCallback(),
                                    this
                            }
                            dot(t) {
                                return this._x * t._x + this._y * t._y + this._z * t._z + this._w * t._w
                            }
                            lengthSq() {
                                return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w
                            }
                            length() {
                                return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w)
                            }
                            normalize() {
                                var t = this.length();
                                return 0 === t ? (this._x = 0,
                                    this._y = 0,
                                    this._z = 0,
                                    this._w = 1) : (this._x = this._x * (t = 1 / t),
                                    this._y = this._y * t,
                                    this._z = this._z * t,
                                    this._w = this._w * t),
                                    this._onChangeCallback(),
                                    this
                            }
                            multiply(t, e) {
                                return void 0 !== e ? this.multiplyQuaternions(t, e) : this.multiplyQuaternions(this, t)
                            }
                            premultiply(t) {
                                return this.multiplyQuaternions(t, this)
                            }
                            multiplyQuaternions(t, e) {
                                var i = t._x
                                    , n = t._y
                                    , r = t._z
                                    , s = t._w
                                    , a = e._x
                                    , o = e._y;
                                t = e._z,
                                    e = e._w;
                                return this._x = i * e + s * a + n * t - r * o,
                                    this._y = n * e + s * o + r * a - i * t,
                                    this._z = r * e + s * t + i * o - n * a,
                                    this._w = s * e - i * a - n * o - r * t,
                                    this._onChangeCallback(),
                                    this
                            }
                            slerp(t, e) {
                                if (0 === e)
                                    return this;
                                if (1 === e)
                                    return this.copy(t);
                                var i = this._x
                                    , n = this._y
                                    , r = this._z
                                    , s = this._w;
                                let a = s * t._w + i * t._x + n * t._y + r * t._z;
                                if (a < 0 ? (this._w = -t._w,
                                    this._x = -t._x,
                                    this._y = -t._y,
                                    this._z = -t._z,
                                    a = -a) : this.copy(t),
                                1 <= a)
                                    return this._w = s,
                                        this._x = i,
                                        this._y = n,
                                        this._z = r,
                                        this;
                                var o = 1 - a * a;
                                if (o <= Number.EPSILON) {
                                    var h = 1 - e;
                                    return this._w = h * s + e * this._w,
                                        this._x = h * i + e * this._x,
                                        this._y = h * n + e * this._y,
                                        this._z = h * r + e * this._z,
                                        this.normalize(),
                                        this._onChangeCallback(),
                                        this
                                }
                                return t = Math.sqrt(o),
                                    h = Math.atan2(t, a),
                                    o = Math.sin((1 - e) * h) / t,
                                    t = Math.sin(e * h) / t,
                                    this._w = s * o + this._w * t,
                                    this._x = i * o + this._x * t,
                                    this._y = n * o + this._y * t,
                                    this._z = r * o + this._z * t,
                                    this._onChangeCallback(),
                                    this
                            }
                            slerpQuaternions(t, e, i) {
                                this.copy(t).slerp(e, i)
                            }
                            random() {
                                var t = Math.random()
                                    , e = Math.sqrt(1 - t)
                                    , i = Math.sqrt(t)
                                    , n = 2 * Math.PI * Math.random();
                                t = 2 * Math.PI * Math.random();
                                return this.set(e * Math.cos(n), i * Math.sin(t), i * Math.cos(t), e * Math.sin(n))
                            }
                            equals(t) {
                                return t._x === this._x && t._y === this._y && t._z === this._z && t._w === this._w
                            }
                            fromArray(t, e=0) {
                                return this._x = t[e],
                                    this._y = t[e + 1],
                                    this._z = t[e + 2],
                                    this._w = t[e + 3],
                                    this._onChangeCallback(),
                                    this
                            }
                            toArray(t=[], e=0) {
                                return t[e] = this._x,
                                    t[e + 1] = this._y,
                                    t[e + 2] = this._z,
                                    t[e + 3] = this._w,
                                    t
                            }
                            fromBufferAttribute(t, e) {
                                return this._x = t.getX(e),
                                    this._y = t.getY(e),
                                    this._z = t.getZ(e),
                                    this._w = t.getW(e),
                                    this
                            }
                            _onChange(t) {
                                return this._onChangeCallback = t,
                                    this
                            }
                            _onChangeCallback() {}
                        }
                        zn.prototype.isQuaternion = !0;
                        class Fn {
                            constructor(t=0, e=0, i=0) {
                                this.x = t,
                                    this.y = e,
                                    this.z = i
                            }
                            set(t, e, i) {
                                return void 0 === i && (i = this.z),
                                    this.x = t,
                                    this.y = e,
                                    this.z = i,
                                    this
                            }
                            setScalar(t) {
                                return this.x = t,
                                    this.y = t,
                                    this.z = t,
                                    this
                            }
                            setX(t) {
                                return this.x = t,
                                    this
                            }
                            setY(t) {
                                return this.y = t,
                                    this
                            }
                            setZ(t) {
                                return this.z = t,
                                    this
                            }
                            setComponent(t, e) {
                                switch (t) {
                                    case 0:
                                        this.x = e;
                                        break;
                                    case 1:
                                        this.y = e;
                                        break;
                                    case 2:
                                        this.z = e;
                                        break;
                                    default:
                                        throw new Error("index is out of range: " + t)
                                }
                                return this
                            }
                            getComponent(t) {
                                switch (t) {
                                    case 0:
                                        return this.x;
                                    case 1:
                                        return this.y;
                                    case 2:
                                        return this.z;
                                    default:
                                        throw new Error("index is out of range: " + t)
                                }
                            }
                            clone() {
                                return new this.constructor(this.x,this.y,this.z)
                            }
                            copy(t) {
                                return this.x = t.x,
                                    this.y = t.y,
                                    this.z = t.z,
                                    this
                            }
                            add(t, e) {
                                return void 0 !== e ? this.addVectors(t, e) : (this.x += t.x,
                                    this.y += t.y,
                                    this.z += t.z,
                                    this)
                            }
                            addScalar(t) {
                                return this.x += t,
                                    this.y += t,
                                    this.z += t,
                                    this
                            }
                            addVectors(t, e) {
                                return this.x = t.x + e.x,
                                    this.y = t.y + e.y,
                                    this.z = t.z + e.z,
                                    this
                            }
                            addScaledVector(t, e) {
                                return this.x += t.x * e,
                                    this.y += t.y * e,
                                    this.z += t.z * e,
                                    this
                            }
                            sub(t, e) {
                                return void 0 !== e ? this.subVectors(t, e) : (this.x -= t.x,
                                    this.y -= t.y,
                                    this.z -= t.z,
                                    this)
                            }
                            subScalar(t) {
                                return this.x -= t,
                                    this.y -= t,
                                    this.z -= t,
                                    this
                            }
                            subVectors(t, e) {
                                return this.x = t.x - e.x,
                                    this.y = t.y - e.y,
                                    this.z = t.z - e.z,
                                    this
                            }
                            multiply(t, e) {
                                return void 0 !== e ? this.multiplyVectors(t, e) : (this.x *= t.x,
                                    this.y *= t.y,
                                    this.z *= t.z,
                                    this)
                            }
                            multiplyScalar(t) {
                                return this.x *= t,
                                    this.y *= t,
                                    this.z *= t,
                                    this
                            }
                            multiplyVectors(t, e) {
                                return this.x = t.x * e.x,
                                    this.y = t.y * e.y,
                                    this.z = t.z * e.z,
                                    this
                            }
                            applyEuler(t) {
                                return t && t.isEuler,
                                    this.applyQuaternion(Vn.setFromEuler(t))
                            }
                            applyAxisAngle(t, e) {
                                return this.applyQuaternion(Vn.setFromAxisAngle(t, e))
                            }
                            applyMatrix3(t) {
                                var e = this.x
                                    , i = this.y
                                    , n = this.z;
                                t = t.elements;
                                return this.x = t[0] * e + t[3] * i + t[6] * n,
                                    this.y = t[1] * e + t[4] * i + t[7] * n,
                                    this.z = t[2] * e + t[5] * i + t[8] * n,
                                    this
                            }
                            applyNormalMatrix(t) {
                                return this.applyMatrix3(t).normalize()
                            }
                            applyMatrix4(t) {
                                var e = this.x
                                    , i = this.y
                                    , n = this.z
                                    , r = t.elements;
                                t = 1 / (r[3] * e + r[7] * i + r[11] * n + r[15]);
                                return this.x = (r[0] * e + r[4] * i + r[8] * n + r[12]) * t,
                                    this.y = (r[1] * e + r[5] * i + r[9] * n + r[13]) * t,
                                    this.z = (r[2] * e + r[6] * i + r[10] * n + r[14]) * t,
                                    this
                            }
                            applyQuaternion(t) {
                                var e = this.x
                                    , i = this.y
                                    , n = this.z
                                    , r = t.x
                                    , s = t.y
                                    , a = t.z
                                    , o = t.w
                                    , h = o * e + s * n - a * i
                                    , l = o * i + a * e - r * n;
                                t = o * n + r * i - s * e,
                                    n = -r * e - s * i - a * n;
                                return this.x = h * o + n * -r + l * -a - t * -s,
                                    this.y = l * o + n * -s + t * -r - h * -a,
                                    this.z = t * o + n * -a + h * -s - l * -r,
                                    this
                            }
                            project(t) {
                                return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)
                            }
                            unproject(t) {
                                return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)
                            }
                            transformDirection(t) {
                                var e = this.x
                                    , i = this.y
                                    , n = this.z;
                                t = t.elements;
                                return this.x = t[0] * e + t[4] * i + t[8] * n,
                                    this.y = t[1] * e + t[5] * i + t[9] * n,
                                    this.z = t[2] * e + t[6] * i + t[10] * n,
                                    this.normalize()
                            }
                            divide(t) {
                                return this.x /= t.x,
                                    this.y /= t.y,
                                    this.z /= t.z,
                                    this
                            }
                            divideScalar(t) {
                                return this.multiplyScalar(1 / t)
                            }
                            min(t) {
                                return this.x = Math.min(this.x, t.x),
                                    this.y = Math.min(this.y, t.y),
                                    this.z = Math.min(this.z, t.z),
                                    this
                            }
                            max(t) {
                                return this.x = Math.max(this.x, t.x),
                                    this.y = Math.max(this.y, t.y),
                                    this.z = Math.max(this.z, t.z),
                                    this
                            }
                            clamp(t, e) {
                                return this.x = Math.max(t.x, Math.min(e.x, this.x)),
                                    this.y = Math.max(t.y, Math.min(e.y, this.y)),
                                    this.z = Math.max(t.z, Math.min(e.z, this.z)),
                                    this
                            }
                            clampScalar(t, e) {
                                return this.x = Math.max(t, Math.min(e, this.x)),
                                    this.y = Math.max(t, Math.min(e, this.y)),
                                    this.z = Math.max(t, Math.min(e, this.z)),
                                    this
                            }
                            clampLength(t, e) {
                                var i = this.length();
                                return this.divideScalar(i || 1).multiplyScalar(Math.max(t, Math.min(e, i)))
                            }
                            floor() {
                                return this.x = Math.floor(this.x),
                                    this.y = Math.floor(this.y),
                                    this.z = Math.floor(this.z),
                                    this
                            }
                            ceil() {
                                return this.x = Math.ceil(this.x),
                                    this.y = Math.ceil(this.y),
                                    this.z = Math.ceil(this.z),
                                    this
                            }
                            round() {
                                return this.x = Math.round(this.x),
                                    this.y = Math.round(this.y),
                                    this.z = Math.round(this.z),
                                    this
                            }
                            roundToZero() {
                                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                                    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                                    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z),
                                    this
                            }
                            negate() {
                                return this.x = -this.x,
                                    this.y = -this.y,
                                    this.z = -this.z,
                                    this
                            }
                            dot(t) {
                                return this.x * t.x + this.y * t.y + this.z * t.z
                            }
                            lengthSq() {
                                return this.x * this.x + this.y * this.y + this.z * this.z
                            }
                            length() {
                                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
                            }
                            manhattanLength() {
                                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)
                            }
                            normalize() {
                                return this.divideScalar(this.length() || 1)
                            }
                            setLength(t) {
                                return this.normalize().multiplyScalar(t)
                            }
                            lerp(t, e) {
                                return this.x += (t.x - this.x) * e,
                                    this.y += (t.y - this.y) * e,
                                    this.z += (t.z - this.z) * e,
                                    this
                            }
                            lerpVectors(t, e, i) {
                                return this.x = t.x + (e.x - t.x) * i,
                                    this.y = t.y + (e.y - t.y) * i,
                                    this.z = t.z + (e.z - t.z) * i,
                                    this
                            }
                            cross(t, e) {
                                return void 0 !== e ? this.crossVectors(t, e) : this.crossVectors(this, t)
                            }
                            crossVectors(t, e) {
                                var i = t.x
                                    , n = t.y
                                    , r = t.z
                                    , s = e.x;
                                t = e.y,
                                    e = e.z;
                                return this.x = n * e - r * t,
                                    this.y = r * s - i * e,
                                    this.z = i * t - n * s,
                                    this
                            }
                            projectOnVector(t) {
                                var e = t.lengthSq();
                                return 0 === e ? this.set(0, 0, 0) : (e = t.dot(this) / e,
                                    this.copy(t).multiplyScalar(e))
                            }
                            projectOnPlane(t) {
                                return Bn.copy(this).projectOnVector(t),
                                    this.sub(Bn)
                            }
                            reflect(t) {
                                return this.sub(Bn.copy(t).multiplyScalar(2 * this.dot(t)))
                            }
                            angleTo(t) {
                                var e = Math.sqrt(this.lengthSq() * t.lengthSq());
                                return 0 === e ? Math.PI / 2 : (e = this.dot(t) / e,
                                    Math.acos(mn(e, -1, 1)))
                            }
                            distanceTo(t) {
                                return Math.sqrt(this.distanceToSquared(t))
                            }
                            distanceToSquared(t) {
                                var e = this.x - t.x
                                    , i = this.y - t.y;
                                return e * e + i * i + (t = this.z - t.z) * t
                            }
                            manhattanDistanceTo(t) {
                                return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) + Math.abs(this.z - t.z)
                            }
                            setFromSpherical(t) {
                                return this.setFromSphericalCoords(t.radius, t.phi, t.theta)
                            }
                            setFromSphericalCoords(t, e, i) {
                                var n = Math.sin(e) * t;
                                return this.x = n * Math.sin(i),
                                    this.y = Math.cos(e) * t,
                                    this.z = n * Math.cos(i),
                                    this
                            }
                            setFromCylindrical(t) {
                                return this.setFromCylindricalCoords(t.radius, t.theta, t.y)
                            }
                            setFromCylindricalCoords(t, e, i) {
                                return this.x = t * Math.sin(e),
                                    this.y = i,
                                    this.z = t * Math.cos(e),
                                    this
                            }
                            setFromMatrixPosition(t) {
                                return t = t.elements,
                                    this.x = t[12],
                                    this.y = t[13],
                                    this.z = t[14],
                                    this
                            }
                            setFromMatrixScale(t) {
                                var e = this.setFromMatrixColumn(t, 0).length()
                                    , i = this.setFromMatrixColumn(t, 1).length();
                                t = this.setFromMatrixColumn(t, 2).length();
                                return this.x = e,
                                    this.y = i,
                                    this.z = t,
                                    this
                            }
                            setFromMatrixColumn(t, e) {
                                return this.fromArray(t.elements, 4 * e)
                            }
                            setFromMatrix3Column(t, e) {
                                return this.fromArray(t.elements, 3 * e)
                            }
                            equals(t) {
                                return t.x === this.x && t.y === this.y && t.z === this.z
                            }
                            fromArray(t, e=0) {
                                return this.x = t[e],
                                    this.y = t[e + 1],
                                    this.z = t[e + 2],
                                    this
                            }
                            toArray(t=[], e=0) {
                                return t[e] = this.x,
                                    t[e + 1] = this.y,
                                    t[e + 2] = this.z,
                                    t
                            }
                            fromBufferAttribute(t, e, i) {
                                return this.x = t.getX(e),
                                    this.y = t.getY(e),
                                    this.z = t.getZ(e),
                                    this
                            }
                            random() {
                                return this.x = Math.random(),
                                    this.y = Math.random(),
                                    this.z = Math.random(),
                                    this
                            }
                            randomDirection() {
                                var t = 2 * (Math.random() - .5)
                                    , e = Math.random() * Math.PI * 2
                                    , i = Math.sqrt(1 - t ** 2);
                                return this.x = i * Math.cos(e),
                                    this.y = i * Math.sin(e),
                                    this.z = t,
                                    this
                            }
                            *[Symbol.iterator]() {
                                yield this.x,
                                    yield this.y,
                                    yield this.z
                            }
                        }
                        Fn.prototype.isVector3 = !0;
                        const Bn = new Fn
                            , Vn = new zn;
                        class Un {
                            constructor(t=new Fn(1 / 0,1 / 0,1 / 0), e=new Fn(-1 / 0,-1 / 0,-1 / 0)) {
                                this.min = t,
                                    this.max = e
                            }
                            set(t, e) {
                                return this.min.copy(t),
                                    this.max.copy(e),
                                    this
                            }
                            setFromArray(t) {
                                let e = 1 / 0
                                    , i = 1 / 0
                                    , n = 1 / 0
                                    , r = -1 / 0
                                    , s = -1 / 0
                                    , a = -1 / 0;
                                for (let u = 0, c = t.length; u < c; u += 3) {
                                    var o = t[u]
                                        , h = t[u + 1]
                                        , l = t[u + 2];
                                    o < e && (e = o),
                                    h < i && (i = h),
                                    l < n && (n = l),
                                    o > r && (r = o),
                                    h > s && (s = h),
                                    l > a && (a = l)
                                }
                                return this.min.set(e, i, n),
                                    this.max.set(r, s, a),
                                    this
                            }
                            setFromBufferAttribute(t) {
                                let e = 1 / 0
                                    , i = 1 / 0
                                    , n = 1 / 0
                                    , r = -1 / 0
                                    , s = -1 / 0
                                    , a = -1 / 0;
                                for (let u = 0, c = t.count; u < c; u++) {
                                    var o = t.getX(u)
                                        , h = t.getY(u)
                                        , l = t.getZ(u);
                                    o < e && (e = o),
                                    h < i && (i = h),
                                    l < n && (n = l),
                                    o > r && (r = o),
                                    h > s && (s = h),
                                    l > a && (a = l)
                                }
                                return this.min.set(e, i, n),
                                    this.max.set(r, s, a),
                                    this
                            }
                            setFromPoints(t) {
                                this.makeEmpty();
                                for (let e = 0, i = t.length; e < i; e++)
                                    this.expandByPoint(t[e]);
                                return this
                            }
                            setFromCenterAndSize(t, e) {
                                return e = Wn.copy(e).multiplyScalar(.5),
                                    this.min.copy(t).sub(e),
                                    this.max.copy(t).add(e),
                                    this
                            }
                            setFromObject(t) {
                                return this.makeEmpty(),
                                    this.expandByObject(t)
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                            copy(t) {
                                return this.min.copy(t.min),
                                    this.max.copy(t.max),
                                    this
                            }
                            makeEmpty() {
                                return this.min.x = this.min.y = this.min.z = 1 / 0,
                                    this.max.x = this.max.y = this.max.z = -1 / 0,
                                    this
                            }
                            isEmpty() {
                                return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z
                            }
                            getCenter(t) {
                                return this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5)
                            }
                            getSize(t) {
                                return this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min)
                            }
                            expandByPoint(t) {
                                return this.min.min(t),
                                    this.max.max(t),
                                    this
                            }
                            expandByVector(t) {
                                return this.min.sub(t),
                                    this.max.add(t),
                                    this
                            }
                            expandByScalar(t) {
                                return this.min.addScalar(-t),
                                    this.max.addScalar(t),
                                    this
                            }
                            expandByObject(t) {
                                t.updateWorldMatrix(!1, !1);
                                const e = t.geometry;
                                void 0 !== e && (null === e.boundingBox && e.computeBoundingBox(),
                                    jn.copy(e.boundingBox),
                                    jn.applyMatrix4(t.matrixWorld),
                                    this.union(jn));
                                var i = t.children;
                                for (let t = 0, e = i.length; t < e; t++)
                                    this.expandByObject(i[t]);
                                return this
                            }
                            containsPoint(t) {
                                return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y || t.z < this.min.z || t.z > this.max.z)
                            }
                            containsBox(t) {
                                return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y && this.min.z <= t.min.z && t.max.z <= this.max.z
                            }
                            getParameter(t, e) {
                                return e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y), (t.z - this.min.z) / (this.max.z - this.min.z))
                            }
                            intersectsBox(t) {
                                return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y || t.max.z < this.min.z || t.min.z > this.max.z)
                            }
                            intersectsSphere(t) {
                                return this.clampPoint(t.center, Wn),
                                Wn.distanceToSquared(t.center) <= t.radius * t.radius
                            }
                            intersectsPlane(t) {
                                let e, i;
                                return i = 0 < t.normal.x ? (e = t.normal.x * this.min.x,
                                t.normal.x * this.max.x) : (e = t.normal.x * this.max.x,
                                t.normal.x * this.min.x),
                                    0 < t.normal.y ? (e += t.normal.y * this.min.y,
                                        i += t.normal.y * this.max.y) : (e += t.normal.y * this.max.y,
                                        i += t.normal.y * this.min.y),
                                    0 < t.normal.z ? (e += t.normal.z * this.min.z,
                                        i += t.normal.z * this.max.z) : (e += t.normal.z * this.max.z,
                                        i += t.normal.z * this.min.z),
                                e <= -t.constant && i >= -t.constant
                            }
                            intersectsTriangle(t) {
                                return !this.isEmpty() && (this.getCenter(Qn),
                                    Kn.subVectors(this.max, Qn),
                                    Hn.subVectors(t.a, Qn),
                                    qn.subVectors(t.b, Qn),
                                    Xn.subVectors(t.c, Qn),
                                    Zn.subVectors(qn, Hn),
                                    Jn.subVectors(Xn, qn),
                                    Yn.subVectors(Hn, Xn),
                                !!er([0, -Zn.z, Zn.y, 0, -Jn.z, Jn.y, 0, -Yn.z, Yn.y, Zn.z, 0, -Zn.x, Jn.z, 0, -Jn.x, Yn.z, 0, -Yn.x, -Zn.y, Zn.x, 0, -Jn.y, Jn.x, 0, -Yn.y, Yn.x, 0], Hn, qn, Xn, Kn) && !!er([1, 0, 0, 0, 1, 0, 0, 0, 1], Hn, qn, Xn, Kn) && ($n.crossVectors(Zn, Jn),
                                    er([$n.x, $n.y, $n.z], Hn, qn, Xn, Kn)))
                            }
                            clampPoint(t, e) {
                                return e.copy(t).clamp(this.min, this.max)
                            }
                            distanceToPoint(t) {
                                return Wn.copy(t).clamp(this.min, this.max).sub(t).length()
                            }
                            getBoundingSphere(t) {
                                return this.getCenter(t.center),
                                    t.radius = .5 * this.getSize(Wn).length(),
                                    t
                            }
                            intersect(t) {
                                return this.min.max(t.min),
                                    this.max.min(t.max),
                                this.isEmpty() && this.makeEmpty(),
                                    this
                            }
                            union(t) {
                                return this.min.min(t.min),
                                    this.max.max(t.max),
                                    this
                            }
                            applyMatrix4(t) {
                                return this.isEmpty() || (Gn[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t),
                                    Gn[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t),
                                    Gn[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t),
                                    Gn[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t),
                                    Gn[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t),
                                    Gn[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t),
                                    Gn[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t),
                                    Gn[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t),
                                    this.setFromPoints(Gn)),
                                    this
                            }
                            translate(t) {
                                return this.min.add(t),
                                    this.max.add(t),
                                    this
                            }
                            equals(t) {
                                return t.min.equals(this.min) && t.max.equals(this.max)
                            }
                        }
                        Un.prototype.isBox3 = !0;
                        const Gn = [new Fn, new Fn, new Fn, new Fn, new Fn, new Fn, new Fn, new Fn]
                            , Wn = new Fn
                            , jn = new Un
                            , Hn = new Fn
                            , qn = new Fn
                            , Xn = new Fn
                            , Zn = new Fn
                            , Jn = new Fn
                            , Yn = new Fn
                            , Qn = new Fn
                            , Kn = new Fn
                            , $n = new Fn
                            , tr = new Fn;
                        function er(t, e, i, n, r) {
                            for (let l = 0, u = t.length - 3; l <= u; l += 3) {
                                tr.fromArray(t, l);
                                var s = r.x * Math.abs(tr.x) + r.y * Math.abs(tr.y) + r.z * Math.abs(tr.z)
                                    , a = e.dot(tr)
                                    , o = i.dot(tr)
                                    , h = n.dot(tr);
                                if (Math.max(-Math.max(a, o, h), Math.min(a, o, h)) > s)
                                    return !1
                            }
                            return !0
                        }
                        const ir = new Un
                            , nr = new Fn
                            , rr = new Fn
                            , sr = new Fn;
                        class ar {
                            constructor(t=new Fn, e=-1) {
                                this.center = t,
                                    this.radius = e
                            }
                            set(t, e) {
                                return this.center.copy(t),
                                    this.radius = e,
                                    this
                            }
                            setFromPoints(t, e) {
                                const i = this.center;
                                void 0 !== e ? i.copy(e) : ir.setFromPoints(t).getCenter(i);
                                let n = 0;
                                for (let e = 0, r = t.length; e < r; e++)
                                    n = Math.max(n, i.distanceToSquared(t[e]));
                                return this.radius = Math.sqrt(n),
                                    this
                            }
                            copy(t) {
                                return this.center.copy(t.center),
                                    this.radius = t.radius,
                                    this
                            }
                            isEmpty() {
                                return this.radius < 0
                            }
                            makeEmpty() {
                                return this.center.set(0, 0, 0),
                                    this.radius = -1,
                                    this
                            }
                            containsPoint(t) {
                                return t.distanceToSquared(this.center) <= this.radius * this.radius
                            }
                            distanceToPoint(t) {
                                return t.distanceTo(this.center) - this.radius
                            }
                            intersectsSphere(t) {
                                var e = this.radius + t.radius;
                                return t.center.distanceToSquared(this.center) <= e * e
                            }
                            intersectsBox(t) {
                                return t.intersectsSphere(this)
                            }
                            intersectsPlane(t) {
                                return Math.abs(t.distanceToPoint(this.center)) <= this.radius
                            }
                            clampPoint(t, e) {
                                var i = this.center.distanceToSquared(t);
                                return e.copy(t),
                                i > this.radius * this.radius && (e.sub(this.center).normalize(),
                                    e.multiplyScalar(this.radius).add(this.center)),
                                    e
                            }
                            getBoundingBox(t) {
                                return this.isEmpty() ? t.makeEmpty() : (t.set(this.center, this.center),
                                    t.expandByScalar(this.radius)),
                                    t
                            }
                            applyMatrix4(t) {
                                return this.center.applyMatrix4(t),
                                    this.radius = this.radius * t.getMaxScaleOnAxis(),
                                    this
                            }
                            translate(t) {
                                return this.center.add(t),
                                    this
                            }
                            expandByPoint(t) {
                                sr.subVectors(t, this.center);
                                var e = sr.lengthSq();
                                return e > this.radius * this.radius && (e = .5 * ((t = Math.sqrt(e)) - this.radius),
                                    this.center.add(sr.multiplyScalar(e / t)),
                                    this.radius += e),
                                    this
                            }
                            union(t) {
                                return (!0 === this.center.equals(t.center) ? rr.set(0, 0, 1) : rr.subVectors(t.center, this.center).normalize()).multiplyScalar(t.radius),
                                    this.expandByPoint(nr.copy(t.center).add(rr)),
                                    this.expandByPoint(nr.copy(t.center).sub(rr)),
                                    this
                            }
                            equals(t) {
                                return t.center.equals(this.center) && t.radius === this.radius
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                        }
                        const or = new Fn
                            , hr = new Fn
                            , lr = new Fn
                            , ur = new Fn
                            , cr = new Fn
                            , dr = new Fn
                            , pr = new Fn;
                        class fr {
                            constructor(t=new Fn, e=new Fn(0,0,-1)) {
                                this.origin = t,
                                    this.direction = e
                            }
                            set(t, e) {
                                return this.origin.copy(t),
                                    this.direction.copy(e),
                                    this
                            }
                            copy(t) {
                                return this.origin.copy(t.origin),
                                    this.direction.copy(t.direction),
                                    this
                            }
                            at(t, e) {
                                return e.copy(this.direction).multiplyScalar(t).add(this.origin)
                            }
                            lookAt(t) {
                                return this.direction.copy(t).sub(this.origin).normalize(),
                                    this
                            }
                            recast(t) {
                                return this.origin.copy(this.at(t, or)),
                                    this
                            }
                            closestPointToPoint(t, e) {
                                return e.subVectors(t, this.origin),
                                    (t = e.dot(this.direction)) < 0 ? e.copy(this.origin) : e.copy(this.direction).multiplyScalar(t).add(this.origin)
                            }
                            distanceToPoint(t) {
                                return Math.sqrt(this.distanceSqToPoint(t))
                            }
                            distanceSqToPoint(t) {
                                var e = or.subVectors(t, this.origin).dot(this.direction);
                                return e < 0 ? this.origin.distanceToSquared(t) : (or.copy(this.direction).multiplyScalar(e).add(this.origin),
                                    or.distanceToSquared(t))
                            }
                            distanceSqToSegment(t, e, i, n) {
                                hr.copy(t).add(e).multiplyScalar(.5),
                                    lr.copy(e).sub(t).normalize(),
                                    ur.copy(this.origin).sub(hr);
                                var r = .5 * t.distanceTo(e)
                                    , s = -this.direction.dot(lr)
                                    , a = ur.dot(this.direction)
                                    , o = -ur.dot(lr);
                                t = ur.lengthSq();
                                let h, l, u, c;
                                return u = 0 < (e = Math.abs(1 - s * s)) ? (h = s * o - a,
                                    l = s * a - o,
                                    c = r * e,
                                    0 <= h ? l >= -c ? l <= c ? (h *= e = 1 / e,
                                        l *= e,
                                    h * (h + s * l + 2 * a) + l * (s * h + l + 2 * o) + t) : (l = r,
                                        h = Math.max(0, -(s * l + a)),
                                    -h * h + l * (l + 2 * o) + t) : (l = -r,
                                        h = Math.max(0, -(s * l + a)),
                                    -h * h + l * (l + 2 * o) + t) : l <= -c ? (h = Math.max(0, -(-s * r + a)),
                                        l = 0 < h ? -r : Math.min(Math.max(-r, -o), r),
                                    -h * h + l * (l + 2 * o) + t) : l <= c ? (h = 0,
                                        l = Math.min(Math.max(-r, -o), r),
                                    l * (l + 2 * o) + t) : (h = Math.max(0, -(s * r + a)),
                                        l = 0 < h ? r : Math.min(Math.max(-r, -o), r),
                                    -h * h + l * (l + 2 * o) + t)) : (l = 0 < s ? -r : r,
                                    h = Math.max(0, -(s * l + a)),
                                -h * h + l * (l + 2 * o) + t),
                                i && i.copy(this.direction).multiplyScalar(h).add(this.origin),
                                n && n.copy(lr).multiplyScalar(l).add(hr),
                                    u
                            }
                            intersectSphere(t, e) {
                                or.subVectors(t.center, this.origin);
                                var i = or.dot(this.direction)
                                    , n = or.dot(or) - i * i;
                                return (t = t.radius * t.radius) < n ? null : (n = i - (t = Math.sqrt(t - n)),
                                    t = i + t,
                                    n < 0 && t < 0 ? null : n < 0 ? this.at(t, e) : this.at(n, e))
                            }
                            intersectsSphere(t) {
                                return this.distanceSqToPoint(t.center) <= t.radius * t.radius
                            }
                            distanceToPlane(t) {
                                var e = t.normal.dot(this.direction);
                                return 0 === e ? 0 === t.distanceToPoint(this.origin) ? 0 : null : 0 <= (e = -(this.origin.dot(t.normal) + t.constant) / e) ? e : null
                            }
                            intersectPlane(t, e) {
                                return null === (t = this.distanceToPlane(t)) ? null : this.at(t, e)
                            }
                            intersectsPlane(t) {
                                var e = t.distanceToPoint(this.origin);
                                return 0 === e || t.normal.dot(this.direction) * e < 0
                            }
                            intersectBox(t, e) {
                                let i, n, r, s, a, o;
                                var h = 1 / this.direction.x
                                    , l = 1 / this.direction.y
                                    , u = 1 / this.direction.z
                                    , c = this.origin;
                                return n = 0 <= h ? (i = (t.min.x - c.x) * h,
                                (t.max.x - c.x) * h) : (i = (t.max.x - c.x) * h,
                                (t.min.x - c.x) * h),
                                    s = 0 <= l ? (r = (t.min.y - c.y) * l,
                                    (t.max.y - c.y) * l) : (r = (t.max.y - c.y) * l,
                                    (t.min.y - c.y) * l),
                                    i > s || r > n ? null : ((r > i || i != i) && (i = r),
                                    (s < n || n != n) && (n = s),
                                        o = 0 <= u ? (a = (t.min.z - c.z) * u,
                                        (t.max.z - c.z) * u) : (a = (t.max.z - c.z) * u,
                                        (t.min.z - c.z) * u),
                                        i > o || a > n ? null : ((a > i || i != i) && (i = a),
                                        (o < n || n != n) && (n = o),
                                            n < 0 ? null : this.at(0 <= i ? i : n, e)))
                            }
                            intersectsBox(t) {
                                return null !== this.intersectBox(t, or)
                            }
                            intersectTriangle(t, e, i, n, r) {
                                cr.subVectors(e, t),
                                    dr.subVectors(i, t),
                                    pr.crossVectors(cr, dr);
                                let s, a = this.direction.dot(pr);
                                if (0 < a) {
                                    if (n)
                                        return null;
                                    s = 1
                                } else {
                                    if (!(a < 0))
                                        return null;
                                    s = -1,
                                        a = -a
                                }
                                return ur.subVectors(this.origin, t),
                                    (n = s * this.direction.dot(dr.crossVectors(ur, dr))) < 0 || (t = s * this.direction.dot(cr.cross(ur))) < 0 || n + t > a || (t = -s * ur.dot(pr)) < 0 ? null : this.at(t / a, r)
                            }
                            applyMatrix4(t) {
                                return this.origin.applyMatrix4(t),
                                    this.direction.transformDirection(t),
                                    this
                            }
                            equals(t) {
                                return t.origin.equals(this.origin) && t.direction.equals(this.direction)
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                        }
                        class mr {
                            constructor() {
                                this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
                            }
                            set(t, e, i, n, r, s, a, o, h, l, u, c, d, p, f, m) {
                                const g = this.elements;
                                return g[0] = t,
                                    g[4] = e,
                                    g[8] = i,
                                    g[12] = n,
                                    g[1] = r,
                                    g[5] = s,
                                    g[9] = a,
                                    g[13] = o,
                                    g[2] = h,
                                    g[6] = l,
                                    g[10] = u,
                                    g[14] = c,
                                    g[3] = d,
                                    g[7] = p,
                                    g[11] = f,
                                    g[15] = m,
                                    this
                            }
                            identity() {
                                return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                    this
                            }
                            clone() {
                                return (new mr).fromArray(this.elements)
                            }
                            copy(t) {
                                const e = this.elements;
                                return t = t.elements,
                                    e[0] = t[0],
                                    e[1] = t[1],
                                    e[2] = t[2],
                                    e[3] = t[3],
                                    e[4] = t[4],
                                    e[5] = t[5],
                                    e[6] = t[6],
                                    e[7] = t[7],
                                    e[8] = t[8],
                                    e[9] = t[9],
                                    e[10] = t[10],
                                    e[11] = t[11],
                                    e[12] = t[12],
                                    e[13] = t[13],
                                    e[14] = t[14],
                                    e[15] = t[15],
                                    this
                            }
                            copyPosition(t) {
                                const e = this.elements
                                    , i = t.elements;
                                return e[12] = i[12],
                                    e[13] = i[13],
                                    e[14] = i[14],
                                    this
                            }
                            setFromMatrix3(t) {
                                return t = t.elements,
                                    this.set(t[0], t[3], t[6], 0, t[1], t[4], t[7], 0, t[2], t[5], t[8], 0, 0, 0, 0, 1),
                                    this
                            }
                            extractBasis(t, e, i) {
                                return t.setFromMatrixColumn(this, 0),
                                    e.setFromMatrixColumn(this, 1),
                                    i.setFromMatrixColumn(this, 2),
                                    this
                            }
                            makeBasis(t, e, i) {
                                return this.set(t.x, e.x, i.x, 0, t.y, e.y, i.y, 0, t.z, e.z, i.z, 0, 0, 0, 0, 1),
                                    this
                            }
                            extractRotation(t) {
                                const e = this.elements;
                                var i = t.elements
                                    , n = 1 / gr.setFromMatrixColumn(t, 0).length()
                                    , r = 1 / gr.setFromMatrixColumn(t, 1).length();
                                t = 1 / gr.setFromMatrixColumn(t, 2).length();
                                return e[0] = i[0] * n,
                                    e[1] = i[1] * n,
                                    e[2] = i[2] * n,
                                    e[3] = 0,
                                    e[4] = i[4] * r,
                                    e[5] = i[5] * r,
                                    e[6] = i[6] * r,
                                    e[7] = 0,
                                    e[8] = i[8] * t,
                                    e[9] = i[9] * t,
                                    e[10] = i[10] * t,
                                    e[11] = 0,
                                    e[12] = 0,
                                    e[13] = 0,
                                    e[14] = 0,
                                    e[15] = 1,
                                    this
                            }
                            makeRotationFromEuler(t) {
                                t && t.isEuler;
                                const e = this.elements;
                                var i, n, r, s, a, o, h, l, u, c, d, p = t.x, f = t.y, m = t.z, g = Math.cos(p), v = Math.sin(p), _ = Math.cos(f), y = Math.sin(f);
                                p = Math.cos(m),
                                    f = Math.sin(m);
                                return "XYZ" === t.order ? (i = g * p,
                                    r = g * f,
                                    n = v * p,
                                    m = v * f,
                                    e[0] = _ * p,
                                    e[4] = -_ * f,
                                    e[8] = y,
                                    e[1] = r + n * y,
                                    e[5] = i - m * y,
                                    e[9] = -v * _,
                                    e[2] = m - i * y,
                                    e[6] = n + r * y,
                                    e[10] = g * _) : "YXZ" === t.order ? (s = _ * p,
                                    i = _ * f,
                                    n = y * p,
                                    r = y * f,
                                    e[0] = s + r * v,
                                    e[4] = n * v - i,
                                    e[8] = g * y,
                                    e[1] = g * f,
                                    e[5] = g * p,
                                    e[9] = -v,
                                    e[2] = i * v - n,
                                    e[6] = r + s * v,
                                    e[10] = g * _) : "ZXY" === t.order ? (h = _ * p,
                                    s = _ * f,
                                    a = y * p,
                                    o = y * f,
                                    e[0] = h - o * v,
                                    e[4] = -g * f,
                                    e[8] = a + s * v,
                                    e[1] = s + a * v,
                                    e[5] = g * p,
                                    e[9] = o - h * v,
                                    e[2] = -g * y,
                                    e[6] = v,
                                    e[10] = g * _) : "ZYX" === t.order ? (a = g * p,
                                    o = g * f,
                                    l = v * p,
                                    h = v * f,
                                    e[0] = _ * p,
                                    e[4] = l * y - o,
                                    e[8] = a * y + h,
                                    e[1] = _ * f,
                                    e[5] = h * y + a,
                                    e[9] = o * y - l,
                                    e[2] = -y,
                                    e[6] = v * _,
                                    e[10] = g * _) : "YZX" === t.order ? (c = g * _,
                                    l = g * y,
                                    u = v * _,
                                    d = v * y,
                                    e[0] = _ * p,
                                    e[4] = d - c * f,
                                    e[8] = u * f + l,
                                    e[1] = f,
                                    e[5] = g * p,
                                    e[9] = -v * p,
                                    e[2] = -y * p,
                                    e[6] = l * f + u,
                                    e[10] = c - d * f) : "XZY" === t.order && (u = g * _,
                                    c = g * y,
                                    d = v * _,
                                    t = v * y,
                                    e[0] = _ * p,
                                    e[4] = -f,
                                    e[8] = y * p,
                                    e[1] = u * f + t,
                                    e[5] = g * p,
                                    e[9] = c * f - d,
                                    e[2] = d * f - c,
                                    e[6] = v * p,
                                    e[10] = t * f + u),
                                    e[3] = 0,
                                    e[7] = 0,
                                    e[11] = 0,
                                    e[12] = 0,
                                    e[13] = 0,
                                    e[14] = 0,
                                    e[15] = 1,
                                    this
                            }
                            makeRotationFromQuaternion(t) {
                                return this.compose(_r, t, yr)
                            }
                            lookAt(t, e, i) {
                                const n = this.elements;
                                return wr.subVectors(t, e),
                                0 === wr.lengthSq() && (wr.z = 1),
                                    wr.normalize(),
                                    xr.crossVectors(i, wr),
                                0 === xr.lengthSq() && (1 === Math.abs(i.z) ? wr.x += 1e-4 : wr.z += 1e-4,
                                    wr.normalize(),
                                    xr.crossVectors(i, wr)),
                                    xr.normalize(),
                                    br.crossVectors(wr, xr),
                                    n[0] = xr.x,
                                    n[4] = br.x,
                                    n[8] = wr.x,
                                    n[1] = xr.y,
                                    n[5] = br.y,
                                    n[9] = wr.y,
                                    n[2] = xr.z,
                                    n[6] = br.z,
                                    n[10] = wr.z,
                                    this
                            }
                            multiply(t, e) {
                                return void 0 !== e ? this.multiplyMatrices(t, e) : this.multiplyMatrices(this, t)
                            }
                            premultiply(t) {
                                return this.multiplyMatrices(t, this)
                            }
                            multiplyMatrices(t, e) {
                                var i = t.elements
                                    , n = e.elements;
                                const r = this.elements;
                                var s = i[0]
                                    , a = i[4]
                                    , o = i[8]
                                    , h = i[12]
                                    , l = i[1]
                                    , u = i[5]
                                    , c = i[9]
                                    , d = i[13]
                                    , p = i[2]
                                    , f = i[6]
                                    , m = i[10]
                                    , g = i[14]
                                    , v = i[3]
                                    , _ = i[7]
                                    , y = i[11]
                                    , x = i[15]
                                    , b = n[0]
                                    , w = n[4]
                                    , S = n[8]
                                    , M = n[12]
                                    , C = n[1]
                                    , A = n[5]
                                    , T = n[9]
                                    , P = n[13]
                                    , E = n[2]
                                    , L = n[6]
                                    , I = n[10]
                                    , k = n[14];
                                t = n[3],
                                    e = n[7],
                                    i = n[11],
                                    n = n[15];
                                return r[0] = s * b + a * C + o * E + h * t,
                                    r[4] = s * w + a * A + o * L + h * e,
                                    r[8] = s * S + a * T + o * I + h * i,
                                    r[12] = s * M + a * P + o * k + h * n,
                                    r[1] = l * b + u * C + c * E + d * t,
                                    r[5] = l * w + u * A + c * L + d * e,
                                    r[9] = l * S + u * T + c * I + d * i,
                                    r[13] = l * M + u * P + c * k + d * n,
                                    r[2] = p * b + f * C + m * E + g * t,
                                    r[6] = p * w + f * A + m * L + g * e,
                                    r[10] = p * S + f * T + m * I + g * i,
                                    r[14] = p * M + f * P + m * k + g * n,
                                    r[3] = v * b + _ * C + y * E + x * t,
                                    r[7] = v * w + _ * A + y * L + x * e,
                                    r[11] = v * S + _ * T + y * I + x * i,
                                    r[15] = v * M + _ * P + y * k + x * n,
                                    this
                            }
                            multiplyScalar(t) {
                                const e = this.elements;
                                return e[0] *= t,
                                    e[4] *= t,
                                    e[8] *= t,
                                    e[12] *= t,
                                    e[1] *= t,
                                    e[5] *= t,
                                    e[9] *= t,
                                    e[13] *= t,
                                    e[2] *= t,
                                    e[6] *= t,
                                    e[10] *= t,
                                    e[14] *= t,
                                    e[3] *= t,
                                    e[7] *= t,
                                    e[11] *= t,
                                    e[15] *= t,
                                    this
                            }
                            determinant() {
                                var t = this.elements
                                    , e = t[0]
                                    , i = t[4]
                                    , n = t[8]
                                    , r = t[12]
                                    , s = t[1]
                                    , a = t[5]
                                    , o = t[9]
                                    , h = t[13]
                                    , l = t[2]
                                    , u = t[6]
                                    , c = t[10]
                                    , d = t[14];
                                return t[3] * (+r * o * u - n * h * u - r * a * c + i * h * c + n * a * d - i * o * d) + t[7] * (+e * o * d - e * h * c + r * s * c - n * s * d + n * h * l - r * o * l) + t[11] * (+e * h * u - e * a * d - r * s * u + i * s * d + r * a * l - i * h * l) + t[15] * (-n * a * l - e * o * u + e * a * c + n * s * u - i * s * c + i * o * l)
                            }
                            transpose() {
                                const t = this.elements;
                                var e = t[1];
                                return t[1] = t[4],
                                    t[4] = e,
                                    e = t[2],
                                    t[2] = t[8],
                                    t[8] = e,
                                    e = t[6],
                                    t[6] = t[9],
                                    t[9] = e,
                                    e = t[3],
                                    t[3] = t[12],
                                    t[12] = e,
                                    e = t[7],
                                    t[7] = t[13],
                                    t[13] = e,
                                    e = t[11],
                                    t[11] = t[14],
                                    t[14] = e,
                                    this
                            }
                            setPosition(t, e, i) {
                                const n = this.elements;
                                return t.isVector3 ? (n[12] = t.x,
                                    n[13] = t.y,
                                    n[14] = t.z) : (n[12] = t,
                                    n[13] = e,
                                    n[14] = i),
                                    this
                            }
                            invert() {
                                const t = this.elements
                                    , e = t[0]
                                    , i = t[1]
                                    , n = t[2]
                                    , r = t[3]
                                    , s = t[4]
                                    , a = t[5]
                                    , o = t[6]
                                    , h = t[7]
                                    , l = t[8]
                                    , u = t[9]
                                    , c = t[10]
                                    , d = t[11]
                                    , p = t[12]
                                    , f = t[13]
                                    , m = t[14]
                                    , g = t[15]
                                    , v = u * m * h - f * c * h + f * o * d - a * m * d - u * o * g + a * c * g
                                    , _ = p * c * h - l * m * h - p * o * d + s * m * d + l * o * g - s * c * g
                                    , y = l * f * h - p * u * h + p * a * d - s * f * d - l * a * g + s * u * g
                                    , x = p * u * o - l * f * o - p * a * c + s * f * c + l * a * m - s * u * m;
                                var b = e * v + i * _ + n * y + r * x;
                                return 0 == b ? this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) : (b = 1 / b,
                                    t[0] = v * b,
                                    t[1] = (f * c * r - u * m * r - f * n * d + i * m * d + u * n * g - i * c * g) * b,
                                    t[2] = (a * m * r - f * o * r + f * n * h - i * m * h - a * n * g + i * o * g) * b,
                                    t[3] = (u * o * r - a * c * r - u * n * h + i * c * h + a * n * d - i * o * d) * b,
                                    t[4] = _ * b,
                                    t[5] = (l * m * r - p * c * r + p * n * d - e * m * d - l * n * g + e * c * g) * b,
                                    t[6] = (p * o * r - s * m * r - p * n * h + e * m * h + s * n * g - e * o * g) * b,
                                    t[7] = (s * c * r - l * o * r + l * n * h - e * c * h - s * n * d + e * o * d) * b,
                                    t[8] = y * b,
                                    t[9] = (p * u * r - l * f * r - p * i * d + e * f * d + l * i * g - e * u * g) * b,
                                    t[10] = (s * f * r - p * a * r + p * i * h - e * f * h - s * i * g + e * a * g) * b,
                                    t[11] = (l * a * r - s * u * r - l * i * h + e * u * h + s * i * d - e * a * d) * b,
                                    t[12] = x * b,
                                    t[13] = (l * f * n - p * u * n + p * i * c - e * f * c - l * i * m + e * u * m) * b,
                                    t[14] = (p * a * n - s * f * n - p * i * o + e * f * o + s * i * m - e * a * m) * b,
                                    t[15] = (s * u * n - l * a * n + l * i * o - e * u * o - s * i * c + e * a * c) * b,
                                    this)
                            }
                            scale(t) {
                                const e = this.elements;
                                var i = t.x
                                    , n = t.y;
                                t = t.z;
                                return e[0] *= i,
                                    e[4] *= n,
                                    e[8] *= t,
                                    e[1] *= i,
                                    e[5] *= n,
                                    e[9] *= t,
                                    e[2] *= i,
                                    e[6] *= n,
                                    e[10] *= t,
                                    e[3] *= i,
                                    e[7] *= n,
                                    e[11] *= t,
                                    this
                            }
                            getMaxScaleOnAxis() {
                                var t = (i = this.elements)[0] * i[0] + i[1] * i[1] + i[2] * i[2]
                                    , e = i[4] * i[4] + i[5] * i[5] + i[6] * i[6]
                                    , i = i[8] * i[8] + i[9] * i[9] + i[10] * i[10];
                                return Math.sqrt(Math.max(t, e, i))
                            }
                            makeTranslation(t, e, i) {
                                return this.set(1, 0, 0, t, 0, 1, 0, e, 0, 0, 1, i, 0, 0, 0, 1),
                                    this
                            }
                            makeRotationX(t) {
                                var e = Math.cos(t);
                                t = Math.sin(t);
                                return this.set(1, 0, 0, 0, 0, e, -t, 0, 0, t, e, 0, 0, 0, 0, 1),
                                    this
                            }
                            makeRotationY(t) {
                                var e = Math.cos(t);
                                t = Math.sin(t);
                                return this.set(e, 0, t, 0, 0, 1, 0, 0, -t, 0, e, 0, 0, 0, 0, 1),
                                    this
                            }
                            makeRotationZ(t) {
                                var e = Math.cos(t);
                                t = Math.sin(t);
                                return this.set(e, -t, 0, 0, t, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                    this
                            }
                            makeRotationAxis(t, e) {
                                var i = Math.cos(e)
                                    , n = Math.sin(e)
                                    , r = 1 - i
                                    , s = t.x
                                    , a = t.y
                                    , o = t.z;
                                e = r * s,
                                    t = r * a;
                                return this.set(e * s + i, e * a - n * o, e * o + n * a, 0, e * a + n * o, t * a + i, t * o - n * s, 0, e * o - n * a, t * o + n * s, r * o * o + i, 0, 0, 0, 0, 1),
                                    this
                            }
                            makeScale(t, e, i) {
                                return this.set(t, 0, 0, 0, 0, e, 0, 0, 0, 0, i, 0, 0, 0, 0, 1),
                                    this
                            }
                            makeShear(t, e, i, n, r, s) {
                                return this.set(1, i, r, 0, t, 1, s, 0, e, n, 1, 0, 0, 0, 0, 1),
                                    this
                            }
                            compose(t, e, i) {
                                const n = this.elements;
                                var r = e._x
                                    , s = e._y
                                    , a = e._z
                                    , o = e._w
                                    , h = r * (c = r + r)
                                    , l = r * (d = s + s)
                                    , u = r * (p = a + a)
                                    , c = (e = s * d,
                                    r = s * p,
                                    s = a * p,
                                    a = o * c,
                                o * d)
                                    , d = o * p
                                    , p = (o = i.x,
                                    i.y);
                                i = i.z;
                                return n[0] = (1 - (e + s)) * o,
                                    n[1] = (l + d) * o,
                                    n[2] = (u - c) * o,
                                    n[3] = 0,
                                    n[4] = (l - d) * p,
                                    n[5] = (1 - (h + s)) * p,
                                    n[6] = (r + a) * p,
                                    n[7] = 0,
                                    n[8] = (u + c) * i,
                                    n[9] = (r - a) * i,
                                    n[10] = (1 - (h + e)) * i,
                                    n[11] = 0,
                                    n[12] = t.x,
                                    n[13] = t.y,
                                    n[14] = t.z,
                                    n[15] = 1,
                                    this
                            }
                            decompose(t, e, i) {
                                var n = this.elements;
                                let r = gr.set(n[0], n[1], n[2]).length();
                                var s = gr.set(n[4], n[5], n[6]).length()
                                    , a = gr.set(n[8], n[9], n[10]).length();
                                this.determinant() < 0 && (r = -r),
                                    t.x = n[12],
                                    t.y = n[13],
                                    t.z = n[14],
                                    vr.copy(this);
                                var o = 1 / r;
                                t = 1 / s,
                                    n = 1 / a;
                                return vr.elements[0] *= o,
                                    vr.elements[1] *= o,
                                    vr.elements[2] *= o,
                                    vr.elements[4] *= t,
                                    vr.elements[5] *= t,
                                    vr.elements[6] *= t,
                                    vr.elements[8] *= n,
                                    vr.elements[9] *= n,
                                    vr.elements[10] *= n,
                                    e.setFromRotationMatrix(vr),
                                    i.x = r,
                                    i.y = s,
                                    i.z = a,
                                    this
                            }
                            makePerspective(t, e, i, n, r, s) {
                                const a = this.elements;
                                var o = 2 * r / (i - n)
                                    , h = (e + t) / (e - t);
                                i = (i + n) / (i - n),
                                    n = -(s + r) / (s - r),
                                    s = -2 * s * r / (s - r);
                                return a[0] = 2 * r / (e - t),
                                    a[4] = 0,
                                    a[8] = h,
                                    a[12] = 0,
                                    a[1] = 0,
                                    a[5] = o,
                                    a[9] = i,
                                    a[13] = 0,
                                    a[2] = 0,
                                    a[6] = 0,
                                    a[10] = n,
                                    a[14] = s,
                                    a[3] = 0,
                                    a[7] = 0,
                                    a[11] = -1,
                                    a[15] = 0,
                                    this
                            }
                            makeOrthographic(t, e, i, n, r, s) {
                                const a = this.elements;
                                var o = 1 / (e - t)
                                    , h = 1 / (i - n)
                                    , l = 1 / (s - r);
                                t = (e + t) * o,
                                    n = (i + n) * h,
                                    r = (s + r) * l;
                                return a[0] = 2 * o,
                                    a[4] = 0,
                                    a[8] = 0,
                                    a[12] = -t,
                                    a[1] = 0,
                                    a[5] = 2 * h,
                                    a[9] = 0,
                                    a[13] = -n,
                                    a[2] = 0,
                                    a[6] = 0,
                                    a[10] = -2 * l,
                                    a[14] = -r,
                                    a[3] = 0,
                                    a[7] = 0,
                                    a[11] = 0,
                                    a[15] = 1,
                                    this
                            }
                            equals(t) {
                                var e = this.elements
                                    , i = t.elements;
                                for (let t = 0; t < 16; t++)
                                    if (e[t] !== i[t])
                                        return !1;
                                return !0
                            }
                            fromArray(t, e=0) {
                                for (let i = 0; i < 16; i++)
                                    this.elements[i] = t[i + e];
                                return this
                            }
                            toArray(t=[], e=0) {
                                var i = this.elements;
                                return t[e] = i[0],
                                    t[e + 1] = i[1],
                                    t[e + 2] = i[2],
                                    t[e + 3] = i[3],
                                    t[e + 4] = i[4],
                                    t[e + 5] = i[5],
                                    t[e + 6] = i[6],
                                    t[e + 7] = i[7],
                                    t[e + 8] = i[8],
                                    t[e + 9] = i[9],
                                    t[e + 10] = i[10],
                                    t[e + 11] = i[11],
                                    t[e + 12] = i[12],
                                    t[e + 13] = i[13],
                                    t[e + 14] = i[14],
                                    t[e + 15] = i[15],
                                    t
                            }
                        }
                        mr.prototype.isMatrix4 = !0;
                        const gr = new Fn
                            , vr = new mr
                            , _r = new Fn(0,0,0)
                            , yr = new Fn(1,1,1)
                            , xr = new Fn
                            , br = new Fn
                            , wr = new Fn
                            , Sr = new mr
                            , Mr = new zn;
                        class Cr {
                            constructor(t=0, e=0, i=0, n=Cr.DefaultOrder) {
                                this._x = t,
                                    this._y = e,
                                    this._z = i,
                                    this._order = n
                            }
                            get x() {
                                return this._x
                            }
                            set x(t) {
                                this._x = t,
                                    this._onChangeCallback()
                            }
                            get y() {
                                return this._y
                            }
                            set y(t) {
                                this._y = t,
                                    this._onChangeCallback()
                            }
                            get z() {
                                return this._z
                            }
                            set z(t) {
                                this._z = t,
                                    this._onChangeCallback()
                            }
                            get order() {
                                return this._order
                            }
                            set order(t) {
                                this._order = t,
                                    this._onChangeCallback()
                            }
                            set(t, e, i, n=this._order) {
                                return this._x = t,
                                    this._y = e,
                                    this._z = i,
                                    this._order = n,
                                    this._onChangeCallback(),
                                    this
                            }
                            clone() {
                                return new this.constructor(this._x,this._y,this._z,this._order)
                            }
                            copy(t) {
                                return this._x = t._x,
                                    this._y = t._y,
                                    this._z = t._z,
                                    this._order = t._order,
                                    this._onChangeCallback(),
                                    this
                            }
                            setFromRotationMatrix(t, e=this._order, i=!0) {
                                var n = (t = t.elements)[0]
                                    , r = t[4]
                                    , s = t[8]
                                    , a = t[1]
                                    , o = t[5]
                                    , h = t[9]
                                    , l = t[2]
                                    , u = t[6]
                                    , c = t[10];
                                switch (e) {
                                    case "XYZ":
                                        this._y = Math.asin(mn(s, -1, 1)),
                                            Math.abs(s) < .9999999 ? (this._x = Math.atan2(-h, c),
                                                this._z = Math.atan2(-r, n)) : (this._x = Math.atan2(u, o),
                                                this._z = 0);
                                        break;
                                    case "YXZ":
                                        this._x = Math.asin(-mn(h, -1, 1)),
                                            Math.abs(h) < .9999999 ? (this._y = Math.atan2(s, c),
                                                this._z = Math.atan2(a, o)) : (this._y = Math.atan2(-l, n),
                                                this._z = 0);
                                        break;
                                    case "ZXY":
                                        this._x = Math.asin(mn(u, -1, 1)),
                                            Math.abs(u) < .9999999 ? (this._y = Math.atan2(-l, c),
                                                this._z = Math.atan2(-r, o)) : (this._y = 0,
                                                this._z = Math.atan2(a, n));
                                        break;
                                    case "ZYX":
                                        this._y = Math.asin(-mn(l, -1, 1)),
                                            Math.abs(l) < .9999999 ? (this._x = Math.atan2(u, c),
                                                this._z = Math.atan2(a, n)) : (this._x = 0,
                                                this._z = Math.atan2(-r, o));
                                        break;
                                    case "YZX":
                                        this._z = Math.asin(mn(a, -1, 1)),
                                            Math.abs(a) < .9999999 ? (this._x = Math.atan2(-h, o),
                                                this._y = Math.atan2(-l, n)) : (this._x = 0,
                                                this._y = Math.atan2(s, c));
                                        break;
                                    case "XZY":
                                        this._z = Math.asin(-mn(r, -1, 1)),
                                            Math.abs(r) < .9999999 ? (this._x = Math.atan2(u, o),
                                                this._y = Math.atan2(s, n)) : (this._x = Math.atan2(-h, c),
                                                this._y = 0)
                                }
                                return this._order = e,
                                !0 === i && this._onChangeCallback(),
                                    this
                            }
                            setFromQuaternion(t, e, i) {
                                return Sr.makeRotationFromQuaternion(t),
                                    this.setFromRotationMatrix(Sr, e, i)
                            }
                            setFromVector3(t, e=this._order) {
                                return this.set(t.x, t.y, t.z, e)
                            }
                            reorder(t) {
                                return Mr.setFromEuler(this),
                                    this.setFromQuaternion(Mr, t)
                            }
                            equals(t) {
                                return t._x === this._x && t._y === this._y && t._z === this._z && t._order === this._order
                            }
                            fromArray(t) {
                                return this._x = t[0],
                                    this._y = t[1],
                                    this._z = t[2],
                                void 0 !== t[3] && (this._order = t[3]),
                                    this._onChangeCallback(),
                                    this
                            }
                            toArray(t=[], e=0) {
                                return t[e] = this._x,
                                    t[e + 1] = this._y,
                                    t[e + 2] = this._z,
                                    t[e + 3] = this._order,
                                    t
                            }
                            toVector3(t) {
                                return t ? t.set(this._x, this._y, this._z) : new Fn(this._x,this._y,this._z)
                            }
                            _onChange(t) {
                                return this._onChangeCallback = t,
                                    this
                            }
                            _onChangeCallback() {}
                        }
                        Cr.prototype.isEuler = !0,
                            Cr.DefaultOrder = "XYZ",
                            Cr.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"];
                        class Ar {
                            constructor() {
                                this.mask = 1
                            }
                            set(t) {
                                this.mask = (1 << t | 0) >>> 0
                            }
                            enable(t) {
                                this.mask |= 1 << t | 0
                            }
                            enableAll() {
                                this.mask = -1
                            }
                            toggle(t) {
                                this.mask ^= 1 << t | 0
                            }
                            disable(t) {
                                this.mask &= ~(1 << t | 0)
                            }
                            disableAll() {
                                this.mask = 0
                            }
                            test(t) {
                                return 0 != (this.mask & t.mask)
                            }
                            isEnabled(t) {
                                return 0 != (this.mask & (1 << t | 0))
                            }
                        }
                        let Tr = 0;
                        const Pr = new Fn
                            , Er = new zn
                            , Lr = new mr
                            , Ir = new Fn
                            , kr = new Fn
                            , Nr = new Fn
                            , Or = new zn
                            , Dr = new Fn(1,0,0)
                            , Rr = new Fn(0,1,0)
                            , zr = new Fn(0,0,1)
                            , Fr = {
                            type: "added"
                        }
                            , Br = {
                            type: "removed"
                        };
                        class Vr extends ln {
                            constructor() {
                                super(),
                                    Object.defineProperty(this, "id", {
                                        value: Tr++
                                    }),
                                    this.uuid = fn(),
                                    this.name = "",
                                    this.type = "Object3D",
                                    this.parent = null,
                                    this.children = [],
                                    this.up = Vr.DefaultUp.clone();
                                var t = new Fn;
                                const e = new Cr
                                    , i = new zn;
                                var n = new Fn(1,1,1);
                                e._onChange((function() {
                                        i.setFromEuler(e, !1)
                                    }
                                )),
                                    i._onChange((function() {
                                            e.setFromQuaternion(i, void 0, !1)
                                        }
                                    )),
                                    Object.defineProperties(this, {
                                        position: {
                                            configurable: !0,
                                            enumerable: !0,
                                            value: t
                                        },
                                        rotation: {
                                            configurable: !0,
                                            enumerable: !0,
                                            value: e
                                        },
                                        quaternion: {
                                            configurable: !0,
                                            enumerable: !0,
                                            value: i
                                        },
                                        scale: {
                                            configurable: !0,
                                            enumerable: !0,
                                            value: n
                                        },
                                        modelViewMatrix: {
                                            value: new mr
                                        },
                                        normalMatrix: {
                                            value: new Sn
                                        }
                                    }),
                                    this.matrix = new mr,
                                    this.matrixWorld = new mr,
                                    this.matrixAutoUpdate = Vr.DefaultMatrixAutoUpdate,
                                    this.matrixWorldNeedsUpdate = !1,
                                    this.layers = new Ar,
                                    this.visible = !0,
                                    this.castShadow = !1,
                                    this.receiveShadow = !1,
                                    this.frustumCulled = !0,
                                    this.renderOrder = 0,
                                    this.animations = [],
                                    this.userData = {}
                            }
                            onBeforeRender() {}
                            onAfterRender() {}
                            applyMatrix4(t) {
                                this.matrixAutoUpdate && this.updateMatrix(),
                                    this.matrix.premultiply(t),
                                    this.matrix.decompose(this.position, this.quaternion, this.scale)
                            }
                            applyQuaternion(t) {
                                return this.quaternion.premultiply(t),
                                    this
                            }
                            setRotationFromAxisAngle(t, e) {
                                this.quaternion.setFromAxisAngle(t, e)
                            }
                            setRotationFromEuler(t) {
                                this.quaternion.setFromEuler(t, !0)
                            }
                            setRotationFromMatrix(t) {
                                this.quaternion.setFromRotationMatrix(t)
                            }
                            setRotationFromQuaternion(t) {
                                this.quaternion.copy(t)
                            }
                            rotateOnAxis(t, e) {
                                return Er.setFromAxisAngle(t, e),
                                    this.quaternion.multiply(Er),
                                    this
                            }
                            rotateOnWorldAxis(t, e) {
                                return Er.setFromAxisAngle(t, e),
                                    this.quaternion.premultiply(Er),
                                    this
                            }
                            rotateX(t) {
                                return this.rotateOnAxis(Dr, t)
                            }
                            rotateY(t) {
                                return this.rotateOnAxis(Rr, t)
                            }
                            rotateZ(t) {
                                return this.rotateOnAxis(zr, t)
                            }
                            translateOnAxis(t, e) {
                                return Pr.copy(t).applyQuaternion(this.quaternion),
                                    this.position.add(Pr.multiplyScalar(e)),
                                    this
                            }
                            translateX(t) {
                                return this.translateOnAxis(Dr, t)
                            }
                            translateY(t) {
                                return this.translateOnAxis(Rr, t)
                            }
                            translateZ(t) {
                                return this.translateOnAxis(zr, t)
                            }
                            localToWorld(t) {
                                return t.applyMatrix4(this.matrixWorld)
                            }
                            worldToLocal(t) {
                                return t.applyMatrix4(Lr.copy(this.matrixWorld).invert())
                            }
                            lookAt(t, e, i) {
                                t.isVector3 ? Ir.copy(t) : Ir.set(t, e, i),
                                    i = this.parent,
                                    this.updateWorldMatrix(!0, !1),
                                    kr.setFromMatrixPosition(this.matrixWorld),
                                    this.isCamera || this.isLight ? Lr.lookAt(kr, Ir, this.up) : Lr.lookAt(Ir, kr, this.up),
                                    this.quaternion.setFromRotationMatrix(Lr),
                                i && (Lr.extractRotation(i.matrixWorld),
                                    Er.setFromRotationMatrix(Lr),
                                    this.quaternion.premultiply(Er.invert()))
                            }
                            add(t) {
                                if (1 < arguments.length) {
                                    for (let t = 0; t < arguments.length; t++)
                                        this.add(arguments[t]);
                                    return this
                                }
                                return t === this || t && t.isObject3D && (null !== t.parent && t.parent.remove(t),
                                    (t.parent = this).children.push(t),
                                    t.dispatchEvent(Fr)),
                                    this
                            }
                            remove(t) {
                                if (1 < arguments.length) {
                                    for (let t = 0; t < arguments.length; t++)
                                        this.remove(arguments[t]);
                                    return this
                                }
                                var e = this.children.indexOf(t);
                                return -1 !== e && (t.parent = null,
                                    this.children.splice(e, 1),
                                    t.dispatchEvent(Br)),
                                    this
                            }
                            removeFromParent() {
                                const t = this.parent;
                                return null !== t && t.remove(this),
                                    this
                            }
                            clear() {
                                for (let t = 0; t < this.children.length; t++) {
                                    const e = this.children[t];
                                    e.parent = null,
                                        e.dispatchEvent(Br)
                                }
                                return this.children.length = 0,
                                    this
                            }
                            attach(t) {
                                return this.updateWorldMatrix(!0, !1),
                                    Lr.copy(this.matrixWorld).invert(),
                                null !== t.parent && (t.parent.updateWorldMatrix(!0, !1),
                                    Lr.multiply(t.parent.matrixWorld)),
                                    t.applyMatrix4(Lr),
                                    this.add(t),
                                    t.updateWorldMatrix(!1, !0),
                                    this
                            }
                            getObjectById(t) {
                                return this.getObjectByProperty("id", t)
                            }
                            getObjectByName(t) {
                                return this.getObjectByProperty("name", t)
                            }
                            getObjectByProperty(t, e) {
                                if (this[t] === e)
                                    return this;
                                for (let n = 0, r = this.children.length; n < r; n++) {
                                    var i = this.children[n].getObjectByProperty(t, e);
                                    if (void 0 !== i)
                                        return i
                                }
                            }
                            getWorldPosition(t) {
                                return this.updateWorldMatrix(!0, !1),
                                    t.setFromMatrixPosition(this.matrixWorld)
                            }
                            getWorldQuaternion(t) {
                                return this.updateWorldMatrix(!0, !1),
                                    this.matrixWorld.decompose(kr, t, Nr),
                                    t
                            }
                            getWorldScale(t) {
                                return this.updateWorldMatrix(!0, !1),
                                    this.matrixWorld.decompose(kr, Or, t),
                                    t
                            }
                            getWorldDirection(t) {
                                this.updateWorldMatrix(!0, !1);
                                var e = this.matrixWorld.elements;
                                return t.set(e[8], e[9], e[10]).normalize()
                            }
                            raycast() {}
                            traverse(t) {
                                t(this);
                                const e = this.children;
                                for (let i = 0, n = e.length; i < n; i++)
                                    e[i].traverse(t)
                            }
                            traverseVisible(t) {
                                if (!1 !== this.visible) {
                                    t(this);
                                    const e = this.children;
                                    for (let i = 0, n = e.length; i < n; i++)
                                        e[i].traverseVisible(t)
                                }
                            }
                            traverseAncestors(t) {
                                const e = this.parent;
                                null !== e && (t(e),
                                    e.traverseAncestors(t))
                            }
                            updateMatrix() {
                                this.matrix.compose(this.position, this.quaternion, this.scale),
                                    this.matrixWorldNeedsUpdate = !0
                            }
                            updateMatrixWorld(t) {
                                this.matrixAutoUpdate && this.updateMatrix(),
                                (this.matrixWorldNeedsUpdate || t) && (null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix),
                                    t = !(this.matrixWorldNeedsUpdate = !1));
                                const e = this.children;
                                for (let i = 0, n = e.length; i < n; i++)
                                    e[i].updateMatrixWorld(t)
                            }
                            updateWorldMatrix(t, e) {
                                const i = this.parent;
                                if (!0 === t && null !== i && i.updateWorldMatrix(!0, !1),
                                this.matrixAutoUpdate && this.updateMatrix(),
                                    null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix),
                                !0 === e) {
                                    const t = this.children;
                                    for (let e = 0, i = t.length; e < i; e++)
                                        t[e].updateWorldMatrix(!1, !0)
                                }
                            }
                            toJSON(t) {
                                var e, i, n, r, s, a = void 0 === t || "string" == typeof t;
                                const o = {};
                                a && (t = {
                                    geometries: {},
                                    materials: {},
                                    textures: {},
                                    images: {},
                                    shapes: {},
                                    skeletons: {},
                                    animations: {}
                                },
                                    o.metadata = {
                                        version: 4.5,
                                        type: "Object",
                                        generator: "Object3D.toJSON"
                                    });
                                const h = {};
                                function l(e, i) {
                                    return void 0 === e[i.uuid] && (e[i.uuid] = i.toJSON(t)),
                                        i.uuid
                                }
                                if (h.uuid = this.uuid,
                                    h.type = this.type,
                                "" !== this.name && (h.name = this.name),
                                !0 === this.castShadow && (h.castShadow = !0),
                                !0 === this.receiveShadow && (h.receiveShadow = !0),
                                !1 === this.visible && (h.visible = !1),
                                !1 === this.frustumCulled && (h.frustumCulled = !1),
                                0 !== this.renderOrder && (h.renderOrder = this.renderOrder),
                                "{}" !== JSON.stringify(this.userData) && (h.userData = this.userData),
                                    h.layers = this.layers.mask,
                                    h.matrix = this.matrix.toArray(),
                                !1 === this.matrixAutoUpdate && (h.matrixAutoUpdate = !1),
                                this.isInstancedMesh && (h.type = "InstancedMesh",
                                    h.count = this.count,
                                    h.instanceMatrix = this.instanceMatrix.toJSON(),
                                null !== this.instanceColor && (h.instanceColor = this.instanceColor.toJSON())),
                                    this.isScene)
                                    this.background && (this.background.isColor ? h.background = this.background.toJSON() : this.background.isTexture && (h.background = this.background.toJSON(t).uuid)),
                                    this.environment && this.environment.isTexture && (h.environment = this.environment.toJSON(t).uuid);
                                else if (this.isMesh || this.isLine || this.isPoints) {
                                    h.geometry = l(t.geometries, this.geometry);
                                    var u = this.geometry.parameters;
                                    if (void 0 !== u && void 0 !== u.shapes) {
                                        var c = u.shapes;
                                        if (Array.isArray(c))
                                            for (let e = 0, i = c.length; e < i; e++) {
                                                var d = c[e];
                                                l(t.shapes, d)
                                            }
                                        else
                                            l(t.shapes, c)
                                    }
                                }
                                if (this.isSkinnedMesh && (h.bindMode = this.bindMode,
                                    h.bindMatrix = this.bindMatrix.toArray(),
                                void 0 !== this.skeleton && (l(t.skeletons, this.skeleton),
                                    h.skeleton = this.skeleton.uuid)),
                                void 0 !== this.material)
                                    if (Array.isArray(this.material)) {
                                        const e = [];
                                        for (let i = 0, n = this.material.length; i < n; i++)
                                            e.push(l(t.materials, this.material[i]));
                                        h.material = e
                                    } else
                                        h.material = l(t.materials, this.material);
                                if (0 < this.children.length) {
                                    h.children = [];
                                    for (let e = 0; e < this.children.length; e++)
                                        h.children.push(this.children[e].toJSON(t).object)
                                }
                                if (0 < this.animations.length) {
                                    h.animations = [];
                                    for (let e = 0; e < this.animations.length; e++) {
                                        var p = this.animations[e];
                                        h.animations.push(l(t.animations, p))
                                    }
                                }
                                return a && (e = f(t.geometries),
                                    i = f(t.materials),
                                    n = f(t.textures),
                                    r = f(t.images),
                                    s = f(t.shapes),
                                    u = f(t.skeletons),
                                    a = f(t.animations),
                                0 < e.length && (o.geometries = e),
                                0 < i.length && (o.materials = i),
                                0 < n.length && (o.textures = n),
                                0 < r.length && (o.images = r),
                                0 < s.length && (o.shapes = s),
                                0 < u.length && (o.skeletons = u),
                                0 < a.length && (o.animations = a)),
                                    o.object = h,
                                    o;
                                function f(t) {
                                    const e = [];
                                    for (const i in t) {
                                        const n = t[i];
                                        delete n.metadata,
                                            e.push(n)
                                    }
                                    return e
                                }
                            }
                            clone(t) {
                                return (new this.constructor).copy(this, t)
                            }
                            copy(t, e=!0) {
                                if (this.name = t.name,
                                    this.up.copy(t.up),
                                    this.position.copy(t.position),
                                    this.rotation.order = t.rotation.order,
                                    this.quaternion.copy(t.quaternion),
                                    this.scale.copy(t.scale),
                                    this.matrix.copy(t.matrix),
                                    this.matrixWorld.copy(t.matrixWorld),
                                    this.matrixAutoUpdate = t.matrixAutoUpdate,
                                    this.matrixWorldNeedsUpdate = t.matrixWorldNeedsUpdate,
                                    this.layers.mask = t.layers.mask,
                                    this.visible = t.visible,
                                    this.castShadow = t.castShadow,
                                    this.receiveShadow = t.receiveShadow,
                                    this.frustumCulled = t.frustumCulled,
                                    this.renderOrder = t.renderOrder,
                                    this.userData = JSON.parse(JSON.stringify(t.userData)),
                                !0 === e)
                                    for (let e = 0; e < t.children.length; e++) {
                                        const i = t.children[e];
                                        this.add(i.clone())
                                    }
                                return this
                            }
                        }
                        Vr.DefaultUp = new Fn(0,1,0),
                            Vr.DefaultMatrixAutoUpdate = !0,
                            Vr.prototype.isObject3D = !0;
                        const Ur = new Fn
                            , Gr = new Fn
                            , Wr = new Fn
                            , jr = new Fn
                            , Hr = new Fn
                            , qr = new Fn
                            , Xr = new Fn
                            , Zr = new Fn
                            , Jr = new Fn
                            , Yr = new Fn;
                        class Qr {
                            constructor(t=new Fn, e=new Fn, i=new Fn) {
                                this.a = t,
                                    this.b = e,
                                    this.c = i
                            }
                            static getNormal(t, e, i, n) {
                                return n.subVectors(i, e),
                                    Ur.subVectors(t, e),
                                    n.cross(Ur),
                                    0 < (e = n.lengthSq()) ? n.multiplyScalar(1 / Math.sqrt(e)) : n.set(0, 0, 0)
                            }
                            static getBarycoord(t, e, i, n, r) {
                                Ur.subVectors(n, e),
                                    Gr.subVectors(i, e),
                                    Wr.subVectors(t, e);
                                var s = Ur.dot(Ur)
                                    , a = Ur.dot(Gr);
                                n = Ur.dot(Wr),
                                    i = Gr.dot(Gr),
                                    t = Gr.dot(Wr);
                                return 0 == (e = s * i - a * a) ? r.set(-2, -1, -1) : (i = (i * n - a * t) * (e = 1 / e),
                                    e *= s * t - a * n,
                                    r.set(1 - i - e, e, i))
                            }
                            static containsPoint(t, e, i, n) {
                                return this.getBarycoord(t, e, i, n, jr),
                                0 <= jr.x && 0 <= jr.y && jr.x + jr.y <= 1
                            }
                            static getUV(t, e, i, n, r, s, a, o) {
                                return this.getBarycoord(t, e, i, n, jr),
                                    o.set(0, 0),
                                    o.addScaledVector(r, jr.x),
                                    o.addScaledVector(s, jr.y),
                                    o.addScaledVector(a, jr.z),
                                    o
                            }
                            static isFrontFacing(t, e, i, n) {
                                return Ur.subVectors(i, e),
                                    Gr.subVectors(t, e),
                                Ur.cross(Gr).dot(n) < 0
                            }
                            set(t, e, i) {
                                return this.a.copy(t),
                                    this.b.copy(e),
                                    this.c.copy(i),
                                    this
                            }
                            setFromPointsAndIndices(t, e, i, n) {
                                return this.a.copy(t[e]),
                                    this.b.copy(t[i]),
                                    this.c.copy(t[n]),
                                    this
                            }
                            setFromAttributeAndIndices(t, e, i, n) {
                                return this.a.fromBufferAttribute(t, e),
                                    this.b.fromBufferAttribute(t, i),
                                    this.c.fromBufferAttribute(t, n),
                                    this
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                            copy(t) {
                                return this.a.copy(t.a),
                                    this.b.copy(t.b),
                                    this.c.copy(t.c),
                                    this
                            }
                            getArea() {
                                return Ur.subVectors(this.c, this.b),
                                    Gr.subVectors(this.a, this.b),
                                .5 * Ur.cross(Gr).length()
                            }
                            getMidpoint(t) {
                                return t.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3)
                            }
                            getNormal(t) {
                                return Qr.getNormal(this.a, this.b, this.c, t)
                            }
                            getPlane(t) {
                                return t.setFromCoplanarPoints(this.a, this.b, this.c)
                            }
                            getBarycoord(t, e) {
                                return Qr.getBarycoord(t, this.a, this.b, this.c, e)
                            }
                            getUV(t, e, i, n, r) {
                                return Qr.getUV(t, this.a, this.b, this.c, e, i, n, r)
                            }
                            containsPoint(t) {
                                return Qr.containsPoint(t, this.a, this.b, this.c)
                            }
                            isFrontFacing(t) {
                                return Qr.isFrontFacing(this.a, this.b, this.c, t)
                            }
                            intersectsBox(t) {
                                return t.intersectsTriangle(this)
                            }
                            closestPointToPoint(t, e) {
                                var i = this.a
                                    , n = this.b
                                    , r = this.c;
                                let s, a;
                                Hr.subVectors(n, i),
                                    qr.subVectors(r, i),
                                    Zr.subVectors(t, i);
                                var o = Hr.dot(Zr)
                                    , h = qr.dot(Zr);
                                if (o <= 0 && h <= 0)
                                    return e.copy(i);
                                Jr.subVectors(t, n);
                                var l = Hr.dot(Jr)
                                    , u = qr.dot(Jr);
                                if (0 <= l && u <= l)
                                    return e.copy(n);
                                var c = o * u - l * h;
                                if (c <= 0 && 0 <= o && l <= 0)
                                    return s = o / (o - l),
                                        e.copy(i).addScaledVector(Hr, s);
                                Yr.subVectors(t, r);
                                var d = Hr.dot(Yr);
                                return 0 <= (t = qr.dot(Yr)) && d <= t ? e.copy(r) : (o = d * h - o * t) <= 0 && 0 <= h && t <= 0 ? (a = h / (h - t),
                                    e.copy(i).addScaledVector(qr, a)) : (h = l * t - d * u) <= 0 && 0 <= u - l && 0 <= d - t ? (Xr.subVectors(r, n),
                                    a = (u - l) / (u - l + (d - t)),
                                    e.copy(n).addScaledVector(Xr, a)) : (s = o * (h = 1 / (h + o + c)),
                                    a = c * h,
                                    e.copy(i).addScaledVector(Hr, s).addScaledVector(qr, a))
                            }
                            equals(t) {
                                return t.a.equals(this.a) && t.b.equals(this.b) && t.c.equals(this.c)
                            }
                        }
                        let Kr = 0;
                        class $r extends ln {
                            constructor() {
                                super(),
                                    Object.defineProperty(this, "id", {
                                        value: Kr++
                                    }),
                                    this.uuid = fn(),
                                    this.name = "",
                                    this.type = "Material",
                                    this.fog = !0,
                                    this.blending = tt,
                                    this.side = Z,
                                    this.vertexColors = !1,
                                    this.opacity = 1,
                                    this.format = _e,
                                    this.transparent = !1,
                                    this.blendSrc = ft,
                                    this.blendDst = mt,
                                    this.blendEquation = st,
                                    this.blendSrcAlpha = null,
                                    this.blendDstAlpha = null,
                                    this.blendEquationAlpha = null,
                                    this.depthFunc = Mt,
                                    this.depthTest = !0,
                                    this.depthWrite = !0,
                                    this.stencilWriteMask = 255,
                                    this.stencilFunc = Yi,
                                    this.stencilRef = 0,
                                    this.stencilFuncMask = 255,
                                    this.stencilFail = Ri,
                                    this.stencilZFail = Ri,
                                    this.stencilZPass = Ri,
                                    this.stencilWrite = !1,
                                    this.clippingPlanes = null,
                                    this.clipIntersection = !1,
                                    this.clipShadows = !1,
                                    this.shadowSide = null,
                                    this.colorWrite = !0,
                                    this.precision = null,
                                    this.polygonOffset = !1,
                                    this.polygonOffsetFactor = 0,
                                    this.polygonOffsetUnits = 0,
                                    this.dithering = !1,
                                    this.alphaToCoverage = !1,
                                    this.premultipliedAlpha = !1,
                                    this.visible = !0,
                                    this.toneMapped = !0,
                                    this.userData = {},
                                    this.version = 0,
                                    this._alphaTest = 0
                            }
                            get alphaTest() {
                                return this._alphaTest
                            }
                            set alphaTest(t) {
                                0 < this._alphaTest != 0 < t && this.version++,
                                    this._alphaTest = t
                            }
                            onBuild() {}
                            onBeforeRender() {}
                            onBeforeCompile() {}
                            customProgramCacheKey() {
                                return this.onBeforeCompile.toString()
                            }
                            setValues(t) {
                                if (void 0 !== t)
                                    for (const i in t) {
                                        var e = t[i];
                                        if (void 0 !== e)
                                            if ("shading" !== i) {
                                                const t = this[i];
                                                void 0 !== t && (t && t.isColor ? t.set(e) : t && t.isVector3 && e && e.isVector3 ? t.copy(e) : this[i] = e)
                                            } else
                                                this.flatShading = e === Q
                                    }
                            }
                            toJSON(t) {
                                var e = void 0 === t || "string" == typeof t;
                                e && (t = {
                                    textures: {},
                                    images: {}
                                });
                                const i = {
                                    metadata: {
                                        version: 4.5,
                                        type: "Material",
                                        generator: "Material.toJSON"
                                    }
                                };
                                function n(t) {
                                    const e = [];
                                    for (const i in t) {
                                        const n = t[i];
                                        delete n.metadata,
                                            e.push(n)
                                    }
                                    return e
                                }
                                return i.uuid = this.uuid,
                                    i.type = this.type,
                                "" !== this.name && (i.name = this.name),
                                this.color && this.color.isColor && (i.color = this.color.getHex()),
                                void 0 !== this.roughness && (i.roughness = this.roughness),
                                void 0 !== this.metalness && (i.metalness = this.metalness),
                                void 0 !== this.sheen && (i.sheen = this.sheen),
                                this.sheenColor && this.sheenColor.isColor && (i.sheenColor = this.sheenColor.getHex()),
                                void 0 !== this.sheenRoughness && (i.sheenRoughness = this.sheenRoughness),
                                this.emissive && this.emissive.isColor && (i.emissive = this.emissive.getHex()),
                                this.emissiveIntensity && 1 !== this.emissiveIntensity && (i.emissiveIntensity = this.emissiveIntensity),
                                this.specular && this.specular.isColor && (i.specular = this.specular.getHex()),
                                void 0 !== this.specularIntensity && (i.specularIntensity = this.specularIntensity),
                                this.specularColor && this.specularColor.isColor && (i.specularColor = this.specularColor.getHex()),
                                void 0 !== this.shininess && (i.shininess = this.shininess),
                                void 0 !== this.clearcoat && (i.clearcoat = this.clearcoat),
                                void 0 !== this.clearcoatRoughness && (i.clearcoatRoughness = this.clearcoatRoughness),
                                this.clearcoatMap && this.clearcoatMap.isTexture && (i.clearcoatMap = this.clearcoatMap.toJSON(t).uuid),
                                this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (i.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(t).uuid),
                                this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (i.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(t).uuid,
                                    i.clearcoatNormalScale = this.clearcoatNormalScale.toArray()),
                                this.map && this.map.isTexture && (i.map = this.map.toJSON(t).uuid),
                                this.matcap && this.matcap.isTexture && (i.matcap = this.matcap.toJSON(t).uuid),
                                this.alphaMap && this.alphaMap.isTexture && (i.alphaMap = this.alphaMap.toJSON(t).uuid),
                                this.lightMap && this.lightMap.isTexture && (i.lightMap = this.lightMap.toJSON(t).uuid,
                                    i.lightMapIntensity = this.lightMapIntensity),
                                this.aoMap && this.aoMap.isTexture && (i.aoMap = this.aoMap.toJSON(t).uuid,
                                    i.aoMapIntensity = this.aoMapIntensity),
                                this.bumpMap && this.bumpMap.isTexture && (i.bumpMap = this.bumpMap.toJSON(t).uuid,
                                    i.bumpScale = this.bumpScale),
                                this.normalMap && this.normalMap.isTexture && (i.normalMap = this.normalMap.toJSON(t).uuid,
                                    i.normalMapType = this.normalMapType,
                                    i.normalScale = this.normalScale.toArray()),
                                this.displacementMap && this.displacementMap.isTexture && (i.displacementMap = this.displacementMap.toJSON(t).uuid,
                                    i.displacementScale = this.displacementScale,
                                    i.displacementBias = this.displacementBias),
                                this.roughnessMap && this.roughnessMap.isTexture && (i.roughnessMap = this.roughnessMap.toJSON(t).uuid),
                                this.metalnessMap && this.metalnessMap.isTexture && (i.metalnessMap = this.metalnessMap.toJSON(t).uuid),
                                this.emissiveMap && this.emissiveMap.isTexture && (i.emissiveMap = this.emissiveMap.toJSON(t).uuid),
                                this.specularMap && this.specularMap.isTexture && (i.specularMap = this.specularMap.toJSON(t).uuid),
                                this.specularIntensityMap && this.specularIntensityMap.isTexture && (i.specularIntensityMap = this.specularIntensityMap.toJSON(t).uuid),
                                this.specularColorMap && this.specularColorMap.isTexture && (i.specularColorMap = this.specularColorMap.toJSON(t).uuid),
                                this.envMap && this.envMap.isTexture && (i.envMap = this.envMap.toJSON(t).uuid,
                                void 0 !== this.combine && (i.combine = this.combine)),
                                void 0 !== this.envMapIntensity && (i.envMapIntensity = this.envMapIntensity),
                                void 0 !== this.reflectivity && (i.reflectivity = this.reflectivity),
                                void 0 !== this.refractionRatio && (i.refractionRatio = this.refractionRatio),
                                this.gradientMap && this.gradientMap.isTexture && (i.gradientMap = this.gradientMap.toJSON(t).uuid),
                                void 0 !== this.transmission && (i.transmission = this.transmission),
                                this.transmissionMap && this.transmissionMap.isTexture && (i.transmissionMap = this.transmissionMap.toJSON(t).uuid),
                                void 0 !== this.thickness && (i.thickness = this.thickness),
                                this.thicknessMap && this.thicknessMap.isTexture && (i.thicknessMap = this.thicknessMap.toJSON(t).uuid),
                                void 0 !== this.attenuationDistance && (i.attenuationDistance = this.attenuationDistance),
                                void 0 !== this.attenuationColor && (i.attenuationColor = this.attenuationColor.getHex()),
                                void 0 !== this.size && (i.size = this.size),
                                null !== this.shadowSide && (i.shadowSide = this.shadowSide),
                                void 0 !== this.sizeAttenuation && (i.sizeAttenuation = this.sizeAttenuation),
                                this.blending !== tt && (i.blending = this.blending),
                                this.side !== Z && (i.side = this.side),
                                this.vertexColors && (i.vertexColors = !0),
                                this.opacity < 1 && (i.opacity = this.opacity),
                                this.format !== _e && (i.format = this.format),
                                !0 === this.transparent && (i.transparent = this.transparent),
                                    i.depthFunc = this.depthFunc,
                                    i.depthTest = this.depthTest,
                                    i.depthWrite = this.depthWrite,
                                    i.colorWrite = this.colorWrite,
                                    i.stencilWrite = this.stencilWrite,
                                    i.stencilWriteMask = this.stencilWriteMask,
                                    i.stencilFunc = this.stencilFunc,
                                    i.stencilRef = this.stencilRef,
                                    i.stencilFuncMask = this.stencilFuncMask,
                                    i.stencilFail = this.stencilFail,
                                    i.stencilZFail = this.stencilZFail,
                                    i.stencilZPass = this.stencilZPass,
                                this.rotation && 0 !== this.rotation && (i.rotation = this.rotation),
                                !0 === this.polygonOffset && (i.polygonOffset = !0),
                                0 !== this.polygonOffsetFactor && (i.polygonOffsetFactor = this.polygonOffsetFactor),
                                0 !== this.polygonOffsetUnits && (i.polygonOffsetUnits = this.polygonOffsetUnits),
                                this.linewidth && 1 !== this.linewidth && (i.linewidth = this.linewidth),
                                void 0 !== this.dashSize && (i.dashSize = this.dashSize),
                                void 0 !== this.gapSize && (i.gapSize = this.gapSize),
                                void 0 !== this.scale && (i.scale = this.scale),
                                !0 === this.dithering && (i.dithering = !0),
                                0 < this.alphaTest && (i.alphaTest = this.alphaTest),
                                !0 === this.alphaToCoverage && (i.alphaToCoverage = this.alphaToCoverage),
                                !0 === this.premultipliedAlpha && (i.premultipliedAlpha = this.premultipliedAlpha),
                                !0 === this.wireframe && (i.wireframe = this.wireframe),
                                1 < this.wireframeLinewidth && (i.wireframeLinewidth = this.wireframeLinewidth),
                                "round" !== this.wireframeLinecap && (i.wireframeLinecap = this.wireframeLinecap),
                                "round" !== this.wireframeLinejoin && (i.wireframeLinejoin = this.wireframeLinejoin),
                                !0 === this.flatShading && (i.flatShading = this.flatShading),
                                !1 === this.visible && (i.visible = !1),
                                !1 === this.toneMapped && (i.toneMapped = !1),
                                "{}" !== JSON.stringify(this.userData) && (i.userData = this.userData),
                                e && (e = n(t.textures),
                                    t = n(t.images),
                                0 < e.length && (i.textures = e),
                                0 < t.length && (i.images = t)),
                                    i
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                            copy(t) {
                                this.name = t.name,
                                    this.fog = t.fog,
                                    this.blending = t.blending,
                                    this.side = t.side,
                                    this.vertexColors = t.vertexColors,
                                    this.opacity = t.opacity,
                                    this.format = t.format,
                                    this.transparent = t.transparent,
                                    this.blendSrc = t.blendSrc,
                                    this.blendDst = t.blendDst,
                                    this.blendEquation = t.blendEquation,
                                    this.blendSrcAlpha = t.blendSrcAlpha,
                                    this.blendDstAlpha = t.blendDstAlpha,
                                    this.blendEquationAlpha = t.blendEquationAlpha,
                                    this.depthFunc = t.depthFunc,
                                    this.depthTest = t.depthTest,
                                    this.depthWrite = t.depthWrite,
                                    this.stencilWriteMask = t.stencilWriteMask,
                                    this.stencilFunc = t.stencilFunc,
                                    this.stencilRef = t.stencilRef,
                                    this.stencilFuncMask = t.stencilFuncMask,
                                    this.stencilFail = t.stencilFail,
                                    this.stencilZFail = t.stencilZFail,
                                    this.stencilZPass = t.stencilZPass,
                                    this.stencilWrite = t.stencilWrite;
                                const e = t.clippingPlanes;
                                let i = null;
                                if (null !== e) {
                                    var n = e.length;
                                    i = new Array(n);
                                    for (let t = 0; t !== n; ++t)
                                        i[t] = e[t].clone()
                                }
                                return this.clippingPlanes = i,
                                    this.clipIntersection = t.clipIntersection,
                                    this.clipShadows = t.clipShadows,
                                    this.shadowSide = t.shadowSide,
                                    this.colorWrite = t.colorWrite,
                                    this.precision = t.precision,
                                    this.polygonOffset = t.polygonOffset,
                                    this.polygonOffsetFactor = t.polygonOffsetFactor,
                                    this.polygonOffsetUnits = t.polygonOffsetUnits,
                                    this.dithering = t.dithering,
                                    this.alphaTest = t.alphaTest,
                                    this.alphaToCoverage = t.alphaToCoverage,
                                    this.premultipliedAlpha = t.premultipliedAlpha,
                                    this.visible = t.visible,
                                    this.toneMapped = t.toneMapped,
                                    this.userData = JSON.parse(JSON.stringify(t.userData)),
                                    this
                            }
                            dispose() {
                                this.dispatchEvent({
                                    type: "dispose"
                                })
                            }
                            set needsUpdate(t) {
                                !0 === t && this.version++
                            }
                        }
                        $r.prototype.isMaterial = !0;
                        const ts = {
                            aliceblue: 15792383,
                            antiquewhite: 16444375,
                            aqua: 65535,
                            aquamarine: 8388564,
                            azure: 15794175,
                            beige: 16119260,
                            bisque: 16770244,
                            black: 0,
                            blanchedalmond: 16772045,
                            blue: 255,
                            blueviolet: 9055202,
                            brown: 10824234,
                            burlywood: 14596231,
                            cadetblue: 6266528,
                            chartreuse: 8388352,
                            chocolate: 13789470,
                            coral: 16744272,
                            cornflowerblue: 6591981,
                            cornsilk: 16775388,
                            crimson: 14423100,
                            cyan: 65535,
                            darkblue: 139,
                            darkcyan: 35723,
                            darkgoldenrod: 12092939,
                            darkgray: 11119017,
                            darkgreen: 25600,
                            darkgrey: 11119017,
                            darkkhaki: 12433259,
                            darkmagenta: 9109643,
                            darkolivegreen: 5597999,
                            darkorange: 16747520,
                            darkorchid: 10040012,
                            darkred: 9109504,
                            darksalmon: 15308410,
                            darkseagreen: 9419919,
                            darkslateblue: 4734347,
                            darkslategray: 3100495,
                            darkslategrey: 3100495,
                            darkturquoise: 52945,
                            darkviolet: 9699539,
                            deeppink: 16716947,
                            deepskyblue: 49151,
                            dimgray: 6908265,
                            dimgrey: 6908265,
                            dodgerblue: 2003199,
                            firebrick: 11674146,
                            floralwhite: 16775920,
                            forestgreen: 2263842,
                            fuchsia: 16711935,
                            gainsboro: 14474460,
                            ghostwhite: 16316671,
                            gold: 16766720,
                            goldenrod: 14329120,
                            gray: 8421504,
                            green: 32768,
                            greenyellow: 11403055,
                            grey: 8421504,
                            honeydew: 15794160,
                            hotpink: 16738740,
                            indianred: 13458524,
                            indigo: 4915330,
                            ivory: 16777200,
                            khaki: 15787660,
                            lavender: 15132410,
                            lavenderblush: 16773365,
                            lawngreen: 8190976,
                            lemonchiffon: 16775885,
                            lightblue: 11393254,
                            lightcoral: 15761536,
                            lightcyan: 14745599,
                            lightgoldenrodyellow: 16448210,
                            lightgray: 13882323,
                            lightgreen: 9498256,
                            lightgrey: 13882323,
                            lightpink: 16758465,
                            lightsalmon: 16752762,
                            lightseagreen: 2142890,
                            lightskyblue: 8900346,
                            lightslategray: 7833753,
                            lightslategrey: 7833753,
                            lightsteelblue: 11584734,
                            lightyellow: 16777184,
                            lime: 65280,
                            limegreen: 3329330,
                            linen: 16445670,
                            magenta: 16711935,
                            maroon: 8388608,
                            mediumaquamarine: 6737322,
                            mediumblue: 205,
                            mediumorchid: 12211667,
                            mediumpurple: 9662683,
                            mediumseagreen: 3978097,
                            mediumslateblue: 8087790,
                            mediumspringgreen: 64154,
                            mediumturquoise: 4772300,
                            mediumvioletred: 13047173,
                            midnightblue: 1644912,
                            mintcream: 16121850,
                            mistyrose: 16770273,
                            moccasin: 16770229,
                            navajowhite: 16768685,
                            navy: 128,
                            oldlace: 16643558,
                            olive: 8421376,
                            olivedrab: 7048739,
                            orange: 16753920,
                            orangered: 16729344,
                            orchid: 14315734,
                            palegoldenrod: 15657130,
                            palegreen: 10025880,
                            paleturquoise: 11529966,
                            palevioletred: 14381203,
                            papayawhip: 16773077,
                            peachpuff: 16767673,
                            peru: 13468991,
                            pink: 16761035,
                            plum: 14524637,
                            powderblue: 11591910,
                            purple: 8388736,
                            rebeccapurple: 6697881,
                            red: 16711680,
                            rosybrown: 12357519,
                            royalblue: 4286945,
                            saddlebrown: 9127187,
                            salmon: 16416882,
                            sandybrown: 16032864,
                            seagreen: 3050327,
                            seashell: 16774638,
                            sienna: 10506797,
                            silver: 12632256,
                            skyblue: 8900331,
                            slateblue: 6970061,
                            slategray: 7372944,
                            slategrey: 7372944,
                            snow: 16775930,
                            springgreen: 65407,
                            steelblue: 4620980,
                            tan: 13808780,
                            teal: 32896,
                            thistle: 14204888,
                            tomato: 16737095,
                            turquoise: 4251856,
                            violet: 15631086,
                            wheat: 16113331,
                            white: 16777215,
                            whitesmoke: 16119285,
                            yellow: 16776960,
                            yellowgreen: 10145074
                        }
                            , es = {
                            h: 0,
                            s: 0,
                            l: 0
                        }
                            , is = {
                            h: 0,
                            s: 0,
                            l: 0
                        };
                        function ns(t, e, i) {
                            return i < 0 && (i += 1),
                            1 < i && --i,
                                i < 1 / 6 ? t + 6 * (e - t) * i : i < .5 ? e : i < 2 / 3 ? t + 6 * (e - t) * (2 / 3 - i) : t
                        }
                        function rs(t) {
                            return t < .04045 ? .0773993808 * t : Math.pow(.9478672986 * t + .0521327014, 2.4)
                        }
                        function ss(t) {
                            return t < .0031308 ? 12.92 * t : 1.055 * Math.pow(t, .41666) - .055
                        }
                        class as {
                            constructor(t, e, i) {
                                return void 0 === e && void 0 === i ? this.set(t) : this.setRGB(t, e, i)
                            }
                            set(t) {
                                return t && t.isColor ? this.copy(t) : "number" == typeof t ? this.setHex(t) : "string" == typeof t && this.setStyle(t),
                                    this
                            }
                            setScalar(t) {
                                return this.r = t,
                                    this.g = t,
                                    this.b = t,
                                    this
                            }
                            setHex(t) {
                                return t = Math.floor(t),
                                    this.r = (t >> 16 & 255) / 255,
                                    this.g = (t >> 8 & 255) / 255,
                                    this.b = (255 & t) / 255,
                                    this
                            }
                            setRGB(t, e, i) {
                                return this.r = t,
                                    this.g = e,
                                    this.b = i,
                                    this
                            }
                            setHSL(t, e, i) {
                                return t = gn(t, 1),
                                    e = mn(e, 0, 1),
                                    i = mn(i, 0, 1),
                                    0 === e ? this.r = this.g = this.b = i : (this.r = ns(e = 2 * i - (i = i <= .5 ? i * (1 + e) : i + e - i * e), i, t + 1 / 3),
                                        this.g = ns(e, i, t),
                                        this.b = ns(e, i, t - 1 / 3)),
                                    this
                            }
                            setStyle(t) {
                                function e(t) {
                                    void 0 !== t && parseFloat(t)
                                }
                                let i;
                                if (i = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)) {
                                    let t;
                                    var n = i[1]
                                        , r = i[2];
                                    switch (n) {
                                        case "rgb":
                                        case "rgba":
                                            if (t = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r))
                                                return this.r = Math.min(255, parseInt(t[1], 10)) / 255,
                                                    this.g = Math.min(255, parseInt(t[2], 10)) / 255,
                                                    this.b = Math.min(255, parseInt(t[3], 10)) / 255,
                                                    e(t[4]),
                                                    this;
                                            if (t = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r))
                                                return this.r = Math.min(100, parseInt(t[1], 10)) / 100,
                                                    this.g = Math.min(100, parseInt(t[2], 10)) / 100,
                                                    this.b = Math.min(100, parseInt(t[3], 10)) / 100,
                                                    e(t[4]),
                                                    this;
                                            break;
                                        case "hsl":
                                        case "hsla":
                                            if (t = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r)) {
                                                var s = parseFloat(t[1]) / 360
                                                    , a = parseInt(t[2], 10) / 100
                                                    , o = parseInt(t[3], 10) / 100;
                                                return e(t[4]),
                                                    this.setHSL(s, a, o)
                                            }
                                    }
                                } else if (i = /^\#([A-Fa-f\d]+)$/.exec(t)) {
                                    const t = i[1];
                                    if (n = t.length,
                                    3 === n)
                                        return this.r = parseInt(t.charAt(0) + t.charAt(0), 16) / 255,
                                            this.g = parseInt(t.charAt(1) + t.charAt(1), 16) / 255,
                                            this.b = parseInt(t.charAt(2) + t.charAt(2), 16) / 255,
                                            this;
                                    if (6 === n)
                                        return this.r = parseInt(t.charAt(0) + t.charAt(1), 16) / 255,
                                            this.g = parseInt(t.charAt(2) + t.charAt(3), 16) / 255,
                                            this.b = parseInt(t.charAt(4) + t.charAt(5), 16) / 255,
                                            this
                                }
                                return t && 0 < t.length ? this.setColorName(t) : this
                            }
                            setColorName(t) {
                                return void 0 !== (t = ts[t.toLowerCase()]) && this.setHex(t),
                                    this
                            }
                            clone() {
                                return new this.constructor(this.r,this.g,this.b)
                            }
                            copy(t) {
                                return this.r = t.r,
                                    this.g = t.g,
                                    this.b = t.b,
                                    this
                            }
                            copySRGBToLinear(t) {
                                return this.r = rs(t.r),
                                    this.g = rs(t.g),
                                    this.b = rs(t.b),
                                    this
                            }
                            copyLinearToSRGB(t) {
                                return this.r = ss(t.r),
                                    this.g = ss(t.g),
                                    this.b = ss(t.b),
                                    this
                            }
                            convertSRGBToLinear() {
                                return this.copySRGBToLinear(this),
                                    this
                            }
                            convertLinearToSRGB() {
                                return this.copyLinearToSRGB(this),
                                    this
                            }
                            getHex() {
                                return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0
                            }
                            getHexString() {
                                return ("000000" + this.getHex().toString(16)).slice(-6)
                            }
                            getHSL(t) {
                                var e = this.r
                                    , i = this.g
                                    , n = this.b
                                    , r = Math.max(e, i, n)
                                    , s = Math.min(e, i, n);
                                let a, o;
                                var h = (s + r) / 2;
                                if (s === r)
                                    a = 0,
                                        o = 0;
                                else {
                                    var l = r - s;
                                    switch (o = h <= .5 ? l / (r + s) : l / (2 - r - s),
                                        r) {
                                        case e:
                                            a = (i - n) / l + (i < n ? 6 : 0);
                                            break;
                                        case i:
                                            a = (n - e) / l + 2;
                                            break;
                                        case n:
                                            a = (e - i) / l + 4
                                    }
                                    a /= 6
                                }
                                return t.h = a,
                                    t.s = o,
                                    t.l = h,
                                    t
                            }
                            getStyle() {
                                return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")"
                            }
                            offsetHSL(t, e, i) {
                                return this.getHSL(es),
                                    es.h += t,
                                    es.s += e,
                                    es.l += i,
                                    this.setHSL(es.h, es.s, es.l),
                                    this
                            }
                            add(t) {
                                return this.r += t.r,
                                    this.g += t.g,
                                    this.b += t.b,
                                    this
                            }
                            addColors(t, e) {
                                return this.r = t.r + e.r,
                                    this.g = t.g + e.g,
                                    this.b = t.b + e.b,
                                    this
                            }
                            addScalar(t) {
                                return this.r += t,
                                    this.g += t,
                                    this.b += t,
                                    this
                            }
                            sub(t) {
                                return this.r = Math.max(0, this.r - t.r),
                                    this.g = Math.max(0, this.g - t.g),
                                    this.b = Math.max(0, this.b - t.b),
                                    this
                            }
                            multiply(t) {
                                return this.r *= t.r,
                                    this.g *= t.g,
                                    this.b *= t.b,
                                    this
                            }
                            multiplyScalar(t) {
                                return this.r *= t,
                                    this.g *= t,
                                    this.b *= t,
                                    this
                            }
                            lerp(t, e) {
                                return this.r += (t.r - this.r) * e,
                                    this.g += (t.g - this.g) * e,
                                    this.b += (t.b - this.b) * e,
                                    this
                            }
                            lerpColors(t, e, i) {
                                return this.r = t.r + (e.r - t.r) * i,
                                    this.g = t.g + (e.g - t.g) * i,
                                    this.b = t.b + (e.b - t.b) * i,
                                    this
                            }
                            lerpHSL(t, e) {
                                this.getHSL(es),
                                    t.getHSL(is);
                                var i = vn(es.h, is.h, e);
                                t = vn(es.s, is.s, e),
                                    e = vn(es.l, is.l, e);
                                return this.setHSL(i, t, e),
                                    this
                            }
                            equals(t) {
                                return t.r === this.r && t.g === this.g && t.b === this.b
                            }
                            fromArray(t, e=0) {
                                return this.r = t[e],
                                    this.g = t[e + 1],
                                    this.b = t[e + 2],
                                    this
                            }
                            toArray(t=[], e=0) {
                                return t[e] = this.r,
                                    t[e + 1] = this.g,
                                    t[e + 2] = this.b,
                                    t
                            }
                            fromBufferAttribute(t, e) {
                                return this.r = t.getX(e),
                                    this.g = t.getY(e),
                                    this.b = t.getZ(e),
                                !0 === t.normalized && (this.r /= 255,
                                    this.g /= 255,
                                    this.b /= 255),
                                    this
                            }
                            toJSON() {
                                return this.getHex()
                            }
                        }
                        as.NAMES = ts,
                            as.prototype.isColor = !0,
                            as.prototype.r = 1,
                            as.prototype.g = 1,
                            as.prototype.b = 1;
                        class os extends $r {
                            constructor(t) {
                                super(),
                                    this.type = "MeshBasicMaterial",
                                    this.color = new as(16777215),
                                    this.map = null,
                                    this.lightMap = null,
                                    this.lightMapIntensity = 1,
                                    this.aoMap = null,
                                    this.aoMapIntensity = 1,
                                    this.specularMap = null,
                                    this.alphaMap = null,
                                    this.envMap = null,
                                    this.combine = Et,
                                    this.reflectivity = 1,
                                    this.refractionRatio = .98,
                                    this.wireframe = !1,
                                    this.wireframeLinewidth = 1,
                                    this.wireframeLinecap = "round",
                                    this.wireframeLinejoin = "round",
                                    this.setValues(t)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.color.copy(t.color),
                                    this.map = t.map,
                                    this.lightMap = t.lightMap,
                                    this.lightMapIntensity = t.lightMapIntensity,
                                    this.aoMap = t.aoMap,
                                    this.aoMapIntensity = t.aoMapIntensity,
                                    this.specularMap = t.specularMap,
                                    this.alphaMap = t.alphaMap,
                                    this.envMap = t.envMap,
                                    this.combine = t.combine,
                                    this.reflectivity = t.reflectivity,
                                    this.refractionRatio = t.refractionRatio,
                                    this.wireframe = t.wireframe,
                                    this.wireframeLinewidth = t.wireframeLinewidth,
                                    this.wireframeLinecap = t.wireframeLinecap,
                                    this.wireframeLinejoin = t.wireframeLinejoin,
                                    this
                            }
                        }
                        os.prototype.isMeshBasicMaterial = !0;
                        const hs = new Fn
                            , ls = new wn;
                        class us {
                            constructor(t, e, i) {
                                if (Array.isArray(t))
                                    throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
                                this.name = "",
                                    this.array = t,
                                    this.itemSize = e,
                                    this.count = void 0 !== t ? t.length / e : 0,
                                    this.normalized = !0 === i,
                                    this.usage = Qi,
                                    this.updateRange = {
                                        offset: 0,
                                        count: -1
                                    },
                                    this.version = 0
                            }
                            onUploadCallback() {}
                            set needsUpdate(t) {
                                !0 === t && this.version++
                            }
                            setUsage(t) {
                                return this.usage = t,
                                    this
                            }
                            copy(t) {
                                return this.name = t.name,
                                    this.array = new t.array.constructor(t.array),
                                    this.itemSize = t.itemSize,
                                    this.count = t.count,
                                    this.normalized = t.normalized,
                                    this.usage = t.usage,
                                    this
                            }
                            copyAt(t, e, i) {
                                t *= this.itemSize,
                                    i *= e.itemSize;
                                for (let n = 0, r = this.itemSize; n < r; n++)
                                    this.array[t + n] = e.array[i + n];
                                return this
                            }
                            copyArray(t) {
                                return this.array.set(t),
                                    this
                            }
                            copyColorsArray(t) {
                                const e = this.array;
                                let i = 0;
                                for (let n = 0, r = t.length; n < r; n++) {
                                    let r = t[n];
                                    void 0 === r && (r = new as),
                                        e[i++] = r.r,
                                        e[i++] = r.g,
                                        e[i++] = r.b
                                }
                                return this
                            }
                            copyVector2sArray(t) {
                                const e = this.array;
                                let i = 0;
                                for (let n = 0, r = t.length; n < r; n++) {
                                    let r = t[n];
                                    void 0 === r && (r = new wn),
                                        e[i++] = r.x,
                                        e[i++] = r.y
                                }
                                return this
                            }
                            copyVector3sArray(t) {
                                const e = this.array;
                                let i = 0;
                                for (let n = 0, r = t.length; n < r; n++) {
                                    let r = t[n];
                                    void 0 === r && (r = new Fn),
                                        e[i++] = r.x,
                                        e[i++] = r.y,
                                        e[i++] = r.z
                                }
                                return this
                            }
                            copyVector4sArray(t) {
                                const e = this.array;
                                let i = 0;
                                for (let n = 0, r = t.length; n < r; n++) {
                                    let r = t[n];
                                    void 0 === r && (r = new Nn),
                                        e[i++] = r.x,
                                        e[i++] = r.y,
                                        e[i++] = r.z,
                                        e[i++] = r.w
                                }
                                return this
                            }
                            applyMatrix3(t) {
                                if (2 === this.itemSize)
                                    for (let e = 0, i = this.count; e < i; e++)
                                        ls.fromBufferAttribute(this, e),
                                            ls.applyMatrix3(t),
                                            this.setXY(e, ls.x, ls.y);
                                else if (3 === this.itemSize)
                                    for (let e = 0, i = this.count; e < i; e++)
                                        hs.fromBufferAttribute(this, e),
                                            hs.applyMatrix3(t),
                                            this.setXYZ(e, hs.x, hs.y, hs.z);
                                return this
                            }
                            applyMatrix4(t) {
                                for (let e = 0, i = this.count; e < i; e++)
                                    hs.x = this.getX(e),
                                        hs.y = this.getY(e),
                                        hs.z = this.getZ(e),
                                        hs.applyMatrix4(t),
                                        this.setXYZ(e, hs.x, hs.y, hs.z);
                                return this
                            }
                            applyNormalMatrix(t) {
                                for (let e = 0, i = this.count; e < i; e++)
                                    hs.x = this.getX(e),
                                        hs.y = this.getY(e),
                                        hs.z = this.getZ(e),
                                        hs.applyNormalMatrix(t),
                                        this.setXYZ(e, hs.x, hs.y, hs.z);
                                return this
                            }
                            transformDirection(t) {
                                for (let e = 0, i = this.count; e < i; e++)
                                    hs.x = this.getX(e),
                                        hs.y = this.getY(e),
                                        hs.z = this.getZ(e),
                                        hs.transformDirection(t),
                                        this.setXYZ(e, hs.x, hs.y, hs.z);
                                return this
                            }
                            set(t, e=0) {
                                return this.array.set(t, e),
                                    this
                            }
                            getX(t) {
                                return this.array[t * this.itemSize]
                            }
                            setX(t, e) {
                                return this.array[t * this.itemSize] = e,
                                    this
                            }
                            getY(t) {
                                return this.array[t * this.itemSize + 1]
                            }
                            setY(t, e) {
                                return this.array[t * this.itemSize + 1] = e,
                                    this
                            }
                            getZ(t) {
                                return this.array[t * this.itemSize + 2]
                            }
                            setZ(t, e) {
                                return this.array[t * this.itemSize + 2] = e,
                                    this
                            }
                            getW(t) {
                                return this.array[t * this.itemSize + 3]
                            }
                            setW(t, e) {
                                return this.array[t * this.itemSize + 3] = e,
                                    this
                            }
                            setXY(t, e, i) {
                                return t *= this.itemSize,
                                    this.array[t + 0] = e,
                                    this.array[t + 1] = i,
                                    this
                            }
                            setXYZ(t, e, i, n) {
                                return t *= this.itemSize,
                                    this.array[t + 0] = e,
                                    this.array[t + 1] = i,
                                    this.array[t + 2] = n,
                                    this
                            }
                            setXYZW(t, e, i, n, r) {
                                return t *= this.itemSize,
                                    this.array[t + 0] = e,
                                    this.array[t + 1] = i,
                                    this.array[t + 2] = n,
                                    this.array[t + 3] = r,
                                    this
                            }
                            onUpload(t) {
                                return this.onUploadCallback = t,
                                    this
                            }
                            clone() {
                                return new this.constructor(this.array,this.itemSize).copy(this)
                            }
                            toJSON() {
                                const t = {
                                    itemSize: this.itemSize,
                                    type: this.array.constructor.name,
                                    array: Array.prototype.slice.call(this.array),
                                    normalized: this.normalized
                                };
                                return "" !== this.name && (t.name = this.name),
                                this.usage !== Qi && (t.usage = this.usage),
                                0 === this.updateRange.offset && -1 === this.updateRange.count || (t.updateRange = this.updateRange),
                                    t
                            }
                        }
                        us.prototype.isBufferAttribute = !0;
                        class cs extends us {
                            constructor(t, e, i) {
                                super(new Int8Array(t), e, i)
                            }
                        }
                        class ds extends us {
                            constructor(t, e, i) {
                                super(new Uint8Array(t), e, i)
                            }
                        }
                        class ps extends us {
                            constructor(t, e, i) {
                                super(new Uint8ClampedArray(t), e, i)
                            }
                        }
                        class fs extends us {
                            constructor(t, e, i) {
                                super(new Int16Array(t), e, i)
                            }
                        }
                        class ms extends us {
                            constructor(t, e, i) {
                                super(new Uint16Array(t), e, i)
                            }
                        }
                        class gs extends us {
                            constructor(t, e, i) {
                                super(new Int32Array(t), e, i)
                            }
                        }
                        class vs extends us {
                            constructor(t, e, i) {
                                super(new Uint32Array(t), e, i)
                            }
                        }
                        class _s extends us {
                            constructor(t, e, i) {
                                super(new Uint16Array(t), e, i)
                            }
                        }
                        _s.prototype.isFloat16BufferAttribute = !0;
                        class ys extends us {
                            constructor(t, e, i) {
                                super(new Float32Array(t), e, i)
                            }
                        }
                        class xs extends us {
                            constructor(t, e, i) {
                                super(new Float64Array(t), e, i)
                            }
                        }
                        let bs = 0;
                        const ws = new mr
                            , Ss = new Vr
                            , Ms = new Fn
                            , Cs = new Un
                            , As = new Un
                            , Ts = new Fn;
                        class Ps extends ln {
                            constructor() {
                                super(),
                                    Object.defineProperty(this, "id", {
                                        value: bs++
                                    }),
                                    this.uuid = fn(),
                                    this.name = "",
                                    this.type = "BufferGeometry",
                                    this.index = null,
                                    this.attributes = {},
                                    this.morphAttributes = {},
                                    this.morphTargetsRelative = !1,
                                    this.groups = [],
                                    this.boundingBox = null,
                                    this.boundingSphere = null,
                                    this.drawRange = {
                                        start: 0,
                                        count: 1 / 0
                                    },
                                    this.userData = {}
                            }
                            getIndex() {
                                return this.index
                            }
                            setIndex(t) {
                                return Array.isArray(t) ? this.index = new (65535 < Mn(t) ? vs : ms)(t,1) : this.index = t,
                                    this
                            }
                            getAttribute(t) {
                                return this.attributes[t]
                            }
                            setAttribute(t, e) {
                                return this.attributes[t] = e,
                                    this
                            }
                            deleteAttribute(t) {
                                return delete this.attributes[t],
                                    this
                            }
                            hasAttribute(t) {
                                return void 0 !== this.attributes[t]
                            }
                            addGroup(t, e, i=0) {
                                this.groups.push({
                                    start: t,
                                    count: e,
                                    materialIndex: i
                                })
                            }
                            clearGroups() {
                                this.groups = []
                            }
                            setDrawRange(t, e) {
                                this.drawRange.start = t,
                                    this.drawRange.count = e
                            }
                            applyMatrix4(t) {
                                const e = this.attributes.position;
                                void 0 !== e && (e.applyMatrix4(t),
                                    e.needsUpdate = !0);
                                const i = this.attributes.normal;
                                var n;
                                void 0 !== i && (n = (new Sn).getNormalMatrix(t),
                                    i.applyNormalMatrix(n),
                                    i.needsUpdate = !0);
                                const r = this.attributes.tangent;
                                return void 0 !== r && (r.transformDirection(t),
                                    r.needsUpdate = !0),
                                null !== this.boundingBox && this.computeBoundingBox(),
                                null !== this.boundingSphere && this.computeBoundingSphere(),
                                    this
                            }
                            applyQuaternion(t) {
                                return ws.makeRotationFromQuaternion(t),
                                    this.applyMatrix4(ws),
                                    this
                            }
                            rotateX(t) {
                                return ws.makeRotationX(t),
                                    this.applyMatrix4(ws),
                                    this
                            }
                            rotateY(t) {
                                return ws.makeRotationY(t),
                                    this.applyMatrix4(ws),
                                    this
                            }
                            rotateZ(t) {
                                return ws.makeRotationZ(t),
                                    this.applyMatrix4(ws),
                                    this
                            }
                            translate(t, e, i) {
                                return ws.makeTranslation(t, e, i),
                                    this.applyMatrix4(ws),
                                    this
                            }
                            scale(t, e, i) {
                                return ws.makeScale(t, e, i),
                                    this.applyMatrix4(ws),
                                    this
                            }
                            lookAt(t) {
                                return Ss.lookAt(t),
                                    Ss.updateMatrix(),
                                    this.applyMatrix4(Ss.matrix),
                                    this
                            }
                            center() {
                                return this.computeBoundingBox(),
                                    this.boundingBox.getCenter(Ms).negate(),
                                    this.translate(Ms.x, Ms.y, Ms.z),
                                    this
                            }
                            setFromPoints(t) {
                                const e = [];
                                for (let n = 0, r = t.length; n < r; n++) {
                                    var i = t[n];
                                    e.push(i.x, i.y, i.z || 0)
                                }
                                return this.setAttribute("position", new ys(e,3)),
                                    this
                            }
                            computeBoundingBox() {
                                null === this.boundingBox && (this.boundingBox = new Un);
                                var t = this.attributes.position
                                    , e = this.morphAttributes.position;
                                if (t && t.isGLBufferAttribute)
                                    this.boundingBox.set(new Fn(-1 / 0,-1 / 0,-1 / 0), new Fn(1 / 0,1 / 0,1 / 0));
                                else {
                                    if (void 0 !== t) {
                                        if (this.boundingBox.setFromBufferAttribute(t),
                                            e)
                                            for (let t = 0, n = e.length; t < n; t++) {
                                                var i = e[t];
                                                Cs.setFromBufferAttribute(i),
                                                    this.morphTargetsRelative ? (Ts.addVectors(this.boundingBox.min, Cs.min),
                                                        this.boundingBox.expandByPoint(Ts),
                                                        Ts.addVectors(this.boundingBox.max, Cs.max),
                                                        this.boundingBox.expandByPoint(Ts)) : (this.boundingBox.expandByPoint(Cs.min),
                                                        this.boundingBox.expandByPoint(Cs.max))
                                            }
                                    } else
                                        this.boundingBox.makeEmpty();
                                    isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)
                                }
                            }
                            computeBoundingSphere() {
                                null === this.boundingSphere && (this.boundingSphere = new ar);
                                var t = this.attributes.position
                                    , e = this.morphAttributes.position;
                                if (t && t.isGLBufferAttribute)
                                    this.boundingSphere.set(new Fn, 1 / 0);
                                else if (t) {
                                    const s = this.boundingSphere.center;
                                    if (Cs.setFromBufferAttribute(t),
                                        e)
                                        for (let t = 0, n = e.length; t < n; t++) {
                                            var i = e[t];
                                            As.setFromBufferAttribute(i),
                                                this.morphTargetsRelative ? (Ts.addVectors(Cs.min, As.min),
                                                    Cs.expandByPoint(Ts),
                                                    Ts.addVectors(Cs.max, As.max),
                                                    Cs.expandByPoint(Ts)) : (Cs.expandByPoint(As.min),
                                                    Cs.expandByPoint(As.max))
                                        }
                                    Cs.getCenter(s);
                                    let a = 0;
                                    for (let e = 0, i = t.count; e < i; e++)
                                        Ts.fromBufferAttribute(t, e),
                                            a = Math.max(a, s.distanceToSquared(Ts));
                                    if (e)
                                        for (let i = 0, o = e.length; i < o; i++) {
                                            var n = e[i]
                                                , r = this.morphTargetsRelative;
                                            for (let e = 0, i = n.count; e < i; e++)
                                                Ts.fromBufferAttribute(n, e),
                                                r && (Ms.fromBufferAttribute(t, e),
                                                    Ts.add(Ms)),
                                                    a = Math.max(a, s.distanceToSquared(Ts))
                                        }
                                    this.boundingSphere.radius = Math.sqrt(a),
                                        isNaN(this.boundingSphere.radius)
                                }
                            }
                            computeTangents() {
                                var t = this.index
                                    , e = this.attributes;
                                if (null !== t && void 0 !== e.position && void 0 !== e.normal && void 0 !== e.uv) {
                                    var i = t.array;
                                    const h = e.position.array
                                        , l = e.normal.array
                                        , u = e.uv.array;
                                    var n = h.length / 3;
                                    void 0 === e.tangent && this.setAttribute("tangent", new us(new Float32Array(4 * n),4));
                                    const c = e.tangent.array
                                        , d = []
                                        , p = [];
                                    for (let t = 0; t < n; t++)
                                        d[t] = new Fn,
                                            p[t] = new Fn;
                                    const f = new Fn
                                        , m = new Fn
                                        , g = new Fn
                                        , v = new wn
                                        , _ = new wn
                                        , y = new wn
                                        , x = new Fn
                                        , b = new Fn;
                                    let w = this.groups;
                                    0 === w.length && (w = [{
                                        start: 0,
                                        count: i.length
                                    }]);
                                    for (let t = 0, e = w.length; t < e; ++t) {
                                        var r = w[t]
                                            , s = r.start;
                                        for (let t = s, e = s + r.count; t < e; t += 3)
                                            !function(t, e, i) {
                                                f.fromArray(h, 3 * t),
                                                    m.fromArray(h, 3 * e),
                                                    g.fromArray(h, 3 * i),
                                                    v.fromArray(u, 2 * t),
                                                    _.fromArray(u, 2 * e),
                                                    y.fromArray(u, 2 * i),
                                                    m.sub(f),
                                                    g.sub(f),
                                                    _.sub(v),
                                                    y.sub(v);
                                                var n = 1 / (_.x * y.y - y.x * _.y);
                                                isFinite(n) && (x.copy(m).multiplyScalar(y.y).addScaledVector(g, -_.y).multiplyScalar(n),
                                                    b.copy(g).multiplyScalar(_.x).addScaledVector(m, -y.x).multiplyScalar(n),
                                                    d[t].add(x),
                                                    d[e].add(x),
                                                    d[i].add(x),
                                                    p[t].add(b),
                                                    p[e].add(b),
                                                    p[i].add(b))
                                            }(i[t + 0], i[t + 1], i[t + 2])
                                    }
                                    const S = new Fn
                                        , M = new Fn
                                        , C = new Fn
                                        , A = new Fn;
                                    for (let t = 0, e = w.length; t < e; ++t) {
                                        var a = w[t]
                                            , o = a.start;
                                        for (let t = o, e = o + a.count; t < e; t += 3)
                                            T(i[t + 0]),
                                                T(i[t + 1]),
                                                T(i[t + 2])
                                    }
                                    function T(t) {
                                        C.fromArray(l, 3 * t),
                                            A.copy(C);
                                        var e = d[t];
                                        S.copy(e),
                                            S.sub(C.multiplyScalar(C.dot(e))).normalize(),
                                            M.crossVectors(A, e),
                                            e = M.dot(p[t]) < 0 ? -1 : 1,
                                            c[4 * t] = S.x,
                                            c[4 * t + 1] = S.y,
                                            c[4 * t + 2] = S.z,
                                            c[4 * t + 3] = e
                                    }
                                }
                            }
                            computeVertexNormals() {
                                const t = this.index;
                                var e = this.getAttribute("position");
                                if (void 0 !== e) {
                                    let s = this.getAttribute("normal");
                                    if (void 0 === s)
                                        s = new us(new Float32Array(3 * e.count),3),
                                            this.setAttribute("normal", s);
                                    else
                                        for (let t = 0, e = s.count; t < e; t++)
                                            s.setXYZ(t, 0, 0, 0);
                                    const a = new Fn
                                        , o = new Fn
                                        , h = new Fn
                                        , l = new Fn
                                        , u = new Fn
                                        , c = new Fn
                                        , d = new Fn
                                        , p = new Fn;
                                    if (t)
                                        for (let f = 0, m = t.count; f < m; f += 3) {
                                            var i = t.getX(f + 0)
                                                , n = t.getX(f + 1)
                                                , r = t.getX(f + 2);
                                            a.fromBufferAttribute(e, i),
                                                o.fromBufferAttribute(e, n),
                                                h.fromBufferAttribute(e, r),
                                                d.subVectors(h, o),
                                                p.subVectors(a, o),
                                                d.cross(p),
                                                l.fromBufferAttribute(s, i),
                                                u.fromBufferAttribute(s, n),
                                                c.fromBufferAttribute(s, r),
                                                l.add(d),
                                                u.add(d),
                                                c.add(d),
                                                s.setXYZ(i, l.x, l.y, l.z),
                                                s.setXYZ(n, u.x, u.y, u.z),
                                                s.setXYZ(r, c.x, c.y, c.z)
                                        }
                                    else
                                        for (let t = 0, i = e.count; t < i; t += 3)
                                            a.fromBufferAttribute(e, t + 0),
                                                o.fromBufferAttribute(e, t + 1),
                                                h.fromBufferAttribute(e, t + 2),
                                                d.subVectors(h, o),
                                                p.subVectors(a, o),
                                                d.cross(p),
                                                s.setXYZ(t + 0, d.x, d.y, d.z),
                                                s.setXYZ(t + 1, d.x, d.y, d.z),
                                                s.setXYZ(t + 2, d.x, d.y, d.z);
                                    this.normalizeNormals(),
                                        s.needsUpdate = !0
                                }
                            }
                            merge(t, e) {
                                if (t && t.isBufferGeometry) {
                                    void 0 === e && (e = 0);
                                    var i = this.attributes;
                                    for (const a in i)
                                        if (void 0 !== t.attributes[a]) {
                                            const o = i[a].array;
                                            var n = t.attributes[a]
                                                , r = n.array
                                                , s = (n = n.itemSize * e,
                                                Math.min(r.length, o.length - n));
                                            for (let t = 0, e = n; t < s; t++,
                                                e++)
                                                o[e] = r[t]
                                        }
                                    return this
                                }
                            }
                            normalizeNormals() {
                                const t = this.attributes.normal;
                                for (let e = 0, i = t.count; e < i; e++)
                                    Ts.fromBufferAttribute(t, e),
                                        Ts.normalize(),
                                        t.setXYZ(e, Ts.x, Ts.y, Ts.z)
                            }
                            toNonIndexed() {
                                function t(t, e) {
                                    const i = t.array;
                                    var n = t.itemSize
                                        , r = t.normalized;
                                    const s = new i.constructor(e.length * n);
                                    let a = 0
                                        , o = 0;
                                    for (let r = 0, h = e.length; r < h; r++) {
                                        a = t.isInterleavedBufferAttribute ? e[r] * t.data.stride + t.offset : e[r] * n;
                                        for (let t = 0; t < n; t++)
                                            s[o++] = i[a++]
                                    }
                                    return new us(s,n,r)
                                }
                                if (null === this.index)
                                    return this;
                                const e = new Ps;
                                var i = this.index.array
                                    , n = this.attributes;
                                for (const s in n) {
                                    var r = t(n[s], i);
                                    e.setAttribute(s, r)
                                }
                                var s = this.morphAttributes;
                                for (const n in s) {
                                    const r = [];
                                    var a = s[n];
                                    for (let e = 0, n = a.length; e < n; e++) {
                                        var o = t(a[e], i);
                                        r.push(o)
                                    }
                                    e.morphAttributes[n] = r
                                }
                                e.morphTargetsRelative = this.morphTargetsRelative;
                                var h = this.groups;
                                for (let t = 0, i = h.length; t < i; t++) {
                                    var l = h[t];
                                    e.addGroup(l.start, l.count, l.materialIndex)
                                }
                                return e
                            }
                            toJSON() {
                                const t = {
                                    metadata: {
                                        version: 4.5,
                                        type: "BufferGeometry",
                                        generator: "BufferGeometry.toJSON"
                                    }
                                };
                                if (t.uuid = this.uuid,
                                    t.type = this.type,
                                "" !== this.name && (t.name = this.name),
                                0 < Object.keys(this.userData).length && (t.userData = this.userData),
                                void 0 !== this.parameters) {
                                    var e = this.parameters;
                                    for (const i in e)
                                        void 0 !== e[i] && (t[i] = e[i]);
                                    return t
                                }
                                t.data = {
                                    attributes: {}
                                };
                                var i = this.index;
                                null !== i && (t.data.index = {
                                    type: i.array.constructor.name,
                                    array: Array.prototype.slice.call(i.array)
                                });
                                var n = this.attributes;
                                for (const e in n) {
                                    const i = n[e];
                                    t.data.attributes[e] = i.toJSON(t.data)
                                }
                                const r = {};
                                let s = !1;
                                for (const e in this.morphAttributes) {
                                    var a = this.morphAttributes[e];
                                    const i = [];
                                    for (let e = 0, n = a.length; e < n; e++) {
                                        const n = a[e];
                                        i.push(n.toJSON(t.data))
                                    }
                                    0 < i.length && (r[e] = i,
                                        s = !0)
                                }
                                s && (t.data.morphAttributes = r,
                                    t.data.morphTargetsRelative = this.morphTargetsRelative),
                                0 < (i = this.groups).length && (t.data.groups = JSON.parse(JSON.stringify(i)));
                                const o = this.boundingSphere;
                                return null !== o && (t.data.boundingSphere = {
                                    center: o.center.toArray(),
                                    radius: o.radius
                                }),
                                    t
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                            copy(t) {
                                this.index = null,
                                    this.attributes = {},
                                    this.morphAttributes = {},
                                    this.groups = [],
                                    this.boundingBox = null,
                                    this.boundingSphere = null;
                                var e = {};
                                this.name = t.name;
                                const i = t.index;
                                null !== i && this.setIndex(i.clone(e));
                                var n = t.attributes;
                                for (const t in n) {
                                    const i = n[t];
                                    this.setAttribute(t, i.clone(e))
                                }
                                var r = t.morphAttributes;
                                for (const t in r) {
                                    const i = []
                                        , n = r[t];
                                    for (let t = 0, r = n.length; t < r; t++)
                                        i.push(n[t].clone(e));
                                    this.morphAttributes[t] = i
                                }
                                this.morphTargetsRelative = t.morphTargetsRelative;
                                var s = t.groups;
                                for (let t = 0, e = s.length; t < e; t++) {
                                    var a = s[t];
                                    this.addGroup(a.start, a.count, a.materialIndex)
                                }
                                const o = t.boundingBox;
                                null !== o && (this.boundingBox = o.clone());
                                const h = t.boundingSphere;
                                return null !== h && (this.boundingSphere = h.clone()),
                                    this.drawRange.start = t.drawRange.start,
                                    this.drawRange.count = t.drawRange.count,
                                    this.userData = t.userData,
                                void 0 !== t.parameters && (this.parameters = Object.assign({}, t.parameters)),
                                    this
                            }
                            dispose() {
                                this.dispatchEvent({
                                    type: "dispose"
                                })
                            }
                        }
                        Ps.prototype.isBufferGeometry = !0;
                        const Es = new mr
                            , Ls = new fr
                            , Is = new ar
                            , ks = new Fn
                            , Ns = new Fn
                            , Os = new Fn
                            , Ds = new Fn
                            , Rs = new Fn
                            , zs = new Fn
                            , Fs = new Fn
                            , Bs = new Fn
                            , Vs = new Fn
                            , Us = new wn
                            , Gs = new wn
                            , Ws = new wn
                            , js = new Fn
                            , Hs = new Fn;
                        class qs extends Vr {
                            constructor(t=new Ps, e=new os) {
                                super(),
                                    this.type = "Mesh",
                                    this.geometry = t,
                                    this.material = e,
                                    this.updateMorphTargets()
                            }
                            copy(t) {
                                return super.copy(t),
                                void 0 !== t.morphTargetInfluences && (this.morphTargetInfluences = t.morphTargetInfluences.slice()),
                                void 0 !== t.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, t.morphTargetDictionary)),
                                    this.material = t.material,
                                    this.geometry = t.geometry,
                                    this
                            }
                            updateMorphTargets() {
                                var t = this.geometry;
                                if (t.isBufferGeometry) {
                                    var e = t.morphAttributes
                                        , i = Object.keys(e);
                                    if (0 < i.length) {
                                        var n = e[i[0]];
                                        if (void 0 !== n) {
                                            this.morphTargetInfluences = [],
                                                this.morphTargetDictionary = {};
                                            for (let t = 0, e = n.length; t < e; t++) {
                                                var r = n[t].name || String(t);
                                                this.morphTargetInfluences.push(0),
                                                    this.morphTargetDictionary[r] = t
                                            }
                                        }
                                    }
                                } else
                                    void 0 !== (t = t.morphTargets) && t.length
                            }
                            raycast(t, e) {
                                const i = this.geometry;
                                var n = this.material
                                    , r = this.matrixWorld;
                                if (void 0 !== n && (null === i.boundingSphere && i.computeBoundingSphere(),
                                    Is.copy(i.boundingSphere),
                                    Is.applyMatrix4(r),
                                !1 !== t.ray.intersectsSphere(Is) && (Es.copy(r).invert(),
                                    Ls.copy(t.ray).applyMatrix4(Es),
                                null === i.boundingBox || !1 !== Ls.intersectsBox(i.boundingBox)))) {
                                    let r;
                                    if (i.isBufferGeometry) {
                                        const P = i.index;
                                        var s = i.attributes.position
                                            , a = i.morphAttributes.position
                                            , o = i.morphTargetsRelative
                                            , h = i.attributes.uv
                                            , l = i.attributes.uv2
                                            , u = i.groups
                                            , c = i.drawRange;
                                        if (null !== P)
                                            if (Array.isArray(n))
                                                for (let i = 0, v = u.length; i < v; i++) {
                                                    var d = u[i]
                                                        , p = n[d.materialIndex];
                                                    for (let i = Math.max(d.start, c.start), n = Math.min(P.count, Math.min(d.start + d.count, c.start + c.count)); i < n; i += 3) {
                                                        var f = P.getX(i)
                                                            , m = P.getX(i + 1)
                                                            , g = P.getX(i + 2);
                                                        r = Xs(this, p, t, Ls, s, a, o, h, l, f, m, g),
                                                        r && (r.faceIndex = Math.floor(i / 3),
                                                            r.face.materialIndex = d.materialIndex,
                                                            e.push(r))
                                                    }
                                                }
                                            else
                                                for (let i = Math.max(0, c.start), u = Math.min(P.count, c.start + c.count); i < u; i += 3) {
                                                    var v = P.getX(i)
                                                        , _ = P.getX(i + 1)
                                                        , y = P.getX(i + 2);
                                                    r = Xs(this, n, t, Ls, s, a, o, h, l, v, _, y),
                                                    r && (r.faceIndex = Math.floor(i / 3),
                                                        e.push(r))
                                                }
                                        else if (void 0 !== s)
                                            if (Array.isArray(n))
                                                for (let i = 0, d = u.length; i < d; i++) {
                                                    var x = u[i]
                                                        , b = n[x.materialIndex];
                                                    for (let i = Math.max(x.start, c.start), n = Math.min(s.count, Math.min(x.start + x.count, c.start + c.count)); i < n; i += 3) {
                                                        var w = i
                                                            , S = i + 1
                                                            , M = i + 2;
                                                        r = Xs(this, b, t, Ls, s, a, o, h, l, w, S, M),
                                                        r && (r.faceIndex = Math.floor(i / 3),
                                                            r.face.materialIndex = x.materialIndex,
                                                            e.push(r))
                                                    }
                                                }
                                            else
                                                for (let i = Math.max(0, c.start), u = Math.min(s.count, c.start + c.count); i < u; i += 3) {
                                                    var C = i
                                                        , A = i + 1
                                                        , T = i + 2;
                                                    r = Xs(this, n, t, Ls, s, a, o, h, l, C, A, T),
                                                    r && (r.faceIndex = Math.floor(i / 3),
                                                        e.push(r))
                                                }
                                    } else
                                        i.isGeometry
                                }
                            }
                        }
                        function Xs(t, e, i, n, r, s, a, o, h, l, u, c) {
                            ks.fromBufferAttribute(r, l),
                                Ns.fromBufferAttribute(r, u),
                                Os.fromBufferAttribute(r, c);
                            var d = t.morphTargetInfluences;
                            if (s && d) {
                                Fs.set(0, 0, 0),
                                    Bs.set(0, 0, 0),
                                    Vs.set(0, 0, 0);
                                for (let t = 0, e = s.length; t < e; t++) {
                                    var p = d[t]
                                        , f = s[t];
                                    0 !== p && (Ds.fromBufferAttribute(f, l),
                                        Rs.fromBufferAttribute(f, u),
                                        zs.fromBufferAttribute(f, c),
                                        a ? (Fs.addScaledVector(Ds, p),
                                            Bs.addScaledVector(Rs, p),
                                            Vs.addScaledVector(zs, p)) : (Fs.addScaledVector(Ds.sub(ks), p),
                                            Bs.addScaledVector(Rs.sub(Ns), p),
                                            Vs.addScaledVector(zs.sub(Os), p)))
                                }
                                ks.add(Fs),
                                    Ns.add(Bs),
                                    Os.add(Vs)
                            }
                            t.isSkinnedMesh && (t.boneTransform(l, ks),
                                t.boneTransform(u, Ns),
                                t.boneTransform(c, Os));
                            const m = function(t, e, i, n, r, s, a, o) {
                                let h;
                                return h = e.side === J ? n.intersectTriangle(a, s, r, !0, o) : n.intersectTriangle(r, s, a, e.side !== Y, o),
                                    null === h ? null : (Hs.copy(o),
                                        Hs.applyMatrix4(t.matrixWorld),
                                        (o = i.ray.origin.distanceTo(Hs)) < i.near || o > i.far ? null : {
                                            distance: o,
                                            point: Hs.clone(),
                                            object: t
                                        })
                            }(t, e, i, n, ks, Ns, Os, js);
                            return m && (o && (Us.fromBufferAttribute(o, l),
                                Gs.fromBufferAttribute(o, u),
                                Ws.fromBufferAttribute(o, c),
                                m.uv = Qr.getUV(js, ks, Ns, Os, Us, Gs, Ws, new wn)),
                            h && (Us.fromBufferAttribute(h, l),
                                Gs.fromBufferAttribute(h, u),
                                Ws.fromBufferAttribute(h, c),
                                m.uv2 = Qr.getUV(js, ks, Ns, Os, Us, Gs, Ws, new wn)),
                                h = {
                                    a: l,
                                    b: u,
                                    c,
                                    normal: new Fn,
                                    materialIndex: 0
                                },
                                Qr.getNormal(ks, Ns, Os, h.normal),
                                m.face = h),
                                m
                        }
                        qs.prototype.isMesh = !0;
                        class Zs extends Ps {
                            constructor(t=1, e=1, i=1, n=1, r=1, s=1) {
                                super(),
                                    this.type = "BoxGeometry",
                                    this.parameters = {
                                        width: t,
                                        height: e,
                                        depth: i,
                                        widthSegments: n,
                                        heightSegments: r,
                                        depthSegments: s
                                    };
                                const a = this;
                                n = Math.floor(n),
                                    r = Math.floor(r),
                                    s = Math.floor(s);
                                const o = []
                                    , h = []
                                    , l = []
                                    , u = [];
                                let c = 0
                                    , d = 0;
                                function p(t, e, i, n, r, s, p, f, m, g, v) {
                                    var _ = s / m
                                        , y = p / g
                                        , x = s / 2
                                        , b = p / 2
                                        , w = f / 2
                                        , S = m + 1
                                        , M = g + 1;
                                    let C = 0
                                        , A = 0;
                                    const T = new Fn;
                                    for (let s = 0; s < M; s++) {
                                        var P = s * y - b;
                                        for (let a = 0; a < S; a++) {
                                            var E = a * _ - x;
                                            T[t] = E * n,
                                                T[e] = P * r,
                                                T[i] = w,
                                                h.push(T.x, T.y, T.z),
                                                T[t] = 0,
                                                T[e] = 0,
                                                T[i] = 0 < f ? 1 : -1,
                                                l.push(T.x, T.y, T.z),
                                                u.push(a / m),
                                                u.push(1 - s / g),
                                                C += 1
                                        }
                                    }
                                    for (let t = 0; t < g; t++)
                                        for (let e = 0; e < m; e++) {
                                            var L = c + e + S * t
                                                , I = c + e + S * (t + 1)
                                                , k = c + (e + 1) + S * (t + 1)
                                                , N = c + (e + 1) + S * t;
                                            o.push(L, I, N),
                                                o.push(I, k, N),
                                                A += 6
                                        }
                                    a.addGroup(d, A, v),
                                        d += A,
                                        c += C
                                }
                                p("z", "y", "x", -1, -1, i, e, t, s, r, 0),
                                    p("z", "y", "x", 1, -1, i, e, -t, s, r, 1),
                                    p("x", "z", "y", 1, 1, t, i, e, n, s, 2),
                                    p("x", "z", "y", 1, -1, t, i, -e, n, s, 3),
                                    p("x", "y", "z", 1, -1, t, e, i, n, r, 4),
                                    p("x", "y", "z", -1, -1, t, e, -i, n, r, 5),
                                    this.setIndex(o),
                                    this.setAttribute("position", new ys(h,3)),
                                    this.setAttribute("normal", new ys(l,3)),
                                    this.setAttribute("uv", new ys(u,2))
                            }
                            static fromJSON(t) {
                                return new Zs(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)
                            }
                        }
                        function Js(t) {
                            const e = {};
                            for (const i in t) {
                                e[i] = {};
                                for (const n in t[i]) {
                                    const r = t[i][n];
                                    r && (r.isColor || r.isMatrix3 || r.isMatrix4 || r.isVector2 || r.isVector3 || r.isVector4 || r.isTexture || r.isQuaternion) ? e[i][n] = r.clone() : Array.isArray(r) ? e[i][n] = r.slice() : e[i][n] = r
                                }
                            }
                            return e
                        }
                        function Ys(t) {
                            const e = {};
                            for (let n = 0; n < t.length; n++) {
                                var i = Js(t[n]);
                                for (const t in i)
                                    e[t] = i[t]
                            }
                            return e
                        }
                        const Qs = {
                            clone: Js,
                            merge: Ys
                        };
                        class Ks extends $r {
                            constructor(t) {
                                super(),
                                    this.type = "ShaderMaterial",
                                    this.defines = {},
                                    this.uniforms = {},
                                    this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
                                    this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",
                                    this.linewidth = 1,
                                    this.wireframe = !1,
                                    this.wireframeLinewidth = 1,
                                    this.fog = !1,
                                    this.lights = !1,
                                    this.clipping = !1,
                                    this.extensions = {
                                        derivatives: !1,
                                        fragDepth: !1,
                                        drawBuffers: !1,
                                        shaderTextureLOD: !1
                                    },
                                    this.defaultAttributeValues = {
                                        color: [1, 1, 1],
                                        uv: [0, 0],
                                        uv2: [0, 0]
                                    },
                                    this.index0AttributeName = void 0,
                                    this.uniformsNeedUpdate = !1,
                                    this.glslVersion = null,
                                void 0 !== t && (t.attributes,
                                    this.setValues(t))
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.fragmentShader = t.fragmentShader,
                                    this.vertexShader = t.vertexShader,
                                    this.uniforms = Js(t.uniforms),
                                    this.defines = Object.assign({}, t.defines),
                                    this.wireframe = t.wireframe,
                                    this.wireframeLinewidth = t.wireframeLinewidth,
                                    this.lights = t.lights,
                                    this.clipping = t.clipping,
                                    this.extensions = Object.assign({}, t.extensions),
                                    this.glslVersion = t.glslVersion,
                                    this
                            }
                            toJSON(t) {
                                const e = super.toJSON(t);
                                e.glslVersion = this.glslVersion,
                                    e.uniforms = {};
                                for (const i in this.uniforms) {
                                    const n = this.uniforms[i].value;
                                    n && n.isTexture ? e.uniforms[i] = {
                                        type: "t",
                                        value: n.toJSON(t).uuid
                                    } : n && n.isColor ? e.uniforms[i] = {
                                        type: "c",
                                        value: n.getHex()
                                    } : n && n.isVector2 ? e.uniforms[i] = {
                                        type: "v2",
                                        value: n.toArray()
                                    } : n && n.isVector3 ? e.uniforms[i] = {
                                        type: "v3",
                                        value: n.toArray()
                                    } : n && n.isVector4 ? e.uniforms[i] = {
                                        type: "v4",
                                        value: n.toArray()
                                    } : n && n.isMatrix3 ? e.uniforms[i] = {
                                        type: "m3",
                                        value: n.toArray()
                                    } : n && n.isMatrix4 ? e.uniforms[i] = {
                                        type: "m4",
                                        value: n.toArray()
                                    } : e.uniforms[i] = {
                                        value: n
                                    }
                                }
                                0 < Object.keys(this.defines).length && (e.defines = this.defines),
                                    e.vertexShader = this.vertexShader,
                                    e.fragmentShader = this.fragmentShader;
                                const i = {};
                                for (const t in this.extensions)
                                    !0 === this.extensions[t] && (i[t] = !0);
                                return 0 < Object.keys(i).length && (e.extensions = i),
                                    e
                            }
                        }
                        Ks.prototype.isShaderMaterial = !0;
                        class $s extends Vr {
                            constructor() {
                                super(),
                                    this.type = "Camera",
                                    this.matrixWorldInverse = new mr,
                                    this.projectionMatrix = new mr,
                                    this.projectionMatrixInverse = new mr
                            }
                            copy(t, e) {
                                return super.copy(t, e),
                                    this.matrixWorldInverse.copy(t.matrixWorldInverse),
                                    this.projectionMatrix.copy(t.projectionMatrix),
                                    this.projectionMatrixInverse.copy(t.projectionMatrixInverse),
                                    this
                            }
                            getWorldDirection(t) {
                                this.updateWorldMatrix(!0, !1);
                                var e = this.matrixWorld.elements;
                                return t.set(-e[8], -e[9], -e[10]).normalize()
                            }
                            updateMatrixWorld(t) {
                                super.updateMatrixWorld(t),
                                    this.matrixWorldInverse.copy(this.matrixWorld).invert()
                            }
                            updateWorldMatrix(t, e) {
                                super.updateWorldMatrix(t, e),
                                    this.matrixWorldInverse.copy(this.matrixWorld).invert()
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                        }
                        $s.prototype.isCamera = !0;
                        class ta extends $s {
                            constructor(t=50, e=1, i=.1, n=2e3) {
                                super(),
                                    this.type = "PerspectiveCamera",
                                    this.fov = t,
                                    this.zoom = 1,
                                    this.near = i,
                                    this.far = n,
                                    this.focus = 10,
                                    this.aspect = e,
                                    this.view = null,
                                    this.filmGauge = 35,
                                    this.filmOffset = 0,
                                    this.updateProjectionMatrix()
                            }
                            copy(t, e) {
                                return super.copy(t, e),
                                    this.fov = t.fov,
                                    this.zoom = t.zoom,
                                    this.near = t.near,
                                    this.far = t.far,
                                    this.focus = t.focus,
                                    this.aspect = t.aspect,
                                    this.view = null === t.view ? null : Object.assign({}, t.view),
                                    this.filmGauge = t.filmGauge,
                                    this.filmOffset = t.filmOffset,
                                    this
                            }
                            setFocalLength(t) {
                                t = .5 * this.getFilmHeight() / t,
                                    this.fov = 2 * pn * Math.atan(t),
                                    this.updateProjectionMatrix()
                            }
                            getFocalLength() {
                                var t = Math.tan(.5 * dn * this.fov);
                                return .5 * this.getFilmHeight() / t
                            }
                            getEffectiveFOV() {
                                return 2 * pn * Math.atan(Math.tan(.5 * dn * this.fov) / this.zoom)
                            }
                            getFilmWidth() {
                                return this.filmGauge * Math.min(this.aspect, 1)
                            }
                            getFilmHeight() {
                                return this.filmGauge / Math.max(this.aspect, 1)
                            }
                            setViewOffset(t, e, i, n, r, s) {
                                this.aspect = t / e,
                                null === this.view && (this.view = {
                                    enabled: !0,
                                    fullWidth: 1,
                                    fullHeight: 1,
                                    offsetX: 0,
                                    offsetY: 0,
                                    width: 1,
                                    height: 1
                                }),
                                    this.view.enabled = !0,
                                    this.view.fullWidth = t,
                                    this.view.fullHeight = e,
                                    this.view.offsetX = i,
                                    this.view.offsetY = n,
                                    this.view.width = r,
                                    this.view.height = s,
                                    this.updateProjectionMatrix()
                            }
                            clearViewOffset() {
                                null !== this.view && (this.view.enabled = !1),
                                    this.updateProjectionMatrix()
                            }
                            updateProjectionMatrix() {
                                var t = this.near;
                                let e = t * Math.tan(.5 * dn * this.fov) / this.zoom
                                    , i = 2 * e
                                    , n = this.aspect * i
                                    , r = -.5 * n;
                                var s, a = this.view;
                                null !== this.view && this.view.enabled && (s = a.fullWidth,
                                    o = a.fullHeight,
                                    r += a.offsetX * n / s,
                                    e -= a.offsetY * i / o,
                                    n *= a.width / s,
                                    i *= a.height / o);
                                var o = this.filmOffset;
                                0 !== o && (r += t * o / this.getFilmWidth()),
                                    this.projectionMatrix.makePerspective(r, r + n, e, e - i, t, this.far),
                                    this.projectionMatrixInverse.copy(this.projectionMatrix).invert()
                            }
                            toJSON(t) {
                                const e = super.toJSON(t);
                                return e.object.fov = this.fov,
                                    e.object.zoom = this.zoom,
                                    e.object.near = this.near,
                                    e.object.far = this.far,
                                    e.object.focus = this.focus,
                                    e.object.aspect = this.aspect,
                                null !== this.view && (e.object.view = Object.assign({}, this.view)),
                                    e.object.filmGauge = this.filmGauge,
                                    e.object.filmOffset = this.filmOffset,
                                    e
                            }
                        }
                        ta.prototype.isPerspectiveCamera = !0;
                        class ea extends Vr {
                            constructor(t, e, i) {
                                if (super(),
                                    this.type = "CubeCamera",
                                !0 === i.isWebGLCubeRenderTarget) {
                                    this.renderTarget = i;
                                    const n = new ta(90,1,t,e);
                                    n.layers = this.layers,
                                        n.up.set(0, -1, 0),
                                        n.lookAt(new Fn(1,0,0)),
                                        this.add(n);
                                    const r = new ta(90,1,t,e);
                                    r.layers = this.layers,
                                        r.up.set(0, -1, 0),
                                        r.lookAt(new Fn(-1,0,0)),
                                        this.add(r);
                                    const s = new ta(90,1,t,e);
                                    s.layers = this.layers,
                                        s.up.set(0, 0, 1),
                                        s.lookAt(new Fn(0,1,0)),
                                        this.add(s);
                                    const a = new ta(90,1,t,e);
                                    a.layers = this.layers,
                                        a.up.set(0, 0, -1),
                                        a.lookAt(new Fn(0,-1,0)),
                                        this.add(a);
                                    const o = new ta(90,1,t,e);
                                    o.layers = this.layers,
                                        o.up.set(0, -1, 0),
                                        o.lookAt(new Fn(0,0,1)),
                                        this.add(o);
                                    const h = new ta(90,1,t,e);
                                    h.layers = this.layers,
                                        h.up.set(0, -1, 0),
                                        h.lookAt(new Fn(0,0,-1)),
                                        this.add(h)
                                }
                            }
                            update(t, e) {
                                null === this.parent && this.updateMatrixWorld();
                                const i = this.renderTarget;
                                var [n,r,s,a,o,h] = this.children
                                    , l = t.xr.enabled
                                    , u = t.getRenderTarget();
                                t.xr.enabled = !1;
                                var c = i.texture.generateMipmaps;
                                i.texture.generateMipmaps = !1,
                                    t.setRenderTarget(i, 0),
                                    t.render(e, n),
                                    t.setRenderTarget(i, 1),
                                    t.render(e, r),
                                    t.setRenderTarget(i, 2),
                                    t.render(e, s),
                                    t.setRenderTarget(i, 3),
                                    t.render(e, a),
                                    t.setRenderTarget(i, 4),
                                    t.render(e, o),
                                    i.texture.generateMipmaps = c,
                                    t.setRenderTarget(i, 5),
                                    t.render(e, h),
                                    t.setRenderTarget(u),
                                    t.xr.enabled = l
                            }
                        }
                        class ia extends In {
                            constructor(t, e, i, n, r, s, a, o, h, l) {
                                super(t = void 0 !== t ? t : [], e = void 0 !== e ? e : Bt, i, n, r, s, a, o, h, l),
                                    this.flipY = !1
                            }
                            get images() {
                                return this.image
                            }
                            set images(t) {
                                this.image = t
                            }
                        }
                        ia.prototype.isCubeTexture = !0;
                        class na extends On {
                            constructor(t, e, i) {
                                super(t, t, e = Number.isInteger(e) ? i : e),
                                    e = e || {},
                                    this.texture = new ia(void 0,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),
                                    this.texture.isRenderTargetTexture = !0,
                                    this.texture.generateMipmaps = void 0 !== e.generateMipmaps && e.generateMipmaps,
                                    this.texture.minFilter = void 0 !== e.minFilter ? e.minFilter : $t,
                                    this.texture._needsFlipEnvMap = !1
                            }
                            fromEquirectangularTexture(t, e) {
                                this.texture.type = e.type,
                                    this.texture.format = _e,
                                    this.texture.encoding = e.encoding,
                                    this.texture.generateMipmaps = e.generateMipmaps,
                                    this.texture.minFilter = e.minFilter,
                                    this.texture.magFilter = e.magFilter;
                                var i = {
                                    uniforms: {
                                        tEquirect: {
                                            value: null
                                        }
                                    },
                                    vertexShader: "\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",
                                    fragmentShader: "\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"
                                }
                                    , n = new Zs(5,5,5);
                                const r = new Ks({
                                    name: "CubemapFromEquirect",
                                    uniforms: Js(i.uniforms),
                                    vertexShader: i.vertexShader,
                                    fragmentShader: i.fragmentShader,
                                    side: J,
                                    blending: $
                                });
                                r.uniforms.tEquirect.value = e;
                                const s = new qs(n,r);
                                n = e.minFilter,
                                e.minFilter === ie && (e.minFilter = $t);
                                return new ea(1,10,this).update(t, s),
                                    e.minFilter = n,
                                    s.geometry.dispose(),
                                    s.material.dispose(),
                                    this
                            }
                            clear(t, e, i, n) {
                                var r = t.getRenderTarget();
                                for (let r = 0; r < 6; r++)
                                    t.setRenderTarget(this, r),
                                        t.clear(e, i, n);
                                t.setRenderTarget(r)
                            }
                        }
                        na.prototype.isWebGLCubeRenderTarget = !0;
                        const ra = new Fn
                            , sa = new Fn
                            , aa = new Sn;
                        class oa {
                            constructor(t=new Fn(1,0,0), e=0) {
                                this.normal = t,
                                    this.constant = e
                            }
                            set(t, e) {
                                return this.normal.copy(t),
                                    this.constant = e,
                                    this
                            }
                            setComponents(t, e, i, n) {
                                return this.normal.set(t, e, i),
                                    this.constant = n,
                                    this
                            }
                            setFromNormalAndCoplanarPoint(t, e) {
                                return this.normal.copy(t),
                                    this.constant = -e.dot(this.normal),
                                    this
                            }
                            setFromCoplanarPoints(t, e, i) {
                                return e = ra.subVectors(i, e).cross(sa.subVectors(t, e)).normalize(),
                                    this.setFromNormalAndCoplanarPoint(e, t),
                                    this
                            }
                            copy(t) {
                                return this.normal.copy(t.normal),
                                    this.constant = t.constant,
                                    this
                            }
                            normalize() {
                                var t = 1 / this.normal.length();
                                return this.normal.multiplyScalar(t),
                                    this.constant *= t,
                                    this
                            }
                            negate() {
                                return this.constant *= -1,
                                    this.normal.negate(),
                                    this
                            }
                            distanceToPoint(t) {
                                return this.normal.dot(t) + this.constant
                            }
                            distanceToSphere(t) {
                                return this.distanceToPoint(t.center) - t.radius
                            }
                            projectPoint(t, e) {
                                return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)
                            }
                            intersectLine(t, e) {
                                var i = t.delta(ra)
                                    , n = this.normal.dot(i);
                                return 0 === n ? 0 === this.distanceToPoint(t.start) ? e.copy(t.start) : null : (n = -(t.start.dot(this.normal) + this.constant) / n) < 0 || 1 < n ? null : e.copy(i).multiplyScalar(n).add(t.start)
                            }
                            intersectsLine(t) {
                                var e = this.distanceToPoint(t.start);
                                t = this.distanceToPoint(t.end);
                                return e < 0 && 0 < t || t < 0 && 0 < e
                            }
                            intersectsBox(t) {
                                return t.intersectsPlane(this)
                            }
                            intersectsSphere(t) {
                                return t.intersectsPlane(this)
                            }
                            coplanarPoint(t) {
                                return t.copy(this.normal).multiplyScalar(-this.constant)
                            }
                            applyMatrix4(t, e) {
                                e = e || aa.getNormalMatrix(t);
                                const i = this.coplanarPoint(ra).applyMatrix4(t);
                                return e = this.normal.applyMatrix3(e).normalize(),
                                    this.constant = -i.dot(e),
                                    this
                            }
                            translate(t) {
                                return this.constant -= t.dot(this.normal),
                                    this
                            }
                            equals(t) {
                                return t.normal.equals(this.normal) && t.constant === this.constant
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                        }
                        oa.prototype.isPlane = !0;
                        const ha = new ar
                            , la = new Fn;
                        class ua {
                            constructor(t=new oa, e=new oa, i=new oa, n=new oa, r=new oa, s=new oa) {
                                this.planes = [t, e, i, n, r, s]
                            }
                            set(t, e, i, n, r, s) {
                                const a = this.planes;
                                return a[0].copy(t),
                                    a[1].copy(e),
                                    a[2].copy(i),
                                    a[3].copy(n),
                                    a[4].copy(r),
                                    a[5].copy(s),
                                    this
                            }
                            copy(t) {
                                const e = this.planes;
                                for (let i = 0; i < 6; i++)
                                    e[i].copy(t.planes[i]);
                                return this
                            }
                            setFromProjectionMatrix(t) {
                                const e = this.planes;
                                var i = (g = t.elements)[0]
                                    , n = g[1]
                                    , r = g[2]
                                    , s = g[3]
                                    , a = g[4]
                                    , o = g[5]
                                    , h = g[6]
                                    , l = g[7]
                                    , u = g[8]
                                    , c = g[9]
                                    , d = g[10]
                                    , p = g[11]
                                    , f = g[12]
                                    , m = g[13]
                                    , g = (t = g[14],
                                    g[15]);
                                return e[0].setComponents(s - i, l - a, p - u, g - f).normalize(),
                                    e[1].setComponents(s + i, l + a, p + u, g + f).normalize(),
                                    e[2].setComponents(s + n, l + o, p + c, g + m).normalize(),
                                    e[3].setComponents(s - n, l - o, p - c, g - m).normalize(),
                                    e[4].setComponents(s - r, l - h, p - d, g - t).normalize(),
                                    e[5].setComponents(s + r, l + h, p + d, g + t).normalize(),
                                    this
                            }
                            intersectsObject(t) {
                                const e = t.geometry;
                                return null === e.boundingSphere && e.computeBoundingSphere(),
                                    ha.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),
                                    this.intersectsSphere(ha)
                            }
                            intersectsSprite(t) {
                                return ha.center.set(0, 0, 0),
                                    ha.radius = .7071067811865476,
                                    ha.applyMatrix4(t.matrixWorld),
                                    this.intersectsSphere(ha)
                            }
                            intersectsSphere(t) {
                                const e = this.planes;
                                var i = t.center
                                    , n = -t.radius;
                                for (let t = 0; t < 6; t++)
                                    if (e[t].distanceToPoint(i) < n)
                                        return !1;
                                return !0
                            }
                            intersectsBox(t) {
                                var e = this.planes;
                                for (let i = 0; i < 6; i++) {
                                    const n = e[i];
                                    if (la.x = (0 < n.normal.x ? t.max : t.min).x,
                                        la.y = (0 < n.normal.y ? t.max : t.min).y,
                                        la.z = (0 < n.normal.z ? t.max : t.min).z,
                                    n.distanceToPoint(la) < 0)
                                        return !1
                                }
                                return !0
                            }
                            containsPoint(t) {
                                const e = this.planes;
                                for (let i = 0; i < 6; i++)
                                    if (e[i].distanceToPoint(t) < 0)
                                        return !1;
                                return !0
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                        }
                        function ca() {
                            let t = null
                                , e = !1
                                , i = null
                                , n = null;
                            function r(e, s) {
                                i(e, s),
                                    n = t.requestAnimationFrame(r)
                            }
                            return {
                                start: function() {
                                    !0 !== e && null !== i && (n = t.requestAnimationFrame(r),
                                        e = !0)
                                },
                                stop: function() {
                                    t.cancelAnimationFrame(n),
                                        e = !1
                                },
                                setAnimationLoop: function(t) {
                                    i = t
                                },
                                setContext: function(e) {
                                    t = e
                                }
                            }
                        }
                        function da(t, e) {
                            const i = e.isWebGL2
                                , n = new WeakMap;
                            return {
                                get: function(t) {
                                    return t.isInterleavedBufferAttribute && (t = t.data),
                                        n.get(t)
                                },
                                remove: function(e) {
                                    e.isInterleavedBufferAttribute && (e = e.data);
                                    var i = n.get(e);
                                    i && (t.deleteBuffer(i.buffer),
                                        n.delete(e))
                                },
                                update: function(e, r) {
                                    if (e.isGLBufferAttribute) {
                                        var s = n.get(e);
                                        (!s || s.version < e.version) && n.set(e, {
                                            buffer: e.buffer,
                                            type: e.type,
                                            bytesPerElement: e.elementSize,
                                            version: e.version
                                        })
                                    } else {
                                        e.isInterleavedBufferAttribute && (e = e.data);
                                        const s = n.get(e);
                                        void 0 === s ? n.set(e, function(e, n) {
                                            var r = e.array
                                                , s = e.usage
                                                , a = t.createBuffer();
                                            t.bindBuffer(n, a),
                                                t.bufferData(n, r, s),
                                                e.onUploadCallback();
                                            let o = 5126;
                                            return r instanceof Float32Array ? o = 5126 : r instanceof Float64Array || (r instanceof Uint16Array ? e.isFloat16BufferAttribute ? i && (o = 5131) : o = 5123 : r instanceof Int16Array ? o = 5122 : r instanceof Uint32Array ? o = 5125 : r instanceof Int32Array ? o = 5124 : r instanceof Int8Array ? o = 5120 : (r instanceof Uint8Array || r instanceof Uint8ClampedArray) && (o = 5121)),
                                                {
                                                    buffer: a,
                                                    type: o,
                                                    bytesPerElement: r.BYTES_PER_ELEMENT,
                                                    version: e.version
                                                }
                                        }(e, r)) : s.version < e.version && (function(e, n, r) {
                                            const s = n.array
                                                , a = n.updateRange;
                                            t.bindBuffer(r, e),
                                                -1 === a.count ? t.bufferSubData(r, 0, s) : (i ? t.bufferSubData(r, a.offset * s.BYTES_PER_ELEMENT, s, a.offset, a.count) : t.bufferSubData(r, a.offset * s.BYTES_PER_ELEMENT, s.subarray(a.offset, a.offset + a.count)),
                                                    a.count = -1)
                                        }(s.buffer, e, r),
                                            s.version = e.version)
                                    }
                                }
                            }
                        }
                        class pa extends Ps {
                            constructor(t=1, e=1, i=1, n=1) {
                                super(),
                                    this.type = "PlaneGeometry",
                                    this.parameters = {
                                        width: t,
                                        height: e,
                                        widthSegments: i,
                                        heightSegments: n
                                    };
                                var r = t / 2
                                    , s = e / 2
                                    , a = Math.floor(i)
                                    , o = Math.floor(n)
                                    , h = a + 1
                                    , l = o + 1
                                    , u = t / a
                                    , c = e / o;
                                const d = []
                                    , p = []
                                    , f = []
                                    , m = [];
                                for (let t = 0; t < l; t++) {
                                    var g = t * c - s;
                                    for (let e = 0; e < h; e++) {
                                        var v = e * u - r;
                                        p.push(v, -g, 0),
                                            f.push(0, 0, 1),
                                            m.push(e / a),
                                            m.push(1 - t / o)
                                    }
                                }
                                for (let t = 0; t < o; t++)
                                    for (let e = 0; e < a; e++) {
                                        var _ = e + h * t
                                            , y = e + h * (t + 1)
                                            , x = e + 1 + h * (t + 1)
                                            , b = e + 1 + h * t;
                                        d.push(_, y, b),
                                            d.push(y, x, b)
                                    }
                                this.setIndex(d),
                                    this.setAttribute("position", new ys(p,3)),
                                    this.setAttribute("normal", new ys(f,3)),
                                    this.setAttribute("uv", new ys(m,2))
                            }
                            static fromJSON(t) {
                                return new pa(t.width,t.height,t.widthSegments,t.heightSegments)
                            }
                        }
                        const fa = {
                            alphamap_fragment: "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",
                            alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
                            alphatest_fragment: "#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",
                            alphatest_pars_fragment: "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",
                            aomap_fragment: "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",
                            aomap_pars_fragment: "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",
                            begin_vertex: "vec3 transformed = vec3( position );",
                            beginnormal_vertex: "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",
                            bsdfs: "vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif",
                            bumpmap_pars_fragment: "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",
                            clipping_planes_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",
                            clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",
                            clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",
                            clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",
                            color_fragment: "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",
                            color_pars_fragment: "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",
                            color_pars_vertex: "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",
                            color_vertex: "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",
                            common: "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",
                            cube_uv_reflection_fragment: "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\treturn texture2D( envMap, uv ).rgb;\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",
                            defaultnormal_vertex: "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",
                            displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",
                            displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",
                            emissivemap_fragment: "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",
                            emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",
                            encodings_fragment: "gl_FragColor = linearToOutputTexel( gl_FragColor );",
                            encodings_pars_fragment: "vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",
                            envmap_fragment: "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",
                            envmap_common_pars_fragment: "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",
                            envmap_pars_fragment: "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",
                            envmap_pars_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",
                            envmap_physical_pars_fragment: "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec;\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\t#else\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\t\t\t#endif\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif",
                            envmap_vertex: "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",
                            fog_vertex: "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",
                            fog_pars_vertex: "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",
                            fog_fragment: "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",
                            fog_pars_fragment: "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",
                            gradientmap_pars_fragment: "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",
                            lightmap_fragment: "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tlightMapIrradiance *= PI;\n\t#endif\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",
                            lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",
                            lights_lambert_vertex: "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",
                            lights_pars_begin: "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",
                            lights_toon_fragment: "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",
                            lights_toon_pars_fragment: "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",
                            lights_phong_fragment: "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",
                            lights_phong_pars_fragment: "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",
                            lights_physical_fragment: "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif",
                            lights_physical_pars_fragment: "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",
                            lights_fragment_begin: "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",
                            lights_fragment_maps: "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",
                            lights_fragment_end: "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",
                            logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",
                            logdepthbuf_pars_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",
                            logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",
                            logdepthbuf_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",
                            map_fragment: "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",
                            map_pars_fragment: "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",
                            map_particle_fragment: "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",
                            map_particle_pars_fragment: "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
                            metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",
                            metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",
                            morphnormal_vertex: "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",
                            morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform vec2 morphTargetsTextureSize;\n\t\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\n\t\t\tfloat texelIndex = float( vertexIndex * stride + offset );\n\t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\n\t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n\t\t\treturn texture( morphTargetsTexture, morphUV ).xyz;\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",
                            morphtarget_vertex: "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\t#ifndef USE_MORPHNORMALS\n\t\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\n\t\t\t#else\n\t\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\n\t\t\t#endif\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",
                            normal_fragment_begin: "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",
                            normal_fragment_maps: "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",
                            normal_pars_fragment: "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",
                            normal_pars_vertex: "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",
                            normal_vertex: "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",
                            normalmap_pars_fragment: "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",
                            clearcoat_normal_fragment_begin: "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",
                            clearcoat_normal_fragment_maps: "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",
                            clearcoat_pars_fragment: "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",
                            output_fragment: "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",
                            packing: "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",
                            premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",
                            project_vertex: "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",
                            dithering_fragment: "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",
                            dithering_pars_fragment: "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",
                            roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",
                            roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",
                            shadowmap_pars_fragment: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",
                            shadowmap_pars_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",
                            shadowmap_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",
                            shadowmask_pars_fragment: "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",
                            skinbase_vertex: "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",
                            skinning_pars_vertex: "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",
                            skinning_vertex: "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",
                            skinnormal_vertex: "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",
                            specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",
                            specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",
                            tonemapping_fragment: "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",
                            tonemapping_pars_fragment: "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",
                            transmission_fragment: "#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif",
                            transmission_pars_fragment: "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( float roughness, float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\n\t\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\n\t\tvec3 attenuationColor, float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif",
                            uv_pars_fragment: "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",
                            uv_pars_vertex: "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",
                            uv_vertex: "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",
                            uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",
                            uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",
                            uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",
                            worldpos_vertex: "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",
                            background_vert: "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",
                            background_frag: "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
                            cube_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",
                            cube_frag: "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
                            depth_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",
                            depth_frag: "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",
                            distanceRGBA_vert: "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",
                            distanceRGBA_frag: "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",
                            equirect_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",
                            equirect_frag: "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
                            linedashed_vert: "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
                            linedashed_frag: "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
                            meshbasic_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",
                            meshbasic_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
                            meshlambert_vert: "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
                            meshlambert_frag: "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
                            meshmatcap_vert: "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",
                            meshmatcap_frag: "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
                            meshnormal_vert: "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",
                            meshnormal_frag: "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",
                            meshphong_vert: "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
                            meshphong_frag: "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
                            meshphysical_vert: "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",
                            meshphysical_frag: "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
                            meshtoon_vert: "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
                            meshtoon_frag: "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
                            points_vert: "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",
                            points_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
                            shadow_vert: "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
                            shadow_frag: "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
                            sprite_vert: "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
                            sprite_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}"
                        }
                            , ma = {
                            common: {
                                diffuse: {
                                    value: new as(16777215)
                                },
                                opacity: {
                                    value: 1
                                },
                                map: {
                                    value: null
                                },
                                uvTransform: {
                                    value: new Sn
                                },
                                uv2Transform: {
                                    value: new Sn
                                },
                                alphaMap: {
                                    value: null
                                },
                                alphaTest: {
                                    value: 0
                                }
                            },
                            specularmap: {
                                specularMap: {
                                    value: null
                                }
                            },
                            envmap: {
                                envMap: {
                                    value: null
                                },
                                flipEnvMap: {
                                    value: -1
                                },
                                reflectivity: {
                                    value: 1
                                },
                                ior: {
                                    value: 1.5
                                },
                                refractionRatio: {
                                    value: .98
                                }
                            },
                            aomap: {
                                aoMap: {
                                    value: null
                                },
                                aoMapIntensity: {
                                    value: 1
                                }
                            },
                            lightmap: {
                                lightMap: {
                                    value: null
                                },
                                lightMapIntensity: {
                                    value: 1
                                }
                            },
                            emissivemap: {
                                emissiveMap: {
                                    value: null
                                }
                            },
                            bumpmap: {
                                bumpMap: {
                                    value: null
                                },
                                bumpScale: {
                                    value: 1
                                }
                            },
                            normalmap: {
                                normalMap: {
                                    value: null
                                },
                                normalScale: {
                                    value: new wn(1,1)
                                }
                            },
                            displacementmap: {
                                displacementMap: {
                                    value: null
                                },
                                displacementScale: {
                                    value: 1
                                },
                                displacementBias: {
                                    value: 0
                                }
                            },
                            roughnessmap: {
                                roughnessMap: {
                                    value: null
                                }
                            },
                            metalnessmap: {
                                metalnessMap: {
                                    value: null
                                }
                            },
                            gradientmap: {
                                gradientMap: {
                                    value: null
                                }
                            },
                            fog: {
                                fogDensity: {
                                    value: 25e-5
                                },
                                fogNear: {
                                    value: 1
                                },
                                fogFar: {
                                    value: 2e3
                                },
                                fogColor: {
                                    value: new as(16777215)
                                }
                            },
                            lights: {
                                ambientLightColor: {
                                    value: []
                                },
                                lightProbe: {
                                    value: []
                                },
                                directionalLights: {
                                    value: [],
                                    properties: {
                                        direction: {},
                                        color: {}
                                    }
                                },
                                directionalLightShadows: {
                                    value: [],
                                    properties: {
                                        shadowBias: {},
                                        shadowNormalBias: {},
                                        shadowRadius: {},
                                        shadowMapSize: {}
                                    }
                                },
                                directionalShadowMap: {
                                    value: []
                                },
                                directionalShadowMatrix: {
                                    value: []
                                },
                                spotLights: {
                                    value: [],
                                    properties: {
                                        color: {},
                                        position: {},
                                        direction: {},
                                        distance: {},
                                        coneCos: {},
                                        penumbraCos: {},
                                        decay: {}
                                    }
                                },
                                spotLightShadows: {
                                    value: [],
                                    properties: {
                                        shadowBias: {},
                                        shadowNormalBias: {},
                                        shadowRadius: {},
                                        shadowMapSize: {}
                                    }
                                },
                                spotShadowMap: {
                                    value: []
                                },
                                spotShadowMatrix: {
                                    value: []
                                },
                                pointLights: {
                                    value: [],
                                    properties: {
                                        color: {},
                                        position: {},
                                        decay: {},
                                        distance: {}
                                    }
                                },
                                pointLightShadows: {
                                    value: [],
                                    properties: {
                                        shadowBias: {},
                                        shadowNormalBias: {},
                                        shadowRadius: {},
                                        shadowMapSize: {},
                                        shadowCameraNear: {},
                                        shadowCameraFar: {}
                                    }
                                },
                                pointShadowMap: {
                                    value: []
                                },
                                pointShadowMatrix: {
                                    value: []
                                },
                                hemisphereLights: {
                                    value: [],
                                    properties: {
                                        direction: {},
                                        skyColor: {},
                                        groundColor: {}
                                    }
                                },
                                rectAreaLights: {
                                    value: [],
                                    properties: {
                                        color: {},
                                        position: {},
                                        width: {},
                                        height: {}
                                    }
                                },
                                ltc_1: {
                                    value: null
                                },
                                ltc_2: {
                                    value: null
                                }
                            },
                            points: {
                                diffuse: {
                                    value: new as(16777215)
                                },
                                opacity: {
                                    value: 1
                                },
                                size: {
                                    value: 1
                                },
                                scale: {
                                    value: 1
                                },
                                map: {
                                    value: null
                                },
                                alphaMap: {
                                    value: null
                                },
                                alphaTest: {
                                    value: 0
                                },
                                uvTransform: {
                                    value: new Sn
                                }
                            },
                            sprite: {
                                diffuse: {
                                    value: new as(16777215)
                                },
                                opacity: {
                                    value: 1
                                },
                                center: {
                                    value: new wn(.5,.5)
                                },
                                rotation: {
                                    value: 0
                                },
                                map: {
                                    value: null
                                },
                                alphaMap: {
                                    value: null
                                },
                                alphaTest: {
                                    value: 0
                                },
                                uvTransform: {
                                    value: new Sn
                                }
                            }
                        }
                            , ga = {
                            basic: {
                                uniforms: Ys([ma.common, ma.specularmap, ma.envmap, ma.aomap, ma.lightmap, ma.fog]),
                                vertexShader: fa.meshbasic_vert,
                                fragmentShader: fa.meshbasic_frag
                            },
                            lambert: {
                                uniforms: Ys([ma.common, ma.specularmap, ma.envmap, ma.aomap, ma.lightmap, ma.emissivemap, ma.fog, ma.lights, {
                                    emissive: {
                                        value: new as(0)
                                    }
                                }]),
                                vertexShader: fa.meshlambert_vert,
                                fragmentShader: fa.meshlambert_frag
                            },
                            phong: {
                                uniforms: Ys([ma.common, ma.specularmap, ma.envmap, ma.aomap, ma.lightmap, ma.emissivemap, ma.bumpmap, ma.normalmap, ma.displacementmap, ma.fog, ma.lights, {
                                    emissive: {
                                        value: new as(0)
                                    },
                                    specular: {
                                        value: new as(1118481)
                                    },
                                    shininess: {
                                        value: 30
                                    }
                                }]),
                                vertexShader: fa.meshphong_vert,
                                fragmentShader: fa.meshphong_frag
                            },
                            standard: {
                                uniforms: Ys([ma.common, ma.envmap, ma.aomap, ma.lightmap, ma.emissivemap, ma.bumpmap, ma.normalmap, ma.displacementmap, ma.roughnessmap, ma.metalnessmap, ma.fog, ma.lights, {
                                    emissive: {
                                        value: new as(0)
                                    },
                                    roughness: {
                                        value: 1
                                    },
                                    metalness: {
                                        value: 0
                                    },
                                    envMapIntensity: {
                                        value: 1
                                    }
                                }]),
                                vertexShader: fa.meshphysical_vert,
                                fragmentShader: fa.meshphysical_frag
                            },
                            toon: {
                                uniforms: Ys([ma.common, ma.aomap, ma.lightmap, ma.emissivemap, ma.bumpmap, ma.normalmap, ma.displacementmap, ma.gradientmap, ma.fog, ma.lights, {
                                    emissive: {
                                        value: new as(0)
                                    }
                                }]),
                                vertexShader: fa.meshtoon_vert,
                                fragmentShader: fa.meshtoon_frag
                            },
                            matcap: {
                                uniforms: Ys([ma.common, ma.bumpmap, ma.normalmap, ma.displacementmap, ma.fog, {
                                    matcap: {
                                        value: null
                                    }
                                }]),
                                vertexShader: fa.meshmatcap_vert,
                                fragmentShader: fa.meshmatcap_frag
                            },
                            points: {
                                uniforms: Ys([ma.points, ma.fog]),
                                vertexShader: fa.points_vert,
                                fragmentShader: fa.points_frag
                            },
                            dashed: {
                                uniforms: Ys([ma.common, ma.fog, {
                                    scale: {
                                        value: 1
                                    },
                                    dashSize: {
                                        value: 1
                                    },
                                    totalSize: {
                                        value: 2
                                    }
                                }]),
                                vertexShader: fa.linedashed_vert,
                                fragmentShader: fa.linedashed_frag
                            },
                            depth: {
                                uniforms: Ys([ma.common, ma.displacementmap]),
                                vertexShader: fa.depth_vert,
                                fragmentShader: fa.depth_frag
                            },
                            normal: {
                                uniforms: Ys([ma.common, ma.bumpmap, ma.normalmap, ma.displacementmap, {
                                    opacity: {
                                        value: 1
                                    }
                                }]),
                                vertexShader: fa.meshnormal_vert,
                                fragmentShader: fa.meshnormal_frag
                            },
                            sprite: {
                                uniforms: Ys([ma.sprite, ma.fog]),
                                vertexShader: fa.sprite_vert,
                                fragmentShader: fa.sprite_frag
                            },
                            background: {
                                uniforms: {
                                    uvTransform: {
                                        value: new Sn
                                    },
                                    t2D: {
                                        value: null
                                    }
                                },
                                vertexShader: fa.background_vert,
                                fragmentShader: fa.background_frag
                            },
                            cube: {
                                uniforms: Ys([ma.envmap, {
                                    opacity: {
                                        value: 1
                                    }
                                }]),
                                vertexShader: fa.cube_vert,
                                fragmentShader: fa.cube_frag
                            },
                            equirect: {
                                uniforms: {
                                    tEquirect: {
                                        value: null
                                    }
                                },
                                vertexShader: fa.equirect_vert,
                                fragmentShader: fa.equirect_frag
                            },
                            distanceRGBA: {
                                uniforms: Ys([ma.common, ma.displacementmap, {
                                    referencePosition: {
                                        value: new Fn
                                    },
                                    nearDistance: {
                                        value: 1
                                    },
                                    farDistance: {
                                        value: 1e3
                                    }
                                }]),
                                vertexShader: fa.distanceRGBA_vert,
                                fragmentShader: fa.distanceRGBA_frag
                            },
                            shadow: {
                                uniforms: Ys([ma.lights, ma.fog, {
                                    color: {
                                        value: new as(0)
                                    },
                                    opacity: {
                                        value: 1
                                    }
                                }]),
                                vertexShader: fa.shadow_vert,
                                fragmentShader: fa.shadow_frag
                            }
                        };
                        function va(t, e, i, n, r) {
                            const s = new as(0);
                            let a, o, h = 0, l = null, u = 0, c = null;
                            function d(t, e) {
                                i.buffers.color.setClear(t.r, t.g, t.b, e, r)
                            }
                            return {
                                getClearColor: function() {
                                    return s
                                },
                                setClearColor: function(t, e=1) {
                                    s.set(t),
                                        h = e,
                                        d(s, h)
                                },
                                getClearAlpha: function() {
                                    return h
                                },
                                setClearAlpha: function(t) {
                                    h = t,
                                        d(s, h)
                                },
                                render: function(i, r) {
                                    let p = !1
                                        , f = !0 === r.isScene ? r.background : null;
                                    f && f.isTexture && (f = e.get(f));
                                    const m = t.xr;
                                    (r = m.getSession && m.getSession()) && "additive" === r.environmentBlendMode && (f = null),
                                        null === f ? d(s, h) : f && f.isColor && (d(f, 1),
                                            p = !0),
                                    (t.autoClear || p) && t.clear(t.autoClearColor, t.autoClearDepth, t.autoClearStencil),
                                        f && (f.isCubeTexture || f.mapping === Wt) ? (void 0 === o && (o = new qs(new Zs(1,1,1),new Ks({
                                            name: "BackgroundCubeMaterial",
                                            uniforms: Js(ga.cube.uniforms),
                                            vertexShader: ga.cube.vertexShader,
                                            fragmentShader: ga.cube.fragmentShader,
                                            side: J,
                                            depthTest: !1,
                                            depthWrite: !1,
                                            fog: !1
                                        })),
                                            o.geometry.deleteAttribute("normal"),
                                            o.geometry.deleteAttribute("uv"),
                                            o.onBeforeRender = function(t, e, i) {
                                                this.matrixWorld.copyPosition(i.matrixWorld)
                                            }
                                            ,
                                            Object.defineProperty(o.material, "envMap", {
                                                get: function() {
                                                    return this.uniforms.envMap.value
                                                }
                                            }),
                                            n.update(o)),
                                            o.material.uniforms.envMap.value = f,
                                            o.material.uniforms.flipEnvMap.value = f.isCubeTexture && !1 === f.isRenderTargetTexture ? -1 : 1,
                                        l === f && u === f.version && c === t.toneMapping || (o.material.needsUpdate = !0,
                                            l = f,
                                            u = f.version,
                                            c = t.toneMapping),
                                            i.unshift(o, o.geometry, o.material, 0, 0, null)) : f && f.isTexture && (void 0 === a && (a = new qs(new pa(2,2),new Ks({
                                            name: "BackgroundMaterial",
                                            uniforms: Js(ga.background.uniforms),
                                            vertexShader: ga.background.vertexShader,
                                            fragmentShader: ga.background.fragmentShader,
                                            side: Z,
                                            depthTest: !1,
                                            depthWrite: !1,
                                            fog: !1
                                        })),
                                            a.geometry.deleteAttribute("normal"),
                                            Object.defineProperty(a.material, "map", {
                                                get: function() {
                                                    return this.uniforms.t2D.value
                                                }
                                            }),
                                            n.update(a)),
                                            a.material.uniforms.t2D.value = f,
                                        !0 === f.matrixAutoUpdate && f.updateMatrix(),
                                            a.material.uniforms.uvTransform.value.copy(f.matrix),
                                        l === f && u === f.version && c === t.toneMapping || (a.material.needsUpdate = !0,
                                            l = f,
                                            u = f.version,
                                            c = t.toneMapping),
                                            i.unshift(a, a.geometry, a.material, 0, 0, null))
                                }
                            }
                        }
                        function _a(t, e, i, n) {
                            const r = t.getParameter(34921)
                                , s = n.isWebGL2 ? null : e.get("OES_vertex_array_object")
                                , a = n.isWebGL2 || null !== s
                                , o = {}
                                , h = d(null);
                            let l = h;
                            function u(e) {
                                return n.isWebGL2 ? t.bindVertexArray(e) : s.bindVertexArrayOES(e)
                            }
                            function c(e) {
                                return n.isWebGL2 ? t.deleteVertexArray(e) : s.deleteVertexArrayOES(e)
                            }
                            function d(t) {
                                const e = []
                                    , i = []
                                    , n = [];
                                for (let t = 0; t < r; t++)
                                    e[t] = 0,
                                        i[t] = 0,
                                        n[t] = 0;
                                return {
                                    geometry: null,
                                    program: null,
                                    wireframe: !1,
                                    newAttributes: e,
                                    enabledAttributes: i,
                                    attributeDivisors: n,
                                    object: t,
                                    attributes: {},
                                    index: null
                                }
                            }
                            function p() {
                                const t = l.newAttributes;
                                for (let e = 0, i = t.length; e < i; e++)
                                    t[e] = 0
                            }
                            function f(t) {
                                m(t, 0)
                            }
                            function m(i, r) {
                                const s = l.newAttributes
                                    , a = l.enabledAttributes
                                    , o = l.attributeDivisors;
                                if (s[i] = 1,
                                0 === a[i] && (t.enableVertexAttribArray(i),
                                    a[i] = 1),
                                o[i] !== r) {
                                    (n.isWebGL2 ? t : e.get("ANGLE_instanced_arrays"))[n.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](i, r),
                                        o[i] = r
                                }
                            }
                            function g() {
                                var e = l.newAttributes;
                                const i = l.enabledAttributes;
                                for (let n = 0, r = i.length; n < r; n++)
                                    i[n] !== e[n] && (t.disableVertexAttribArray(n),
                                        i[n] = 0)
                            }
                            function v(e, i, r, s, a, o) {
                                !0 !== n.isWebGL2 || 5124 !== r && 5125 !== r ? t.vertexAttribPointer(e, i, r, s, a, o) : t.vertexAttribIPointer(e, i, r, a, o)
                            }
                            function _() {
                                y(),
                                l !== h && (l = h,
                                    u(l.object))
                            }
                            function y() {
                                h.geometry = null,
                                    h.program = null,
                                    h.wireframe = !1
                            }
                            return {
                                setup: function(r, h, c, _, y) {
                                    let x = !1;
                                    var b;
                                    a ? (b = function(e, i, r) {
                                        r = !0 === r.wireframe;
                                        let a = o[e.id];
                                        void 0 === a && (a = {},
                                            o[e.id] = a);
                                        let h = a[i.id];
                                        void 0 === h && (h = {},
                                            a[i.id] = h);
                                        let l = h[r];
                                        return void 0 === l && (l = d(n.isWebGL2 ? t.createVertexArray() : s.createVertexArrayOES()),
                                            h[r] = l),
                                            l
                                    }(_, c, h),
                                    l !== b && (l = b,
                                        u(l.object)),
                                        x = function(t, e) {
                                            var i = l.attributes
                                                , n = t.attributes;
                                            let r = 0;
                                            for (const t in n) {
                                                var s = i[t]
                                                    , a = n[t];
                                                if (void 0 === s)
                                                    return !0;
                                                if (s.attribute !== a)
                                                    return !0;
                                                if (s.data !== a.data)
                                                    return !0;
                                                r++
                                            }
                                            return l.attributesNum !== r || l.index !== e
                                        }(_, y),
                                    x && function(t, e) {
                                        const i = {}
                                            , n = t.attributes;
                                        let r = 0;
                                        for (const t in n) {
                                            var s = n[t];
                                            const e = {};
                                            (e.attribute = s).data && (e.data = s.data),
                                                i[t] = e,
                                                r++
                                        }
                                        l.attributes = i,
                                            l.attributesNum = r,
                                            l.index = e
                                    }(_, y)) : (b = !0 === h.wireframe,
                                    l.geometry === _.id && l.program === c.id && l.wireframe === b || (l.geometry = _.id,
                                        l.program = c.id,
                                        l.wireframe = b,
                                        x = !0)),
                                    !0 === r.isInstancedMesh && (x = !0),
                                    null !== y && i.update(y, 34963),
                                    x && (function(r, s, a, o) {
                                        if (!1 !== n.isWebGL2 || !r.isInstancedMesh && !o.isInstancedBufferGeometry || null !== e.get("ANGLE_instanced_arrays")) {
                                            p();
                                            var h = o.attributes
                                                , l = a.getAttributes()
                                                , u = s.defaultAttributeValues;
                                            for (const e in l) {
                                                var c = l[e];
                                                if (0 <= c.location) {
                                                    let n = h[e];
                                                    if (void 0 === n && ("instanceMatrix" === e && r.instanceMatrix && (n = r.instanceMatrix),
                                                    "instanceColor" === e && r.instanceColor && (n = r.instanceColor)),
                                                    void 0 !== n) {
                                                        var d = n.normalized
                                                            , _ = n.itemSize
                                                            , y = i.get(n);
                                                        if (void 0 !== y) {
                                                            var x = y.buffer
                                                                , b = y.type
                                                                , w = y.bytesPerElement;
                                                            if (n.isInterleavedBufferAttribute) {
                                                                var S = n.data
                                                                    , M = S.stride
                                                                    , C = n.offset;
                                                                if (S && S.isInstancedInterleavedBuffer) {
                                                                    for (let t = 0; t < c.locationSize; t++)
                                                                        m(c.location + t, S.meshPerAttribute);
                                                                    !0 !== r.isInstancedMesh && void 0 === o._maxInstanceCount && (o._maxInstanceCount = S.meshPerAttribute * S.count)
                                                                } else
                                                                    for (let t = 0; t < c.locationSize; t++)
                                                                        f(c.location + t);
                                                                t.bindBuffer(34962, x);
                                                                for (let t = 0; t < c.locationSize; t++)
                                                                    v(c.location + t, _ / c.locationSize, b, d, M * w, (C + _ / c.locationSize * t) * w)
                                                            } else {
                                                                if (n.isInstancedBufferAttribute) {
                                                                    for (let t = 0; t < c.locationSize; t++)
                                                                        m(c.location + t, n.meshPerAttribute);
                                                                    !0 !== r.isInstancedMesh && void 0 === o._maxInstanceCount && (o._maxInstanceCount = n.meshPerAttribute * n.count)
                                                                } else
                                                                    for (let t = 0; t < c.locationSize; t++)
                                                                        f(c.location + t);
                                                                t.bindBuffer(34962, x);
                                                                for (let t = 0; t < c.locationSize; t++)
                                                                    v(c.location + t, _ / c.locationSize, b, d, _ * w, _ / c.locationSize * t * w)
                                                            }
                                                        }
                                                    } else if (void 0 !== u) {
                                                        var A = u[e];
                                                        if (void 0 !== A)
                                                            switch (A.length) {
                                                                case 2:
                                                                    t.vertexAttrib2fv(c.location, A);
                                                                    break;
                                                                case 3:
                                                                    t.vertexAttrib3fv(c.location, A);
                                                                    break;
                                                                case 4:
                                                                    t.vertexAttrib4fv(c.location, A);
                                                                    break;
                                                                default:
                                                                    t.vertexAttrib1fv(c.location, A)
                                                            }
                                                    }
                                                }
                                            }
                                            g()
                                        }
                                    }(r, h, c, _),
                                    null !== y && t.bindBuffer(34963, i.get(y).buffer))
                                },
                                reset: _,
                                resetDefaultState: y,
                                dispose: function() {
                                    _();
                                    for (const t in o) {
                                        const e = o[t];
                                        for (const t in e) {
                                            const i = e[t];
                                            for (const t in i)
                                                c(i[t].object),
                                                    delete i[t];
                                            delete e[t]
                                        }
                                        delete o[t]
                                    }
                                },
                                releaseStatesOfGeometry: function(t) {
                                    if (void 0 !== o[t.id]) {
                                        const e = o[t.id];
                                        for (const t in e) {
                                            const i = e[t];
                                            for (const t in i)
                                                c(i[t].object),
                                                    delete i[t];
                                            delete e[t]
                                        }
                                        delete o[t.id]
                                    }
                                },
                                releaseStatesOfProgram: function(t) {
                                    for (const e in o) {
                                        const i = o[e];
                                        if (void 0 !== i[t.id]) {
                                            const e = i[t.id];
                                            for (const t in e)
                                                c(e[t].object),
                                                    delete e[t];
                                            delete i[t.id]
                                        }
                                    }
                                },
                                initAttributes: p,
                                enableAttribute: f,
                                disableUnusedAttributes: g
                            }
                        }
                        function ya(t, e, i, n) {
                            const r = n.isWebGL2;
                            let s;
                            this.setMode = function(t) {
                                s = t
                            }
                                ,
                                this.render = function(e, n) {
                                    t.drawArrays(s, e, n),
                                        i.update(n, s, 1)
                                }
                                ,
                                this.renderInstances = function(n, a, o) {
                                    if (0 !== o) {
                                        let h, l;
                                        if (r)
                                            h = t,
                                                l = "drawArraysInstanced";
                                        else if (h = e.get("ANGLE_instanced_arrays"),
                                            l = "drawArraysInstancedANGLE",
                                        null === h)
                                            return;
                                        h[l](s, n, a, o),
                                            i.update(a, s, o)
                                    }
                                }
                        }
                        function xa(t, e, i) {
                            let n;
                            function r(e) {
                                if ("highp" === e) {
                                    if (0 < t.getShaderPrecisionFormat(35633, 36338).precision && 0 < t.getShaderPrecisionFormat(35632, 36338).precision)
                                        return "highp";
                                    e = "mediump"
                                }
                                return "mediump" === e && 0 < t.getShaderPrecisionFormat(35633, 36337).precision && 0 < t.getShaderPrecisionFormat(35632, 36337).precision ? "mediump" : "lowp"
                            }
                            var s = "undefined" != typeof WebGL2RenderingContext && t instanceof WebGL2RenderingContext || "undefined" != typeof WebGL2ComputeRenderingContext && t instanceof WebGL2ComputeRenderingContext;
                            let a = void 0 !== i.precision ? i.precision : "highp";
                            (o = r(a)) !== a && (a = o);
                            var o, h = s || e.has("WEBGL_draw_buffers"), l = !0 === i.logarithmicDepthBuffer, u = t.getParameter(34930), c = t.getParameter(35660), d = t.getParameter(3379), p = t.getParameter(34076), f = t.getParameter(34921), m = t.getParameter(36347), g = t.getParameter(36348), v = t.getParameter(36349), _ = 0 < c, y = s || e.has("OES_texture_float");
                            return {
                                isWebGL2: s,
                                drawBuffers: h,
                                getMaxAnisotropy: function() {
                                    return void 0 !== n || (n = !0 === e.has("EXT_texture_filter_anisotropic") ? (i = e.get("EXT_texture_filter_anisotropic"),
                                        t.getParameter(i.MAX_TEXTURE_MAX_ANISOTROPY_EXT)) : 0),
                                        n;
                                    var i
                                },
                                getMaxPrecision: r,
                                precision: a,
                                logarithmicDepthBuffer: l,
                                maxTextures: u,
                                maxVertexTextures: c,
                                maxTextureSize: d,
                                maxCubemapSize: p,
                                maxAttributes: f,
                                maxVertexUniforms: m,
                                maxVaryings: g,
                                maxFragmentUniforms: v,
                                vertexTextures: _,
                                floatFragmentTextures: y,
                                floatVertexTextures: o = _ && y,
                                maxSamples: i = s ? t.getParameter(36183) : 0
                            }
                        }
                        function ba(t) {
                            const e = this;
                            let i = null
                                , n = 0
                                , r = !1
                                , s = !1;
                            const a = new oa
                                , o = new Sn
                                , h = {
                                value: null,
                                needsUpdate: !1
                            };
                            function l() {
                                h.value !== i && (h.value = i,
                                    h.needsUpdate = 0 < n),
                                    e.numPlanes = n,
                                    e.numIntersection = 0
                            }
                            function u(t, i, n, r) {
                                var s = null !== t ? t.length : 0;
                                let l = null;
                                if (0 !== s) {
                                    if (l = h.value,
                                    !0 !== r || null === l) {
                                        r = n + 4 * s;
                                        var u = i.matrixWorldInverse;
                                        o.getNormalMatrix(u),
                                        (null === l || l.length < r) && (l = new Float32Array(r));
                                        for (let e = 0, i = n; e !== s; ++e,
                                            i += 4)
                                            a.copy(t[e]).applyMatrix4(u, o),
                                                a.normal.toArray(l, i),
                                                l[i + 3] = a.constant
                                    }
                                    h.value = l,
                                        h.needsUpdate = !0
                                }
                                return e.numPlanes = s,
                                    e.numIntersection = 0,
                                    l
                            }
                            this.uniform = h,
                                this.numPlanes = 0,
                                this.numIntersection = 0,
                                this.init = function(t, e, s) {
                                    var a = 0 !== t.length || e || 0 !== n || r;
                                    return r = e,
                                        i = u(t, s, 0),
                                        n = t.length,
                                        a
                                }
                                ,
                                this.beginShadows = function() {
                                    s = !0,
                                        u(null)
                                }
                                ,
                                this.endShadows = function() {
                                    s = !1,
                                        l()
                                }
                                ,
                                this.setState = function(e, a, o) {
                                    var c = e.clippingPlanes
                                        , d = e.clipIntersection
                                        , p = e.clipShadows;
                                    const f = t.get(e);
                                    if (!r || null === c || 0 === c.length || s && !p)
                                        s ? u(null) : l();
                                    else {
                                        var m = 4 * (p = s ? 0 : n);
                                        let t = f.clippingState || null;
                                        h.value = t,
                                            t = u(c, a, m, o);
                                        for (let e = 0; e !== m; ++e)
                                            t[e] = i[e];
                                        f.clippingState = t,
                                            this.numIntersection = d ? this.numPlanes : 0,
                                            this.numPlanes += p
                                    }
                                }
                        }
                        function wa(t) {
                            let e = new WeakMap;
                            function i(t, e) {
                                return e === Ut ? t.mapping = Bt : e === Gt && (t.mapping = Vt),
                                    t
                            }
                            function n(t) {
                                const i = t.target;
                                i.removeEventListener("dispose", n);
                                const r = e.get(i);
                                void 0 !== r && (e.delete(i),
                                    r.dispose())
                            }
                            return {
                                get: function(r) {
                                    if (r && r.isTexture && !1 === r.isRenderTargetTexture) {
                                        var s = r.mapping;
                                        if (s === Ut || s === Gt) {
                                            if (e.has(r))
                                                return i(e.get(r).texture, r.mapping);
                                            var a = r.image;
                                            if (a && 0 < a.height) {
                                                s = t.getRenderTarget();
                                                const o = new na(a.height / 2);
                                                return o.fromEquirectangularTexture(t, r),
                                                    e.set(r, o),
                                                    t.setRenderTarget(s),
                                                    r.addEventListener("dispose", n),
                                                    i(o.texture, r.mapping)
                                            }
                                            return null
                                        }
                                    }
                                    return r
                                },
                                dispose: function() {
                                    e = new WeakMap
                                }
                            }
                        }
                        ga.physical = {
                            uniforms: Ys([ga.standard.uniforms, {
                                clearcoat: {
                                    value: 0
                                },
                                clearcoatMap: {
                                    value: null
                                },
                                clearcoatRoughness: {
                                    value: 0
                                },
                                clearcoatRoughnessMap: {
                                    value: null
                                },
                                clearcoatNormalScale: {
                                    value: new wn(1,1)
                                },
                                clearcoatNormalMap: {
                                    value: null
                                },
                                sheen: {
                                    value: 0
                                },
                                sheenColor: {
                                    value: new as(0)
                                },
                                sheenColorMap: {
                                    value: null
                                },
                                sheenRoughness: {
                                    value: 0
                                },
                                sheenRoughnessMap: {
                                    value: null
                                },
                                transmission: {
                                    value: 0
                                },
                                transmissionMap: {
                                    value: null
                                },
                                transmissionSamplerSize: {
                                    value: new wn
                                },
                                transmissionSamplerMap: {
                                    value: null
                                },
                                thickness: {
                                    value: 0
                                },
                                thicknessMap: {
                                    value: null
                                },
                                attenuationDistance: {
                                    value: 0
                                },
                                attenuationColor: {
                                    value: new as(0)
                                },
                                specularIntensity: {
                                    value: 0
                                },
                                specularIntensityMap: {
                                    value: null
                                },
                                specularColor: {
                                    value: new as(1,1,1)
                                },
                                specularColorMap: {
                                    value: null
                                }
                            }]),
                            vertexShader: fa.meshphysical_vert,
                            fragmentShader: fa.meshphysical_frag
                        };
                        class Sa extends $s {
                            constructor(t=-1, e=1, i=1, n=-1, r=.1, s=2e3) {
                                super(),
                                    this.type = "OrthographicCamera",
                                    this.zoom = 1,
                                    this.view = null,
                                    this.left = t,
                                    this.right = e,
                                    this.top = i,
                                    this.bottom = n,
                                    this.near = r,
                                    this.far = s,
                                    this.updateProjectionMatrix()
                            }
                            copy(t, e) {
                                return super.copy(t, e),
                                    this.left = t.left,
                                    this.right = t.right,
                                    this.top = t.top,
                                    this.bottom = t.bottom,
                                    this.near = t.near,
                                    this.far = t.far,
                                    this.zoom = t.zoom,
                                    this.view = null === t.view ? null : Object.assign({}, t.view),
                                    this
                            }
                            setViewOffset(t, e, i, n, r, s) {
                                null === this.view && (this.view = {
                                    enabled: !0,
                                    fullWidth: 1,
                                    fullHeight: 1,
                                    offsetX: 0,
                                    offsetY: 0,
                                    width: 1,
                                    height: 1
                                }),
                                    this.view.enabled = !0,
                                    this.view.fullWidth = t,
                                    this.view.fullHeight = e,
                                    this.view.offsetX = i,
                                    this.view.offsetY = n,
                                    this.view.width = r,
                                    this.view.height = s,
                                    this.updateProjectionMatrix()
                            }
                            clearViewOffset() {
                                null !== this.view && (this.view.enabled = !1),
                                    this.updateProjectionMatrix()
                            }
                            updateProjectionMatrix() {
                                var t = (this.right - this.left) / (2 * this.zoom)
                                    , e = (this.top - this.bottom) / (2 * this.zoom)
                                    , i = (this.right + this.left) / 2
                                    , n = (this.top + this.bottom) / 2;
                                let r = i - t
                                    , s = i + t
                                    , a = n + e
                                    , o = n - e;
                                null !== this.view && this.view.enabled && (n = (this.right - this.left) / this.view.fullWidth / this.zoom,
                                    e = (this.top - this.bottom) / this.view.fullHeight / this.zoom,
                                    r += n * this.view.offsetX,
                                    s = r + n * this.view.width,
                                    a -= e * this.view.offsetY,
                                    o = a - e * this.view.height),
                                    this.projectionMatrix.makeOrthographic(r, s, a, o, this.near, this.far),
                                    this.projectionMatrixInverse.copy(this.projectionMatrix).invert()
                            }
                            toJSON(t) {
                                const e = super.toJSON(t);
                                return e.object.zoom = this.zoom,
                                    e.object.left = this.left,
                                    e.object.right = this.right,
                                    e.object.top = this.top,
                                    e.object.bottom = this.bottom,
                                    e.object.near = this.near,
                                    e.object.far = this.far,
                                null !== this.view && (e.object.view = Object.assign({}, this.view)),
                                    e
                            }
                        }
                        Sa.prototype.isOrthographicCamera = !0;
                        class Ma extends Ks {
                            constructor(t) {
                                super(t),
                                    this.type = "RawShaderMaterial"
                            }
                        }
                        Ma.prototype.isRawShaderMaterial = !0;
                        const Ca = Math.pow(2, 8)
                            , Aa = [.125, .215, .35, .446, .526, .582]
                            , Ta = 5 + Aa.length
                            , Pa = {
                            [Ei]: 0,
                            [Li]: 1
                        }
                            , Ea = new Sa
                            , {_lodPlanes: La, _sizeLods: Ia, _sigmas: ka} = function() {
                            const t = []
                                , e = []
                                , i = [];
                            let n = 8;
                            for (let l = 0; l < Ta; l++) {
                                var r = Math.pow(2, n);
                                e.push(r);
                                let u = 1 / r;
                                4 < l ? u = Aa[l - 8 + 4 - 1] : 0 == l && (u = 0),
                                    i.push(u);
                                var s, a = [r = -(s = 1 / (r - 1)) / 2, r, s = 1 + s / 2, r, s, s, r, r, s, s, r, s];
                                const c = new Float32Array(108)
                                    , d = new Float32Array(72)
                                    , p = new Float32Array(36);
                                for (let t = 0; t < 6; t++) {
                                    var o = t % 3 * 2 / 3 - 1
                                        , h = 2 < t ? 0 : -1;
                                    c.set([o, h, 0, o + 2 / 3, h, 0, o + 2 / 3, 1 + h, 0, o, h, 0, o + 2 / 3, 1 + h, 0, o, 1 + h, 0], 18 * t),
                                        d.set(a, 12 * t),
                                        h = [t, t, t, t, t, t],
                                        p.set(h, 6 * t)
                                }
                                const f = new Ps;
                                f.setAttribute("position", new us(c,3)),
                                    f.setAttribute("uv", new us(d,2)),
                                    f.setAttribute("faceIndex", new us(p,1)),
                                    t.push(f),
                                4 < n && n--
                            }
                            return {
                                _lodPlanes: t,
                                _sizeLods: e,
                                _sigmas: i
                            }
                        }()
                            , Na = new as;
                        let Oa = null;
                        c = 1 / (l = (1 + Math.sqrt(5)) / 2);
                        const Da = [new Fn(1,1,1), new Fn(-1,1,1), new Fn(1,1,-1), new Fn(-1,1,-1), new Fn(0,l,c), new Fn(0,l,-c), new Fn(c,0,l), new Fn(-c,0,l), new Fn(l,c,0), new Fn(-l,c,0)];
                        class Ra {
                            constructor(t) {
                                var e;
                                this._renderer = t,
                                    this._pingPongRenderTarget = null,
                                    this._blurMaterial = (20,
                                        e = new Float32Array(20),
                                        t = new Fn(0,1,0),
                                        t = new Ma({
                                            name: "SphericalGaussianBlur",
                                            defines: {
                                                n: 20
                                            },
                                            uniforms: {
                                                envMap: {
                                                    value: null
                                                },
                                                samples: {
                                                    value: 1
                                                },
                                                weights: {
                                                    value: e
                                                },
                                                latitudinal: {
                                                    value: !1
                                                },
                                                dTheta: {
                                                    value: 0
                                                },
                                                mipInt: {
                                                    value: 0
                                                },
                                                poleAxis: {
                                                    value: t
                                                }
                                            },
                                            vertexShader: Ua(),
                                            fragmentShader: `\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t${Ga()}\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t`,
                                            blending: $,
                                            depthTest: !1,
                                            depthWrite: !1
                                        })),
                                    this._equirectShader = null,
                                    this._cubemapShader = null,
                                    this._compileMaterial(this._blurMaterial)
                            }
                            fromScene(t, e=0, i=.1, n=100) {
                                Oa = this._renderer.getRenderTarget();
                                var r = this._allocateTargets();
                                return this._sceneToCubeUV(t, i, n, r),
                                0 < e && this._blur(r, 0, 0, e),
                                    this._applyPMREM(r),
                                    this._cleanup(r),
                                    r
                            }
                            fromEquirectangular(t) {
                                return this._fromTexture(t)
                            }
                            fromCubemap(t) {
                                return this._fromTexture(t)
                            }
                            compileCubemapShader() {
                                null === this._cubemapShader && (this._cubemapShader = Va(),
                                    this._compileMaterial(this._cubemapShader))
                            }
                            compileEquirectangularShader() {
                                null === this._equirectShader && (this._equirectShader = Ba(),
                                    this._compileMaterial(this._equirectShader))
                            }
                            dispose() {
                                this._blurMaterial.dispose(),
                                null !== this._cubemapShader && this._cubemapShader.dispose(),
                                null !== this._equirectShader && this._equirectShader.dispose();
                                for (let t = 0; t < La.length; t++)
                                    La[t].dispose()
                            }
                            _cleanup(t) {
                                this._pingPongRenderTarget.dispose(),
                                    this._renderer.setRenderTarget(Oa),
                                    t.scissorTest = !1,
                                    Fa(t, 0, 0, t.width, t.height)
                            }
                            _fromTexture(t) {
                                Oa = this._renderer.getRenderTarget();
                                var e = this._allocateTargets(t);
                                return this._textureToCubeUV(t, e),
                                    this._applyPMREM(e),
                                    this._cleanup(e),
                                    e
                            }
                            _allocateTargets(t) {
                                var e = {
                                    magFilter: $t,
                                    minFilter: $t,
                                    generateMipmaps: !1,
                                    type: ce,
                                    format: _e,
                                    encoding: Ei,
                                    depthBuffer: !1
                                };
                                const i = za(e);
                                return i.depthBuffer = !t,
                                    this._pingPongRenderTarget = za(e),
                                    i
                            }
                            _compileMaterial(t) {
                                t = new qs(La[0],t),
                                    this._renderer.compile(t, Ea)
                            }
                            _sceneToCubeUV(t, e, i, n) {
                                const r = new ta(90,1,e,i);
                                var s = [1, -1, 1, 1, 1, 1]
                                    , a = [1, 1, 1, -1, -1, -1];
                                const o = this._renderer;
                                var h = o.autoClear;
                                e = o.toneMapping;
                                o.getClearColor(Na),
                                    o.toneMapping = kt,
                                    o.autoClear = !1;
                                const l = new os({
                                    name: "PMREM.Background",
                                    side: J,
                                    depthWrite: !1,
                                    depthTest: !1
                                })
                                    , u = new qs(new Zs,l);
                                let c = !1;
                                (i = t.background) ? i.isColor && (l.color.copy(i),
                                    t.background = null,
                                    c = !0) : (l.color.copy(Na),
                                    c = !0);
                                for (let e = 0; e < 6; e++) {
                                    var d = e % 3;
                                    0 == d ? (r.up.set(0, s[e], 0),
                                        r.lookAt(a[e], 0, 0)) : 1 == d ? (r.up.set(0, 0, s[e]),
                                        r.lookAt(0, a[e], 0)) : (r.up.set(0, s[e], 0),
                                        r.lookAt(0, 0, a[e])),
                                        Fa(n, d * Ca, 2 < e ? Ca : 0, Ca, Ca),
                                        o.setRenderTarget(n),
                                    c && o.render(u, r),
                                        o.render(t, r)
                                }
                                u.geometry.dispose(),
                                    u.material.dispose(),
                                    o.toneMapping = e,
                                    o.autoClear = h,
                                    t.background = i
                            }
                            _setEncoding(t, e) {
                                !0 === this._renderer.capabilities.isWebGL2 && e.format === _e && e.type === re && e.encoding === Li ? t.value = Pa[Ei] : t.value = Pa[e.encoding]
                            }
                            _textureToCubeUV(t, e) {
                                const i = this._renderer;
                                var n = t.mapping === Bt || t.mapping === Vt;
                                n ? null == this._cubemapShader && (this._cubemapShader = Va()) : null == this._equirectShader && (this._equirectShader = Ba());
                                var r = n ? this._cubemapShader : this._equirectShader
                                    , s = new qs(La[0],r);
                                const a = r.uniforms;
                                a.envMap.value = t,
                                n || a.texelSize.value.set(1 / t.image.width, 1 / t.image.height),
                                    this._setEncoding(a.inputEncoding, t),
                                    Fa(e, 0, 0, 3 * Ca, 2 * Ca),
                                    i.setRenderTarget(e),
                                    i.render(s, Ea)
                            }
                            _applyPMREM(t) {
                                const e = this._renderer;
                                var i = e.autoClear;
                                e.autoClear = !1;
                                for (let e = 1; e < Ta; e++) {
                                    var n = Math.sqrt(ka[e] * ka[e] - ka[e - 1] * ka[e - 1])
                                        , r = Da[(e - 1) % Da.length];
                                    this._blur(t, e - 1, e, n, r)
                                }
                                e.autoClear = i
                            }
                            _blur(t, e, i, n, r) {
                                var s = this._pingPongRenderTarget;
                                this._halfBlur(t, s, e, i, n, "latitudinal", r),
                                    this._halfBlur(s, t, i, i, n, "longitudinal", r)
                            }
                            _halfBlur(t, e, i, n, r, s, a) {
                                const o = this._renderer;
                                var h = this._blurMaterial
                                    , l = new qs(La[n],h);
                                const u = h.uniforms;
                                h = Ia[i] - 1;
                                var c = r / (h = isFinite(r) ? Math.PI / (2 * h) : 2 * Math.PI / 39)
                                    , d = isFinite(r) ? 1 + Math.floor(3 * c) : 20;
                                const p = [];
                                let f = 0;
                                for (let t = 0; t < 20; ++t) {
                                    const e = t / c;
                                    var m = Math.exp(-e * e / 2);
                                    p.push(m),
                                        0 == t ? f += m : t < d && (f += 2 * m)
                                }
                                for (let t = 0; t < p.length; t++)
                                    p[t] = p[t] / f;
                                u.envMap.value = t.texture,
                                    u.samples.value = d,
                                    u.weights.value = p,
                                    u.latitudinal.value = "latitudinal" === s,
                                a && (u.poleAxis.value = a),
                                    u.dTheta.value = h,
                                    u.mipInt.value = 8 - i,
                                    i = Ia[n];
                                Fa(e, 3 * Math.max(0, Ca - 2 * i), n = (0 === n ? 0 : 2 * Ca) + 2 * i * (4 < n ? n - 8 + 4 : 0), 3 * i, 2 * i),
                                    o.setRenderTarget(e),
                                    o.render(l, Ea)
                            }
                        }
                        function za(t) {
                            const e = new On(3 * Ca,3 * Ca,t);
                            return e.texture.mapping = Wt,
                                e.texture.name = "PMREM.cubeUv",
                                e.scissorTest = !0,
                                e
                        }
                        function Fa(t, e, i, n, r) {
                            t.viewport.set(e, i, n, r),
                                t.scissor.set(e, i, n, r)
                        }
                        function Ba() {
                            var t = new wn(1,1);
                            return new Ma({
                                name: "EquirectangularToCubeUV",
                                uniforms: {
                                    envMap: {
                                        value: null
                                    },
                                    texelSize: {
                                        value: t
                                    },
                                    inputEncoding: {
                                        value: Pa[Ei]
                                    }
                                },
                                vertexShader: Ua(),
                                fragmentShader: `\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t${Ga()}\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t}\n\t\t`,
                                blending: $,
                                depthTest: !1,
                                depthWrite: !1
                            })
                        }
                        function Va() {
                            return new Ma({
                                name: "CubemapToCubeUV",
                                uniforms: {
                                    envMap: {
                                        value: null
                                    },
                                    inputEncoding: {
                                        value: Pa[Ei]
                                    }
                                },
                                vertexShader: Ua(),
                                fragmentShader: `\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t${Ga()}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) );\n\n\t\t\t}\n\t\t`,
                                blending: $,
                                depthTest: !1,
                                depthWrite: !1
                            })
                        }
                        function Ua() {
                            return "\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t"
                        }
                        function Ga() {
                            return "\n\n\t\tuniform int inputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t"
                        }
                        function Wa(t) {
                            let e = new WeakMap
                                , i = null;
                            function n(t) {
                                const i = t.target;
                                i.removeEventListener("dispose", n);
                                const r = e.get(i);
                                void 0 !== r && (e.delete(i),
                                    r.dispose())
                            }
                            return {
                                get: function(r) {
                                    if (r && r.isTexture && !1 === r.isRenderTargetTexture) {
                                        var s = r.mapping
                                            , a = s === Ut || s === Gt
                                            , o = s === Bt || s === Vt;
                                        if (a || o)
                                            return e.has(r) ? e.get(r).texture : (s = r.image,
                                                a && s && 0 < s.height || o && s && function(t) {
                                                    let e = 0;
                                                    for (let i = 0; i < 6; i++)
                                                        void 0 !== t[i] && e++;
                                                    return 6 === e
                                                }(s) ? (s = t.getRenderTarget(),
                                                null === i && (i = new Ra(t)),
                                                    a = a ? i.fromEquirectangular(r) : i.fromCubemap(r),
                                                    e.set(r, a),
                                                    t.setRenderTarget(s),
                                                    r.addEventListener("dispose", n),
                                                    a.texture) : null)
                                    }
                                    return r
                                },
                                dispose: function() {
                                    e = new WeakMap,
                                    null !== i && (i.dispose(),
                                        i = null)
                                }
                            }
                        }
                        function ja(t) {
                            const e = {};
                            function i(i) {
                                if (void 0 !== e[i])
                                    return e[i];
                                let n;
                                switch (i) {
                                    case "WEBGL_depth_texture":
                                        n = t.getExtension("WEBGL_depth_texture") || t.getExtension("MOZ_WEBGL_depth_texture") || t.getExtension("WEBKIT_WEBGL_depth_texture");
                                        break;
                                    case "EXT_texture_filter_anisotropic":
                                        n = t.getExtension("EXT_texture_filter_anisotropic") || t.getExtension("MOZ_EXT_texture_filter_anisotropic") || t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                                        break;
                                    case "WEBGL_compressed_texture_s3tc":
                                        n = t.getExtension("WEBGL_compressed_texture_s3tc") || t.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                                        break;
                                    case "WEBGL_compressed_texture_pvrtc":
                                        n = t.getExtension("WEBGL_compressed_texture_pvrtc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                                        break;
                                    default:
                                        n = t.getExtension(i)
                                }
                                return e[i] = n,
                                    n
                            }
                            return {
                                has: function(t) {
                                    return null !== i(t)
                                },
                                init: function(t) {
                                    t.isWebGL2 ? i("EXT_color_buffer_float") : (i("WEBGL_depth_texture"),
                                        i("OES_texture_float"),
                                        i("OES_texture_half_float"),
                                        i("OES_texture_half_float_linear"),
                                        i("OES_standard_derivatives"),
                                        i("OES_element_index_uint"),
                                        i("OES_vertex_array_object"),
                                        i("ANGLE_instanced_arrays")),
                                        i("OES_texture_float_linear"),
                                        i("EXT_color_buffer_half_float"),
                                        i("WEBGL_multisampled_render_to_texture")
                                },
                                get: function(t) {
                                    return t = i(t)
                                }
                            }
                        }
                        function Ha(t, e, i, n) {
                            const r = {}
                                , s = new WeakMap;
                            function a(t) {
                                const o = t.target;
                                null !== o.index && e.remove(o.index);
                                for (const t in o.attributes)
                                    e.remove(o.attributes[t]);
                                o.removeEventListener("dispose", a),
                                    delete r[o.id],
                                (t = s.get(o)) && (e.remove(t),
                                    s.delete(o)),
                                    n.releaseStatesOfGeometry(o),
                                !0 === o.isInstancedBufferGeometry && delete o._maxInstanceCount,
                                    i.memory.geometries--
                            }
                            return {
                                get: function(t, e) {
                                    return !0 === r[e.id] || (e.addEventListener("dispose", a),
                                        r[e.id] = !0,
                                        i.memory.geometries++),
                                        e
                                },
                                update: function(t) {
                                    var i = t.attributes;
                                    for (const t in i)
                                        e.update(i[t], 34962);
                                    var n = t.morphAttributes;
                                    for (const t in n) {
                                        var r = n[t];
                                        for (let t = 0, i = r.length; t < i; t++)
                                            e.update(r[t], 34962)
                                    }
                                },
                                getWireframeAttribute: function(t) {
                                    var i, n = s.get(t);
                                    return (!n || null !== (i = t.index) && n.version < i.version) && function(t) {
                                        const i = [];
                                        var n = t.index
                                            , r = t.attributes.position;
                                        let a = 0;
                                        if (null !== n) {
                                            var o = n.array;
                                            a = n.version;
                                            for (let t = 0, e = o.length; t < e; t += 3) {
                                                var h = o[t + 0]
                                                    , l = o[t + 1]
                                                    , u = o[t + 2];
                                                i.push(h, l, l, u, u, h)
                                            }
                                        } else {
                                            var c = r.array;
                                            a = r.version;
                                            for (let t = 0, e = c.length / 3 - 1; t < e; t += 3) {
                                                var d = t + 0
                                                    , p = t + 1
                                                    , f = t + 2;
                                                i.push(d, p, p, f, f, d)
                                            }
                                        }
                                        const m = new (65535 < Mn(i) ? vs : ms)(i,1);
                                        m.version = a,
                                        (c = s.get(t)) && e.remove(c),
                                            s.set(t, m)
                                    }(t),
                                        s.get(t)
                                }
                            }
                        }
                        function qa(t, e, i, n) {
                            const r = n.isWebGL2;
                            let s, a, o;
                            this.setMode = function(t) {
                                s = t
                            }
                                ,
                                this.setIndex = function(t) {
                                    a = t.type,
                                        o = t.bytesPerElement
                                }
                                ,
                                this.render = function(e, n) {
                                    t.drawElements(s, n, a, e * o),
                                        i.update(n, s, 1)
                                }
                                ,
                                this.renderInstances = function(n, h, l) {
                                    if (0 !== l) {
                                        let u, c;
                                        if (r)
                                            u = t,
                                                c = "drawElementsInstanced";
                                        else if (u = e.get("ANGLE_instanced_arrays"),
                                            c = "drawElementsInstancedANGLE",
                                        null === u)
                                            return;
                                        u[c](s, h, a, n * o, l),
                                            i.update(h, s, l)
                                    }
                                }
                        }
                        function Xa(t) {
                            const e = {
                                frame: 0,
                                calls: 0,
                                triangles: 0,
                                points: 0,
                                lines: 0
                            };
                            return {
                                memory: {
                                    geometries: 0,
                                    textures: 0
                                },
                                render: e,
                                programs: null,
                                autoReset: !0,
                                reset: function() {
                                    e.frame++,
                                        e.calls = 0,
                                        e.triangles = 0,
                                        e.points = 0,
                                        e.lines = 0
                                },
                                update: function(t, i, n) {
                                    switch (e.calls++,
                                        i) {
                                        case 4:
                                            e.triangles += n * (t / 3);
                                            break;
                                        case 1:
                                            e.lines += n * (t / 2);
                                            break;
                                        case 3:
                                            e.lines += n * (t - 1);
                                            break;
                                        case 2:
                                            e.lines += n * t;
                                            break;
                                        case 0:
                                            e.points += n * t
                                    }
                                }
                            }
                        }
                        class Za extends In {
                            constructor(t=null, e=1, i=1, n=1) {
                                super(null),
                                    this.image = {
                                        data: t,
                                        width: e,
                                        height: i,
                                        depth: n
                                    },
                                    this.magFilter = Zt,
                                    this.minFilter = Zt,
                                    this.wrapR = qt,
                                    this.generateMipmaps = !1,
                                    this.flipY = !1,
                                    this.unpackAlignment = 1
                            }
                        }
                        function Ja(t, e) {
                            return t[0] - e[0]
                        }
                        function Ya(t, e) {
                            return Math.abs(e[1]) - Math.abs(t[1])
                        }
                        function Qa(t, e) {
                            let i = 1;
                            (e = (e.isInterleavedBufferAttribute ? e.data : e).array)instanceof Int8Array ? i = 127 : e instanceof Int16Array ? i = 32767 : e instanceof Int32Array && (i = 2147483647),
                                t.divideScalar(i)
                        }
                        function Ka(t, e, i) {
                            const n = {}
                                , r = new Float32Array(8)
                                , s = new WeakMap
                                , a = new Fn
                                , o = [];
                            for (let t = 0; t < 8; t++)
                                o[t] = [t, 0];
                            return {
                                update: function(h, l, u, c) {
                                    var d = h.morphTargetInfluences;
                                    if (!0 === e.isWebGL2) {
                                        var p = l.morphAttributes.position.length;
                                        let n = s.get(l);
                                        if (void 0 === n || n.count !== p) {
                                            void 0 !== n && n.texture.dispose();
                                            var f = void 0 !== l.morphAttributes.normal
                                                , m = l.morphAttributes.position
                                                , g = l.morphAttributes.normal || []
                                                , v = 1 == f ? 2 : 1;
                                            let t = l.attributes.position.count * v
                                                , i = 1;
                                            t > e.maxTextureSize && (i = Math.ceil(t / e.maxTextureSize),
                                                t = e.maxTextureSize);
                                            const r = new Float32Array(t * i * 4 * p)
                                                , o = new Za(r,t,i,p);
                                            o.format = _e,
                                                o.type = ue,
                                                o.needsUpdate = !0;
                                            var _ = 4 * v;
                                            for (let e = 0; e < p; e++) {
                                                var y = m[e]
                                                    , x = g[e]
                                                    , b = t * i * 4 * e;
                                                for (let t = 0; t < y.count; t++) {
                                                    a.fromBufferAttribute(y, t),
                                                    !0 === y.normalized && Qa(a, y);
                                                    var w = t * _;
                                                    r[b + w] = a.x,
                                                        r[b + w + 1] = a.y,
                                                        r[b + w + 2] = a.z,
                                                    !(r[b + w + 3] = 0) == f && (a.fromBufferAttribute(x, t),
                                                    !0 === x.normalized && Qa(a, x),
                                                        r[b + w + 4] = a.x,
                                                        r[b + w + 5] = a.y,
                                                        r[b + w + 6] = a.z,
                                                        r[b + w + 7] = 0)
                                                }
                                            }
                                            n = {
                                                count: p,
                                                texture: o,
                                                size: new wn(t,i)
                                            },
                                                s.set(l, n)
                                        }
                                        let r = 0;
                                        for (let t = 0; t < d.length; t++)
                                            r += d[t];
                                        v = l.morphTargetsRelative ? 1 : 1 - r,
                                            c.getUniforms().setValue(t, "morphTargetBaseInfluence", v),
                                            c.getUniforms().setValue(t, "morphTargetInfluences", d),
                                            c.getUniforms().setValue(t, "morphTargetsTexture", n.texture, i),
                                            c.getUniforms().setValue(t, "morphTargetsTextureSize", n.size)
                                    } else {
                                        var S = void 0 === d ? 0 : d.length;
                                        let e = n[l.id];
                                        if (void 0 === e || e.length !== S) {
                                            e = [];
                                            for (let t = 0; t < S; t++)
                                                e[t] = [t, 0];
                                            n[l.id] = e
                                        }
                                        for (let t = 0; t < S; t++) {
                                            const i = e[t];
                                            i[0] = t,
                                                i[1] = d[t]
                                        }
                                        e.sort(Ya);
                                        for (let t = 0; t < 8; t++)
                                            t < S && e[t][1] ? (o[t][0] = e[t][0],
                                                o[t][1] = e[t][1]) : (o[t][0] = Number.MAX_SAFE_INTEGER,
                                                o[t][1] = 0);
                                        o.sort(Ja);
                                        var M = l.morphAttributes.position
                                            , C = l.morphAttributes.normal;
                                        let i = 0;
                                        for (let t = 0; t < 8; t++) {
                                            var A = o[t]
                                                , T = A[0];
                                            A = A[1];
                                            T !== Number.MAX_SAFE_INTEGER && A ? (M && l.getAttribute("morphTarget" + t) !== M[T] && l.setAttribute("morphTarget" + t, M[T]),
                                            C && l.getAttribute("morphNormal" + t) !== C[T] && l.setAttribute("morphNormal" + t, C[T]),
                                                r[t] = A,
                                                i += A) : (M && !0 === l.hasAttribute("morphTarget" + t) && l.deleteAttribute("morphTarget" + t),
                                            C && !0 === l.hasAttribute("morphNormal" + t) && l.deleteAttribute("morphNormal" + t),
                                                r[t] = 0)
                                        }
                                        v = l.morphTargetsRelative ? 1 : 1 - i,
                                            c.getUniforms().setValue(t, "morphTargetBaseInfluence", v),
                                            c.getUniforms().setValue(t, "morphTargetInfluences", r)
                                    }
                                }
                            }
                        }
                        function $a(t, e, i, n) {
                            let r = new WeakMap;
                            function s(t) {
                                const e = t.target;
                                e.removeEventListener("dispose", s),
                                    i.remove(e.instanceMatrix),
                                null !== e.instanceColor && i.remove(e.instanceColor)
                            }
                            return {
                                update: function(t) {
                                    var a = n.render.frame
                                        , o = t.geometry;
                                    o = e.get(t, o);
                                    return r.get(o) !== a && (e.update(o),
                                        r.set(o, a)),
                                    t.isInstancedMesh && (!1 === t.hasEventListener("dispose", s) && t.addEventListener("dispose", s),
                                        i.update(t.instanceMatrix, 34962),
                                    null !== t.instanceColor && i.update(t.instanceColor, 34962)),
                                        o
                                },
                                dispose: function() {
                                    r = new WeakMap
                                }
                            }
                        }
                        Za.prototype.isDataTexture2DArray = !0;
                        class to extends In {
                            constructor(t=null, e=1, i=1, n=1) {
                                super(null),
                                    this.image = {
                                        data: t,
                                        width: e,
                                        height: i,
                                        depth: n
                                    },
                                    this.magFilter = Zt,
                                    this.minFilter = Zt,
                                    this.wrapR = qt,
                                    this.generateMipmaps = !1,
                                    this.flipY = !1,
                                    this.unpackAlignment = 1
                            }
                        }
                        to.prototype.isDataTexture3D = !0;
                        const eo = new In
                            , io = new Za
                            , no = new to
                            , ro = new ia
                            , so = []
                            , ao = []
                            , oo = new Float32Array(16)
                            , ho = new Float32Array(9)
                            , lo = new Float32Array(4);
                        function uo(t, e, i) {
                            const n = t[0];
                            if (n <= 0 || 0 < n)
                                return t;
                            var r = e * i;
                            let s = so[r];
                            if (void 0 === s && (s = new Float32Array(r),
                                so[r] = s),
                            0 !== e) {
                                n.toArray(s, 0);
                                for (let n = 1, r = 0; n !== e; ++n)
                                    r += i,
                                        t[n].toArray(s, r)
                            }
                            return s
                        }
                        function co(t, e) {
                            if (t.length === e.length) {
                                for (let i = 0, n = t.length; i < n; i++)
                                    if (t[i] !== e[i])
                                        return;
                                return 1
                            }
                        }
                        function po(t, e) {
                            for (let i = 0, n = e.length; i < n; i++)
                                t[i] = e[i]
                        }
                        function fo(t, e) {
                            let i = ao[e];
                            void 0 === i && (i = new Int32Array(e),
                                ao[e] = i);
                            for (let n = 0; n !== e; ++n)
                                i[n] = t.allocateTextureUnit();
                            return i
                        }
                        function mo(t, e) {
                            const i = this.cache;
                            i[0] !== e && (t.uniform1f(this.addr, e),
                                i[0] = e)
                        }
                        function go(t, e) {
                            const i = this.cache;
                            void 0 !== e.x ? i[0] === e.x && i[1] === e.y || (t.uniform2f(this.addr, e.x, e.y),
                                i[0] = e.x,
                                i[1] = e.y) : co(i, e) || (t.uniform2fv(this.addr, e),
                                po(i, e))
                        }
                        function vo(t, e) {
                            const i = this.cache;
                            void 0 !== e.x ? i[0] === e.x && i[1] === e.y && i[2] === e.z || (t.uniform3f(this.addr, e.x, e.y, e.z),
                                i[0] = e.x,
                                i[1] = e.y,
                                i[2] = e.z) : void 0 !== e.r ? i[0] === e.r && i[1] === e.g && i[2] === e.b || (t.uniform3f(this.addr, e.r, e.g, e.b),
                                i[0] = e.r,
                                i[1] = e.g,
                                i[2] = e.b) : co(i, e) || (t.uniform3fv(this.addr, e),
                                po(i, e))
                        }
                        function _o(t, e) {
                            const i = this.cache;
                            void 0 !== e.x ? i[0] === e.x && i[1] === e.y && i[2] === e.z && i[3] === e.w || (t.uniform4f(this.addr, e.x, e.y, e.z, e.w),
                                i[0] = e.x,
                                i[1] = e.y,
                                i[2] = e.z,
                                i[3] = e.w) : co(i, e) || (t.uniform4fv(this.addr, e),
                                po(i, e))
                        }
                        function yo(t, e) {
                            var i = this.cache
                                , n = e.elements;
                            void 0 === n ? co(i, e) || (t.uniformMatrix2fv(this.addr, !1, e),
                                po(i, e)) : co(i, n) || (lo.set(n),
                                t.uniformMatrix2fv(this.addr, !1, lo),
                                po(i, n))
                        }
                        function xo(t, e) {
                            var i = this.cache
                                , n = e.elements;
                            void 0 === n ? co(i, e) || (t.uniformMatrix3fv(this.addr, !1, e),
                                po(i, e)) : co(i, n) || (ho.set(n),
                                t.uniformMatrix3fv(this.addr, !1, ho),
                                po(i, n))
                        }
                        function bo(t, e) {
                            var i = this.cache
                                , n = e.elements;
                            void 0 === n ? co(i, e) || (t.uniformMatrix4fv(this.addr, !1, e),
                                po(i, e)) : co(i, n) || (oo.set(n),
                                t.uniformMatrix4fv(this.addr, !1, oo),
                                po(i, n))
                        }
                        function wo(t, e) {
                            const i = this.cache;
                            i[0] !== e && (t.uniform1i(this.addr, e),
                                i[0] = e)
                        }
                        function So(t, e) {
                            var i = this.cache;
                            co(i, e) || (t.uniform2iv(this.addr, e),
                                po(i, e))
                        }
                        function Mo(t, e) {
                            var i = this.cache;
                            co(i, e) || (t.uniform3iv(this.addr, e),
                                po(i, e))
                        }
                        function Co(t, e) {
                            var i = this.cache;
                            co(i, e) || (t.uniform4iv(this.addr, e),
                                po(i, e))
                        }
                        function Ao(t, e) {
                            const i = this.cache;
                            i[0] !== e && (t.uniform1ui(this.addr, e),
                                i[0] = e)
                        }
                        function To(t, e) {
                            var i = this.cache;
                            co(i, e) || (t.uniform2uiv(this.addr, e),
                                po(i, e))
                        }
                        function Po(t, e) {
                            var i = this.cache;
                            co(i, e) || (t.uniform3uiv(this.addr, e),
                                po(i, e))
                        }
                        function Eo(t, e) {
                            var i = this.cache;
                            co(i, e) || (t.uniform4uiv(this.addr, e),
                                po(i, e))
                        }
                        function Lo(t, e, i) {
                            const n = this.cache;
                            var r = i.allocateTextureUnit();
                            n[0] !== r && (t.uniform1i(this.addr, r),
                                n[0] = r),
                                i.safeSetTexture2D(e || eo, r)
                        }
                        function Io(t, e, i) {
                            const n = this.cache;
                            var r = i.allocateTextureUnit();
                            n[0] !== r && (t.uniform1i(this.addr, r),
                                n[0] = r),
                                i.setTexture3D(e || no, r)
                        }
                        function ko(t, e, i) {
                            const n = this.cache;
                            var r = i.allocateTextureUnit();
                            n[0] !== r && (t.uniform1i(this.addr, r),
                                n[0] = r),
                                i.safeSetTextureCube(e || ro, r)
                        }
                        function No(t, e, i) {
                            const n = this.cache;
                            var r = i.allocateTextureUnit();
                            n[0] !== r && (t.uniform1i(this.addr, r),
                                n[0] = r),
                                i.setTexture2DArray(e || io, r)
                        }
                        function Oo(t, e) {
                            t.uniform1fv(this.addr, e)
                        }
                        function Do(t, e) {
                            e = uo(e, this.size, 2),
                                t.uniform2fv(this.addr, e)
                        }
                        function Ro(t, e) {
                            e = uo(e, this.size, 3),
                                t.uniform3fv(this.addr, e)
                        }
                        function zo(t, e) {
                            e = uo(e, this.size, 4),
                                t.uniform4fv(this.addr, e)
                        }
                        function Fo(t, e) {
                            e = uo(e, this.size, 4),
                                t.uniformMatrix2fv(this.addr, !1, e)
                        }
                        function Bo(t, e) {
                            e = uo(e, this.size, 9),
                                t.uniformMatrix3fv(this.addr, !1, e)
                        }
                        function Vo(t, e) {
                            e = uo(e, this.size, 16),
                                t.uniformMatrix4fv(this.addr, !1, e)
                        }
                        function Uo(t, e) {
                            t.uniform1iv(this.addr, e)
                        }
                        function Go(t, e) {
                            t.uniform2iv(this.addr, e)
                        }
                        function Wo(t, e) {
                            t.uniform3iv(this.addr, e)
                        }
                        function jo(t, e) {
                            t.uniform4iv(this.addr, e)
                        }
                        function Ho(t, e) {
                            t.uniform1uiv(this.addr, e)
                        }
                        function qo(t, e) {
                            t.uniform2uiv(this.addr, e)
                        }
                        function Xo(t, e) {
                            t.uniform3uiv(this.addr, e)
                        }
                        function Zo(t, e) {
                            t.uniform4uiv(this.addr, e)
                        }
                        function Jo(t, e, i) {
                            var n = e.length
                                , r = fo(i, n);
                            t.uniform1iv(this.addr, r);
                            for (let t = 0; t !== n; ++t)
                                i.safeSetTexture2D(e[t] || eo, r[t])
                        }
                        function Yo(t, e, i) {
                            var n = e.length
                                , r = fo(i, n);
                            t.uniform1iv(this.addr, r);
                            for (let t = 0; t !== n; ++t)
                                i.setTexture3D(e[t] || no, r[t])
                        }
                        function Qo(t, e, i) {
                            var n = e.length
                                , r = fo(i, n);
                            t.uniform1iv(this.addr, r);
                            for (let t = 0; t !== n; ++t)
                                i.safeSetTextureCube(e[t] || ro, r[t])
                        }
                        function Ko(t, e, i) {
                            var n = e.length
                                , r = fo(i, n);
                            t.uniform1iv(this.addr, r);
                            for (let t = 0; t !== n; ++t)
                                i.setTexture2DArray(e[t] || io, r[t])
                        }
                        function $o(t, e, i) {
                            this.id = t,
                                this.addr = i,
                                this.cache = [],
                                this.setValue = function(t) {
                                    switch (t) {
                                        case 5126:
                                            return mo;
                                        case 35664:
                                            return go;
                                        case 35665:
                                            return vo;
                                        case 35666:
                                            return _o;
                                        case 35674:
                                            return yo;
                                        case 35675:
                                            return xo;
                                        case 35676:
                                            return bo;
                                        case 5124:
                                        case 35670:
                                            return wo;
                                        case 35667:
                                        case 35671:
                                            return So;
                                        case 35668:
                                        case 35672:
                                            return Mo;
                                        case 35669:
                                        case 35673:
                                            return Co;
                                        case 5125:
                                            return Ao;
                                        case 36294:
                                            return To;
                                        case 36295:
                                            return Po;
                                        case 36296:
                                            return Eo;
                                        case 35678:
                                        case 36198:
                                        case 36298:
                                        case 36306:
                                        case 35682:
                                            return Lo;
                                        case 35679:
                                        case 36299:
                                        case 36307:
                                            return Io;
                                        case 35680:
                                        case 36300:
                                        case 36308:
                                        case 36293:
                                            return ko;
                                        case 36289:
                                        case 36303:
                                        case 36311:
                                        case 36292:
                                            return No
                                    }
                                }(e.type)
                        }
                        function th(t, e, i) {
                            this.id = t,
                                this.addr = i,
                                this.cache = [],
                                this.size = e.size,
                                this.setValue = function(t) {
                                    switch (t) {
                                        case 5126:
                                            return Oo;
                                        case 35664:
                                            return Do;
                                        case 35665:
                                            return Ro;
                                        case 35666:
                                            return zo;
                                        case 35674:
                                            return Fo;
                                        case 35675:
                                            return Bo;
                                        case 35676:
                                            return Vo;
                                        case 5124:
                                        case 35670:
                                            return Uo;
                                        case 35667:
                                        case 35671:
                                            return Go;
                                        case 35668:
                                        case 35672:
                                            return Wo;
                                        case 35669:
                                        case 35673:
                                            return jo;
                                        case 5125:
                                            return Ho;
                                        case 36294:
                                            return qo;
                                        case 36295:
                                            return Xo;
                                        case 36296:
                                            return Zo;
                                        case 35678:
                                        case 36198:
                                        case 36298:
                                        case 36306:
                                        case 35682:
                                            return Jo;
                                        case 35679:
                                        case 36299:
                                        case 36307:
                                            return Yo;
                                        case 35680:
                                        case 36300:
                                        case 36308:
                                        case 36293:
                                            return Qo;
                                        case 36289:
                                        case 36303:
                                        case 36311:
                                        case 36292:
                                            return Ko
                                    }
                                }(e.type)
                        }
                        function eh(t) {
                            this.id = t,
                                this.seq = [],
                                this.map = {}
                        }
                        th.prototype.updateCache = function(t) {
                            var e = this.cache;
                            t instanceof Float32Array && e.length !== t.length && (this.cache = new Float32Array(t.length)),
                                po(e, t)
                        }
                            ,
                            eh.prototype.setValue = function(t, e, i) {
                                var n = this.seq;
                                for (let r = 0, s = n.length; r !== s; ++r) {
                                    const s = n[r];
                                    s.setValue(t, e[s.id], i)
                                }
                            }
                        ;
                        const ih = /(\w+)(\])?(\[|\.)?/g;
                        function nh(t, e) {
                            t.seq.push(e),
                                t.map[e.id] = e
                        }
                        function rh(t, e) {
                            this.seq = [],
                                this.map = {};
                            var i = t.getProgramParameter(e, 35718);
                            for (let r = 0; r < i; ++r) {
                                var n = t.getActiveUniform(e, r);
                                !function(t, e, i) {
                                    var n = t.name
                                        , r = n.length;
                                    for (ih.lastIndex = 0; ; ) {
                                        var s = ih.exec(n)
                                            , a = ih.lastIndex;
                                        let h = s[1];
                                        var o = "]" === s[2];
                                        s = s[3];
                                        if (o && (h |= 0),
                                        void 0 === s || "[" === s && a + 2 === r) {
                                            nh(i, new (void 0 === s ? $o : th)(h,t,e));
                                            break
                                        }
                                        {
                                            let t = i.map[h];
                                            void 0 === t && (t = new eh(h),
                                                nh(i, t)),
                                                i = t
                                        }
                                    }
                                }(n, t.getUniformLocation(e, n.name), this)
                            }
                        }
                        function sh(t, e, i) {
                            return e = t.createShader(e),
                                t.shaderSource(e, i),
                                t.compileShader(e),
                                e
                        }
                        rh.prototype.setValue = function(t, e, i, n) {
                            const r = this.map[e];
                            void 0 !== r && r.setValue(t, i, n)
                        }
                            ,
                            rh.prototype.setOptional = function(t, e, i) {
                                void 0 !== (e = e[i]) && this.setValue(t, i, e)
                            }
                            ,
                            rh.upload = function(t, e, i, n) {
                                for (let r = 0, s = e.length; r !== s; ++r) {
                                    const s = e[r]
                                        , a = i[s.id];
                                    !1 !== a.needsUpdate && s.setValue(t, a.value, n)
                                }
                            }
                            ,
                            rh.seqWithValue = function(t, e) {
                                const i = [];
                                for (let r = 0, s = t.length; r !== s; ++r) {
                                    var n = t[r];
                                    n.id in e && i.push(n)
                                }
                                return i
                            }
                        ;
                        let ah = 0;
                        function oh(t) {
                            switch (t) {
                                case Ei:
                                    return ["Linear", "( value )"];
                                case Li:
                                    return ["sRGB", "( value )"];
                                default:
                                    return ["Linear", "( value )"]
                            }
                        }
                        function hh(t, e, i) {
                            var n = t.getShaderParameter(e, 35713)
                                , r = t.getShaderInfoLog(e).trim();
                            return n && "" === r ? "" : i.toUpperCase() + "\n\n" + r + "\n\n" + function(t) {
                                const e = t.split("\n");
                                for (let t = 0; t < e.length; t++)
                                    e[t] = t + 1 + ": " + e[t];
                                return e.join("\n")
                            }(t.getShaderSource(e))
                        }
                        function lh(t, e) {
                            return "vec4 " + t + "( vec4 value ) { return " + (e = oh(e))[0] + "ToLinear" + e[1] + "; }"
                        }
                        function uh(t) {
                            return "" !== t
                        }
                        function ch(t, e) {
                            return t.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows)
                        }
                        function dh(t, e) {
                            return t.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection)
                        }
                        const ph = /^[ \t]*#include +<([\w\d./]+)>/gm;
                        function fh(t) {
                            return t.replace(ph, mh)
                        }
                        function mh(t, e) {
                            var i = fa[e];
                            if (void 0 === i)
                                throw new Error("Can not resolve #include <" + e + ">");
                            return fh(i)
                        }
                        const gh = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g
                            , vh = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
                        function _h(t) {
                            return t.replace(vh, xh).replace(gh, yh)
                        }
                        function yh(t, e, i, n) {
                            return xh(0, e, i, n)
                        }
                        function xh(t, e, i, n) {
                            let r = "";
                            for (let t = parseInt(e); t < parseInt(i); t++)
                                r += n.replace(/\[\s*i\s*\]/g, "[ " + t + " ]").replace(/UNROLLED_LOOP_INDEX/g, t);
                            return r
                        }
                        function bh(t) {
                            let e = "precision " + t.precision + " float;\nprecision " + t.precision + " int;";
                            return "highp" === t.precision ? e += "\n#define HIGH_PRECISION" : "mediump" === t.precision ? e += "\n#define MEDIUM_PRECISION" : "lowp" === t.precision && (e += "\n#define LOW_PRECISION"),
                                e
                        }
                        function wh(t, e, i, n) {
                            const r = t.getContext();
                            var s = i.defines
                                , a = i.vertexShader
                                , o = i.fragmentShader
                                , h = function(t) {
                                let e = "SHADOWMAP_TYPE_BASIC";
                                return t.shadowMapType === H ? e = "SHADOWMAP_TYPE_PCF" : t.shadowMapType === q ? e = "SHADOWMAP_TYPE_PCF_SOFT" : t.shadowMapType === X && (e = "SHADOWMAP_TYPE_VSM"),
                                    e
                            }(i)
                                , l = function(t) {
                                let e = "ENVMAP_TYPE_CUBE";
                                if (t.envMap)
                                    switch (t.envMapMode) {
                                        case Bt:
                                        case Vt:
                                            e = "ENVMAP_TYPE_CUBE";
                                            break;
                                        case Wt:
                                        case jt:
                                            e = "ENVMAP_TYPE_CUBE_UV"
                                    }
                                return e
                            }(i)
                                , u = function(t) {
                                let e = "ENVMAP_MODE_REFLECTION";
                                if (t.envMap)
                                    switch (t.envMapMode) {
                                        case Vt:
                                        case jt:
                                            e = "ENVMAP_MODE_REFRACTION"
                                    }
                                return e
                            }(i)
                                , c = function(t) {
                                let e = "ENVMAP_BLENDING_NONE";
                                if (t.envMap)
                                    switch (t.combine) {
                                        case Et:
                                            e = "ENVMAP_BLENDING_MULTIPLY";
                                            break;
                                        case Lt:
                                            e = "ENVMAP_BLENDING_MIX";
                                            break;
                                        case It:
                                            e = "ENVMAP_BLENDING_ADD"
                                    }
                                return e
                            }(i);
                            const d = i.isWebGL2 ? "" : function(t) {
                                return [t.extensionDerivatives || t.envMapCubeUV || t.bumpMap || t.tangentSpaceNormalMap || t.clearcoatNormalMap || t.flatShading || "physical" === t.shaderID ? "#extension GL_OES_standard_derivatives : enable" : "", (t.extensionFragDepth || t.logarithmicDepthBuffer) && t.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "", t.extensionDrawBuffers && t.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "", (t.extensionShaderTextureLOD || t.envMap || t.transmission) && t.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(uh).join("\n")
                            }(i)
                                , p = function(t) {
                                const e = [];
                                for (const n in t) {
                                    var i = t[n];
                                    !1 !== i && e.push("#define " + n + " " + i)
                                }
                                return e.join("\n")
                            }(s)
                                , f = r.createProgram();
                            let m, g, v = i.glslVersion ? "#version " + i.glslVersion + "\n" : "";
                            i.isRawShaderMaterial ? (m = [p].filter(uh).join("\n"),
                            0 < m.length && (m += "\n"),
                                g = [d, p].filter(uh).join("\n"),
                            0 < g.length && (g += "\n")) : (m = [bh(i), "#define SHADER_NAME " + i.shaderName, p, i.instancing ? "#define USE_INSTANCING" : "", i.instancingColor ? "#define USE_INSTANCING_COLOR" : "", i.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define MAX_BONES " + i.maxBones, i.useFog && i.fog ? "#define USE_FOG" : "", i.useFog && i.fogExp2 ? "#define FOG_EXP2" : "", i.map ? "#define USE_MAP" : "", i.envMap ? "#define USE_ENVMAP" : "", i.envMap ? "#define " + u : "", i.lightMap ? "#define USE_LIGHTMAP" : "", i.aoMap ? "#define USE_AOMAP" : "", i.emissiveMap ? "#define USE_EMISSIVEMAP" : "", i.bumpMap ? "#define USE_BUMPMAP" : "", i.normalMap ? "#define USE_NORMALMAP" : "", i.normalMap && i.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", i.normalMap && i.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", i.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", i.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", i.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", i.displacementMap && i.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", i.specularMap ? "#define USE_SPECULARMAP" : "", i.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "", i.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "", i.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", i.metalnessMap ? "#define USE_METALNESSMAP" : "", i.alphaMap ? "#define USE_ALPHAMAP" : "", i.transmission ? "#define USE_TRANSMISSION" : "", i.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", i.thicknessMap ? "#define USE_THICKNESSMAP" : "", i.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "", i.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "", i.vertexTangents ? "#define USE_TANGENT" : "", i.vertexColors ? "#define USE_COLOR" : "", i.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", i.vertexUvs ? "#define USE_UV" : "", i.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", i.flatShading ? "#define FLAT_SHADED" : "", i.skinning ? "#define USE_SKINNING" : "", i.useVertexTexture ? "#define BONE_TEXTURE" : "", i.morphTargets ? "#define USE_MORPHTARGETS" : "", i.morphNormals && !1 === i.flatShading ? "#define USE_MORPHNORMALS" : "", i.morphTargets && i.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "", i.morphTargets && i.isWebGL2 ? "#define MORPHTARGETS_COUNT " + i.morphTargetsCount : "", i.doubleSided ? "#define DOUBLE_SIDED" : "", i.flipSided ? "#define FLIP_SIDED" : "", i.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", i.shadowMapEnabled ? "#define " + h : "", i.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", i.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", i.logarithmicDepthBuffer && i.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", "#ifdef USE_INSTANCING", "\tattribute mat4 instanceMatrix;", "#endif", "#ifdef USE_INSTANCING_COLOR", "\tattribute vec3 instanceColor;", "#endif", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_TANGENT", "\tattribute vec4 tangent;", "#endif", "#if defined( USE_COLOR_ALPHA )", "\tattribute vec4 color;", "#elif defined( USE_COLOR )", "\tattribute vec3 color;", "#endif", "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(uh).join("\n"),
                                g = [d, bh(i), "#define SHADER_NAME " + i.shaderName, p, i.useFog && i.fog ? "#define USE_FOG" : "", i.useFog && i.fogExp2 ? "#define FOG_EXP2" : "", i.map ? "#define USE_MAP" : "", i.matcap ? "#define USE_MATCAP" : "", i.envMap ? "#define USE_ENVMAP" : "", i.envMap ? "#define " + l : "", i.envMap ? "#define " + u : "", i.envMap ? "#define " + c : "", i.lightMap ? "#define USE_LIGHTMAP" : "", i.aoMap ? "#define USE_AOMAP" : "", i.emissiveMap ? "#define USE_EMISSIVEMAP" : "", i.bumpMap ? "#define USE_BUMPMAP" : "", i.normalMap ? "#define USE_NORMALMAP" : "", i.normalMap && i.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", i.normalMap && i.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", i.clearcoat ? "#define USE_CLEARCOAT" : "", i.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", i.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", i.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", i.specularMap ? "#define USE_SPECULARMAP" : "", i.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "", i.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "", i.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", i.metalnessMap ? "#define USE_METALNESSMAP" : "", i.alphaMap ? "#define USE_ALPHAMAP" : "", i.alphaTest ? "#define USE_ALPHATEST" : "", i.sheen ? "#define USE_SHEEN" : "", i.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "", i.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "", i.transmission ? "#define USE_TRANSMISSION" : "", i.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", i.thicknessMap ? "#define USE_THICKNESSMAP" : "", i.vertexTangents ? "#define USE_TANGENT" : "", i.vertexColors || i.instancingColor ? "#define USE_COLOR" : "", i.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", i.vertexUvs ? "#define USE_UV" : "", i.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", i.gradientMap ? "#define USE_GRADIENTMAP" : "", i.flatShading ? "#define FLAT_SHADED" : "", i.doubleSided ? "#define DOUBLE_SIDED" : "", i.flipSided ? "#define FLIP_SIDED" : "", i.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", i.shadowMapEnabled ? "#define " + h : "", i.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", i.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", i.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", i.logarithmicDepthBuffer && i.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", (i.extensionShaderTextureLOD || i.envMap) && i.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", i.toneMapping !== kt ? "#define TONE_MAPPING" : "", i.toneMapping !== kt ? fa.tonemapping_pars_fragment : "", i.toneMapping !== kt ? function(t, e) {
                                    let i;
                                    switch (e) {
                                        case Nt:
                                            i = "Linear";
                                            break;
                                        case Ot:
                                            i = "Reinhard";
                                            break;
                                        case Dt:
                                            i = "OptimizedCineon";
                                            break;
                                        case Rt:
                                            i = "ACESFilmic";
                                            break;
                                        case zt:
                                            i = "Custom";
                                            break;
                                        default:
                                            i = "Linear"
                                    }
                                    return "vec3 toneMapping( vec3 color ) { return " + i + "ToneMapping( color ); }"
                                }(0, i.toneMapping) : "", i.dithering ? "#define DITHERING" : "", i.format === ve ? "#define OPAQUE" : "", fa.encodings_pars_fragment, i.map ? lh("mapTexelToLinear", i.mapEncoding) : "", i.matcap ? lh("matcapTexelToLinear", i.matcapEncoding) : "", i.envMap ? lh("envMapTexelToLinear", i.envMapEncoding) : "", i.emissiveMap ? lh("emissiveMapTexelToLinear", i.emissiveMapEncoding) : "", i.specularColorMap ? lh("specularColorMapTexelToLinear", i.specularColorMapEncoding) : "", i.sheenColorMap ? lh("sheenColorMapTexelToLinear", i.sheenColorMapEncoding) : "", i.lightMap ? lh("lightMapTexelToLinear", i.lightMapEncoding) : "", (_ = "linearToOutputTexel",
                                    y = oh(y = i.outputEncoding),
                                "vec4 " + _ + "( vec4 value ) { return LinearTo" + y[0] + y[1] + "; }"), i.depthPacking ? "#define DEPTH_PACKING " + i.depthPacking : "", "\n"].filter(uh).join("\n")),
                                a = dh(ch(fh(a), i), i),
                                o = dh(ch(fh(o), i), i),
                                a = _h(a),
                                o = _h(o),
                            i.isWebGL2 && !0 !== i.isRawShaderMaterial && (v = "#version 300 es\n",
                                m = ["precision mediump sampler2DArray;", "#define attribute in", "#define varying out", "#define texture2D texture"].join("\n") + "\n" + m,
                                g = ["#define varying in", i.glslVersion === hn ? "" : "layout(location = 0) out highp vec4 pc_fragColor;", i.glslVersion === hn ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth", "#define texture2D texture", "#define textureCube texture", "#define texture2DProj textureProj", "#define texture2DLodEXT textureLod", "#define texture2DProjLodEXT textureProjLod", "#define textureCubeLodEXT textureLod", "#define texture2DGradEXT textureGrad", "#define texture2DProjGradEXT textureProjGrad", "#define textureCubeGradEXT textureGrad"].join("\n") + "\n" + g);
                            var _ = v + m + a
                                , y = v + g + o;
                            a = sh(r, 35633, _),
                                o = sh(r, 35632, y);
                            if (r.attachShader(f, a),
                                r.attachShader(f, o),
                                void 0 !== i.index0AttributeName ? r.bindAttribLocation(f, 0, i.index0AttributeName) : !0 === i.morphTargets && r.bindAttribLocation(f, 0, "position"),
                                r.linkProgram(f),
                                t.debug.checkShaderErrors) {
                                _ = r.getProgramInfoLog(f).trim(),
                                    y = r.getShaderInfoLog(a).trim(),
                                    t = r.getShaderInfoLog(o).trim();
                                let e = !0
                                    , i = !0;
                                !1 === r.getProgramParameter(f, 35714) ? (e = !1,
                                    hh(r, a, "vertex"),
                                    hh(r, o, "fragment")) : "" !== _ || "" !== y && "" !== t || (i = !1),
                                i && (this.diagnostics = {
                                    runnable: e,
                                    programLog: _,
                                    vertexShader: {
                                        log: y,
                                        prefix: m
                                    },
                                    fragmentShader: {
                                        log: t,
                                        prefix: g
                                    }
                                })
                            }
                            let x, b;
                            return r.deleteShader(a),
                                r.deleteShader(o),
                                this.getUniforms = function() {
                                    return void 0 === x && (x = new rh(r,f)),
                                        x
                                }
                                ,
                                this.getAttributes = function() {
                                    return void 0 === b && (b = function(t, e) {
                                        const i = {};
                                        var n = t.getProgramParameter(e, 35721);
                                        for (let a = 0; a < n; a++) {
                                            var r = t.getActiveAttrib(e, a)
                                                , s = r.name;
                                            let n = 1;
                                            35674 === r.type && (n = 2),
                                            35675 === r.type && (n = 3),
                                            35676 === r.type && (n = 4),
                                                i[s] = {
                                                    type: r.type,
                                                    location: t.getAttribLocation(e, s),
                                                    locationSize: n
                                                }
                                        }
                                        return i
                                    }(r, f)),
                                        b
                                }
                                ,
                                this.destroy = function() {
                                    n.releaseStatesOfProgram(this),
                                        r.deleteProgram(f),
                                        this.program = void 0
                                }
                                ,
                                this.name = i.shaderName,
                                this.id = ah++,
                                this.cacheKey = e,
                                this.usedTimes = 1,
                                this.program = f,
                                this.vertexShader = a,
                                this.fragmentShader = o,
                                this
                        }
                        let Sh = 0;
                        class Mh {
                            constructor() {
                                this.shaderCache = new Map,
                                    this.materialCache = new Map
                            }
                            update(t) {
                                var e = t.vertexShader
                                    , i = t.fragmentShader;
                                const n = this._getShaderStage(e)
                                    , r = this._getShaderStage(i)
                                    , s = this._getShaderCacheForMaterial(t);
                                return !1 === s.has(n) && (s.add(n),
                                    n.usedTimes++),
                                !1 === s.has(r) && (s.add(r),
                                    r.usedTimes++),
                                    this
                            }
                            remove(t) {
                                for (const e of this.materialCache.get(t))
                                    e.usedTimes--,
                                    0 === e.usedTimes && this.shaderCache.delete(e);
                                return this.materialCache.delete(t),
                                    this
                            }
                            getVertexShaderID(t) {
                                return this._getShaderStage(t.vertexShader).id
                            }
                            getFragmentShaderID(t) {
                                return this._getShaderStage(t.fragmentShader).id
                            }
                            dispose() {
                                this.shaderCache.clear(),
                                    this.materialCache.clear()
                            }
                            _getShaderCacheForMaterial(t) {
                                const e = this.materialCache;
                                return !1 === e.has(t) && e.set(t, new Set),
                                    e.get(t)
                            }
                            _getShaderStage(t) {
                                const e = this.shaderCache;
                                var i;
                                return !1 === e.has(t) && (i = new Ch,
                                    e.set(t, i)),
                                    e.get(t)
                            }
                        }
                        class Ch {
                            constructor() {
                                this.id = Sh++,
                                    this.usedTimes = 0
                            }
                        }
                        function Ah(t, e, i, n, r, s, a) {
                            const o = new Ar
                                , h = new Mh
                                , l = []
                                , u = r.isWebGL2
                                , c = r.logarithmicDepthBuffer
                                , d = r.floatVertexTextures
                                , p = r.maxVertexUniforms
                                , f = r.vertexTextures;
                            let m = r.precision;
                            const g = {
                                MeshDepthMaterial: "depth",
                                MeshDistanceMaterial: "distanceRGBA",
                                MeshNormalMaterial: "normal",
                                MeshBasicMaterial: "basic",
                                MeshLambertMaterial: "lambert",
                                MeshPhongMaterial: "phong",
                                MeshToonMaterial: "toon",
                                MeshStandardMaterial: "physical",
                                MeshPhysicalMaterial: "physical",
                                MeshMatcapMaterial: "matcap",
                                LineBasicMaterial: "basic",
                                LineDashedMaterial: "dashed",
                                PointsMaterial: "points",
                                ShadowMaterial: "shadow",
                                SpriteMaterial: "sprite"
                            };
                            function v(t) {
                                let e;
                                return e = t && t.isTexture ? t.encoding : t && t.isWebGLRenderTarget ? t.texture.encoding : Ei,
                                u && t && t.isTexture && t.format === _e && t.type === re && t.encoding === Li && (e = Ei),
                                    e
                            }
                            return {
                                getParameters: function(s, o, l, _, y) {
                                    var x = _.fog
                                        , b = s.isMeshStandardMaterial ? _.environment : null
                                        , w = (s.isMeshStandardMaterial ? i : e).get(s.envMap || b);
                                    _ = g[s.type],
                                        b = y.isSkinnedMesh ? (T = (P = y).skeleton.bones,
                                            d ? 1024 : (P = p,
                                                P = Math.floor((P - 20) / 4),
                                                (P = Math.min(P, T.length)) < T.length ? 0 : P)) : 0;
                                    let S, M, C, A;
                                    null !== s.precision && (m = r.getMaxPrecision(s.precision),
                                        s.precision),
                                        _ ? (S = (E = ga[_]).vertexShader,
                                            M = E.fragmentShader) : (S = s.vertexShader,
                                            M = s.fragmentShader,
                                            h.update(s),
                                            C = h.getVertexShaderID(s),
                                            A = h.getFragmentShaderID(s));
                                    var T = t.getRenderTarget()
                                        , P = 0 < s.alphaTest
                                        , E = 0 < s.clearcoat;
                                    return {
                                        isWebGL2: u,
                                        shaderID: _,
                                        shaderName: s.type,
                                        vertexShader: S,
                                        fragmentShader: M,
                                        defines: s.defines,
                                        customVertexShaderID: C,
                                        customFragmentShaderID: A,
                                        isRawShaderMaterial: !0 === s.isRawShaderMaterial,
                                        glslVersion: s.glslVersion,
                                        precision: m,
                                        instancing: !0 === y.isInstancedMesh,
                                        instancingColor: !0 === y.isInstancedMesh && null !== y.instanceColor,
                                        supportsVertexTextures: f,
                                        outputEncoding: null !== T ? v(T.texture) : t.outputEncoding,
                                        map: !!s.map,
                                        mapEncoding: v(s.map),
                                        matcap: !!s.matcap,
                                        matcapEncoding: v(s.matcap),
                                        envMap: !!w,
                                        envMapMode: w && w.mapping,
                                        envMapEncoding: v(w),
                                        envMapCubeUV: !!w && (w.mapping === Wt || w.mapping === jt),
                                        lightMap: !!s.lightMap,
                                        lightMapEncoding: v(s.lightMap),
                                        aoMap: !!s.aoMap,
                                        emissiveMap: !!s.emissiveMap,
                                        emissiveMapEncoding: v(s.emissiveMap),
                                        bumpMap: !!s.bumpMap,
                                        normalMap: !!s.normalMap,
                                        objectSpaceNormalMap: s.normalMapType === Oi,
                                        tangentSpaceNormalMap: s.normalMapType === Ni,
                                        clearcoat: E,
                                        clearcoatMap: E && !!s.clearcoatMap,
                                        clearcoatRoughnessMap: E && !!s.clearcoatRoughnessMap,
                                        clearcoatNormalMap: E && !!s.clearcoatNormalMap,
                                        displacementMap: !!s.displacementMap,
                                        roughnessMap: !!s.roughnessMap,
                                        metalnessMap: !!s.metalnessMap,
                                        specularMap: !!s.specularMap,
                                        specularIntensityMap: !!s.specularIntensityMap,
                                        specularColorMap: !!s.specularColorMap,
                                        specularColorMapEncoding: v(s.specularColorMap),
                                        alphaMap: !!s.alphaMap,
                                        alphaTest: P,
                                        gradientMap: !!s.gradientMap,
                                        sheen: 0 < s.sheen,
                                        sheenColorMap: !!s.sheenColorMap,
                                        sheenColorMapEncoding: v(s.sheenColorMap),
                                        sheenRoughnessMap: !!s.sheenRoughnessMap,
                                        transmission: 0 < s.transmission,
                                        transmissionMap: !!s.transmissionMap,
                                        thicknessMap: !!s.thicknessMap,
                                        combine: s.combine,
                                        vertexTangents: !!s.normalMap && !!y.geometry && !!y.geometry.attributes.tangent,
                                        vertexColors: s.vertexColors,
                                        vertexAlphas: !0 === s.vertexColors && !!y.geometry && !!y.geometry.attributes.color && 4 === y.geometry.attributes.color.itemSize,
                                        vertexUvs: !!(s.map || s.bumpMap || s.normalMap || s.specularMap || s.alphaMap || s.emissiveMap || s.roughnessMap || s.metalnessMap || s.clearcoatMap || s.clearcoatRoughnessMap || s.clearcoatNormalMap || s.displacementMap || s.transmissionMap || s.thicknessMap || s.specularIntensityMap || s.specularColorMap || s.sheenColorMap || s.sheenRoughnessMap),
                                        uvsVertexOnly: !(s.map || s.bumpMap || s.normalMap || s.specularMap || s.alphaMap || s.emissiveMap || s.roughnessMap || s.metalnessMap || s.clearcoatNormalMap || 0 < s.transmission || s.transmissionMap || s.thicknessMap || s.specularIntensityMap || s.specularColorMap || 0 < s.sheen || s.sheenColorMap || s.sheenRoughnessMap || !s.displacementMap),
                                        fog: !!x,
                                        useFog: s.fog,
                                        fogExp2: x && x.isFogExp2,
                                        flatShading: !!s.flatShading,
                                        sizeAttenuation: s.sizeAttenuation,
                                        logarithmicDepthBuffer: c,
                                        skinning: !0 === y.isSkinnedMesh && 0 < b,
                                        maxBones: b,
                                        useVertexTexture: d,
                                        morphTargets: !!y.geometry && !!y.geometry.morphAttributes.position,
                                        morphNormals: !!y.geometry && !!y.geometry.morphAttributes.normal,
                                        morphTargetsCount: y.geometry && y.geometry.morphAttributes.position ? y.geometry.morphAttributes.position.length : 0,
                                        numDirLights: o.directional.length,
                                        numPointLights: o.point.length,
                                        numSpotLights: o.spot.length,
                                        numRectAreaLights: o.rectArea.length,
                                        numHemiLights: o.hemi.length,
                                        numDirLightShadows: o.directionalShadowMap.length,
                                        numPointLightShadows: o.pointShadowMap.length,
                                        numSpotLightShadows: o.spotShadowMap.length,
                                        numClippingPlanes: a.numPlanes,
                                        numClipIntersection: a.numIntersection,
                                        format: s.format,
                                        dithering: s.dithering,
                                        shadowMapEnabled: t.shadowMap.enabled && 0 < l.length,
                                        shadowMapType: t.shadowMap.type,
                                        toneMapping: s.toneMapped ? t.toneMapping : kt,
                                        physicallyCorrectLights: t.physicallyCorrectLights,
                                        premultipliedAlpha: s.premultipliedAlpha,
                                        doubleSided: s.side === Y,
                                        flipSided: s.side === J,
                                        depthPacking: void 0 !== s.depthPacking && s.depthPacking,
                                        index0AttributeName: s.index0AttributeName,
                                        extensionDerivatives: s.extensions && s.extensions.derivatives,
                                        extensionFragDepth: s.extensions && s.extensions.fragDepth,
                                        extensionDrawBuffers: s.extensions && s.extensions.drawBuffers,
                                        extensionShaderTextureLOD: s.extensions && s.extensions.shaderTextureLOD,
                                        rendererExtensionFragDepth: u || n.has("EXT_frag_depth"),
                                        rendererExtensionDrawBuffers: u || n.has("WEBGL_draw_buffers"),
                                        rendererExtensionShaderTextureLod: u || n.has("EXT_shader_texture_lod"),
                                        customProgramCacheKey: s.customProgramCacheKey()
                                    }
                                },
                                getProgramCacheKey: function(e) {
                                    const i = [];
                                    if (e.shaderID ? i.push(e.shaderID) : (i.push(e.customVertexShaderID),
                                        i.push(e.customFragmentShaderID)),
                                    void 0 !== e.defines)
                                        for (const t in e.defines)
                                            i.push(t),
                                                i.push(e.defines[t]);
                                    var n, r;
                                    return !1 === e.isRawShaderMaterial && (r = e,
                                        (n = i).push(r.precision),
                                        n.push(r.outputEncoding),
                                        n.push(r.mapEncoding),
                                        n.push(r.matcapEncoding),
                                        n.push(r.envMapMode),
                                        n.push(r.envMapEncoding),
                                        n.push(r.lightMapEncoding),
                                        n.push(r.emissiveMapEncoding),
                                        n.push(r.combine),
                                        n.push(r.vertexUvs),
                                        n.push(r.fogExp2),
                                        n.push(r.sizeAttenuation),
                                        n.push(r.maxBones),
                                        n.push(r.morphTargetsCount),
                                        n.push(r.numDirLights),
                                        n.push(r.numPointLights),
                                        n.push(r.numSpotLights),
                                        n.push(r.numHemiLights),
                                        n.push(r.numRectAreaLights),
                                        n.push(r.numDirLightShadows),
                                        n.push(r.numPointLightShadows),
                                        n.push(r.numSpotLightShadows),
                                        n.push(r.shadowMapType),
                                        n.push(r.toneMapping),
                                        n.push(r.numClippingPlanes),
                                        n.push(r.numClipIntersection),
                                        n.push(r.format),
                                        n.push(r.specularColorMapEncoding),
                                        n.push(r.sheenColorMapEncoding),
                                        function(t, e) {
                                            o.disableAll(),
                                            e.isWebGL2 && o.enable(0),
                                            e.supportsVertexTextures && o.enable(1),
                                            e.instancing && o.enable(2),
                                            e.instancingColor && o.enable(3),
                                            e.map && o.enable(4),
                                            e.matcap && o.enable(5),
                                            e.envMap && o.enable(6),
                                            e.envMapCubeUV && o.enable(7),
                                            e.lightMap && o.enable(8),
                                            e.aoMap && o.enable(9),
                                            e.emissiveMap && o.enable(10),
                                            e.bumpMap && o.enable(11),
                                            e.normalMap && o.enable(12),
                                            e.objectSpaceNormalMap && o.enable(13),
                                            e.tangentSpaceNormalMap && o.enable(14),
                                            e.clearcoat && o.enable(15),
                                            e.clearcoatMap && o.enable(16),
                                            e.clearcoatRoughnessMap && o.enable(17),
                                            e.clearcoatNormalMap && o.enable(18),
                                            e.displacementMap && o.enable(19),
                                            e.specularMap && o.enable(20),
                                            e.roughnessMap && o.enable(21),
                                            e.metalnessMap && o.enable(22),
                                            e.gradientMap && o.enable(23),
                                            e.alphaMap && o.enable(24),
                                            e.alphaTest && o.enable(25),
                                            e.vertexColors && o.enable(26),
                                            e.vertexAlphas && o.enable(27),
                                            e.vertexUvs && o.enable(28),
                                            e.vertexTangents && o.enable(29),
                                            e.uvsVertexOnly && o.enable(30),
                                            e.fog && o.enable(31),
                                                t.push(o.mask),
                                                o.disableAll(),
                                            e.useFog && o.enable(0),
                                            e.flatShading && o.enable(1),
                                            e.logarithmicDepthBuffer && o.enable(2),
                                            e.skinning && o.enable(3),
                                            e.useVertexTexture && o.enable(4),
                                            e.morphTargets && o.enable(5),
                                            e.morphNormals && o.enable(6),
                                            e.premultipliedAlpha && o.enable(7),
                                            e.shadowMapEnabled && o.enable(8),
                                            e.physicallyCorrectLights && o.enable(9),
                                            e.doubleSided && o.enable(10),
                                            e.flipSided && o.enable(11),
                                            e.depthPacking && o.enable(12),
                                            e.dithering && o.enable(13),
                                            e.specularIntensityMap && o.enable(14),
                                            e.specularColorMap && o.enable(15),
                                            e.transmission && o.enable(16),
                                            e.transmissionMap && o.enable(17),
                                            e.thicknessMap && o.enable(18),
                                            e.sheen && o.enable(19),
                                            e.sheenColorMap && o.enable(20),
                                            e.sheenRoughnessMap && o.enable(21),
                                                t.push(o.mask)
                                        }(i, e),
                                        i.push(t.outputEncoding)),
                                        i.push(e.customProgramCacheKey),
                                        i.join()
                                },
                                getUniforms: function(t) {
                                    var e = g[t.type];
                                    let i;
                                    return i = e ? (e = ga[e],
                                        Qs.clone(e.uniforms)) : t.uniforms,
                                        i
                                },
                                acquireProgram: function(e, i) {
                                    let n;
                                    for (let t = 0, e = l.length; t < e; t++) {
                                        var r = l[t];
                                        if (r.cacheKey === i) {
                                            n = r,
                                                ++n.usedTimes;
                                            break
                                        }
                                    }
                                    return void 0 === n && (n = new wh(t,i,e,s),
                                        l.push(n)),
                                        n
                                },
                                releaseProgram: function(t) {
                                    var e;
                                    0 == --t.usedTimes && (e = l.indexOf(t),
                                        l[e] = l[l.length - 1],
                                        l.pop(),
                                        t.destroy())
                                },
                                releaseShaderCache: function(t) {
                                    h.remove(t)
                                },
                                programs: l,
                                dispose: function() {
                                    h.dispose()
                                }
                            }
                        }
                        function Th() {
                            let t = new WeakMap;
                            return {
                                get: function(e) {
                                    let i = t.get(e);
                                    return void 0 === i && (i = {},
                                        t.set(e, i)),
                                        i
                                },
                                remove: function(e) {
                                    t.delete(e)
                                },
                                update: function(e, i, n) {
                                    t.get(e)[i] = n
                                },
                                dispose: function() {
                                    t = new WeakMap
                                }
                            }
                        }
                        function Ph(t, e) {
                            return t.groupOrder !== e.groupOrder ? t.groupOrder - e.groupOrder : t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.material.id !== e.material.id ? t.material.id - e.material.id : t.z !== e.z ? t.z - e.z : t.id - e.id
                        }
                        function Eh(t, e) {
                            return t.groupOrder !== e.groupOrder ? t.groupOrder - e.groupOrder : t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.z !== e.z ? e.z - t.z : t.id - e.id
                        }
                        function Lh() {
                            const t = [];
                            let e = 0;
                            const i = []
                                , n = []
                                , r = [];
                            function s(i, n, r, s, a, o) {
                                let h = t[e];
                                return void 0 === h ? (h = {
                                    id: i.id,
                                    object: i,
                                    geometry: n,
                                    material: r,
                                    groupOrder: s,
                                    renderOrder: i.renderOrder,
                                    z: a,
                                    group: o
                                },
                                    t[e] = h) : (h.id = i.id,
                                    h.object = i,
                                    h.geometry = n,
                                    h.material = r,
                                    h.groupOrder = s,
                                    h.renderOrder = i.renderOrder,
                                    h.z = a,
                                    h.group = o),
                                    e++,
                                    h
                            }
                            return {
                                opaque: i,
                                transmissive: n,
                                transparent: r,
                                init: function() {
                                    e = 0,
                                        i.length = 0,
                                        n.length = 0,
                                        r.length = 0
                                },
                                push: function(t, e, a, o, h, l) {
                                    l = s(t, e, a, o, h, l),
                                        (0 < a.transmission ? n : !0 === a.transparent ? r : i).push(l)
                                },
                                unshift: function(t, e, a, o, h, l) {
                                    l = s(t, e, a, o, h, l),
                                        (0 < a.transmission ? n : !0 === a.transparent ? r : i).unshift(l)
                                },
                                finish: function() {
                                    for (let i = e, n = t.length; i < n; i++) {
                                        const e = t[i];
                                        if (null === e.id)
                                            break;
                                        e.id = null,
                                            e.object = null,
                                            e.geometry = null,
                                            e.material = null,
                                            e.group = null
                                    }
                                },
                                sort: function(t, e) {
                                    1 < i.length && i.sort(t || Ph),
                                    1 < n.length && n.sort(e || Eh),
                                    1 < r.length && r.sort(e || Eh)
                                }
                            }
                        }
                        function Ih() {
                            let t = new WeakMap;
                            return {
                                get: function(e, i) {
                                    let n;
                                    return !1 === t.has(e) ? (n = new Lh,
                                        t.set(e, [n])) : i >= t.get(e).length ? (n = new Lh,
                                        t.get(e).push(n)) : n = t.get(e)[i],
                                        n
                                },
                                dispose: function() {
                                    t = new WeakMap
                                }
                            }
                        }
                        function kh() {
                            const t = {};
                            return {
                                get: function(e) {
                                    if (void 0 !== t[e.id])
                                        return t[e.id];
                                    let i;
                                    switch (e.type) {
                                        case "DirectionalLight":
                                            i = {
                                                direction: new Fn,
                                                color: new as
                                            };
                                            break;
                                        case "SpotLight":
                                            i = {
                                                position: new Fn,
                                                direction: new Fn,
                                                color: new as,
                                                distance: 0,
                                                coneCos: 0,
                                                penumbraCos: 0,
                                                decay: 0
                                            };
                                            break;
                                        case "PointLight":
                                            i = {
                                                position: new Fn,
                                                color: new as,
                                                distance: 0,
                                                decay: 0
                                            };
                                            break;
                                        case "HemisphereLight":
                                            i = {
                                                direction: new Fn,
                                                skyColor: new as,
                                                groundColor: new as
                                            };
                                            break;
                                        case "RectAreaLight":
                                            i = {
                                                color: new as,
                                                position: new Fn,
                                                halfWidth: new Fn,
                                                halfHeight: new Fn
                                            }
                                    }
                                    return t[e.id] = i,
                                        i
                                }
                            }
                        }
                        let Nh = 0;
                        function Oh(t, e) {
                            return (e.castShadow ? 1 : 0) - (t.castShadow ? 1 : 0)
                        }
                        function Dh(t, e) {
                            const i = new kh
                                , n = function() {
                                const t = {};
                                return {
                                    get: function(e) {
                                        if (void 0 !== t[e.id])
                                            return t[e.id];
                                        let i;
                                        switch (e.type) {
                                            case "DirectionalLight":
                                            case "SpotLight":
                                                i = {
                                                    shadowBias: 0,
                                                    shadowNormalBias: 0,
                                                    shadowRadius: 1,
                                                    shadowMapSize: new wn
                                                };
                                                break;
                                            case "PointLight":
                                                i = {
                                                    shadowBias: 0,
                                                    shadowNormalBias: 0,
                                                    shadowRadius: 1,
                                                    shadowMapSize: new wn,
                                                    shadowCameraNear: 1,
                                                    shadowCameraFar: 1e3
                                                }
                                        }
                                        return t[e.id] = i,
                                            i
                                    }
                                }
                            }()
                                , r = {
                                version: 0,
                                hash: {
                                    directionalLength: -1,
                                    pointLength: -1,
                                    spotLength: -1,
                                    rectAreaLength: -1,
                                    hemiLength: -1,
                                    numDirectionalShadows: -1,
                                    numPointShadows: -1,
                                    numSpotShadows: -1
                                },
                                ambient: [0, 0, 0],
                                probe: [],
                                directional: [],
                                directionalShadow: [],
                                directionalShadowMap: [],
                                directionalShadowMatrix: [],
                                spot: [],
                                spotShadow: [],
                                spotShadowMap: [],
                                spotShadowMatrix: [],
                                rectArea: [],
                                rectAreaLTC1: null,
                                rectAreaLTC2: null,
                                point: [],
                                pointShadow: [],
                                pointShadowMap: [],
                                pointShadowMatrix: [],
                                hemi: []
                            };
                            for (let t = 0; t < 9; t++)
                                r.probe.push(new Fn);
                            const s = new Fn
                                , a = new mr
                                , o = new mr;
                            return {
                                setup: function(s, a) {
                                    let o = 0
                                        , h = 0
                                        , l = 0;
                                    for (let t = 0; t < 9; t++)
                                        r.probe[t].set(0, 0, 0);
                                    let u = 0
                                        , c = 0
                                        , d = 0
                                        , p = 0
                                        , f = 0
                                        , m = 0
                                        , g = 0
                                        , v = 0;
                                    s.sort(Oh);
                                    var _ = !0 !== a ? Math.PI : 1;
                                    for (let t = 0, e = s.length; t < e; t++) {
                                        var y = s[t]
                                            , x = y.color
                                            , b = y.intensity
                                            , w = y.distance
                                            , S = y.shadow && y.shadow.map ? y.shadow.map.texture : null;
                                        if (y.isAmbientLight)
                                            o += x.r * b * _,
                                                h += x.g * b * _,
                                                l += x.b * b * _;
                                        else if (y.isLightProbe)
                                            for (let t = 0; t < 9; t++)
                                                r.probe[t].addScaledVector(y.sh.coefficients[t], b);
                                        else if (y.isDirectionalLight) {
                                            const t = i.get(y);
                                            if (t.color.copy(y.color).multiplyScalar(y.intensity * _),
                                                y.castShadow) {
                                                var M = y.shadow;
                                                const t = n.get(y);
                                                t.shadowBias = M.bias,
                                                    t.shadowNormalBias = M.normalBias,
                                                    t.shadowRadius = M.radius,
                                                    t.shadowMapSize = M.mapSize,
                                                    r.directionalShadow[u] = t,
                                                    r.directionalShadowMap[u] = S,
                                                    r.directionalShadowMatrix[u] = y.shadow.matrix,
                                                    m++
                                            }
                                            r.directional[u] = t,
                                                u++
                                        } else if (y.isSpotLight) {
                                            const t = i.get(y);
                                            if (t.position.setFromMatrixPosition(y.matrixWorld),
                                                t.color.copy(x).multiplyScalar(b * _),
                                                t.distance = w,
                                                t.coneCos = Math.cos(y.angle),
                                                t.penumbraCos = Math.cos(y.angle * (1 - y.penumbra)),
                                                t.decay = y.decay,
                                                y.castShadow) {
                                                w = y.shadow;
                                                const t = n.get(y);
                                                t.shadowBias = w.bias,
                                                    t.shadowNormalBias = w.normalBias,
                                                    t.shadowRadius = w.radius,
                                                    t.shadowMapSize = w.mapSize,
                                                    r.spotShadow[d] = t,
                                                    r.spotShadowMap[d] = S,
                                                    r.spotShadowMatrix[d] = y.shadow.matrix,
                                                    v++
                                            }
                                            r.spot[d] = t,
                                                d++
                                        } else if (y.isRectAreaLight) {
                                            const t = i.get(y);
                                            t.color.copy(x).multiplyScalar(b),
                                                t.halfWidth.set(.5 * y.width, 0, 0),
                                                t.halfHeight.set(0, .5 * y.height, 0),
                                                r.rectArea[p] = t,
                                                p++
                                        } else if (y.isPointLight) {
                                            const t = i.get(y);
                                            if (t.color.copy(y.color).multiplyScalar(y.intensity * _),
                                                t.distance = y.distance,
                                                t.decay = y.decay,
                                                y.castShadow) {
                                                x = y.shadow;
                                                const t = n.get(y);
                                                t.shadowBias = x.bias,
                                                    t.shadowNormalBias = x.normalBias,
                                                    t.shadowRadius = x.radius,
                                                    t.shadowMapSize = x.mapSize,
                                                    t.shadowCameraNear = x.camera.near,
                                                    t.shadowCameraFar = x.camera.far,
                                                    r.pointShadow[c] = t,
                                                    r.pointShadowMap[c] = S,
                                                    r.pointShadowMatrix[c] = y.shadow.matrix,
                                                    g++
                                            }
                                            r.point[c] = t,
                                                c++
                                        } else if (y.isHemisphereLight) {
                                            const t = i.get(y);
                                            t.skyColor.copy(y.color).multiplyScalar(b * _),
                                                t.groundColor.copy(y.groundColor).multiplyScalar(b * _),
                                                r.hemi[f] = t,
                                                f++
                                        }
                                    }
                                    0 < p && (e.isWebGL2 || !0 === t.has("OES_texture_float_linear") ? (r.rectAreaLTC1 = ma.LTC_FLOAT_1,
                                        r.rectAreaLTC2 = ma.LTC_FLOAT_2) : !0 === t.has("OES_texture_half_float_linear") && (r.rectAreaLTC1 = ma.LTC_HALF_1,
                                        r.rectAreaLTC2 = ma.LTC_HALF_2)),
                                        r.ambient[0] = o,
                                        r.ambient[1] = h,
                                        r.ambient[2] = l;
                                    const C = r.hash;
                                    C.directionalLength === u && C.pointLength === c && C.spotLength === d && C.rectAreaLength === p && C.hemiLength === f && C.numDirectionalShadows === m && C.numPointShadows === g && C.numSpotShadows === v || (r.directional.length = u,
                                        r.spot.length = d,
                                        r.rectArea.length = p,
                                        r.point.length = c,
                                        r.hemi.length = f,
                                        r.directionalShadow.length = m,
                                        r.directionalShadowMap.length = m,
                                        r.pointShadow.length = g,
                                        r.pointShadowMap.length = g,
                                        r.spotShadow.length = v,
                                        r.spotShadowMap.length = v,
                                        r.directionalShadowMatrix.length = m,
                                        r.pointShadowMatrix.length = g,
                                        r.spotShadowMatrix.length = v,
                                        C.directionalLength = u,
                                        C.pointLength = c,
                                        C.spotLength = d,
                                        C.rectAreaLength = p,
                                        C.hemiLength = f,
                                        C.numDirectionalShadows = m,
                                        C.numPointShadows = g,
                                        C.numSpotShadows = v,
                                        r.version = Nh++)
                                },
                                setupView: function(t, e) {
                                    let i = 0
                                        , n = 0
                                        , h = 0
                                        , l = 0
                                        , u = 0;
                                    var c = e.matrixWorldInverse;
                                    for (let e = 0, p = t.length; e < p; e++) {
                                        var d = t[e];
                                        if (d.isDirectionalLight) {
                                            const t = r.directional[i];
                                            t.direction.setFromMatrixPosition(d.matrixWorld),
                                                s.setFromMatrixPosition(d.target.matrixWorld),
                                                t.direction.sub(s),
                                                t.direction.transformDirection(c),
                                                i++
                                        } else if (d.isSpotLight) {
                                            const t = r.spot[h];
                                            t.position.setFromMatrixPosition(d.matrixWorld),
                                                t.position.applyMatrix4(c),
                                                t.direction.setFromMatrixPosition(d.matrixWorld),
                                                s.setFromMatrixPosition(d.target.matrixWorld),
                                                t.direction.sub(s),
                                                t.direction.transformDirection(c),
                                                h++
                                        } else if (d.isRectAreaLight) {
                                            const t = r.rectArea[l];
                                            t.position.setFromMatrixPosition(d.matrixWorld),
                                                t.position.applyMatrix4(c),
                                                o.identity(),
                                                a.copy(d.matrixWorld),
                                                a.premultiply(c),
                                                o.extractRotation(a),
                                                t.halfWidth.set(.5 * d.width, 0, 0),
                                                t.halfHeight.set(0, .5 * d.height, 0),
                                                t.halfWidth.applyMatrix4(o),
                                                t.halfHeight.applyMatrix4(o),
                                                l++
                                        } else if (d.isPointLight) {
                                            const t = r.point[n];
                                            t.position.setFromMatrixPosition(d.matrixWorld),
                                                t.position.applyMatrix4(c),
                                                n++
                                        } else if (d.isHemisphereLight) {
                                            const t = r.hemi[u];
                                            t.direction.setFromMatrixPosition(d.matrixWorld),
                                                t.direction.transformDirection(c),
                                                t.direction.normalize(),
                                                u++
                                        }
                                    }
                                },
                                state: r
                            }
                        }
                        function Rh(t, e) {
                            const i = new Dh(t,e)
                                , n = []
                                , r = [];
                            return {
                                init: function() {
                                    n.length = 0,
                                        r.length = 0
                                },
                                state: {
                                    lightsArray: n,
                                    shadowsArray: r,
                                    lights: i
                                },
                                setupLights: function(t) {
                                    i.setup(n, t)
                                },
                                setupLightsView: function(t) {
                                    i.setupView(n, t)
                                },
                                pushLight: function(t) {
                                    n.push(t)
                                },
                                pushShadow: function(t) {
                                    r.push(t)
                                }
                            }
                        }
                        function zh(t, e) {
                            let i = new WeakMap;
                            return {
                                get: function(n, r=0) {
                                    let s;
                                    return !1 === i.has(n) ? (s = new Rh(t,e),
                                        i.set(n, [s])) : r >= i.get(n).length ? (s = new Rh(t,e),
                                        i.get(n).push(s)) : s = i.get(n)[r],
                                        s
                                },
                                dispose: function() {
                                    i = new WeakMap
                                }
                            }
                        }
                        class Fh extends $r {
                            constructor(t) {
                                super(),
                                    this.type = "MeshDepthMaterial",
                                    this.depthPacking = Ii,
                                    this.map = null,
                                    this.alphaMap = null,
                                    this.displacementMap = null,
                                    this.displacementScale = 1,
                                    this.displacementBias = 0,
                                    this.wireframe = !1,
                                    this.wireframeLinewidth = 1,
                                    this.fog = !1,
                                    this.setValues(t)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.depthPacking = t.depthPacking,
                                    this.map = t.map,
                                    this.alphaMap = t.alphaMap,
                                    this.displacementMap = t.displacementMap,
                                    this.displacementScale = t.displacementScale,
                                    this.displacementBias = t.displacementBias,
                                    this.wireframe = t.wireframe,
                                    this.wireframeLinewidth = t.wireframeLinewidth,
                                    this
                            }
                        }
                        Fh.prototype.isMeshDepthMaterial = !0;
                        class Bh extends $r {
                            constructor(t) {
                                super(),
                                    this.type = "MeshDistanceMaterial",
                                    this.referencePosition = new Fn,
                                    this.nearDistance = 1,
                                    this.farDistance = 1e3,
                                    this.map = null,
                                    this.alphaMap = null,
                                    this.displacementMap = null,
                                    this.displacementScale = 1,
                                    this.displacementBias = 0,
                                    this.fog = !1,
                                    this.setValues(t)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.referencePosition.copy(t.referencePosition),
                                    this.nearDistance = t.nearDistance,
                                    this.farDistance = t.farDistance,
                                    this.map = t.map,
                                    this.alphaMap = t.alphaMap,
                                    this.displacementMap = t.displacementMap,
                                    this.displacementScale = t.displacementScale,
                                    this.displacementBias = t.displacementBias,
                                    this
                            }
                        }
                        Bh.prototype.isMeshDistanceMaterial = !0;
                        function Vh(t, e, i) {
                            let n = new ua;
                            const r = new wn
                                , s = new wn
                                , a = new Nn
                                , o = new Fh({
                                depthPacking: ki
                            })
                                , h = new Bh
                                , l = {}
                                , u = i.maxTextureSize
                                , c = {
                                0: J,
                                1: Z,
                                2: Y
                            }
                                , d = new Ks({
                                defines: {
                                    VSM_SAMPLES: 8
                                },
                                uniforms: {
                                    shadow_pass: {
                                        value: null
                                    },
                                    resolution: {
                                        value: new wn
                                    },
                                    radius: {
                                        value: 4
                                    }
                                },
                                vertexShader: "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",
                                fragmentShader: "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"
                            })
                                , p = d.clone();
                            p.defines.HORIZONTAL_PASS = 1;
                            const f = new Ps;
                            f.setAttribute("position", new us(new Float32Array([-1, -1, .5, 3, -1, .5, -1, 3, .5]),3));
                            const m = new qs(f,d)
                                , g = this;
                            function v(e, i, n, r, s, a, u) {
                                let d = null;
                                var p = !0 === r.isPointLight ? e.customDistanceMaterial : e.customDepthMaterial;
                                if (d = void 0 !== p ? p : !0 === r.isPointLight ? h : o,
                                t.localClippingEnabled && !0 === n.clipShadows && 0 !== n.clippingPlanes.length || n.displacementMap && 0 !== n.displacementScale || n.alphaMap && 0 < n.alphaTest) {
                                    e = d.uuid,
                                        p = n.uuid;
                                    let t = l[e];
                                    void 0 === t && (t = {},
                                        l[e] = t);
                                    let i = t[p];
                                    void 0 === i && (i = d.clone(),
                                        t[p] = i),
                                        d = i
                                }
                                return d.visible = n.visible,
                                    d.wireframe = n.wireframe,
                                    d.side = u === X ? null !== n.shadowSide ? n.shadowSide : n.side : null !== n.shadowSide ? n.shadowSide : c[n.side],
                                    d.alphaMap = n.alphaMap,
                                    d.alphaTest = n.alphaTest,
                                    d.clipShadows = n.clipShadows,
                                    d.clippingPlanes = n.clippingPlanes,
                                    d.clipIntersection = n.clipIntersection,
                                    d.displacementMap = n.displacementMap,
                                    d.displacementScale = n.displacementScale,
                                    d.displacementBias = n.displacementBias,
                                    d.wireframeLinewidth = n.wireframeLinewidth,
                                    d.linewidth = n.linewidth,
                                !0 === r.isPointLight && !0 === d.isMeshDistanceMaterial && (d.referencePosition.setFromMatrixPosition(r.matrixWorld),
                                    d.nearDistance = s,
                                    d.farDistance = a),
                                    d
                            }
                            this.enabled = !1,
                                this.autoUpdate = !0,
                                this.needsUpdate = !1,
                                this.type = H,
                                this.render = function(i, o, h) {
                                    if (!1 !== g.enabled && (!1 !== g.autoUpdate || !1 !== g.needsUpdate) && 0 !== i.length) {
                                        var l = t.getRenderTarget()
                                            , c = t.getActiveCubeFace()
                                            , f = t.getActiveMipmapLevel();
                                        const S = t.state;
                                        S.setBlending($),
                                            S.buffers.color.setClear(1, 1, 1, 1),
                                            S.buffers.depth.setTest(!0),
                                            S.setScissorTest(!1);
                                        for (let l = 0, c = i.length; l < c; l++) {
                                            var _ = i[l];
                                            const c = _.shadow;
                                            if (void 0 !== c && (!1 !== c.autoUpdate || !1 !== c.needsUpdate)) {
                                                r.copy(c.mapSize);
                                                var y, x = c.getFrameExtents();
                                                r.multiply(x),
                                                    s.copy(c.mapSize),
                                                (r.x > u || r.y > u) && (r.x > u && (s.x = Math.floor(u / x.x),
                                                    r.x = s.x * x.x,
                                                    c.mapSize.x = s.x),
                                                r.y > u && (s.y = Math.floor(u / x.y),
                                                    r.y = s.y * x.y,
                                                    c.mapSize.y = s.y)),
                                                null !== c.map || c.isPointLightShadow || this.type !== X || (y = {
                                                    minFilter: $t,
                                                    magFilter: $t,
                                                    format: _e
                                                },
                                                    c.map = new On(r.x,r.y,y),
                                                    c.map.texture.name = _.name + ".shadowMap",
                                                    c.mapPass = new On(r.x,r.y,y),
                                                    c.camera.updateProjectionMatrix()),
                                                null === c.map && (y = {
                                                    minFilter: Zt,
                                                    magFilter: Zt,
                                                    format: _e
                                                },
                                                    c.map = new On(r.x,r.y,y),
                                                    c.map.texture.name = _.name + ".shadowMap",
                                                    c.camera.updateProjectionMatrix()),
                                                    t.setRenderTarget(c.map),
                                                    t.clear();
                                                var b = c.getViewportCount();
                                                for (let i = 0; i < b; i++) {
                                                    var w = c.getViewport(i);
                                                    a.set(s.x * w.x, s.y * w.y, s.x * w.z, s.y * w.w),
                                                        S.viewport(a),
                                                        c.updateMatrices(_, i),
                                                        n = c.getFrustum(),
                                                        function i(r, s, a, o, h) {
                                                            if (!1 === r.visible)
                                                                return;
                                                            if (r.layers.test(s.layers) && (r.isMesh || r.isLine || r.isPoints) && (r.castShadow || r.receiveShadow && h === X) && (!r.frustumCulled || n.intersectsObject(r))) {
                                                                r.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse, r.matrixWorld);
                                                                const i = e.update(r)
                                                                    , n = r.material;
                                                                if (Array.isArray(n)) {
                                                                    const e = i.groups;
                                                                    for (let s = 0, l = e.length; s < l; s++) {
                                                                        const l = e[s]
                                                                            , u = n[l.materialIndex];
                                                                        if (u && u.visible) {
                                                                            const e = v(r, 0, u, o, a.near, a.far, h);
                                                                            t.renderBufferDirect(a, null, i, e, r, l)
                                                                        }
                                                                    }
                                                                } else if (n.visible) {
                                                                    const e = v(r, 0, n, o, a.near, a.far, h);
                                                                    t.renderBufferDirect(a, null, i, e, r, null)
                                                                }
                                                            }
                                                            const l = r.children;
                                                            for (let t = 0, e = l.length; t < e; t++)
                                                                i(l[t], s, a, o, h)
                                                        }(o, h, c.camera, _, this.type)
                                                }
                                                c.isPointLightShadow || this.type !== X || function(i, n) {
                                                    var r = e.update(m);
                                                    d.defines.VSM_SAMPLES !== i.blurSamples && (d.defines.VSM_SAMPLES = i.blurSamples,
                                                        p.defines.VSM_SAMPLES = i.blurSamples,
                                                        d.needsUpdate = !0,
                                                        p.needsUpdate = !0),
                                                        d.uniforms.shadow_pass.value = i.map.texture,
                                                        d.uniforms.resolution.value = i.mapSize,
                                                        d.uniforms.radius.value = i.radius,
                                                        t.setRenderTarget(i.mapPass),
                                                        t.clear(),
                                                        t.renderBufferDirect(n, null, r, d, m, null),
                                                        p.uniforms.shadow_pass.value = i.mapPass.texture,
                                                        p.uniforms.resolution.value = i.mapSize,
                                                        p.uniforms.radius.value = i.radius,
                                                        t.setRenderTarget(i.map),
                                                        t.clear(),
                                                        t.renderBufferDirect(n, null, r, p, m, null)
                                                }(c, h),
                                                    c.needsUpdate = !1
                                            }
                                        }
                                        g.needsUpdate = !1,
                                            t.setRenderTarget(l, c, f)
                                    }
                                }
                        }
                        function Uh(t, e, i) {
                            const n = i.isWebGL2
                                , r = new function() {
                                    let e = !1;
                                    const i = new Nn;
                                    let n = null;
                                    const r = new Nn(0,0,0,0);
                                    return {
                                        setMask: function(i) {
                                            n === i || e || (t.colorMask(i, i, i, i),
                                                n = i)
                                        },
                                        setLocked: function(t) {
                                            e = t
                                        },
                                        setClear: function(e, n, s, a, o) {
                                            !0 === o && (e *= a,
                                                n *= a,
                                                s *= a),
                                                i.set(e, n, s, a),
                                            !1 === r.equals(i) && (t.clearColor(e, n, s, a),
                                                r.copy(i))
                                        },
                                        reset: function() {
                                            e = !1,
                                                n = null,
                                                r.set(-1, 0, 0, 0)
                                        }
                                    }
                                }
                                , s = new function() {
                                    let e = !1
                                        , i = null
                                        , n = null
                                        , r = null;
                                    return {
                                        setTest: function(t) {
                                            (t ? D : R)(2929)
                                        },
                                        setMask: function(n) {
                                            i === n || e || (t.depthMask(n),
                                                i = n)
                                        },
                                        setFunc: function(e) {
                                            if (n !== e) {
                                                if (e)
                                                    switch (e) {
                                                        case bt:
                                                            t.depthFunc(512);
                                                            break;
                                                        case wt:
                                                            t.depthFunc(519);
                                                            break;
                                                        case St:
                                                            t.depthFunc(513);
                                                            break;
                                                        case Mt:
                                                            t.depthFunc(515);
                                                            break;
                                                        case Ct:
                                                            t.depthFunc(514);
                                                            break;
                                                        case At:
                                                            t.depthFunc(518);
                                                            break;
                                                        case Tt:
                                                            t.depthFunc(516);
                                                            break;
                                                        case Pt:
                                                            t.depthFunc(517);
                                                            break;
                                                        default:
                                                            t.depthFunc(515)
                                                    }
                                                else
                                                    t.depthFunc(515);
                                                n = e
                                            }
                                        },
                                        setLocked: function(t) {
                                            e = t
                                        },
                                        setClear: function(e) {
                                            r !== e && (t.clearDepth(e),
                                                r = e)
                                        },
                                        reset: function() {
                                            e = !1,
                                                i = null,
                                                n = null,
                                                r = null
                                        }
                                    }
                                }
                                , a = new function() {
                                    let e = !1
                                        , i = null
                                        , n = null
                                        , r = null
                                        , s = null
                                        , a = null
                                        , o = null
                                        , h = null
                                        , l = null;
                                    return {
                                        setTest: function(t) {
                                            e || (t ? D : R)(2960)
                                        },
                                        setMask: function(n) {
                                            i === n || e || (t.stencilMask(n),
                                                i = n)
                                        },
                                        setFunc: function(e, i, a) {
                                            n === e && r === i && s === a || (t.stencilFunc(e, i, a),
                                                n = e,
                                                r = i,
                                                s = a)
                                        },
                                        setOp: function(e, i, n) {
                                            a === e && o === i && h === n || (t.stencilOp(e, i, n),
                                                a = e,
                                                o = i,
                                                h = n)
                                        },
                                        setLocked: function(t) {
                                            e = t
                                        },
                                        setClear: function(e) {
                                            l !== e && (t.clearStencil(e),
                                                l = e)
                                        },
                                        reset: function() {
                                            e = !1,
                                                i = null,
                                                n = null,
                                                r = null,
                                                s = null,
                                                a = null,
                                                o = null,
                                                h = null,
                                                l = null
                                        }
                                    }
                                }
                            ;
                            let o = {}
                                , h = {}
                                , l = null
                                , u = !1
                                , c = null
                                , d = null
                                , p = null
                                , f = null
                                , m = null
                                , g = null
                                , v = null
                                , _ = !1
                                , y = null
                                , x = null
                                , b = null
                                , w = null
                                , S = null;
                            const M = t.getParameter(35661);
                            let C = !1
                                , A = 0;
                            const T = t.getParameter(7938);
                            -1 !== T.indexOf("WebGL") ? (A = parseFloat(/^WebGL (\d)/.exec(T)[1]),
                                C = 1 <= A) : -1 !== T.indexOf("OpenGL ES") && (A = parseFloat(/^OpenGL ES (\d)/.exec(T)[1]),
                                C = 2 <= A);
                            let P = null
                                , E = {};
                            var L = t.getParameter(3088);
                            i = t.getParameter(2978);
                            const I = (new Nn).fromArray(L)
                                , k = (new Nn).fromArray(i);
                            function N(e, i, n) {
                                var r = new Uint8Array(4)
                                    , s = t.createTexture();
                                t.bindTexture(e, s),
                                    t.texParameteri(e, 10241, 9728),
                                    t.texParameteri(e, 10240, 9728);
                                for (let e = 0; e < n; e++)
                                    t.texImage2D(i + e, 0, 6408, 1, 1, 0, 6408, 5121, r);
                                return s
                            }
                            const O = {};
                            function D(e) {
                                !0 !== o[e] && (t.enable(e),
                                    o[e] = !0)
                            }
                            function R(e) {
                                !1 !== o[e] && (t.disable(e),
                                    o[e] = !1)
                            }
                            O[3553] = N(3553, 3553, 1),
                                O[34067] = N(34067, 34069, 6),
                                r.setClear(0, 0, 0, 1),
                                s.setClear(1),
                                a.setClear(0),
                                D(2929),
                                s.setFunc(Mt),
                                W(!1),
                                j(U),
                                D(2884),
                                B($);
                            const z = {
                                [st]: 32774,
                                [at]: 32778,
                                [ot]: 32779
                            };
                            n ? (z[ht] = 32775,
                                z[lt] = 32776) : null !== (e = e.get("EXT_blend_minmax")) && (z[ht] = e.MIN_EXT,
                                z[lt] = e.MAX_EXT);
                            const F = {
                                [ut]: 0,
                                [ct]: 1,
                                [dt]: 768,
                                [ft]: 770,
                                [xt]: 776,
                                [_t]: 774,
                                [gt]: 772,
                                [pt]: 769,
                                [mt]: 771,
                                [yt]: 775,
                                [vt]: 773
                            };
                            function B(e, i, n, r, s, a, o, h) {
                                if (e !== $) {
                                    if (!1 === u && (D(3042),
                                        u = !0),
                                    e === rt)
                                        s = s || i,
                                            a = a || n,
                                            o = o || r,
                                        i === d && s === m || (t.blendEquationSeparate(z[i], z[s]),
                                            d = i,
                                            m = s),
                                        n === p && r === f && a === g && o === v || (t.blendFuncSeparate(F[n], F[r], F[a], F[o]),
                                            p = n,
                                            f = r,
                                            g = a,
                                            v = o),
                                            c = e,
                                            _ = null;
                                    else if (e !== c || h !== _) {
                                        if (d === st && m === st || (t.blendEquation(32774),
                                            d = st,
                                            m = st),
                                            h)
                                            switch (e) {
                                                case tt:
                                                    t.blendFuncSeparate(1, 771, 1, 771);
                                                    break;
                                                case et:
                                                    t.blendFunc(1, 1);
                                                    break;
                                                case it:
                                                    t.blendFuncSeparate(0, 0, 769, 771);
                                                    break;
                                                case nt:
                                                    t.blendFuncSeparate(0, 768, 0, 770)
                                            }
                                        else
                                            switch (e) {
                                                case tt:
                                                    t.blendFuncSeparate(770, 771, 1, 771);
                                                    break;
                                                case et:
                                                    t.blendFunc(770, 1);
                                                    break;
                                                case it:
                                                    t.blendFunc(0, 769);
                                                    break;
                                                case nt:
                                                    t.blendFunc(0, 768)
                                            }
                                        p = null,
                                            f = null,
                                            g = null,
                                            v = null,
                                            c = e,
                                            _ = h
                                    }
                                } else
                                    !0 === u && (R(3042),
                                        u = !1)
                            }
                            function W(e) {
                                y !== e && (e ? t.frontFace(2304) : t.frontFace(2305),
                                    y = e)
                            }
                            function j(e) {
                                e !== V ? (D(2884),
                                e !== x && (e === U ? t.cullFace(1029) : e === G ? t.cullFace(1028) : t.cullFace(1032))) : R(2884),
                                    x = e
                            }
                            function H(e, i, n) {
                                e ? (D(32823),
                                w === i && S === n || (t.polygonOffset(i, n),
                                    w = i,
                                    S = n)) : R(32823)
                            }
                            function q(e) {
                                void 0 === e && (e = 33984 + M - 1),
                                P !== e && (t.activeTexture(e),
                                    P = e)
                            }
                            return {
                                buffers: {
                                    color: r,
                                    depth: s,
                                    stencil: a
                                },
                                enable: D,
                                disable: R,
                                bindFramebuffer: function(e, i) {
                                    return h[e] !== i && (t.bindFramebuffer(e, i),
                                        h[e] = i,
                                    n && (36009 === e && (h[36160] = i),
                                    36160 === e && (h[36009] = i)),
                                        !0)
                                },
                                useProgram: function(e) {
                                    return l !== e && (t.useProgram(e),
                                        l = e,
                                        !0)
                                },
                                setBlending: B,
                                setMaterial: function(t, e) {
                                    (t.side === Y ? R : D)(2884);
                                    let i = t.side === J;
                                    e && (i = !i),
                                        W(i),
                                        t.blending === tt && !1 === t.transparent ? B($) : B(t.blending, t.blendEquation, t.blendSrc, t.blendDst, t.blendEquationAlpha, t.blendSrcAlpha, t.blendDstAlpha, t.premultipliedAlpha),
                                        s.setFunc(t.depthFunc),
                                        s.setTest(t.depthTest),
                                        s.setMask(t.depthWrite),
                                        r.setMask(t.colorWrite),
                                        e = t.stencilWrite,
                                        a.setTest(e),
                                    e && (a.setMask(t.stencilWriteMask),
                                        a.setFunc(t.stencilFunc, t.stencilRef, t.stencilFuncMask),
                                        a.setOp(t.stencilFail, t.stencilZFail, t.stencilZPass)),
                                        H(t.polygonOffset, t.polygonOffsetFactor, t.polygonOffsetUnits),
                                        (!0 === t.alphaToCoverage ? D : R)(32926)
                                },
                                setFlipSided: W,
                                setCullFace: j,
                                setLineWidth: function(e) {
                                    e !== b && (C && t.lineWidth(e),
                                        b = e)
                                },
                                setPolygonOffset: H,
                                setScissorTest: function(t) {
                                    (t ? D : R)(3089)
                                },
                                activeTexture: q,
                                bindTexture: function(e, i) {
                                    null === P && q();
                                    let n = E[P];
                                    void 0 === n && (n = {
                                        type: void 0,
                                        texture: void 0
                                    },
                                        E[P] = n),
                                    n.type === e && n.texture === i || (t.bindTexture(e, i || O[e]),
                                        n.type = e,
                                        n.texture = i)
                                },
                                unbindTexture: function() {
                                    const e = E[P];
                                    void 0 !== e && void 0 !== e.type && (t.bindTexture(e.type, null),
                                        e.type = void 0,
                                        e.texture = void 0)
                                },
                                compressedTexImage2D: function() {
                                    try {
                                        t.compressedTexImage2D.apply(t, arguments)
                                    } catch (t) {}
                                },
                                texImage2D: function() {
                                    try {
                                        t.texImage2D.apply(t, arguments)
                                    } catch (t) {}
                                },
                                texImage3D: function() {
                                    try {
                                        t.texImage3D.apply(t, arguments)
                                    } catch (t) {}
                                },
                                texStorage2D: function() {
                                    try {
                                        t.texStorage2D.apply(t, arguments)
                                    } catch (t) {}
                                },
                                texStorage3D: function() {
                                    try {
                                        t.texStorage3D.apply(t, arguments)
                                    } catch (t) {}
                                },
                                texSubImage2D: function() {
                                    try {
                                        t.texSubImage2D.apply(t, arguments)
                                    } catch (t) {}
                                },
                                texSubImage3D: function() {
                                    try {
                                        t.texSubImage3D.apply(t, arguments)
                                    } catch (t) {}
                                },
                                compressedTexSubImage2D: function() {
                                    try {
                                        t.compressedTexSubImage2D.apply(t, arguments)
                                    } catch (t) {}
                                },
                                scissor: function(e) {
                                    !1 === I.equals(e) && (t.scissor(e.x, e.y, e.z, e.w),
                                        I.copy(e))
                                },
                                viewport: function(e) {
                                    !1 === k.equals(e) && (t.viewport(e.x, e.y, e.z, e.w),
                                        k.copy(e))
                                },
                                reset: function() {
                                    t.disable(3042),
                                        t.disable(2884),
                                        t.disable(2929),
                                        t.disable(32823),
                                        t.disable(3089),
                                        t.disable(2960),
                                        t.disable(32926),
                                        t.blendEquation(32774),
                                        t.blendFunc(1, 0),
                                        t.blendFuncSeparate(1, 0, 1, 0),
                                        t.colorMask(!0, !0, !0, !0),
                                        t.clearColor(0, 0, 0, 0),
                                        t.depthMask(!0),
                                        t.depthFunc(513),
                                        t.clearDepth(1),
                                        t.stencilMask(4294967295),
                                        t.stencilFunc(519, 0, 4294967295),
                                        t.stencilOp(7680, 7680, 7680),
                                        t.clearStencil(0),
                                        t.cullFace(1029),
                                        t.frontFace(2305),
                                        t.polygonOffset(0, 0),
                                        t.activeTexture(33984),
                                        t.bindFramebuffer(36160, null),
                                    !0 === n && (t.bindFramebuffer(36009, null),
                                        t.bindFramebuffer(36008, null)),
                                        t.useProgram(null),
                                        t.lineWidth(1),
                                        t.scissor(0, 0, t.canvas.width, t.canvas.height),
                                        t.viewport(0, 0, t.canvas.width, t.canvas.height),
                                        o = {},
                                        P = null,
                                        E = {},
                                        h = {},
                                        l = null,
                                        u = !1,
                                        c = null,
                                        d = null,
                                        p = null,
                                        f = null,
                                        m = null,
                                        g = null,
                                        v = null,
                                        _ = !1,
                                        y = null,
                                        x = null,
                                        b = null,
                                        w = null,
                                        S = null,
                                        I.set(0, 0, t.canvas.width, t.canvas.height),
                                        k.set(0, 0, t.canvas.width, t.canvas.height),
                                        r.reset(),
                                        s.reset(),
                                        a.reset()
                                }
                            }
                        }
                        function Gh(t, e, i, n, r, s, a) {
                            const o = r.isWebGL2
                                , h = (r.maxTextures,
                                r.maxCubemapSize)
                                , l = r.maxTextureSize
                                , u = r.maxSamples
                                , c = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : void 0
                                , d = new WeakMap;
                            let p, f = !1;
                            try {
                                f = "undefined" != typeof OffscreenCanvas && null !== new OffscreenCanvas(1,1).getContext("2d")
                            } catch (t) {}
                            function m(t, e) {
                                return f ? new OffscreenCanvas(t,e) : Tn("canvas")
                            }
                            function g(t, e, i, n) {
                                let r = 1;
                                if ((t.width > n || t.height > n) && (r = n / Math.max(t.width, t.height)),
                                r < 1 || !0 === e) {
                                    if ("undefined" != typeof HTMLImageElement && t instanceof HTMLImageElement || "undefined" != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement || "undefined" != typeof ImageBitmap && t instanceof ImageBitmap) {
                                        const s = e ? xn : Math.floor;
                                        n = s(r * t.width),
                                            e = s(r * t.height),
                                        void 0 === p && (p = m(n, e));
                                        const a = i ? m(n, e) : p;
                                        a.width = n,
                                            a.height = e;
                                        return a.getContext("2d").drawImage(t, 0, 0, n, e),
                                            a
                                    }
                                    return t
                                }
                                return t
                            }
                            function v(t) {
                                return _n(t.width) && _n(t.height)
                            }
                            function _(t, e) {
                                return t.generateMipmaps && e && t.minFilter !== Zt && t.minFilter !== $t
                            }
                            function y(e) {
                                t.generateMipmap(e)
                            }
                            function x(i, n, r, s) {
                                if (!1 === o)
                                    return n;
                                if (null !== i && void 0 !== t[i])
                                    return t[i];
                                let a = n;
                                return 6403 === n && (5126 === r && (a = 33326),
                                5131 === r && (a = 33325),
                                5121 === r && (a = 33321)),
                                6407 === n && (5126 === r && (a = 34837),
                                5131 === r && (a = 34843),
                                5121 === r && (a = 32849)),
                                6408 === n && (5126 === r && (a = 34836),
                                5131 === r && (a = 34842),
                                5121 === r && (a = s === Li ? 35907 : 32856)),
                                33325 !== a && 33326 !== a && 34842 !== a && 34836 !== a || e.get("EXT_color_buffer_float"),
                                    a
                            }
                            function b(t, e, i) {
                                return !0 === _(t, i) || t.isFramebufferTexture && t.minFilter !== Zt && t.minFilter !== $t ? Math.log2(Math.max(e.width, e.height)) + 1 : void 0 !== t.mipmaps && 0 < t.mipmaps.length ? t.mipmaps.length : t.isCompressedTexture && Array.isArray(t.image) ? e.mipmaps.length : 1
                            }
                            function w(t) {
                                return t === Zt || t === Jt || t === Qt ? 9728 : 9729
                            }
                            function S(e) {
                                const i = e.target;
                                var r;
                                i.removeEventListener("dispose", S),
                                    r = i,
                                void 0 !== (e = n.get(r)).__webglInit && (t.deleteTexture(e.__webglTexture),
                                    n.remove(r)),
                                i.isVideoTexture && d.delete(i),
                                    a.memory.textures--
                            }
                            function M(e) {
                                const i = e.target;
                                i.removeEventListener("dispose", M),
                                    function(e) {
                                        var i = e.texture
                                            , r = n.get(e)
                                            , s = n.get(i);
                                        if (e) {
                                            if (void 0 !== s.__webglTexture && (t.deleteTexture(s.__webglTexture),
                                                a.memory.textures--),
                                            e.depthTexture && e.depthTexture.dispose(),
                                                e.isWebGLCubeRenderTarget)
                                                for (let e = 0; e < 6; e++)
                                                    t.deleteFramebuffer(r.__webglFramebuffer[e]),
                                                    r.__webglDepthbuffer && t.deleteRenderbuffer(r.__webglDepthbuffer[e]);
                                            else
                                                t.deleteFramebuffer(r.__webglFramebuffer),
                                                r.__webglDepthbuffer && t.deleteRenderbuffer(r.__webglDepthbuffer),
                                                r.__webglMultisampledFramebuffer && t.deleteFramebuffer(r.__webglMultisampledFramebuffer),
                                                r.__webglColorRenderbuffer && t.deleteRenderbuffer(r.__webglColorRenderbuffer),
                                                r.__webglDepthRenderbuffer && t.deleteRenderbuffer(r.__webglDepthRenderbuffer);
                                            if (e.isWebGLMultipleRenderTargets)
                                                for (let e = 0, r = i.length; e < r; e++) {
                                                    var o = n.get(i[e]);
                                                    o.__webglTexture && (t.deleteTexture(o.__webglTexture),
                                                        a.memory.textures--),
                                                        n.remove(i[e])
                                                }
                                            n.remove(i),
                                                n.remove(e)
                                        }
                                    }(i)
                            }
                            let C = 0;
                            function A(t, e) {
                                var r, s = n.get(t);
                                if (t.isVideoTexture && (o = t,
                                    r = a.render.frame,
                                d.get(o) !== r && (d.set(o, r),
                                    o.update())),
                                0 < t.version && s.__version !== t.version) {
                                    var o = t.image;
                                    if (void 0 !== o && !1 !== o.complete)
                                        return void k(s, t, e)
                                }
                                i.activeTexture(33984 + e),
                                    i.bindTexture(3553, s.__webglTexture)
                            }
                            function T(e, r) {
                                var a = n.get(e);
                                0 < e.version && a.__version !== e.version ? function(e, n, r) {
                                    if (6 === n.image.length) {
                                        I(e, n),
                                            i.activeTexture(33984 + r),
                                            i.bindTexture(34067, e.__webglTexture),
                                            t.pixelStorei(37440, n.flipY),
                                            t.pixelStorei(37441, n.premultiplyAlpha),
                                            t.pixelStorei(3317, n.unpackAlignment),
                                            t.pixelStorei(37443, 0);
                                        var a = n && (n.isCompressedTexture || n.image[0].isCompressedTexture)
                                            , l = n.image[0] && n.image[0].isDataTexture;
                                        const C = [];
                                        for (let t = 0; t < 6; t++)
                                            C[t] = a || l ? l ? n.image[t].image : n.image[t] : g(n.image[t], !1, !0, h);
                                        var u = C[0]
                                            , c = v(u) || o
                                            , d = s.convert(n.format)
                                            , p = s.convert(n.type)
                                            , f = x(n.internalFormat, d, p, n.encoding)
                                            , m = o && !0 !== n.isVideoTexture;
                                        r = void 0 === e.__version;
                                        let A, T = b(n, u, c);
                                        if (L(34067, n, c),
                                            a) {
                                            m && r && i.texStorage2D(34067, T, f, u.width, u.height);
                                            for (let t = 0; t < 6; t++) {
                                                A = C[t].mipmaps;
                                                for (let e = 0; e < A.length; e++) {
                                                    var w = A[e];
                                                    n.format !== _e && n.format !== ve ? null !== d && (m ? i.compressedTexSubImage2D(34069 + t, e, 0, 0, w.width, w.height, d, w.data) : i.compressedTexImage2D(34069 + t, e, f, w.width, w.height, 0, w.data)) : m ? i.texSubImage2D(34069 + t, e, 0, 0, w.width, w.height, d, p, w.data) : i.texImage2D(34069 + t, e, f, w.width, w.height, 0, d, p, w.data)
                                                }
                                            }
                                        } else {
                                            A = n.mipmaps,
                                            m && r && (0 < A.length && T++,
                                                i.texStorage2D(34067, T, f, C[0].width, C[0].height));
                                            for (let t = 0; t < 6; t++)
                                                if (l) {
                                                    m ? i.texSubImage2D(34069 + t, 0, 0, 0, C[t].width, C[t].height, d, p, C[t].data) : i.texImage2D(34069 + t, 0, f, C[t].width, C[t].height, 0, d, p, C[t].data);
                                                    for (let e = 0; e < A.length; e++) {
                                                        var S = A[e].image[t].image;
                                                        m ? i.texSubImage2D(34069 + t, e + 1, 0, 0, S.width, S.height, d, p, S.data) : i.texImage2D(34069 + t, e + 1, f, S.width, S.height, 0, d, p, S.data)
                                                    }
                                                } else {
                                                    m ? i.texSubImage2D(34069 + t, 0, 0, 0, d, p, C[t]) : i.texImage2D(34069 + t, 0, f, d, p, C[t]);
                                                    for (let e = 0; e < A.length; e++) {
                                                        var M = A[e];
                                                        m ? i.texSubImage2D(34069 + t, e + 1, 0, 0, d, p, M.image[t]) : i.texImage2D(34069 + t, e + 1, f, d, p, M.image[t])
                                                    }
                                                }
                                        }
                                        _(n, c) && y(34067),
                                            e.__version = n.version,
                                        n.onUpdate && n.onUpdate(n)
                                    }
                                }(a, e, r) : (i.activeTexture(33984 + r),
                                    i.bindTexture(34067, a.__webglTexture))
                            }
                            const P = {
                                [Ht]: 10497,
                                [qt]: 33071,
                                [Xt]: 33648
                            }
                                , E = {
                                [Zt]: 9728,
                                [Jt]: 9984,
                                [Qt]: 9986,
                                [$t]: 9729,
                                [te]: 9985,
                                [ie]: 9987
                            };
                            function L(i, s, a) {
                                a ? (t.texParameteri(i, 10242, P[s.wrapS]),
                                    t.texParameteri(i, 10243, P[s.wrapT]),
                                32879 !== i && 35866 !== i || t.texParameteri(i, 32882, P[s.wrapR]),
                                    t.texParameteri(i, 10240, E[s.magFilter]),
                                    t.texParameteri(i, 10241, E[s.minFilter])) : (t.texParameteri(i, 10242, 33071),
                                    t.texParameteri(i, 10243, 33071),
                                32879 !== i && 35866 !== i || t.texParameteri(i, 32882, 33071),
                                s.wrapS !== qt || s.wrapT,
                                    t.texParameteri(i, 10240, w(s.magFilter)),
                                    t.texParameteri(i, 10241, w(s.minFilter)),
                                s.minFilter !== Zt && s.minFilter),
                                !0 === e.has("EXT_texture_filter_anisotropic") && (a = e.get("EXT_texture_filter_anisotropic"),
                                s.type === ue && !1 === e.has("OES_texture_float_linear") || !1 === o && s.type === ce && !1 === e.has("OES_texture_half_float_linear") || (1 < s.anisotropy || n.get(s).__currentAnisotropy) && (t.texParameterf(i, a.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(s.anisotropy, r.getMaxAnisotropy())),
                                    n.get(s).__currentAnisotropy = s.anisotropy))
                            }
                            function I(e, i) {
                                void 0 === e.__webglInit && (e.__webglInit = !0,
                                    i.addEventListener("dispose", S),
                                    e.__webglTexture = t.createTexture(),
                                    a.memory.textures++)
                            }
                            function k(e, n, r) {
                                let a = 3553;
                                n.isDataTexture2DArray && (a = 35866),
                                n.isDataTexture3D && (a = 32879),
                                    I(e, n),
                                    i.activeTexture(33984 + r),
                                    i.bindTexture(a, e.__webglTexture),
                                    t.pixelStorei(37440, n.flipY),
                                    t.pixelStorei(37441, n.premultiplyAlpha),
                                    t.pixelStorei(3317, n.unpackAlignment),
                                    t.pixelStorei(37443, 0);
                                var h = (S = n,
                                !o && (S.wrapS !== qt || S.wrapT !== qt || S.minFilter !== Zt && S.minFilter !== $t) && !1 === v(n.image))
                                    , u = g(n.image, h, !1, l)
                                    , c = (r = v(u) || o,
                                    s.convert(n.format));
                                let d, p = s.convert(n.type), f = x(n.internalFormat, c, p, n.encoding);
                                L(a, n, r);
                                var m = n.mipmaps
                                    , w = o && !0 !== n.isVideoTexture
                                    , S = void 0 === e.__version;
                                h = b(n, u, r);
                                if (n.isDepthTexture)
                                    f = 6402,
                                        o ? f = n.type === ue ? 36012 : n.type === le ? 33190 : n.type === me ? 35056 : 33189 : n.type,
                                    n.format === be && 6402 === f && n.type !== oe && n.type !== le && (n.type = oe,
                                        p = s.convert(n.type)),
                                    n.format === we && 6402 === f && (f = 34041,
                                    n.type !== me && (n.type = me,
                                        p = s.convert(n.type))),
                                        w && S ? i.texStorage2D(3553, 1, f, u.width, u.height) : i.texImage2D(3553, 0, f, u.width, u.height, 0, c, p, null);
                                else if (n.isDataTexture)
                                    if (0 < m.length && r) {
                                        w && S && i.texStorage2D(3553, h, f, m[0].width, m[0].height);
                                        for (let t = 0, e = m.length; t < e; t++)
                                            d = m[t],
                                                w ? i.texSubImage2D(3553, 0, 0, 0, d.width, d.height, c, p, d.data) : i.texImage2D(3553, t, f, d.width, d.height, 0, c, p, d.data);
                                        n.generateMipmaps = !1
                                    } else
                                        w ? (S && i.texStorage2D(3553, h, f, u.width, u.height),
                                            i.texSubImage2D(3553, 0, 0, 0, u.width, u.height, c, p, u.data)) : i.texImage2D(3553, 0, f, u.width, u.height, 0, c, p, u.data);
                                else if (n.isCompressedTexture) {
                                    w && S && i.texStorage2D(3553, h, f, m[0].width, m[0].height);
                                    for (let t = 0, e = m.length; t < e; t++)
                                        d = m[t],
                                            n.format !== _e && n.format !== ve ? null !== c && (w ? i.compressedTexSubImage2D(3553, t, 0, 0, d.width, d.height, c, d.data) : i.compressedTexImage2D(3553, t, f, d.width, d.height, 0, d.data)) : w ? i.texSubImage2D(3553, t, 0, 0, d.width, d.height, c, p, d.data) : i.texImage2D(3553, t, f, d.width, d.height, 0, c, p, d.data)
                                } else if (n.isDataTexture2DArray)
                                    w ? (S && i.texStorage3D(35866, h, f, u.width, u.height, u.depth),
                                        i.texSubImage3D(35866, 0, 0, 0, 0, u.width, u.height, u.depth, c, p, u.data)) : i.texImage3D(35866, 0, f, u.width, u.height, u.depth, 0, c, p, u.data);
                                else if (n.isDataTexture3D)
                                    w ? (S && i.texStorage3D(32879, h, f, u.width, u.height, u.depth),
                                        i.texSubImage3D(32879, 0, 0, 0, 0, u.width, u.height, u.depth, c, p, u.data)) : i.texImage3D(32879, 0, f, u.width, u.height, u.depth, 0, c, p, u.data);
                                else if (n.isFramebufferTexture)
                                    w && S ? i.texStorage2D(3553, h, f, u.width, u.height) : i.texImage2D(3553, 0, f, u.width, u.height, 0, c, p, null);
                                else if (0 < m.length && r) {
                                    w && S && i.texStorage2D(3553, h, f, m[0].width, m[0].height);
                                    for (let t = 0, e = m.length; t < e; t++)
                                        d = m[t],
                                            w ? i.texSubImage2D(3553, t, 0, 0, c, p, d) : i.texImage2D(3553, t, f, c, p, d);
                                    n.generateMipmaps = !1
                                } else
                                    w ? (S && i.texStorage2D(3553, h, f, u.width, u.height),
                                        i.texSubImage2D(3553, 0, 0, 0, c, p, u)) : i.texImage2D(3553, 0, f, c, p, u);
                                _(n, r) && y(a),
                                    e.__version = n.version,
                                n.onUpdate && n.onUpdate(n)
                            }
                            function N(e, r, a, o, h) {
                                var l = s.convert(a.format)
                                    , u = s.convert(a.type)
                                    , d = x(a.internalFormat, l, u, a.encoding);
                                n.get(r).__hasExternalTextures || (32879 === h || 35866 === h ? i.texImage3D(h, 0, d, r.width, r.height, r.depth, 0, l, u, null) : i.texImage2D(h, 0, d, r.width, r.height, 0, l, u, null)),
                                    i.bindFramebuffer(36160, e),
                                    r.useRenderToTexture ? c.framebufferTexture2DMultisampleEXT(36160, o, h, n.get(a).__webglTexture, 0, R(r)) : t.framebufferTexture2D(36160, o, h, n.get(a).__webglTexture, 0),
                                    i.bindFramebuffer(36160, null)
                            }
                            function O(e, i, n) {
                                if (t.bindRenderbuffer(36161, e),
                                i.depthBuffer && !i.stencilBuffer) {
                                    let r = 33189;
                                    n || i.useRenderToTexture ? ((a = i.depthTexture) && a.isDepthTexture && (a.type === ue ? r = 36012 : a.type === le && (r = 33190)),
                                        a = R(i),
                                        i.useRenderToTexture ? c.renderbufferStorageMultisampleEXT(36161, a, r, i.width, i.height) : t.renderbufferStorageMultisample(36161, a, r, i.width, i.height)) : t.renderbufferStorage(36161, r, i.width, i.height),
                                        t.framebufferRenderbuffer(36160, 36096, 36161, e)
                                } else {
                                    var r, a;
                                    i.depthBuffer && i.stencilBuffer ? (r = R(i),
                                        n && i.useRenderbuffer ? t.renderbufferStorageMultisample(36161, r, 35056, i.width, i.height) : i.useRenderToTexture ? c.renderbufferStorageMultisampleEXT(36161, r, 35056, i.width, i.height) : t.renderbufferStorage(36161, 34041, i.width, i.height),
                                        t.framebufferRenderbuffer(36160, 33306, 36161, e)) : (a = !0 === i.isWebGLMultipleRenderTargets ? i.texture[0] : i.texture,
                                        r = s.convert(a.format),
                                        e = s.convert(a.type),
                                        e = x(a.internalFormat, r, e, a.encoding),
                                        a = R(i),
                                        n && i.useRenderbuffer ? t.renderbufferStorageMultisample(36161, a, e, i.width, i.height) : i.useRenderToTexture ? c.renderbufferStorageMultisampleEXT(36161, a, e, i.width, i.height) : t.renderbufferStorage(36161, e, i.width, i.height))
                                }
                                t.bindRenderbuffer(36161, null)
                            }
                            function D(e) {
                                const r = n.get(e);
                                var s = !0 === e.isWebGLCubeRenderTarget;
                                if (e.depthTexture && !r.__autoAllocateDepthBuffer) {
                                    if (s)
                                        throw new Error("target.depthTexture not supported in Cube render targets");
                                    !function(e, r) {
                                        if (r && r.isWebGLCubeRenderTarget)
                                            throw new Error("Depth Texture with cube render targets is not supported");
                                        if (i.bindFramebuffer(36160, e),
                                        !r.depthTexture || !r.depthTexture.isDepthTexture)
                                            throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
                                        n.get(r.depthTexture).__webglTexture && r.depthTexture.image.width === r.width && r.depthTexture.image.height === r.height || (r.depthTexture.image.width = r.width,
                                            r.depthTexture.image.height = r.height,
                                            r.depthTexture.needsUpdate = !0),
                                            A(r.depthTexture, 0);
                                        var s = n.get(r.depthTexture).__webglTexture;
                                        e = R(r);
                                        if (r.depthTexture.format === be)
                                            r.useRenderToTexture ? c.framebufferTexture2DMultisampleEXT(36160, 36096, 3553, s, 0, e) : t.framebufferTexture2D(36160, 36096, 3553, s, 0);
                                        else {
                                            if (r.depthTexture.format !== we)
                                                throw new Error("Unknown depthTexture format");
                                            r.useRenderToTexture ? c.framebufferTexture2DMultisampleEXT(36160, 33306, 3553, s, 0, e) : t.framebufferTexture2D(36160, 33306, 3553, s, 0)
                                        }
                                    }(r.__webglFramebuffer, e)
                                } else if (s) {
                                    r.__webglDepthbuffer = [];
                                    for (let n = 0; n < 6; n++)
                                        i.bindFramebuffer(36160, r.__webglFramebuffer[n]),
                                            r.__webglDepthbuffer[n] = t.createRenderbuffer(),
                                            O(r.__webglDepthbuffer[n], e, !1)
                                } else
                                    i.bindFramebuffer(36160, r.__webglFramebuffer),
                                        r.__webglDepthbuffer = t.createRenderbuffer(),
                                        O(r.__webglDepthbuffer, e, !1);
                                i.bindFramebuffer(36160, null)
                            }
                            function R(t) {
                                return o && (t.useRenderbuffer || t.useRenderToTexture) ? Math.min(u, t.samples) : 0
                            }
                            let z = !1
                                , F = !1;
                            this.allocateTextureUnit = function() {
                                var t = C;
                                return C += 1,
                                    t
                            }
                                ,
                                this.resetTextureUnits = function() {
                                    C = 0
                                }
                                ,
                                this.setTexture2D = A,
                                this.setTexture2DArray = function(t, e) {
                                    var r = n.get(t);
                                    0 < t.version && r.__version !== t.version ? k(r, t, e) : (i.activeTexture(33984 + e),
                                        i.bindTexture(35866, r.__webglTexture))
                                }
                                ,
                                this.setTexture3D = function(t, e) {
                                    var r = n.get(t);
                                    0 < t.version && r.__version !== t.version ? k(r, t, e) : (i.activeTexture(33984 + e),
                                        i.bindTexture(32879, r.__webglTexture))
                                }
                                ,
                                this.setTextureCube = T,
                                this.rebindTextures = function(t, e, i) {
                                    var r = n.get(t);
                                    void 0 !== e && N(r.__webglFramebuffer, t, t.texture, 36064, 3553),
                                    void 0 !== i && D(t)
                                }
                                ,
                                this.setupRenderTarget = function(e) {
                                    const h = e.texture
                                        , l = n.get(e)
                                        , u = n.get(h);
                                    e.addEventListener("dispose", M),
                                    !0 !== e.isWebGLMultipleRenderTargets && (void 0 === u.__webglTexture && (u.__webglTexture = t.createTexture()),
                                        u.__version = h.version,
                                        a.memory.textures++);
                                    var c, d, p = !0 === e.isWebGLCubeRenderTarget, f = !0 === e.isWebGLMultipleRenderTargets, m = h.isDataTexture3D || h.isDataTexture2DArray, g = v(e) || o;
                                    if (!o || h.format !== ve || h.type !== ue && h.type !== ce || (h.format = _e),
                                        p) {
                                        l.__webglFramebuffer = [];
                                        for (let e = 0; e < 6; e++)
                                            l.__webglFramebuffer[e] = t.createFramebuffer()
                                    } else if (l.__webglFramebuffer = t.createFramebuffer(),
                                        f) {
                                        if (r.drawBuffers) {
                                            var b = e.texture;
                                            for (let e = 0, i = b.length; e < i; e++) {
                                                const i = n.get(b[e]);
                                                void 0 === i.__webglTexture && (i.__webglTexture = t.createTexture(),
                                                    a.memory.textures++)
                                            }
                                        }
                                    } else
                                        e.useRenderbuffer && o && (l.__webglMultisampledFramebuffer = t.createFramebuffer(),
                                            l.__webglColorRenderbuffer = t.createRenderbuffer(),
                                            t.bindRenderbuffer(36161, l.__webglColorRenderbuffer),
                                            c = s.convert(h.format),
                                            d = s.convert(h.type),
                                            c = x(h.internalFormat, c, d, h.encoding),
                                            d = R(e),
                                            t.renderbufferStorageMultisample(36161, d, c, e.width, e.height),
                                            i.bindFramebuffer(36160, l.__webglMultisampledFramebuffer),
                                            t.framebufferRenderbuffer(36160, 36064, 36161, l.__webglColorRenderbuffer),
                                            t.bindRenderbuffer(36161, null),
                                        e.depthBuffer && (l.__webglDepthRenderbuffer = t.createRenderbuffer(),
                                            O(l.__webglDepthRenderbuffer, e, !0)),
                                            i.bindFramebuffer(36160, null));
                                    if (p) {
                                        i.bindTexture(34067, u.__webglTexture),
                                            L(34067, h, g);
                                        for (let t = 0; t < 6; t++)
                                            N(l.__webglFramebuffer[t], e, h, 36064, 34069 + t);
                                        _(h, g) && y(34067),
                                            i.unbindTexture()
                                    } else if (f) {
                                        var w = e.texture;
                                        for (let t = 0, r = w.length; t < r; t++) {
                                            var S = w[t]
                                                , C = n.get(S);
                                            i.bindTexture(3553, C.__webglTexture),
                                                L(3553, S, g),
                                                N(l.__webglFramebuffer, e, S, 36064 + t, 3553),
                                            _(S, g) && y(3553)
                                        }
                                        i.unbindTexture()
                                    } else {
                                        let t = 3553;
                                        m && o && (t = (m = h.isDataTexture3D) ? 32879 : 35866),
                                            i.bindTexture(t, u.__webglTexture),
                                            L(t, h, g),
                                            N(l.__webglFramebuffer, e, h, 36064, t),
                                        _(h, g) && y(t),
                                            i.unbindTexture()
                                    }
                                    e.depthBuffer && D(e)
                                }
                                ,
                                this.updateRenderTargetMipmap = function(t) {
                                    var e = v(t) || o
                                        , r = !0 === t.isWebGLMultipleRenderTargets ? t.texture : [t.texture];
                                    for (let o = 0, h = r.length; o < h; o++) {
                                        var s, a = r[o];
                                        _(a, e) && (s = t.isWebGLCubeRenderTarget ? 34067 : 3553,
                                            a = n.get(a).__webglTexture,
                                            i.bindTexture(s, a),
                                            y(s),
                                            i.unbindTexture())
                                    }
                                }
                                ,
                                this.updateMultisampleRenderTarget = function(e) {
                                    if (e.useRenderbuffer && o) {
                                        var r = e.width
                                            , s = e.height;
                                        let o = 16384;
                                        const l = [36064];
                                        var a = e.stencilBuffer ? 33306 : 36096;
                                        e.depthBuffer && l.push(a),
                                        e.ignoreDepthForMultisampleCopy || (e.depthBuffer && (o |= 256),
                                        e.stencilBuffer && (o |= 1024));
                                        var h = n.get(e);
                                        i.bindFramebuffer(36008, h.__webglMultisampledFramebuffer),
                                            i.bindFramebuffer(36009, h.__webglFramebuffer),
                                        e.ignoreDepthForMultisampleCopy && (t.invalidateFramebuffer(36008, [a]),
                                            t.invalidateFramebuffer(36009, [a])),
                                            t.blitFramebuffer(0, 0, r, s, 0, 0, r, s, o, 9728),
                                            t.invalidateFramebuffer(36008, l),
                                            i.bindFramebuffer(36008, null),
                                            i.bindFramebuffer(36009, h.__webglMultisampledFramebuffer)
                                    }
                                }
                                ,
                                this.setupDepthRenderbuffer = D,
                                this.setupFrameBufferTexture = N,
                                this.safeSetTexture2D = function(t, e) {
                                    t && t.isWebGLRenderTarget && (!1 === z && (z = !0),
                                        t = t.texture),
                                        A(t, e)
                                }
                                ,
                                this.safeSetTextureCube = function(t, e) {
                                    t && t.isWebGLCubeRenderTarget && (!1 === F && (F = !0),
                                        t = t.texture),
                                        T(t, e)
                                }
                        }
                        function Wh(t, e, i) {
                            const n = i.isWebGL2;
                            return {
                                convert: function(t) {
                                    let i;
                                    if (t === re)
                                        return 5121;
                                    if (t === de)
                                        return 32819;
                                    if (t === pe)
                                        return 32820;
                                    if (t === fe)
                                        return 33635;
                                    if (t === se)
                                        return 5120;
                                    if (t === ae)
                                        return 5122;
                                    if (t === oe)
                                        return 5123;
                                    if (t === he)
                                        return 5124;
                                    if (t === le)
                                        return 5125;
                                    if (t === ue)
                                        return 5126;
                                    if (t === ce)
                                        return n ? 5131 : (i = e.get("OES_texture_half_float"),
                                            null !== i ? i.HALF_FLOAT_OES : null);
                                    if (t === ge)
                                        return 6406;
                                    if (t === ve)
                                        return 6407;
                                    if (t === _e)
                                        return 6408;
                                    if (t === ye)
                                        return 6409;
                                    if (t === xe)
                                        return 6410;
                                    if (t === be)
                                        return 6402;
                                    if (t === we)
                                        return 34041;
                                    if (t === Se)
                                        return 6403;
                                    if (t === Me)
                                        return 36244;
                                    if (t === Ce)
                                        return 33319;
                                    if (t === Ae)
                                        return 33320;
                                    if (t === Te)
                                        return 36248;
                                    if (t === Pe)
                                        return 36249;
                                    if (t === Ee || t === Le || t === Ie || t === ke) {
                                        if (i = e.get("WEBGL_compressed_texture_s3tc"),
                                        null === i)
                                            return null;
                                        if (t === Ee)
                                            return i.COMPRESSED_RGB_S3TC_DXT1_EXT;
                                        if (t === Le)
                                            return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                                        if (t === Ie)
                                            return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                                        if (t === ke)
                                            return i.COMPRESSED_RGBA_S3TC_DXT5_EXT
                                    }
                                    if (t === Ne || t === Oe || t === De || t === Re) {
                                        if (i = e.get("WEBGL_compressed_texture_pvrtc"),
                                        null === i)
                                            return null;
                                        if (t === Ne)
                                            return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                                        if (t === Oe)
                                            return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                                        if (t === De)
                                            return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                                        if (t === Re)
                                            return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
                                    }
                                    if (t === ze)
                                        return i = e.get("WEBGL_compressed_texture_etc1"),
                                            null !== i ? i.COMPRESSED_RGB_ETC1_WEBGL : null;
                                    if ((t === Fe || t === Be) && (i = e.get("WEBGL_compressed_texture_etc"),
                                    null !== i)) {
                                        if (t === Fe)
                                            return i.COMPRESSED_RGB8_ETC2;
                                        if (t === Be)
                                            return i.COMPRESSED_RGBA8_ETC2_EAC
                                    }
                                    return t === Ve || t === Ue || t === Ge || t === We || t === je || t === He || t === qe || t === Xe || t === Ze || t === Je || t === Ye || t === Qe || t === Ke || t === $e || t === ei || t === ii || t === ni || t === ri || t === si || t === ai || t === oi || t === hi || t === li || t === ui || t === ci || t === di || t === pi || t === fi ? (i = e.get("WEBGL_compressed_texture_astc"),
                                        null !== i ? t : null) : t === ti ? (i = e.get("EXT_texture_compression_bptc"),
                                        null !== i ? t : null) : t === me ? n ? 34042 : (i = e.get("WEBGL_depth_texture"),
                                        null !== i ? i.UNSIGNED_INT_24_8_WEBGL : null) : void 0
                                }
                            }
                        }
                        class jh extends ta {
                            constructor(t=[]) {
                                super(),
                                    this.cameras = t
                            }
                        }
                        jh.prototype.isArrayCamera = !0;
                        class Hh extends Vr {
                            constructor() {
                                super(),
                                    this.type = "Group"
                            }
                        }
                        Hh.prototype.isGroup = !0;
                        const qh = {
                            type: "move"
                        };
                        class Xh {
                            constructor() {
                                this._targetRay = null,
                                    this._grip = null,
                                    this._hand = null
                            }
                            getHandSpace() {
                                return null === this._hand && (this._hand = new Hh,
                                    this._hand.matrixAutoUpdate = !1,
                                    this._hand.visible = !1,
                                    this._hand.joints = {},
                                    this._hand.inputState = {
                                        pinching: !1
                                    }),
                                    this._hand
                            }
                            getTargetRaySpace() {
                                return null === this._targetRay && (this._targetRay = new Hh,
                                    this._targetRay.matrixAutoUpdate = !1,
                                    this._targetRay.visible = !1,
                                    this._targetRay.hasLinearVelocity = !1,
                                    this._targetRay.linearVelocity = new Fn,
                                    this._targetRay.hasAngularVelocity = !1,
                                    this._targetRay.angularVelocity = new Fn),
                                    this._targetRay
                            }
                            getGripSpace() {
                                return null === this._grip && (this._grip = new Hh,
                                    this._grip.matrixAutoUpdate = !1,
                                    this._grip.visible = !1,
                                    this._grip.hasLinearVelocity = !1,
                                    this._grip.linearVelocity = new Fn,
                                    this._grip.hasAngularVelocity = !1,
                                    this._grip.angularVelocity = new Fn),
                                    this._grip
                            }
                            dispatchEvent(t) {
                                return null !== this._targetRay && this._targetRay.dispatchEvent(t),
                                null !== this._grip && this._grip.dispatchEvent(t),
                                null !== this._hand && this._hand.dispatchEvent(t),
                                    this
                            }
                            disconnect(t) {
                                return this.dispatchEvent({
                                    type: "disconnected",
                                    data: t
                                }),
                                null !== this._targetRay && (this._targetRay.visible = !1),
                                null !== this._grip && (this._grip.visible = !1),
                                null !== this._hand && (this._hand.visible = !1),
                                    this
                            }
                            update(t, e, i) {
                                let n = null
                                    , r = null
                                    , s = null;
                                const a = this._targetRay
                                    , o = this._grip
                                    , h = this._hand;
                                if (t && "visible-blurred" !== e.session.visibilityState)
                                    if (null !== a && (n = e.getPose(t.targetRaySpace, i),
                                    null !== n && (a.matrix.fromArray(n.transform.matrix),
                                        a.matrix.decompose(a.position, a.rotation, a.scale),
                                        n.linearVelocity ? (a.hasLinearVelocity = !0,
                                            a.linearVelocity.copy(n.linearVelocity)) : a.hasLinearVelocity = !1,
                                        n.angularVelocity ? (a.hasAngularVelocity = !0,
                                            a.angularVelocity.copy(n.angularVelocity)) : a.hasAngularVelocity = !1,
                                        this.dispatchEvent(qh))),
                                    h && t.hand) {
                                        s = !0;
                                        for (const n of t.hand.values()) {
                                            var l = e.getJointPose(n, i);
                                            if (void 0 === h.joints[n.jointName]) {
                                                const t = new Hh;
                                                t.matrixAutoUpdate = !1,
                                                    t.visible = !1,
                                                    h.joints[n.jointName] = t,
                                                    h.add(t)
                                            }
                                            const t = h.joints[n.jointName];
                                            null !== l && (t.matrix.fromArray(l.transform.matrix),
                                                t.matrix.decompose(t.position, t.rotation, t.scale),
                                                t.jointRadius = l.radius),
                                                t.visible = null !== l
                                        }
                                        const n = h.joints["index-finger-tip"];
                                        var u = h.joints["thumb-tip"];
                                        u = n.position.distanceTo(u.position);
                                        h.inputState.pinching && .025 < u ? (h.inputState.pinching = !1,
                                            this.dispatchEvent({
                                                type: "pinchend",
                                                handedness: t.handedness,
                                                target: this
                                            })) : !h.inputState.pinching && u <= .015 && (h.inputState.pinching = !0,
                                            this.dispatchEvent({
                                                type: "pinchstart",
                                                handedness: t.handedness,
                                                target: this
                                            }))
                                    } else
                                        null !== o && t.gripSpace && (r = e.getPose(t.gripSpace, i),
                                        null !== r && (o.matrix.fromArray(r.transform.matrix),
                                            o.matrix.decompose(o.position, o.rotation, o.scale),
                                            r.linearVelocity ? (o.hasLinearVelocity = !0,
                                                o.linearVelocity.copy(r.linearVelocity)) : o.hasLinearVelocity = !1,
                                            r.angularVelocity ? (o.hasAngularVelocity = !0,
                                                o.angularVelocity.copy(r.angularVelocity)) : o.hasAngularVelocity = !1));
                                return null !== a && (a.visible = null !== n),
                                null !== o && (o.visible = null !== r),
                                null !== h && (h.visible = null !== s),
                                    this
                            }
                        }
                        class Zh extends In {
                            constructor(t, e, i, n, r, s, a, o, h, l) {
                                if ((l = void 0 !== l ? l : be) !== be && l !== we)
                                    throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
                                super(null, n, r, s, a, o, l, i = void 0 === (i = void 0 === i && l === be ? oe : i) && l === we ? me : i, h),
                                    this.image = {
                                        width: t,
                                        height: e
                                    },
                                    this.magFilter = void 0 !== a ? a : Zt,
                                    this.minFilter = void 0 !== o ? o : Zt,
                                    this.flipY = !1,
                                    this.generateMipmaps = !1
                            }
                        }
                        Zh.prototype.isDepthTexture = !0;
                        class Jh extends ln {
                            constructor(t, e) {
                                super();
                                const i = this;
                                let n = null
                                    , r = 1
                                    , s = null
                                    , a = "local-floor";
                                const o = t.extensions.has("WEBGL_multisampled_render_to_texture");
                                let h, l = null, u = null, c = null, d = null, p = null;
                                const f = e.getContextAttributes();
                                let m = null
                                    , g = null;
                                const v = []
                                    , _ = new Map
                                    , y = new ta;
                                y.layers.enable(1),
                                    y.viewport = new Nn;
                                const x = new ta;
                                x.layers.enable(2),
                                    x.viewport = new Nn;
                                const b = [y, x]
                                    , w = new jh;
                                w.layers.enable(1),
                                    w.layers.enable(2);
                                let S = null
                                    , M = null;
                                function C(t) {
                                    const e = _.get(t.inputSource);
                                    e && e.dispatchEvent({
                                        type: t.type,
                                        data: t.inputSource
                                    })
                                }
                                function A() {
                                    _.forEach((function(t, e) {
                                            t.disconnect(e)
                                        }
                                    )),
                                        _.clear(),
                                        S = null,
                                        M = null,
                                        t.setRenderTarget(m),
                                        d = null,
                                        c = null,
                                        u = null,
                                        n = null,
                                        g = null,
                                        k.stop(),
                                        i.isPresenting = !1,
                                        i.dispatchEvent({
                                            type: "sessionend"
                                        })
                                }
                                function T(t) {
                                    var e = n.inputSources;
                                    for (let t = 0; t < v.length; t++)
                                        _.set(e[t], v[t]);
                                    for (let e = 0; e < t.removed.length; e++) {
                                        var i = t.removed[e];
                                        const n = _.get(i);
                                        n && (n.dispatchEvent({
                                            type: "disconnected",
                                            data: i
                                        }),
                                            _.delete(i))
                                    }
                                    for (let e = 0; e < t.added.length; e++) {
                                        var r = t.added[e];
                                        const i = _.get(r);
                                        i && i.dispatchEvent({
                                            type: "connected",
                                            data: r
                                        })
                                    }
                                }
                                this.cameraAutoUpdate = !0,
                                    this.enabled = !1,
                                    this.isPresenting = !1,
                                    this.getController = function(t) {
                                        let e = v[t];
                                        return void 0 === e && (e = new Xh,
                                            v[t] = e),
                                            e.getTargetRaySpace()
                                    }
                                    ,
                                    this.getControllerGrip = function(t) {
                                        let e = v[t];
                                        return void 0 === e && (e = new Xh,
                                            v[t] = e),
                                            e.getGripSpace()
                                    }
                                    ,
                                    this.getHand = function(t) {
                                        let e = v[t];
                                        return void 0 === e && (e = new Xh,
                                            v[t] = e),
                                            e.getHandSpace()
                                    }
                                    ,
                                    this.setFramebufferScaleFactor = function(t) {
                                        r = t,
                                            i.isPresenting
                                    }
                                    ,
                                    this.setReferenceSpaceType = function(t) {
                                        a = t,
                                            i.isPresenting
                                    }
                                    ,
                                    this.getReferenceSpace = function() {
                                        return s
                                    }
                                    ,
                                    this.getBaseLayer = function() {
                                        return null !== c ? c : d
                                    }
                                    ,
                                    this.getBinding = function() {
                                        return u
                                    }
                                    ,
                                    this.getFrame = function() {
                                        return p
                                    }
                                    ,
                                    this.getSession = function() {
                                        return n
                                    }
                                    ,
                                    this.setSession = async function(l) {
                                        if (n = l,
                                        null !== n) {
                                            if (m = t.getRenderTarget(),
                                                n.addEventListener("select", C),
                                                n.addEventListener("selectstart", C),
                                                n.addEventListener("selectend", C),
                                                n.addEventListener("squeeze", C),
                                                n.addEventListener("squeezestart", C),
                                                n.addEventListener("squeezeend", C),
                                                n.addEventListener("end", A),
                                                n.addEventListener("inputsourceschange", T),
                                            !0 !== f.xrCompatible && await e.makeXRCompatible(),
                                            void 0 === n.renderState.layers || !1 === t.capabilities.isWebGL2) {
                                                var p = {
                                                    antialias: void 0 !== n.renderState.layers || f.antialias,
                                                    alpha: f.alpha,
                                                    depth: f.depth,
                                                    stencil: f.stencil,
                                                    framebufferScaleFactor: r
                                                };
                                                d = new XRWebGLLayer(n,e,p),
                                                    n.updateRenderState({
                                                        baseLayer: d
                                                    }),
                                                    g = new On(d.framebufferWidth,d.framebufferHeight,{
                                                        format: _e,
                                                        type: re,
                                                        encoding: t.outputEncoding
                                                    })
                                            } else {
                                                h = f.antialias;
                                                let i = null
                                                    , s = null
                                                    , a = null;
                                                f.depth && (a = f.stencil ? 35056 : 33190,
                                                    i = f.stencil ? we : be,
                                                    s = f.stencil ? me : oe),
                                                    p = {
                                                        colorFormat: f.alpha || h ? 32856 : 32849,
                                                        depthFormat: a,
                                                        scaleFactor: r
                                                    },
                                                    u = new XRWebGLBinding(n,e),
                                                    c = u.createProjectionLayer(p),
                                                    n.updateRenderState({
                                                        layers: [c]
                                                    }),
                                                    g = h ? new Rn(c.textureWidth,c.textureHeight,{
                                                        format: _e,
                                                        type: re,
                                                        depthTexture: new Zh(c.textureWidth,c.textureHeight,s,void 0,void 0,void 0,void 0,void 0,void 0,i),
                                                        stencilBuffer: f.stencil,
                                                        ignoreDepth: c.ignoreDepthValues,
                                                        useRenderToTexture: o,
                                                        encoding: t.outputEncoding
                                                    }) : new On(c.textureWidth,c.textureHeight,{
                                                        format: f.alpha ? _e : ve,
                                                        type: re,
                                                        depthTexture: new Zh(c.textureWidth,c.textureHeight,s,void 0,void 0,void 0,void 0,void 0,void 0,i),
                                                        stencilBuffer: f.stencil,
                                                        ignoreDepth: c.ignoreDepthValues,
                                                        encoding: t.outputEncoding
                                                    })
                                            }
                                            this.setFoveation(1),
                                                s = await n.requestReferenceSpace(a),
                                                k.setContext(n),
                                                k.start(),
                                                i.isPresenting = !0,
                                                i.dispatchEvent({
                                                    type: "sessionstart"
                                                })
                                        }
                                    }
                                ;
                                const P = new Fn
                                    , E = new Fn;
                                function L(t, e) {
                                    null === e ? t.matrixWorld.copy(t.matrix) : t.matrixWorld.multiplyMatrices(e.matrixWorld, t.matrix),
                                        t.matrixWorldInverse.copy(t.matrixWorld).invert()
                                }
                                this.updateCamera = function(t) {
                                    if (null !== n) {
                                        w.near = x.near = y.near = t.near,
                                            w.far = x.far = y.far = t.far,
                                        S === w.near && M === w.far || (n.updateRenderState({
                                            depthNear: w.near,
                                            depthFar: w.far
                                        }),
                                            S = w.near,
                                            M = w.far);
                                        var e = t.parent
                                            , i = w.cameras;
                                        L(w, e);
                                        for (let t = 0; t < i.length; t++)
                                            L(i[t], e);
                                        w.matrixWorld.decompose(w.position, w.quaternion, w.scale),
                                            t.position.copy(w.position),
                                            t.quaternion.copy(w.quaternion),
                                            t.scale.copy(w.scale),
                                            t.matrix.copy(w.matrix),
                                            t.matrixWorld.copy(w.matrixWorld);
                                        const r = t.children;
                                        for (let t = 0, e = r.length; t < e; t++)
                                            r[t].updateMatrixWorld(!0);
                                        2 === i.length ? function(t, e, i) {
                                            P.setFromMatrixPosition(e.matrixWorld),
                                                E.setFromMatrixPosition(i.matrixWorld);
                                            var n = P.distanceTo(E)
                                                , r = e.projectionMatrix.elements
                                                , s = i.projectionMatrix.elements
                                                , a = r[14] / (r[10] - 1)
                                                , o = r[14] / (r[10] + 1)
                                                , h = (r[9] + 1) / r[5]
                                                , l = (r[9] - 1) / r[5]
                                                , u = (r = a * (u = (r[8] - 1) / r[0]),
                                                s = a * (i = (s[8] + 1) / s[0]),
                                            (i = n / (i - u)) * -u);
                                            e.matrixWorld.decompose(t.position, t.quaternion, t.scale),
                                                t.translateX(u),
                                                t.translateZ(i),
                                                t.matrixWorld.compose(t.position, t.quaternion, t.scale),
                                                t.matrixWorldInverse.copy(t.matrixWorld).invert(),
                                                a += i,
                                                i = o + i,
                                                t.projectionMatrix.makePerspective(r - u, n - u + s, h * o / i * a, l * o / i * a, a, i)
                                        }(w, y, x) : w.projectionMatrix.copy(y.projectionMatrix)
                                    }
                                }
                                    ,
                                    this.getCamera = function() {
                                        return w
                                    }
                                    ,
                                    this.getFoveation = function() {
                                        return null !== c ? c.fixedFoveation : null !== d ? d.fixedFoveation : void 0
                                    }
                                    ,
                                    this.setFoveation = function(t) {
                                        null !== c && (c.fixedFoveation = t),
                                        null !== d && void 0 !== d.fixedFoveation && (d.fixedFoveation = t)
                                    }
                                ;
                                let I = null;
                                const k = new ca;
                                k.setAnimationLoop((function(e, i) {
                                        if (l = i.getViewerPose(s),
                                            p = i,
                                        null !== l) {
                                            var r = l.views;
                                            null !== d && (t.setRenderTargetFramebuffer(g, d.framebuffer),
                                                t.setRenderTarget(g));
                                            let e = !1;
                                            r.length !== w.cameras.length && (w.cameras.length = 0,
                                                e = !0);
                                            for (let i = 0; i < r.length; i++) {
                                                var a, o = r[i];
                                                let n = null;
                                                null !== d ? n = d.getViewport(o) : (n = (a = u.getViewSubImage(c, o)).viewport,
                                                0 === i && (t.setRenderTargetTextures(g, a.colorTexture, c.ignoreDepthValues ? void 0 : a.depthStencilTexture),
                                                    t.setRenderTarget(g)));
                                                const s = b[i];
                                                s.matrix.fromArray(o.transform.matrix),
                                                    s.projectionMatrix.fromArray(o.projectionMatrix),
                                                    s.viewport.set(n.x, n.y, n.width, n.height),
                                                0 === i && w.matrix.copy(s.matrix),
                                                !0 === e && w.cameras.push(s)
                                            }
                                        }
                                        var h = n.inputSources;
                                        for (let t = 0; t < v.length; t++) {
                                            const e = v[t];
                                            var f = h[t];
                                            e.update(f, i, s)
                                        }
                                        I && I(e, i),
                                            p = null
                                    }
                                )),
                                    this.setAnimationLoop = function(t) {
                                        I = t
                                    }
                                    ,
                                    this.dispose = function() {}
                            }
                        }
                        function Yh(t) {
                            function e(e, i) {
                                e.opacity.value = i.opacity,
                                i.color && e.diffuse.value.copy(i.color),
                                i.emissive && e.emissive.value.copy(i.emissive).multiplyScalar(i.emissiveIntensity),
                                i.map && (e.map.value = i.map),
                                i.alphaMap && (e.alphaMap.value = i.alphaMap),
                                i.specularMap && (e.specularMap.value = i.specularMap),
                                0 < i.alphaTest && (e.alphaTest.value = i.alphaTest);
                                var n = t.get(i).envMap;
                                let r, s;
                                n && (e.envMap.value = n,
                                    e.flipEnvMap.value = n.isCubeTexture && !1 === n.isRenderTargetTexture ? -1 : 1,
                                    e.reflectivity.value = i.reflectivity,
                                    e.ior.value = i.ior,
                                    e.refractionRatio.value = i.refractionRatio),
                                i.lightMap && (e.lightMap.value = i.lightMap,
                                    e.lightMapIntensity.value = i.lightMapIntensity),
                                i.aoMap && (e.aoMap.value = i.aoMap,
                                    e.aoMapIntensity.value = i.aoMapIntensity),
                                    i.map ? r = i.map : i.specularMap ? r = i.specularMap : i.displacementMap ? r = i.displacementMap : i.normalMap ? r = i.normalMap : i.bumpMap ? r = i.bumpMap : i.roughnessMap ? r = i.roughnessMap : i.metalnessMap ? r = i.metalnessMap : i.alphaMap ? r = i.alphaMap : i.emissiveMap ? r = i.emissiveMap : i.clearcoatMap ? r = i.clearcoatMap : i.clearcoatNormalMap ? r = i.clearcoatNormalMap : i.clearcoatRoughnessMap ? r = i.clearcoatRoughnessMap : i.specularIntensityMap ? r = i.specularIntensityMap : i.specularColorMap ? r = i.specularColorMap : i.transmissionMap ? r = i.transmissionMap : i.thicknessMap ? r = i.thicknessMap : i.sheenColorMap ? r = i.sheenColorMap : i.sheenRoughnessMap && (r = i.sheenRoughnessMap),
                                void 0 !== r && (r.isWebGLRenderTarget && (r = r.texture),
                                !0 === r.matrixAutoUpdate && r.updateMatrix(),
                                    e.uvTransform.value.copy(r.matrix)),
                                    i.aoMap ? s = i.aoMap : i.lightMap && (s = i.lightMap),
                                void 0 !== s && (s.isWebGLRenderTarget && (s = s.texture),
                                !0 === s.matrixAutoUpdate && s.updateMatrix(),
                                    e.uv2Transform.value.copy(s.matrix))
                            }
                            function i(e, i) {
                                e.roughness.value = i.roughness,
                                    e.metalness.value = i.metalness,
                                i.roughnessMap && (e.roughnessMap.value = i.roughnessMap),
                                i.metalnessMap && (e.metalnessMap.value = i.metalnessMap),
                                i.emissiveMap && (e.emissiveMap.value = i.emissiveMap),
                                i.bumpMap && (e.bumpMap.value = i.bumpMap,
                                    e.bumpScale.value = i.bumpScale,
                                i.side === J && (e.bumpScale.value *= -1)),
                                i.normalMap && (e.normalMap.value = i.normalMap,
                                    e.normalScale.value.copy(i.normalScale),
                                i.side === J && e.normalScale.value.negate()),
                                i.displacementMap && (e.displacementMap.value = i.displacementMap,
                                    e.displacementScale.value = i.displacementScale,
                                    e.displacementBias.value = i.displacementBias),
                                t.get(i).envMap && (e.envMapIntensity.value = i.envMapIntensity)
                            }
                            return {
                                refreshFogUniforms: function(t, e) {
                                    t.fogColor.value.copy(e.color),
                                        e.isFog ? (t.fogNear.value = e.near,
                                            t.fogFar.value = e.far) : e.isFogExp2 && (t.fogDensity.value = e.density)
                                },
                                refreshMaterialUniforms: function(t, n, r, s, a) {
                                    var o, h, l, u;
                                    n.isMeshBasicMaterial ? e(t, n) : n.isMeshLambertMaterial ? (e(t, n),
                                        l = t,
                                    (u = n).emissiveMap && (l.emissiveMap.value = u.emissiveMap)) : n.isMeshToonMaterial ? (e(t, n),
                                        function(t, e) {
                                            e.gradientMap && (t.gradientMap.value = e.gradientMap),
                                            e.emissiveMap && (t.emissiveMap.value = e.emissiveMap),
                                            e.bumpMap && (t.bumpMap.value = e.bumpMap,
                                                t.bumpScale.value = e.bumpScale,
                                            e.side === J && (t.bumpScale.value *= -1)),
                                            e.normalMap && (t.normalMap.value = e.normalMap,
                                                t.normalScale.value.copy(e.normalScale),
                                            e.side === J && t.normalScale.value.negate()),
                                            e.displacementMap && (t.displacementMap.value = e.displacementMap,
                                                t.displacementScale.value = e.displacementScale,
                                                t.displacementBias.value = e.displacementBias)
                                        }(t, n)) : n.isMeshPhongMaterial ? (e(t, n),
                                        function(t, e) {
                                            t.specular.value.copy(e.specular),
                                                t.shininess.value = Math.max(e.shininess, 1e-4),
                                            e.emissiveMap && (t.emissiveMap.value = e.emissiveMap),
                                            e.bumpMap && (t.bumpMap.value = e.bumpMap,
                                                t.bumpScale.value = e.bumpScale,
                                            e.side === J && (t.bumpScale.value *= -1)),
                                            e.normalMap && (t.normalMap.value = e.normalMap,
                                                t.normalScale.value.copy(e.normalScale),
                                            e.side === J && t.normalScale.value.negate()),
                                            e.displacementMap && (t.displacementMap.value = e.displacementMap,
                                                t.displacementScale.value = e.displacementScale,
                                                t.displacementBias.value = e.displacementBias)
                                        }(t, n)) : n.isMeshStandardMaterial ? (e(t, n),
                                        n.isMeshPhysicalMaterial ? function(t, e, n) {
                                            i(t, e),
                                                t.ior.value = e.ior,
                                            0 < e.sheen && (t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen),
                                                t.sheenRoughness.value = e.sheenRoughness,
                                            e.sheenColorMap && (t.sheenColorMap.value = e.sheenColorMap),
                                            e.sheenRoughnessMap && (t.sheenRoughnessMap.value = e.sheenRoughnessMap)),
                                            0 < e.clearcoat && (t.clearcoat.value = e.clearcoat,
                                                t.clearcoatRoughness.value = e.clearcoatRoughness,
                                            e.clearcoatMap && (t.clearcoatMap.value = e.clearcoatMap),
                                            e.clearcoatRoughnessMap && (t.clearcoatRoughnessMap.value = e.clearcoatRoughnessMap),
                                            e.clearcoatNormalMap && (t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),
                                                t.clearcoatNormalMap.value = e.clearcoatNormalMap,
                                            e.side === J && t.clearcoatNormalScale.value.negate())),
                                            0 < e.transmission && (t.transmission.value = e.transmission,
                                                t.transmissionSamplerMap.value = n.texture,
                                                t.transmissionSamplerSize.value.set(n.width, n.height),
                                            e.transmissionMap && (t.transmissionMap.value = e.transmissionMap),
                                                t.thickness.value = e.thickness,
                                            e.thicknessMap && (t.thicknessMap.value = e.thicknessMap),
                                                t.attenuationDistance.value = e.attenuationDistance,
                                                t.attenuationColor.value.copy(e.attenuationColor)),
                                                t.specularIntensity.value = e.specularIntensity,
                                                t.specularColor.value.copy(e.specularColor),
                                            e.specularIntensityMap && (t.specularIntensityMap.value = e.specularIntensityMap),
                                            e.specularColorMap && (t.specularColorMap.value = e.specularColorMap)
                                        }(t, n, a) : i(t, n)) : n.isMeshMatcapMaterial ? (e(t, n),
                                        function(t, e) {
                                            e.matcap && (t.matcap.value = e.matcap),
                                            e.bumpMap && (t.bumpMap.value = e.bumpMap,
                                                t.bumpScale.value = e.bumpScale,
                                            e.side === J && (t.bumpScale.value *= -1)),
                                            e.normalMap && (t.normalMap.value = e.normalMap,
                                                t.normalScale.value.copy(e.normalScale),
                                            e.side === J && t.normalScale.value.negate()),
                                            e.displacementMap && (t.displacementMap.value = e.displacementMap,
                                                t.displacementScale.value = e.displacementScale,
                                                t.displacementBias.value = e.displacementBias)
                                        }(t, n)) : n.isMeshDepthMaterial ? (e(t, n),
                                        o = t,
                                    (h = n).displacementMap && (o.displacementMap.value = h.displacementMap,
                                        o.displacementScale.value = h.displacementScale,
                                        o.displacementBias.value = h.displacementBias)) : n.isMeshDistanceMaterial ? (e(t, n),
                                        function(t, e) {
                                            e.displacementMap && (t.displacementMap.value = e.displacementMap,
                                                t.displacementScale.value = e.displacementScale,
                                                t.displacementBias.value = e.displacementBias),
                                                t.referencePosition.value.copy(e.referencePosition),
                                                t.nearDistance.value = e.nearDistance,
                                                t.farDistance.value = e.farDistance
                                        }(t, n)) : n.isMeshNormalMaterial ? (e(t, n),
                                        function(t, e) {
                                            e.bumpMap && (t.bumpMap.value = e.bumpMap,
                                                t.bumpScale.value = e.bumpScale,
                                            e.side === J && (t.bumpScale.value *= -1)),
                                            e.normalMap && (t.normalMap.value = e.normalMap,
                                                t.normalScale.value.copy(e.normalScale),
                                            e.side === J && t.normalScale.value.negate()),
                                            e.displacementMap && (t.displacementMap.value = e.displacementMap,
                                                t.displacementScale.value = e.displacementScale,
                                                t.displacementBias.value = e.displacementBias)
                                        }(t, n)) : n.isLineBasicMaterial ? (o = n,
                                        (h = t).diffuse.value.copy(o.color),
                                        h.opacity.value = o.opacity,
                                    n.isLineDashedMaterial && (h = n,
                                        (o = t).dashSize.value = h.dashSize,
                                        o.totalSize.value = h.dashSize + h.gapSize,
                                        o.scale.value = h.scale)) : n.isPointsMaterial ? function(t, e, i, n) {
                                        let r;
                                        t.diffuse.value.copy(e.color),
                                            t.opacity.value = e.opacity,
                                            t.size.value = e.size * i,
                                            t.scale.value = .5 * n,
                                        e.map && (t.map.value = e.map),
                                        e.alphaMap && (t.alphaMap.value = e.alphaMap),
                                        0 < e.alphaTest && (t.alphaTest.value = e.alphaTest),
                                            e.map ? r = e.map : e.alphaMap && (r = e.alphaMap),
                                        void 0 !== r && (!0 === r.matrixAutoUpdate && r.updateMatrix(),
                                            t.uvTransform.value.copy(r.matrix))
                                    }(t, n, r, s) : n.isSpriteMaterial ? function(t, e) {
                                        let i;
                                        t.diffuse.value.copy(e.color),
                                            t.opacity.value = e.opacity,
                                            t.rotation.value = e.rotation,
                                        e.map && (t.map.value = e.map),
                                        e.alphaMap && (t.alphaMap.value = e.alphaMap),
                                        0 < e.alphaTest && (t.alphaTest.value = e.alphaTest),
                                            e.map ? i = e.map : e.alphaMap && (i = e.alphaMap),
                                        void 0 !== i && (!0 === i.matrixAutoUpdate && i.updateMatrix(),
                                            t.uvTransform.value.copy(i.matrix))
                                    }(t, n) : n.isShadowMaterial ? (t.color.value.copy(n.color),
                                        t.opacity.value = n.opacity) : n.isShaderMaterial && (n.uniformsNeedUpdate = !1)
                                }
                            }
                        }
                        function Qh(t={}) {
                            const e = void 0 !== t.canvas ? t.canvas : function() {
                                const t = Tn("canvas");
                                return t.style.display = "block",
                                    t
                            }()
                                , i = void 0 !== t.context ? t.context : null
                                , n = void 0 !== t.alpha && t.alpha
                                , r = void 0 === t.depth || t.depth
                                , s = void 0 === t.stencil || t.stencil
                                , a = void 0 !== t.antialias && t.antialias
                                , o = void 0 === t.premultipliedAlpha || t.premultipliedAlpha
                                , h = void 0 !== t.preserveDrawingBuffer && t.preserveDrawingBuffer
                                , l = void 0 !== t.powerPreference ? t.powerPreference : "default"
                                , u = void 0 !== t.failIfMajorPerformanceCaveat && t.failIfMajorPerformanceCaveat;
                            let c = null
                                , d = null;
                            const p = []
                                , f = [];
                            this.domElement = e,
                                this.debug = {
                                    checkShaderErrors: !0
                                },
                                this.autoClear = !0,
                                this.autoClearColor = !0,
                                this.autoClearDepth = !0,
                                this.autoClearStencil = !0,
                                this.sortObjects = !0,
                                this.clippingPlanes = [],
                                this.localClippingEnabled = !1,
                                this.outputEncoding = Ei,
                                this.physicallyCorrectLights = !1,
                                this.toneMapping = kt,
                                this.toneMappingExposure = 1;
                            const m = this;
                            let g = !1
                                , v = 0
                                , _ = 0
                                , y = null
                                , x = -1
                                , b = null;
                            const w = new Nn
                                , S = new Nn;
                            let M = null
                                , C = e.width
                                , A = e.height
                                , T = 1
                                , P = null
                                , E = null;
                            const L = new Nn(0,0,C,A)
                                , I = new Nn(0,0,C,A);
                            let k = !1;
                            const N = []
                                , O = new ua;
                            let D = !1
                                , R = !1
                                , F = null;
                            const B = new mr
                                , V = new Fn
                                , U = {
                                background: null,
                                fog: null,
                                environment: null,
                                overrideMaterial: null,
                                isScene: !0
                            };
                            function G() {
                                return null === y ? T : 1
                            }
                            let W, j, H, q, X, Q, K, $, tt, et, it, nt, rt, st, at, ot, ht, lt, ut, ct, dt, pt, ft, mt = i;
                            function gt(t, i) {
                                for (let r = 0; r < t.length; r++) {
                                    var n = t[r];
                                    if (null !== (n = e.getContext(n, i)))
                                        return n
                                }
                                return null
                            }
                            try {
                                var vt = {
                                    alpha: n,
                                    depth: r,
                                    stencil: s,
                                    antialias: a,
                                    premultipliedAlpha: o,
                                    preserveDrawingBuffer: h,
                                    powerPreference: l,
                                    failIfMajorPerformanceCaveat: u
                                };
                                if ("setAttribute"in e && e.setAttribute("data-engine", "three.js r" + z),
                                    e.addEventListener("webglcontextlost", xt, !1),
                                    e.addEventListener("webglcontextrestored", bt, !1),
                                null === mt) {
                                    const t = ["webgl2", "webgl", "experimental-webgl"];
                                    if (!0 === m.isWebGL1Renderer && t.shift(),
                                        mt = gt(t, vt),
                                    null === mt)
                                        throw gt(t) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.")
                                }
                                void 0 === mt.getShaderPrecisionFormat && (mt.getShaderPrecisionFormat = function() {
                                        return {
                                            rangeMin: 1,
                                            rangeMax: 1,
                                            precision: 1
                                        }
                                    }
                                )
                            } catch (t) {
                                throw t
                            }
                            function _t() {
                                W = new ja(mt),
                                    j = new xa(mt,W,t),
                                    W.init(j),
                                    pt = new Wh(mt,W,j),
                                    H = new Uh(mt,W,j),
                                    N[0] = 1029,
                                    q = new Xa(mt),
                                    X = new Th,
                                    Q = new Gh(mt,W,H,X,j,pt,q),
                                    K = new wa(m),
                                    $ = new Wa(m),
                                    tt = new da(mt,j),
                                    ft = new _a(mt,W,tt,j),
                                    et = new Ha(mt,tt,q,ft),
                                    it = new $a(mt,et,tt,q),
                                    ut = new Ka(mt,j,Q),
                                    ot = new ba(X),
                                    nt = new Ah(m,K,$,W,j,ft,ot),
                                    rt = new Yh(X),
                                    st = new Ih,
                                    at = new zh(W,j),
                                    lt = new va(m,K,H,it,o),
                                    ht = new Vh(m,it,j),
                                    ct = new ya(mt,W,q,j),
                                    dt = new qa(mt,W,q,j),
                                    q.programs = nt.programs,
                                    m.capabilities = j,
                                    m.extensions = W,
                                    m.properties = X,
                                    m.renderLists = st,
                                    m.shadowMap = ht,
                                    m.state = H,
                                    m.info = q
                            }
                            _t();
                            const yt = new Jh(m,mt);
                            function xt(t) {
                                t.preventDefault(),
                                    g = !0
                            }
                            function bt() {
                                g = !1;
                                var t = q.autoReset
                                    , e = ht.enabled
                                    , i = ht.autoUpdate
                                    , n = ht.needsUpdate
                                    , r = ht.type;
                                _t(),
                                    q.autoReset = t,
                                    ht.enabled = e,
                                    ht.autoUpdate = i,
                                    ht.needsUpdate = n,
                                    ht.type = r
                            }
                            function wt(t) {
                                const e = t.target;
                                e.removeEventListener("dispose", wt),
                                    function(t) {
                                        const e = X.get(t).programs;
                                        void 0 !== e && (e.forEach((function(t) {
                                                nt.releaseProgram(t)
                                            }
                                        )),
                                        t.isShaderMaterial && nt.releaseShaderCache(t))
                                    }(t = e),
                                    X.remove(t)
                            }
                            this.xr = yt,
                                this.getContext = function() {
                                    return mt
                                }
                                ,
                                this.getContextAttributes = function() {
                                    return mt.getContextAttributes()
                                }
                                ,
                                this.forceContextLoss = function() {
                                    const t = W.get("WEBGL_lose_context");
                                    t && t.loseContext()
                                }
                                ,
                                this.forceContextRestore = function() {
                                    const t = W.get("WEBGL_lose_context");
                                    t && t.restoreContext()
                                }
                                ,
                                this.getPixelRatio = function() {
                                    return T
                                }
                                ,
                                this.setPixelRatio = function(t) {
                                    void 0 !== t && (T = t,
                                        this.setSize(C, A, !1))
                                }
                                ,
                                this.getSize = function(t) {
                                    return t.set(C, A)
                                }
                                ,
                                this.setSize = function(t, i, n) {
                                    yt.isPresenting || (C = t,
                                        A = i,
                                        e.width = Math.floor(t * T),
                                        e.height = Math.floor(i * T),
                                    !1 !== n && (e.style.width = t + "px",
                                        e.style.height = i + "px"),
                                        this.setViewport(0, 0, t, i))
                                }
                                ,
                                this.getDrawingBufferSize = function(t) {
                                    return t.set(C * T, A * T).floor()
                                }
                                ,
                                this.setDrawingBufferSize = function(t, i, n) {
                                    C = t,
                                        A = i,
                                        T = n,
                                        e.width = Math.floor(t * n),
                                        e.height = Math.floor(i * n),
                                        this.setViewport(0, 0, t, i)
                                }
                                ,
                                this.getCurrentViewport = function(t) {
                                    return t.copy(w)
                                }
                                ,
                                this.getViewport = function(t) {
                                    return t.copy(L)
                                }
                                ,
                                this.setViewport = function(t, e, i, n) {
                                    t.isVector4 ? L.set(t.x, t.y, t.z, t.w) : L.set(t, e, i, n),
                                        H.viewport(w.copy(L).multiplyScalar(T).floor())
                                }
                                ,
                                this.getScissor = function(t) {
                                    return t.copy(I)
                                }
                                ,
                                this.setScissor = function(t, e, i, n) {
                                    t.isVector4 ? I.set(t.x, t.y, t.z, t.w) : I.set(t, e, i, n),
                                        H.scissor(S.copy(I).multiplyScalar(T).floor())
                                }
                                ,
                                this.getScissorTest = function() {
                                    return k
                                }
                                ,
                                this.setScissorTest = function(t) {
                                    H.setScissorTest(k = t)
                                }
                                ,
                                this.setOpaqueSort = function(t) {
                                    P = t
                                }
                                ,
                                this.setTransparentSort = function(t) {
                                    E = t
                                }
                                ,
                                this.getClearColor = function(t) {
                                    return t.copy(lt.getClearColor())
                                }
                                ,
                                this.setClearColor = function() {
                                    lt.setClearColor.apply(lt, arguments)
                                }
                                ,
                                this.getClearAlpha = function() {
                                    return lt.getClearAlpha()
                                }
                                ,
                                this.setClearAlpha = function() {
                                    lt.setClearAlpha.apply(lt, arguments)
                                }
                                ,
                                this.clear = function(t, e, i) {
                                    let n = 0;
                                    void 0 !== t && !t || (n |= 16384),
                                    void 0 !== e && !e || (n |= 256),
                                    void 0 !== i && !i || (n |= 1024),
                                        mt.clear(n)
                                }
                                ,
                                this.clearColor = function() {
                                    this.clear(!0, !1, !1)
                                }
                                ,
                                this.clearDepth = function() {
                                    this.clear(!1, !0, !1)
                                }
                                ,
                                this.clearStencil = function() {
                                    this.clear(!1, !1, !0)
                                }
                                ,
                                this.dispose = function() {
                                    e.removeEventListener("webglcontextlost", xt, !1),
                                        e.removeEventListener("webglcontextrestored", bt, !1),
                                        st.dispose(),
                                        at.dispose(),
                                        X.dispose(),
                                        K.dispose(),
                                        $.dispose(),
                                        it.dispose(),
                                        ft.dispose(),
                                        nt.dispose(),
                                        yt.dispose(),
                                        yt.removeEventListener("sessionstart", Mt),
                                        yt.removeEventListener("sessionend", Ct),
                                    F && (F.dispose(),
                                        F = null),
                                        At.stop()
                                }
                                ,
                                this.renderBufferDirect = function(t, e, i, n, r, s) {
                                    null === e && (e = U);
                                    var a = r.isMesh && r.matrixWorld.determinant() < 0
                                        , o = function(t, e, i, n, r) {
                                        !0 !== e.isScene && (e = U),
                                            Q.resetTextureUnits();
                                        const s = e.fog
                                            , a = n.isMeshStandardMaterial ? e.environment : null
                                            , o = null === y ? m.outputEncoding : y.texture.encoding
                                            , h = (n.isMeshStandardMaterial ? $ : K).get(n.envMap || a)
                                            , l = !0 === n.vertexColors && !!i.attributes.color && 4 === i.attributes.color.itemSize
                                            , u = !!n.normalMap && !!i.attributes.tangent
                                            , c = !!i.morphAttributes.position
                                            , p = !!i.morphAttributes.normal
                                            , f = i.morphAttributes.position ? i.morphAttributes.position.length : 0
                                            , g = n.toneMapped ? m.toneMapping : kt
                                            , v = X.get(n)
                                            , _ = d.state.lights;
                                        var w;
                                        !0 === D && (!0 !== R && t === b || (w = t === b && n.id === x,
                                            ot.setState(n, t, w)));
                                        let S = !1;
                                        n.version === v.__version ? (v.needsLights && v.lightsStateVersion !== _.state.version || v.outputEncoding !== o || r.isInstancedMesh && !1 === v.instancing || !r.isInstancedMesh && !0 === v.instancing || r.isSkinnedMesh && !1 === v.skinning || !r.isSkinnedMesh && !0 === v.skinning || v.envMap !== h || n.fog && v.fog !== s || void 0 !== v.numClippingPlanes && (v.numClippingPlanes !== ot.numPlanes || v.numIntersection !== ot.numIntersection) || v.vertexAlphas !== l || v.vertexTangents !== u || v.morphTargets !== c || v.morphNormals !== p || v.toneMapping !== g || !0 === j.isWebGL2 && v.morphTargetsCount !== f) && (S = !0) : (S = !0,
                                            v.__version = n.version);
                                        let M = v.currentProgram;
                                        !0 === S && (M = Et(n, e, r));
                                        let C = !1
                                            , P = !1
                                            , E = !1;
                                        const L = M.getUniforms()
                                            , I = v.uniforms;
                                        if (H.useProgram(M.program) && (C = !0,
                                            P = !0,
                                            E = !0),
                                        n.id !== x && (x = n.id,
                                            P = !0),
                                        C || b !== t) {
                                            if (L.setValue(mt, "projectionMatrix", t.projectionMatrix),
                                            j.logarithmicDepthBuffer && L.setValue(mt, "logDepthBufFC", 2 / (Math.log(t.far + 1) / Math.LN2)),
                                            b !== t && (b = t,
                                                P = !0,
                                                E = !0),
                                            n.isShaderMaterial || n.isMeshPhongMaterial || n.isMeshToonMaterial || n.isMeshStandardMaterial || n.envMap) {
                                                const e = L.map.cameraPosition;
                                                void 0 !== e && e.setValue(mt, V.setFromMatrixPosition(t.matrixWorld))
                                            }
                                            (n.isMeshPhongMaterial || n.isMeshToonMaterial || n.isMeshLambertMaterial || n.isMeshBasicMaterial || n.isMeshStandardMaterial || n.isShaderMaterial) && L.setValue(mt, "isOrthographic", !0 === t.isOrthographicCamera),
                                            (n.isMeshPhongMaterial || n.isMeshToonMaterial || n.isMeshLambertMaterial || n.isMeshBasicMaterial || n.isMeshStandardMaterial || n.isShaderMaterial || n.isShadowMaterial || r.isSkinnedMesh) && L.setValue(mt, "viewMatrix", t.matrixWorldInverse)
                                        }
                                        if (r.isSkinnedMesh) {
                                            L.setOptional(mt, r, "bindMatrix"),
                                                L.setOptional(mt, r, "bindMatrixInverse");
                                            const t = r.skeleton;
                                            t && (j.floatVertexTextures ? (null === t.boneTexture && t.computeBoneTexture(),
                                                L.setValue(mt, "boneTexture", t.boneTexture, Q),
                                                L.setValue(mt, "boneTextureSize", t.boneTextureSize)) : L.setOptional(mt, t, "boneMatrices"))
                                        }
                                        return !i || void 0 === i.morphAttributes.position && void 0 === i.morphAttributes.normal || ut.update(r, i, n, M),
                                        !P && v.receiveShadow === r.receiveShadow || (v.receiveShadow = r.receiveShadow,
                                            L.setValue(mt, "receiveShadow", r.receiveShadow)),
                                        P && (L.setValue(mt, "toneMappingExposure", m.toneMappingExposure),
                                        v.needsLights && function(t, e) {
                                            t.ambientLightColor.needsUpdate = e,
                                                t.lightProbe.needsUpdate = e,
                                                t.directionalLights.needsUpdate = e,
                                                t.directionalLightShadows.needsUpdate = e,
                                                t.pointLights.needsUpdate = e,
                                                t.pointLightShadows.needsUpdate = e,
                                                t.spotLights.needsUpdate = e,
                                                t.spotLightShadows.needsUpdate = e,
                                                t.rectAreaLights.needsUpdate = e,
                                                t.hemisphereLights.needsUpdate = e
                                        }(I, E),
                                        s && n.fog && rt.refreshFogUniforms(I, s),
                                            rt.refreshMaterialUniforms(I, n, T, A, F),
                                            rh.upload(mt, v.uniformsList, I, Q)),
                                        n.isShaderMaterial && !0 === n.uniformsNeedUpdate && (rh.upload(mt, v.uniformsList, I, Q),
                                            n.uniformsNeedUpdate = !1),
                                        n.isSpriteMaterial && L.setValue(mt, "center", r.center),
                                            L.setValue(mt, "modelViewMatrix", r.modelViewMatrix),
                                            L.setValue(mt, "normalMatrix", r.normalMatrix),
                                            L.setValue(mt, "modelMatrix", r.matrixWorld),
                                            M
                                    }(t, e, i, n, r);
                                    H.setMaterial(n, a);
                                    let h = i.index;
                                    if (t = i.attributes.position,
                                    null === h) {
                                        if (void 0 === t || 0 === t.count)
                                            return
                                    } else if (0 === h.count)
                                        return;
                                    let l = 1;
                                    !0 === n.wireframe && (h = et.getWireframeAttribute(i),
                                        l = 2),
                                        ft.setup(r, n, o, i, h);
                                    let u = ct;
                                    null !== h && (c = tt.get(h),
                                        u = dt,
                                        u.setIndex(c));
                                    e = (null !== h ? h : t).count,
                                        a = i.drawRange.start * l,
                                        o = i.drawRange.count * l;
                                    var c = null !== s ? s.start * l : 0;
                                    t = null !== s ? s.count * l : 1 / 0,
                                        s = Math.max(a, c),
                                        t = Math.min(e, a + o, c + t) - 1;
                                    if (0 !== (t = Math.max(0, t - s + 1))) {
                                        if (r.isMesh)
                                            !0 === n.wireframe ? (H.setLineWidth(n.wireframeLinewidth * G()),
                                                u.setMode(1)) : u.setMode(4);
                                        else if (r.isLine) {
                                            let t = n.linewidth;
                                            void 0 === t && (t = 1),
                                                H.setLineWidth(t * G()),
                                                r.isLineSegments ? u.setMode(1) : r.isLineLoop ? u.setMode(2) : u.setMode(3)
                                        } else
                                            r.isPoints ? u.setMode(0) : r.isSprite && u.setMode(4);
                                        r.isInstancedMesh ? u.renderInstances(s, t, r.count) : i.isInstancedBufferGeometry ? (i = Math.min(i.instanceCount, i._maxInstanceCount),
                                            u.renderInstances(s, t, i)) : u.render(s, t)
                                    }
                                }
                                ,
                                this.compile = function(t, e) {
                                    d = at.get(t),
                                        d.init(),
                                        f.push(d),
                                        t.traverseVisible((function(t) {
                                                t.isLight && t.layers.test(e.layers) && (d.pushLight(t),
                                                t.castShadow && d.pushShadow(t))
                                            }
                                        )),
                                        d.setupLights(m.physicallyCorrectLights),
                                        t.traverse((function(e) {
                                                var i = e.material;
                                                if (i)
                                                    if (Array.isArray(i))
                                                        for (let n = 0; n < i.length; n++)
                                                            Et(i[n], t, e);
                                                    else
                                                        Et(i, t, e)
                                            }
                                        )),
                                        f.pop(),
                                        d = null
                                }
                            ;
                            let St = null;
                            function Mt() {
                                At.stop()
                            }
                            function Ct() {
                                At.start()
                            }
                            const At = new ca;
                            function Tt(t, e, i, n) {
                                var r = t.opaque
                                    , s = t.transmissive;
                                t = t.transparent;
                                d.setupLightsView(i),
                                0 < s.length && function(t, e, i) {
                                    if (null === F) {
                                        const t = !0 === a && !0 === j.isWebGL2 ? Rn : On;
                                        F = new t(1024,1024,{
                                            generateMipmaps: !0,
                                            type: null !== pt.convert(ce) ? ce : re,
                                            minFilter: ie,
                                            magFilter: Zt,
                                            wrapS: qt,
                                            wrapT: qt,
                                            useRenderToTexture: W.has("WEBGL_multisampled_render_to_texture")
                                        })
                                    }
                                    var n = m.getRenderTarget();
                                    m.setRenderTarget(F),
                                        m.clear();
                                    var r = m.toneMapping;
                                    m.toneMapping = kt,
                                        Pt(t, e, i),
                                        m.toneMapping = r,
                                        Q.updateMultisampleRenderTarget(F),
                                        Q.updateRenderTargetMipmap(F),
                                        m.setRenderTarget(n)
                                }(r, e, i),
                                n && H.viewport(w.copy(n)),
                                0 < r.length && Pt(r, e, i),
                                0 < s.length && Pt(s, e, i),
                                0 < t.length && Pt(t, e, i)
                            }
                            function Pt(t, e, i) {
                                var n = !0 === e.isScene ? e.overrideMaterial : null;
                                for (let o = 0, h = t.length; o < h; o++) {
                                    var r = t[o];
                                    const h = r.object;
                                    var s = r.geometry
                                        , a = null === n ? r.material : n;
                                    r = r.group;
                                    h.layers.test(i.layers) && function(t, e, i, n, r, s) {
                                        t.onBeforeRender(m, e, i, n, r, s),
                                            t.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse, t.matrixWorld),
                                            t.normalMatrix.getNormalMatrix(t.modelViewMatrix),
                                            r.onBeforeRender(m, e, i, n, t, s),
                                            !0 === r.transparent && r.side === Y ? (r.side = J,
                                                r.needsUpdate = !0,
                                                m.renderBufferDirect(i, e, n, r, t, s),
                                                r.side = Z,
                                                r.needsUpdate = !0,
                                                m.renderBufferDirect(i, e, n, r, t, s),
                                                r.side = Y) : m.renderBufferDirect(i, e, n, r, t, s),
                                            t.onAfterRender(m, e, i, n, r, s)
                                    }(h, e, i, s, a, r)
                                }
                            }
                            function Et(t, e, i) {
                                !0 !== e.isScene && (e = U);
                                const n = X.get(t);
                                var r = d.state.lights
                                    , s = d.state.shadowsArray
                                    , a = r.state.version;
                                const o = nt.getParameters(t, r.state, s, e, i);
                                s = nt.getProgramCacheKey(o);
                                let h = n.programs;
                                n.environment = t.isMeshStandardMaterial ? e.environment : null,
                                    n.fog = e.fog,
                                    n.envMap = (t.isMeshStandardMaterial ? $ : K).get(t.envMap || n.environment),
                                void 0 === h && (t.addEventListener("dispose", wt),
                                    h = new Map,
                                    n.programs = h);
                                let l = h.get(s);
                                if (void 0 !== l) {
                                    if (n.currentProgram === l && n.lightsStateVersion === a)
                                        return Lt(t, o),
                                            l
                                } else
                                    o.uniforms = nt.getUniforms(t),
                                        t.onBuild(i, o, m),
                                        t.onBeforeCompile(o, m),
                                        l = nt.acquireProgram(o, s),
                                        h.set(s, l),
                                        n.uniforms = o.uniforms;
                                const u = n.uniforms;
                                return (t.isShaderMaterial || t.isRawShaderMaterial) && !0 !== t.clipping || (u.clippingPlanes = ot.uniform),
                                    Lt(t, o),
                                    n.needsLights = (t = t).isMeshLambertMaterial || t.isMeshToonMaterial || t.isMeshPhongMaterial || t.isMeshStandardMaterial || t.isShadowMaterial || t.isShaderMaterial && !0 === t.lights,
                                    n.lightsStateVersion = a,
                                n.needsLights && (u.ambientLightColor.value = r.state.ambient,
                                    u.lightProbe.value = r.state.probe,
                                    u.directionalLights.value = r.state.directional,
                                    u.directionalLightShadows.value = r.state.directionalShadow,
                                    u.spotLights.value = r.state.spot,
                                    u.spotLightShadows.value = r.state.spotShadow,
                                    u.rectAreaLights.value = r.state.rectArea,
                                    u.ltc_1.value = r.state.rectAreaLTC1,
                                    u.ltc_2.value = r.state.rectAreaLTC2,
                                    u.pointLights.value = r.state.point,
                                    u.pointLightShadows.value = r.state.pointShadow,
                                    u.hemisphereLights.value = r.state.hemi,
                                    u.directionalShadowMap.value = r.state.directionalShadowMap,
                                    u.directionalShadowMatrix.value = r.state.directionalShadowMatrix,
                                    u.spotShadowMap.value = r.state.spotShadowMap,
                                    u.spotShadowMatrix.value = r.state.spotShadowMatrix,
                                    u.pointShadowMap.value = r.state.pointShadowMap,
                                    u.pointShadowMatrix.value = r.state.pointShadowMatrix),
                                    r = l.getUniforms(),
                                    r = rh.seqWithValue(r.seq, u),
                                    n.currentProgram = l,
                                    n.uniformsList = r,
                                    l
                            }
                            function Lt(t, e) {
                                const i = X.get(t);
                                i.outputEncoding = e.outputEncoding,
                                    i.instancing = e.instancing,
                                    i.skinning = e.skinning,
                                    i.morphTargets = e.morphTargets,
                                    i.morphNormals = e.morphNormals,
                                    i.morphTargetsCount = e.morphTargetsCount,
                                    i.numClippingPlanes = e.numClippingPlanes,
                                    i.numIntersection = e.numClipIntersection,
                                    i.vertexAlphas = e.vertexAlphas,
                                    i.vertexTangents = e.vertexTangents,
                                    i.toneMapping = e.toneMapping
                            }
                            At.setAnimationLoop((function(t) {
                                    St && St(t)
                                }
                            )),
                            "undefined" != typeof window && At.setContext(window),
                                this.setAnimationLoop = function(t) {
                                    St = t,
                                        yt.setAnimationLoop(t),
                                        null === t ? At.stop() : At.start()
                                }
                                ,
                                yt.addEventListener("sessionstart", Mt),
                                yt.addEventListener("sessionend", Ct),
                                this.render = function(t, e) {
                                    if ((void 0 === e || !0 === e.isCamera) && !0 !== g) {
                                        !0 === t.autoUpdate && t.updateMatrixWorld(),
                                        null === e.parent && e.updateMatrixWorld(),
                                        !0 === yt.enabled && !0 === yt.isPresenting && (!0 === yt.cameraAutoUpdate && yt.updateCamera(e),
                                            e = yt.getCamera()),
                                        !0 === t.isScene && t.onBeforeRender(m, t, e, y),
                                            d = at.get(t, f.length),
                                            d.init(),
                                            f.push(d),
                                            B.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse),
                                            O.setFromProjectionMatrix(B),
                                            R = this.localClippingEnabled,
                                            D = ot.init(this.clippingPlanes, R, e),
                                            c = st.get(t, p.length),
                                            c.init(),
                                            p.push(c),
                                            function t(e, i, n, r) {
                                                if (!1 === e.visible)
                                                    return;
                                                if (e.layers.test(i.layers))
                                                    if (e.isGroup)
                                                        n = e.renderOrder;
                                                    else if (e.isLOD)
                                                        !0 === e.autoUpdate && e.update(i);
                                                    else if (e.isLight)
                                                        d.pushLight(e),
                                                        e.castShadow && d.pushShadow(e);
                                                    else if (e.isSprite) {
                                                        if (!e.frustumCulled || O.intersectsSprite(e)) {
                                                            r && V.setFromMatrixPosition(e.matrixWorld).applyMatrix4(B);
                                                            const t = it.update(e)
                                                                , i = e.material;
                                                            i.visible && c.push(e, t, i, n, V.z, null)
                                                        }
                                                    } else if ((e.isMesh || e.isLine || e.isPoints) && (e.isSkinnedMesh && e.skeleton.frame !== q.render.frame && (e.skeleton.update(),
                                                        e.skeleton.frame = q.render.frame),
                                                    !e.frustumCulled || O.intersectsObject(e))) {
                                                        r && V.setFromMatrixPosition(e.matrixWorld).applyMatrix4(B);
                                                        const t = it.update(e)
                                                            , i = e.material;
                                                        if (Array.isArray(i)) {
                                                            const r = t.groups;
                                                            for (let s = 0, a = r.length; s < a; s++) {
                                                                const a = r[s]
                                                                    , o = i[a.materialIndex];
                                                                o && o.visible && c.push(e, t, o, n, V.z, a)
                                                            }
                                                        } else
                                                            i.visible && c.push(e, t, i, n, V.z, null)
                                                    }
                                                const s = e.children;
                                                for (let e = 0, a = s.length; e < a; e++)
                                                    t(s[e], i, n, r)
                                            }(t, e, 0, m.sortObjects),
                                            c.finish(),
                                        !0 === m.sortObjects && c.sort(P, E),
                                        !0 === D && ot.beginShadows();
                                        var i = d.state.shadowsArray;
                                        if (ht.render(i, t, e),
                                        !0 === D && ot.endShadows(),
                                        !0 === this.info.autoReset && this.info.reset(),
                                            lt.render(c, t),
                                            d.setupLights(m.physicallyCorrectLights),
                                            e.isArrayCamera) {
                                            var n = e.cameras;
                                            for (let e = 0, i = n.length; e < i; e++) {
                                                var r = n[e];
                                                Tt(c, t, r, r.viewport)
                                            }
                                        } else
                                            Tt(c, t, e);
                                        null !== y && (Q.updateMultisampleRenderTarget(y),
                                            Q.updateRenderTargetMipmap(y)),
                                        !0 === t.isScene && t.onAfterRender(m, t, e),
                                            H.buffers.depth.setTest(!0),
                                            H.buffers.depth.setMask(!0),
                                            H.buffers.color.setMask(!0),
                                            H.setPolygonOffset(!1),
                                            ft.resetDefaultState(),
                                            x = -1,
                                            b = null,
                                            f.pop(),
                                            d = 0 < f.length ? f[f.length - 1] : null,
                                            p.pop(),
                                            c = 0 < p.length ? p[p.length - 1] : null
                                    }
                                }
                                ,
                                this.getActiveCubeFace = function() {
                                    return v
                                }
                                ,
                                this.getActiveMipmapLevel = function() {
                                    return _
                                }
                                ,
                                this.getRenderTarget = function() {
                                    return y
                                }
                                ,
                                this.setRenderTargetTextures = function(t, e, i) {
                                    X.get(t.texture).__webglTexture = e,
                                        X.get(t.depthTexture).__webglTexture = i;
                                    const n = X.get(t);
                                    n.__hasExternalTextures = !0,
                                    n.__hasExternalTextures && (n.__autoAllocateDepthBuffer = void 0 === i,
                                    n.__autoAllocateDepthBuffer || t.useRenderToTexture && (t.useRenderToTexture = !1,
                                        t.useRenderbuffer = !0))
                                }
                                ,
                                this.setRenderTargetFramebuffer = function(t, e) {
                                    const i = X.get(t);
                                    i.__webglFramebuffer = e,
                                        i.__useDefaultFramebuffer = void 0 === e
                                }
                                ,
                                this.setRenderTarget = function(t, e=0, i=0) {
                                    y = t,
                                        v = e,
                                        _ = i;
                                    let n = !0;
                                    var r, s;
                                    t && (void 0 !== (r = X.get(t)).__useDefaultFramebuffer ? (H.bindFramebuffer(36160, null),
                                        n = !1) : void 0 === r.__webglFramebuffer ? Q.setupRenderTarget(t) : r.__hasExternalTextures && Q.rebindTextures(t, X.get(t.texture).__webglTexture, X.get(t.depthTexture).__webglTexture));
                                    let a = null
                                        , o = !1
                                        , h = !1;
                                    if (M = t ? (((s = t.texture).isDataTexture3D || s.isDataTexture2DArray) && (h = !0),
                                        s = X.get(t).__webglFramebuffer,
                                        t.isWebGLCubeRenderTarget ? (a = s[e],
                                            o = !0) : a = t.useRenderbuffer ? X.get(t).__webglMultisampledFramebuffer : s,
                                        w.copy(t.viewport),
                                        S.copy(t.scissor),
                                        t.scissorTest) : (w.copy(L).multiplyScalar(T).floor(),
                                        S.copy(I).multiplyScalar(T).floor(),
                                        k),
                                    H.bindFramebuffer(36160, a) && j.drawBuffers && n) {
                                        let e = !1;
                                        if (t)
                                            if (t.isWebGLMultipleRenderTargets) {
                                                const i = t.texture;
                                                if (N.length !== i.length || 36064 !== N[0]) {
                                                    for (let t = 0, e = i.length; t < e; t++)
                                                        N[t] = 36064 + t;
                                                    N.length = i.length,
                                                        e = !0
                                                }
                                            } else
                                                1 === N.length && 36064 === N[0] || (N[0] = 36064,
                                                    N.length = 1,
                                                    e = !0);
                                        else
                                            1 === N.length && 1029 === N[0] || (N[0] = 1029,
                                                N.length = 1,
                                                e = !0);
                                        e && (j.isWebGL2 ? mt.drawBuffers(N) : W.get("WEBGL_draw_buffers").drawBuffersWEBGL(N))
                                    }
                                    H.viewport(w),
                                        H.scissor(S),
                                        H.setScissorTest(M),
                                        o ? (s = X.get(t.texture),
                                            mt.framebufferTexture2D(36160, 36064, 34069 + e, s.__webglTexture, i)) : h && (t = X.get(t.texture),
                                            e = e || 0,
                                            mt.framebufferTextureLayer(36160, 36064, t.__webglTexture, i || 0, e)),
                                        x = -1
                                }
                                ,
                                this.readRenderTargetPixels = function(t, e, i, n, r, s, a) {
                                    if (t && t.isWebGLRenderTarget) {
                                        let c = X.get(t).__webglFramebuffer;
                                        if (t.isWebGLCubeRenderTarget && void 0 !== a && (c = c[a]),
                                            c) {
                                            H.bindFramebuffer(36160, c);
                                            try {
                                                var o = t.texture
                                                    , h = o.format
                                                    , l = o.type;
                                                if (h !== _e && pt.convert(h) !== mt.getParameter(35739))
                                                    return;
                                                var u = l === ce && (W.has("EXT_color_buffer_half_float") || j.isWebGL2 && W.has("EXT_color_buffer_float"));
                                                if (!(l === re || pt.convert(l) === mt.getParameter(35738) || l === ue && (j.isWebGL2 || W.has("OES_texture_float") || W.has("WEBGL_color_buffer_float")) || u))
                                                    return;
                                                36053 === mt.checkFramebufferStatus(36160) && 0 <= e && e <= t.width - n && 0 <= i && i <= t.height - r && mt.readPixels(e, i, n, r, pt.convert(h), pt.convert(l), s)
                                            } finally {
                                                const t = null !== y ? X.get(y).__webglFramebuffer : null;
                                                H.bindFramebuffer(36160, t)
                                            }
                                        }
                                    }
                                }
                                ,
                                this.copyFramebufferToTexture = function(t, e, i=0) {
                                    var n, r;
                                    !0 === e.isFramebufferTexture && (r = Math.pow(2, -i),
                                        n = Math.floor(e.image.width * r),
                                        r = Math.floor(e.image.height * r),
                                        Q.setTexture2D(e, 0),
                                        mt.copyTexSubImage2D(3553, i, 0, 0, t.x, t.y, n, r),
                                        H.unbindTexture())
                                }
                                ,
                                this.copyTextureToTexture = function(t, e, i, n=0) {
                                    var r = e.image.width
                                        , s = e.image.height
                                        , a = pt.convert(i.format)
                                        , o = pt.convert(i.type);
                                    Q.setTexture2D(i, 0),
                                        mt.pixelStorei(37440, i.flipY),
                                        mt.pixelStorei(37441, i.premultiplyAlpha),
                                        mt.pixelStorei(3317, i.unpackAlignment),
                                        e.isDataTexture ? mt.texSubImage2D(3553, n, t.x, t.y, r, s, a, o, e.image.data) : e.isCompressedTexture ? mt.compressedTexSubImage2D(3553, n, t.x, t.y, e.mipmaps[0].width, e.mipmaps[0].height, a, e.mipmaps[0].data) : mt.texSubImage2D(3553, n, t.x, t.y, a, o, e.image),
                                    0 === n && i.generateMipmaps && mt.generateMipmap(3553),
                                        H.unbindTexture()
                                }
                                ,
                                this.copyTextureToTexture3D = function(t, e, i, n, r=0) {
                                    if (!m.isWebGL1Renderer) {
                                        var s = t.max.x - t.min.x + 1
                                            , a = t.max.y - t.min.y + 1
                                            , o = t.max.z - t.min.z + 1
                                            , h = pt.convert(n.format)
                                            , l = pt.convert(n.type);
                                        let m;
                                        if (n.isDataTexture3D)
                                            Q.setTexture3D(n, 0),
                                                m = 32879;
                                        else {
                                            if (!n.isDataTexture2DArray)
                                                return;
                                            Q.setTexture2DArray(n, 0),
                                                m = 35866
                                        }
                                        mt.pixelStorei(37440, n.flipY),
                                            mt.pixelStorei(37441, n.premultiplyAlpha),
                                            mt.pixelStorei(3317, n.unpackAlignment);
                                        var u = mt.getParameter(3314)
                                            , c = mt.getParameter(32878)
                                            , d = mt.getParameter(3316)
                                            , p = mt.getParameter(3315)
                                            , f = mt.getParameter(32877)
                                            , g = i.isCompressedTexture ? i.mipmaps[0] : i.image;
                                        mt.pixelStorei(3314, g.width),
                                            mt.pixelStorei(32878, g.height),
                                            mt.pixelStorei(3316, t.min.x),
                                            mt.pixelStorei(3315, t.min.y),
                                            mt.pixelStorei(32877, t.min.z),
                                            i.isDataTexture || i.isDataTexture3D ? mt.texSubImage3D(m, r, e.x, e.y, e.z, s, a, o, h, l, g.data) : i.isCompressedTexture ? mt.compressedTexSubImage3D(m, r, e.x, e.y, e.z, s, a, o, h, g.data) : mt.texSubImage3D(m, r, e.x, e.y, e.z, s, a, o, h, l, g),
                                            mt.pixelStorei(3314, u),
                                            mt.pixelStorei(32878, c),
                                            mt.pixelStorei(3316, d),
                                            mt.pixelStorei(3315, p),
                                            mt.pixelStorei(32877, f),
                                        0 === r && n.generateMipmaps && mt.generateMipmap(m),
                                            H.unbindTexture()
                                    }
                                }
                                ,
                                this.initTexture = function(t) {
                                    Q.setTexture2D(t, 0),
                                        H.unbindTexture()
                                }
                                ,
                                this.resetState = function() {
                                    v = 0,
                                        _ = 0,
                                        y = null,
                                        H.reset(),
                                        ft.reset()
                                }
                                ,
                            "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{
                                detail: this
                            }))
                        }
                        Qh.prototype.isWebGLRenderer = !0;
                        class Kh extends Qh {
                        }
                        Kh.prototype.isWebGL1Renderer = !0;
                        class $h {
                            constructor(t, e=25e-5) {
                                this.name = "",
                                    this.color = new as(t),
                                    this.density = e
                            }
                            clone() {
                                return new $h(this.color,this.density)
                            }
                            toJSON() {
                                return {
                                    type: "FogExp2",
                                    color: this.color.getHex(),
                                    density: this.density
                                }
                            }
                        }
                        $h.prototype.isFogExp2 = !0;
                        class tl {
                            constructor(t, e=1, i=1e3) {
                                this.name = "",
                                    this.color = new as(t),
                                    this.near = e,
                                    this.far = i
                            }
                            clone() {
                                return new tl(this.color,this.near,this.far)
                            }
                            toJSON() {
                                return {
                                    type: "Fog",
                                    color: this.color.getHex(),
                                    near: this.near,
                                    far: this.far
                                }
                            }
                        }
                        tl.prototype.isFog = !0;
                        class el extends Vr {
                            constructor() {
                                super(),
                                    this.type = "Scene",
                                    this.background = null,
                                    this.environment = null,
                                    this.fog = null,
                                    this.overrideMaterial = null,
                                    this.autoUpdate = !0,
                                "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{
                                    detail: this
                                }))
                            }
                            copy(t, e) {
                                return super.copy(t, e),
                                null !== t.background && (this.background = t.background.clone()),
                                null !== t.environment && (this.environment = t.environment.clone()),
                                null !== t.fog && (this.fog = t.fog.clone()),
                                null !== t.overrideMaterial && (this.overrideMaterial = t.overrideMaterial.clone()),
                                    this.autoUpdate = t.autoUpdate,
                                    this.matrixAutoUpdate = t.matrixAutoUpdate,
                                    this
                            }
                            toJSON(t) {
                                const e = super.toJSON(t);
                                return null !== this.fog && (e.object.fog = this.fog.toJSON()),
                                    e
                            }
                        }
                        el.prototype.isScene = !0;
                        class il {
                            constructor(t, e) {
                                this.array = t,
                                    this.stride = e,
                                    this.count = void 0 !== t ? t.length / e : 0,
                                    this.usage = Qi,
                                    this.updateRange = {
                                        offset: 0,
                                        count: -1
                                    },
                                    this.version = 0,
                                    this.uuid = fn()
                            }
                            onUploadCallback() {}
                            set needsUpdate(t) {
                                !0 === t && this.version++
                            }
                            setUsage(t) {
                                return this.usage = t,
                                    this
                            }
                            copy(t) {
                                return this.array = new t.array.constructor(t.array),
                                    this.count = t.count,
                                    this.stride = t.stride,
                                    this.usage = t.usage,
                                    this
                            }
                            copyAt(t, e, i) {
                                t *= this.stride,
                                    i *= e.stride;
                                for (let n = 0, r = this.stride; n < r; n++)
                                    this.array[t + n] = e.array[i + n];
                                return this
                            }
                            set(t, e=0) {
                                return this.array.set(t, e),
                                    this
                            }
                            clone(t) {
                                void 0 === t.arrayBuffers && (t.arrayBuffers = {}),
                                void 0 === this.array.buffer._uuid && (this.array.buffer._uuid = fn()),
                                void 0 === t.arrayBuffers[this.array.buffer._uuid] && (t.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer),
                                    t = new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]);
                                const e = new this.constructor(t,this.stride);
                                return e.setUsage(this.usage),
                                    e
                            }
                            onUpload(t) {
                                return this.onUploadCallback = t,
                                    this
                            }
                            toJSON(t) {
                                return void 0 === t.arrayBuffers && (t.arrayBuffers = {}),
                                void 0 === this.array.buffer._uuid && (this.array.buffer._uuid = fn()),
                                void 0 === t.arrayBuffers[this.array.buffer._uuid] && (t.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer))),
                                    {
                                        uuid: this.uuid,
                                        buffer: this.array.buffer._uuid,
                                        type: this.array.constructor.name,
                                        stride: this.stride
                                    }
                            }
                        }
                        il.prototype.isInterleavedBuffer = !0;
                        const nl = new Fn;
                        class rl {
                            constructor(t, e, i, n=!1) {
                                this.name = "",
                                    this.data = t,
                                    this.itemSize = e,
                                    this.offset = i,
                                    this.normalized = !0 === n
                            }
                            get count() {
                                return this.data.count
                            }
                            get array() {
                                return this.data.array
                            }
                            set needsUpdate(t) {
                                this.data.needsUpdate = t
                            }
                            applyMatrix4(t) {
                                for (let e = 0, i = this.data.count; e < i; e++)
                                    nl.x = this.getX(e),
                                        nl.y = this.getY(e),
                                        nl.z = this.getZ(e),
                                        nl.applyMatrix4(t),
                                        this.setXYZ(e, nl.x, nl.y, nl.z);
                                return this
                            }
                            applyNormalMatrix(t) {
                                for (let e = 0, i = this.count; e < i; e++)
                                    nl.x = this.getX(e),
                                        nl.y = this.getY(e),
                                        nl.z = this.getZ(e),
                                        nl.applyNormalMatrix(t),
                                        this.setXYZ(e, nl.x, nl.y, nl.z);
                                return this
                            }
                            transformDirection(t) {
                                for (let e = 0, i = this.count; e < i; e++)
                                    nl.x = this.getX(e),
                                        nl.y = this.getY(e),
                                        nl.z = this.getZ(e),
                                        nl.transformDirection(t),
                                        this.setXYZ(e, nl.x, nl.y, nl.z);
                                return this
                            }
                            setX(t, e) {
                                return this.data.array[t * this.data.stride + this.offset] = e,
                                    this
                            }
                            setY(t, e) {
                                return this.data.array[t * this.data.stride + this.offset + 1] = e,
                                    this
                            }
                            setZ(t, e) {
                                return this.data.array[t * this.data.stride + this.offset + 2] = e,
                                    this
                            }
                            setW(t, e) {
                                return this.data.array[t * this.data.stride + this.offset + 3] = e,
                                    this
                            }
                            getX(t) {
                                return this.data.array[t * this.data.stride + this.offset]
                            }
                            getY(t) {
                                return this.data.array[t * this.data.stride + this.offset + 1]
                            }
                            getZ(t) {
                                return this.data.array[t * this.data.stride + this.offset + 2]
                            }
                            getW(t) {
                                return this.data.array[t * this.data.stride + this.offset + 3]
                            }
                            setXY(t, e, i) {
                                return t = t * this.data.stride + this.offset,
                                    this.data.array[t + 0] = e,
                                    this.data.array[t + 1] = i,
                                    this
                            }
                            setXYZ(t, e, i, n) {
                                return t = t * this.data.stride + this.offset,
                                    this.data.array[t + 0] = e,
                                    this.data.array[t + 1] = i,
                                    this.data.array[t + 2] = n,
                                    this
                            }
                            setXYZW(t, e, i, n, r) {
                                return t = t * this.data.stride + this.offset,
                                    this.data.array[t + 0] = e,
                                    this.data.array[t + 1] = i,
                                    this.data.array[t + 2] = n,
                                    this.data.array[t + 3] = r,
                                    this
                            }
                            clone(t) {
                                if (void 0 !== t)
                                    return void 0 === t.interleavedBuffers && (t.interleavedBuffers = {}),
                                    void 0 === t.interleavedBuffers[this.data.uuid] && (t.interleavedBuffers[this.data.uuid] = this.data.clone(t)),
                                        new rl(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized);
                                {
                                    const t = [];
                                    for (let i = 0; i < this.count; i++) {
                                        var e = i * this.data.stride + this.offset;
                                        for (let i = 0; i < this.itemSize; i++)
                                            t.push(this.data.array[e + i])
                                    }
                                    return new us(new this.array.constructor(t),this.itemSize,this.normalized)
                                }
                            }
                            toJSON(t) {
                                if (void 0 !== t)
                                    return void 0 === t.interleavedBuffers && (t.interleavedBuffers = {}),
                                    void 0 === t.interleavedBuffers[this.data.uuid] && (t.interleavedBuffers[this.data.uuid] = this.data.toJSON(t)),
                                        {
                                            isInterleavedBufferAttribute: !0,
                                            itemSize: this.itemSize,
                                            data: this.data.uuid,
                                            offset: this.offset,
                                            normalized: this.normalized
                                        };
                                {
                                    const t = [];
                                    for (let i = 0; i < this.count; i++) {
                                        var e = i * this.data.stride + this.offset;
                                        for (let i = 0; i < this.itemSize; i++)
                                            t.push(this.data.array[e + i])
                                    }
                                    return {
                                        itemSize: this.itemSize,
                                        type: this.array.constructor.name,
                                        array: t,
                                        normalized: this.normalized
                                    }
                                }
                            }
                        }
                        rl.prototype.isInterleavedBufferAttribute = !0;
                        class sl extends $r {
                            constructor(t) {
                                super(),
                                    this.type = "SpriteMaterial",
                                    this.color = new as(16777215),
                                    this.map = null,
                                    this.alphaMap = null,
                                    this.rotation = 0,
                                    this.sizeAttenuation = !0,
                                    this.transparent = !0,
                                    this.setValues(t)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.color.copy(t.color),
                                    this.map = t.map,
                                    this.alphaMap = t.alphaMap,
                                    this.rotation = t.rotation,
                                    this.sizeAttenuation = t.sizeAttenuation,
                                    this
                            }
                        }
                        let al;
                        sl.prototype.isSpriteMaterial = !0;
                        const ol = new Fn
                            , hl = new Fn
                            , ll = new Fn
                            , ul = new wn
                            , cl = new wn
                            , dl = new mr
                            , pl = new Fn
                            , fl = new Fn
                            , ml = new Fn
                            , gl = new wn
                            , vl = new wn
                            , _l = new wn;
                        class yl extends Vr {
                            constructor(t) {
                                var e;
                                super(),
                                    this.type = "Sprite",
                                void 0 === al && (al = new Ps,
                                    e = new Float32Array([-.5, -.5, 0, 0, 0, .5, -.5, 0, 1, 0, .5, .5, 0, 1, 1, -.5, .5, 0, 0, 1]),
                                    e = new il(e,5),
                                    al.setIndex([0, 1, 2, 0, 2, 3]),
                                    al.setAttribute("position", new rl(e,3,0,!1)),
                                    al.setAttribute("uv", new rl(e,2,3,!1))),
                                    this.geometry = al,
                                    this.material = void 0 !== t ? t : new sl,
                                    this.center = new wn(.5,.5)
                            }
                            raycast(t, e) {
                                let i, n;
                                t.camera,
                                    hl.setFromMatrixScale(this.matrixWorld),
                                    dl.copy(t.camera.matrixWorld),
                                    this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse, this.matrixWorld),
                                    ll.setFromMatrixPosition(this.modelViewMatrix),
                                t.camera.isPerspectiveCamera && !1 === this.material.sizeAttenuation && hl.multiplyScalar(-ll.z),
                                0 !== (r = this.material.rotation) && (n = Math.cos(r),
                                    i = Math.sin(r));
                                var r = this.center;
                                xl(pl.set(-.5, -.5, 0), ll, r, hl, i, n),
                                    xl(fl.set(.5, -.5, 0), ll, r, hl, i, n),
                                    xl(ml.set(.5, .5, 0), ll, r, hl, i, n),
                                    gl.set(0, 0),
                                    vl.set(1, 0),
                                    _l.set(1, 1),
                                null === t.ray.intersectTriangle(pl, fl, ml, !1, ol) && (xl(fl.set(-.5, .5, 0), ll, r, hl, i, n),
                                    vl.set(0, 1),
                                null === t.ray.intersectTriangle(pl, ml, fl, !1, ol)) || (r = t.ray.origin.distanceTo(ol)) < t.near || r > t.far || e.push({
                                    distance: r,
                                    point: ol.clone(),
                                    uv: Qr.getUV(ol, pl, fl, ml, gl, vl, _l, new wn),
                                    face: null,
                                    object: this
                                })
                            }
                            copy(t) {
                                return super.copy(t),
                                void 0 !== t.center && this.center.copy(t.center),
                                    this.material = t.material,
                                    this
                            }
                        }
                        function xl(t, e, i, n, r, s) {
                            ul.subVectors(t, i).addScalar(.5).multiply(n),
                                void 0 !== r ? (cl.x = s * ul.x - r * ul.y,
                                    cl.y = r * ul.x + s * ul.y) : cl.copy(ul),
                                t.copy(e),
                                t.x += cl.x,
                                t.y += cl.y,
                                t.applyMatrix4(dl)
                        }
                        yl.prototype.isSprite = !0;
                        const bl = new Fn
                            , wl = new Fn;
                        class Sl extends Vr {
                            constructor() {
                                super(),
                                    this._currentLevel = 0,
                                    this.type = "LOD",
                                    Object.defineProperties(this, {
                                        levels: {
                                            enumerable: !0,
                                            value: []
                                        },
                                        isLOD: {
                                            value: !0
                                        }
                                    }),
                                    this.autoUpdate = !0
                            }
                            copy(t) {
                                super.copy(t, !1);
                                var e = t.levels;
                                for (let t = 0, i = e.length; t < i; t++) {
                                    const i = e[t];
                                    this.addLevel(i.object.clone(), i.distance)
                                }
                                return this.autoUpdate = t.autoUpdate,
                                    this
                            }
                            addLevel(t, e=0) {
                                e = Math.abs(e);
                                const i = this.levels;
                                let n;
                                for (n = 0; n < i.length && !(e < i[n].distance); n++)
                                    ;
                                return i.splice(n, 0, {
                                    distance: e,
                                    object: t
                                }),
                                    this.add(t),
                                    this
                            }
                            getCurrentLevel() {
                                return this._currentLevel
                            }
                            getObjectForDistance(t) {
                                var e = this.levels;
                                if (0 < e.length) {
                                    let i, n;
                                    for (i = 1,
                                             n = e.length; i < n && !(t < e[i].distance); i++)
                                        ;
                                    return e[i - 1].object
                                }
                                return null
                            }
                            raycast(t, e) {
                                var i;
                                0 < this.levels.length && (bl.setFromMatrixPosition(this.matrixWorld),
                                    i = t.ray.origin.distanceTo(bl),
                                    this.getObjectForDistance(i).raycast(t, e))
                            }
                            update(t) {
                                const e = this.levels;
                                if (1 < e.length) {
                                    bl.setFromMatrixPosition(t.matrixWorld),
                                        wl.setFromMatrixPosition(this.matrixWorld);
                                    var i = bl.distanceTo(wl) / t.zoom;
                                    let n, r;
                                    for (e[0].object.visible = !0,
                                             n = 1,
                                             r = e.length; n < r && i >= e[n].distance; n++)
                                        e[n - 1].object.visible = !1,
                                            e[n].object.visible = !0;
                                    for (this._currentLevel = n - 1; n < r; n++)
                                        e[n].object.visible = !1
                                }
                            }
                            toJSON(t) {
                                const e = super.toJSON(t);
                                !1 === this.autoUpdate && (e.object.autoUpdate = !1),
                                    e.object.levels = [];
                                var i = this.levels;
                                for (let t = 0, r = i.length; t < r; t++) {
                                    var n = i[t];
                                    e.object.levels.push({
                                        object: n.object.uuid,
                                        distance: n.distance
                                    })
                                }
                                return e
                            }
                        }
                        const Ml = new Fn
                            , Cl = new Nn
                            , Al = new Nn
                            , Tl = new Fn
                            , Pl = new mr;
                        class El extends qs {
                            constructor(t, e) {
                                super(t, e),
                                    this.type = "SkinnedMesh",
                                    this.bindMode = "attached",
                                    this.bindMatrix = new mr,
                                    this.bindMatrixInverse = new mr
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.bindMode = t.bindMode,
                                    this.bindMatrix.copy(t.bindMatrix),
                                    this.bindMatrixInverse.copy(t.bindMatrixInverse),
                                    this.skeleton = t.skeleton,
                                    this
                            }
                            bind(t, e) {
                                this.skeleton = t,
                                void 0 === e && (this.updateMatrixWorld(!0),
                                    this.skeleton.calculateInverses(),
                                    e = this.matrixWorld),
                                    this.bindMatrix.copy(e),
                                    this.bindMatrixInverse.copy(e).invert()
                            }
                            pose() {
                                this.skeleton.pose()
                            }
                            normalizeSkinWeights() {
                                const t = new Nn
                                    , e = this.geometry.attributes.skinWeight;
                                for (let n = 0, r = e.count; n < r; n++) {
                                    t.x = e.getX(n),
                                        t.y = e.getY(n),
                                        t.z = e.getZ(n),
                                        t.w = e.getW(n);
                                    var i = 1 / t.manhattanLength();
                                    i != 1 / 0 ? t.multiplyScalar(i) : t.set(1, 0, 0, 0),
                                        e.setXYZW(n, t.x, t.y, t.z, t.w)
                                }
                            }
                            updateMatrixWorld(t) {
                                super.updateMatrixWorld(t),
                                    "attached" === this.bindMode ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : "detached" === this.bindMode && this.bindMatrixInverse.copy(this.bindMatrix).invert()
                            }
                            boneTransform(t, e) {
                                var i = this.skeleton
                                    , n = this.geometry;
                                Cl.fromBufferAttribute(n.attributes.skinIndex, t),
                                    Al.fromBufferAttribute(n.attributes.skinWeight, t),
                                    Ml.copy(e).applyMatrix4(this.bindMatrix),
                                    e.set(0, 0, 0);
                                for (let t = 0; t < 4; t++) {
                                    var r, s = Al.getComponent(t);
                                    0 !== s && (r = Cl.getComponent(t),
                                        Pl.multiplyMatrices(i.bones[r].matrixWorld, i.boneInverses[r]),
                                        e.addScaledVector(Tl.copy(Ml).applyMatrix4(Pl), s))
                                }
                                return e.applyMatrix4(this.bindMatrixInverse)
                            }
                        }
                        El.prototype.isSkinnedMesh = !0;
                        class Ll extends Vr {
                            constructor() {
                                super(),
                                    this.type = "Bone"
                            }
                        }
                        Ll.prototype.isBone = !0;
                        class Il extends In {
                            constructor(t=null, e=1, i=1, n, r, s, a, o, h=Zt, l=Zt, u, c) {
                                super(null, s, a, o, h, l, n, r, u, c),
                                    this.image = {
                                        data: t,
                                        width: e,
                                        height: i
                                    },
                                    this.magFilter = h,
                                    this.minFilter = l,
                                    this.generateMipmaps = !1,
                                    this.flipY = !1,
                                    this.unpackAlignment = 1
                            }
                        }
                        Il.prototype.isDataTexture = !0;
                        const kl = new mr
                            , Nl = new mr;
                        class Ol {
                            constructor(t=[], e=[]) {
                                this.uuid = fn(),
                                    this.bones = t.slice(0),
                                    this.boneInverses = e,
                                    this.boneMatrices = null,
                                    this.boneTexture = null,
                                    this.boneTextureSize = 0,
                                    this.frame = -1,
                                    this.init()
                            }
                            init() {
                                var t = this.bones
                                    , e = this.boneInverses;
                                if (this.boneMatrices = new Float32Array(16 * t.length),
                                0 === e.length)
                                    this.calculateInverses();
                                else if (t.length !== e.length) {
                                    this.boneInverses = [];
                                    for (let t = 0, e = this.bones.length; t < e; t++)
                                        this.boneInverses.push(new mr)
                                }
                            }
                            calculateInverses() {
                                for (let t = this.boneInverses.length = 0, e = this.bones.length; t < e; t++) {
                                    const e = new mr;
                                    this.bones[t] && e.copy(this.bones[t].matrixWorld).invert(),
                                        this.boneInverses.push(e)
                                }
                            }
                            pose() {
                                for (let t = 0, e = this.bones.length; t < e; t++) {
                                    const e = this.bones[t];
                                    e && e.matrixWorld.copy(this.boneInverses[t]).invert()
                                }
                                for (let t = 0, e = this.bones.length; t < e; t++) {
                                    const e = this.bones[t];
                                    e && (e.parent && e.parent.isBone ? (e.matrix.copy(e.parent.matrixWorld).invert(),
                                        e.matrix.multiply(e.matrixWorld)) : e.matrix.copy(e.matrixWorld),
                                        e.matrix.decompose(e.position, e.quaternion, e.scale))
                                }
                            }
                            update() {
                                var t = this.bones
                                    , e = this.boneInverses
                                    , i = this.boneMatrices;
                                const n = this.boneTexture;
                                for (let n = 0, s = t.length; n < s; n++) {
                                    var r = t[n] ? t[n].matrixWorld : Nl;
                                    kl.multiplyMatrices(r, e[n]),
                                        kl.toArray(i, 16 * n)
                                }
                                null !== n && (n.needsUpdate = !0)
                            }
                            clone() {
                                return new Ol(this.bones,this.boneInverses)
                            }
                            computeBoneTexture() {
                                var t = yn(t = Math.sqrt(4 * this.bones.length));
                                t = Math.max(t, 4);
                                const e = new Float32Array(t * t * 4);
                                e.set(this.boneMatrices);
                                const i = new Il(e,t,t,_e,ue);
                                return i.needsUpdate = !0,
                                    this.boneMatrices = e,
                                    this.boneTexture = i,
                                    this.boneTextureSize = t,
                                    this
                            }
                            getBoneByName(t) {
                                for (let i = 0, n = this.bones.length; i < n; i++) {
                                    var e = this.bones[i];
                                    if (e.name === t)
                                        return e
                                }
                            }
                            dispose() {
                                null !== this.boneTexture && (this.boneTexture.dispose(),
                                    this.boneTexture = null)
                            }
                            fromJSON(t, e) {
                                this.uuid = t.uuid;
                                for (let n = 0, r = t.bones.length; n < r; n++) {
                                    var i = t.bones[n];
                                    let r = e[i];
                                    void 0 === r && (r = new Ll),
                                        this.bones.push(r),
                                        this.boneInverses.push((new mr).fromArray(t.boneInverses[n]))
                                }
                                return this.init(),
                                    this
                            }
                            toJSON() {
                                const t = {
                                    metadata: {
                                        version: 4.5,
                                        type: "Skeleton",
                                        generator: "Skeleton.toJSON"
                                    },
                                    bones: [],
                                    boneInverses: []
                                };
                                t.uuid = this.uuid;
                                var e = this.bones
                                    , i = this.boneInverses;
                                for (let r = 0, s = e.length; r < s; r++) {
                                    var n = e[r];
                                    t.bones.push(n.uuid);
                                    const s = i[r];
                                    t.boneInverses.push(s.toArray())
                                }
                                return t
                            }
                        }
                        class Dl extends us {
                            constructor(t, e, i, n=1) {
                                "number" == typeof i && (n = i,
                                    i = !1),
                                    super(t, e, i),
                                    this.meshPerAttribute = n
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.meshPerAttribute = t.meshPerAttribute,
                                    this
                            }
                            toJSON() {
                                const t = super.toJSON();
                                return t.meshPerAttribute = this.meshPerAttribute,
                                    t.isInstancedBufferAttribute = !0,
                                    t
                            }
                        }
                        Dl.prototype.isInstancedBufferAttribute = !0;
                        const Rl = new mr
                            , zl = new mr
                            , Fl = []
                            , Bl = new qs;
                        class Vl extends qs {
                            constructor(t, e, i) {
                                super(t, e),
                                    this.instanceMatrix = new Dl(new Float32Array(16 * i),16),
                                    this.instanceColor = null,
                                    this.count = i,
                                    this.frustumCulled = !1
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.instanceMatrix.copy(t.instanceMatrix),
                                null !== t.instanceColor && (this.instanceColor = t.instanceColor.clone()),
                                    this.count = t.count,
                                    this
                            }
                            getColorAt(t, e) {
                                e.fromArray(this.instanceColor.array, 3 * t)
                            }
                            getMatrixAt(t, e) {
                                e.fromArray(this.instanceMatrix.array, 16 * t)
                            }
                            raycast(t, e) {
                                var i = this.matrixWorld
                                    , n = this.count;
                                if (Bl.geometry = this.geometry,
                                    Bl.material = this.material,
                                void 0 !== Bl.material)
                                    for (let r = 0; r < n; r++) {
                                        this.getMatrixAt(r, Rl),
                                            zl.multiplyMatrices(i, Rl),
                                            Bl.matrixWorld = zl,
                                            Bl.raycast(t, Fl);
                                        for (let t = 0, i = Fl.length; t < i; t++) {
                                            const i = Fl[t];
                                            i.instanceId = r,
                                                i.object = this,
                                                e.push(i)
                                        }
                                        Fl.length = 0
                                    }
                            }
                            setColorAt(t, e) {
                                null === this.instanceColor && (this.instanceColor = new Dl(new Float32Array(3 * this.instanceMatrix.count),3)),
                                    e.toArray(this.instanceColor.array, 3 * t)
                            }
                            setMatrixAt(t, e) {
                                e.toArray(this.instanceMatrix.array, 16 * t)
                            }
                            updateMorphTargets() {}
                            dispose() {
                                this.dispatchEvent({
                                    type: "dispose"
                                })
                            }
                        }
                        Vl.prototype.isInstancedMesh = !0;
                        class Ul extends $r {
                            constructor(t) {
                                super(),
                                    this.type = "LineBasicMaterial",
                                    this.color = new as(16777215),
                                    this.linewidth = 1,
                                    this.linecap = "round",
                                    this.linejoin = "round",
                                    this.setValues(t)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.color.copy(t.color),
                                    this.linewidth = t.linewidth,
                                    this.linecap = t.linecap,
                                    this.linejoin = t.linejoin,
                                    this
                            }
                        }
                        Ul.prototype.isLineBasicMaterial = !0;
                        const Gl = new Fn
                            , Wl = new Fn
                            , jl = new mr
                            , Hl = new fr
                            , ql = new ar;
                        class Xl extends Vr {
                            constructor(t=new Ps, e=new Ul) {
                                super(),
                                    this.type = "Line",
                                    this.geometry = t,
                                    this.material = e,
                                    this.updateMorphTargets()
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.material = t.material,
                                    this.geometry = t.geometry,
                                    this
                            }
                            computeLineDistances() {
                                const t = this.geometry;
                                if (t.isBufferGeometry) {
                                    if (null === t.index) {
                                        var e = t.attributes.position;
                                        const i = [0];
                                        for (let t = 1, n = e.count; t < n; t++)
                                            Gl.fromBufferAttribute(e, t - 1),
                                                Wl.fromBufferAttribute(e, t),
                                                i[t] = i[t - 1],
                                                i[t] += Gl.distanceTo(Wl);
                                        t.setAttribute("lineDistance", new ys(i,1))
                                    }
                                } else
                                    t.isGeometry;
                                return this
                            }
                            raycast(t, e) {
                                const i = this.geometry;
                                var n = this.matrixWorld
                                    , r = t.params.Line.threshold
                                    , s = i.drawRange;
                                if (null === i.boundingSphere && i.computeBoundingSphere(),
                                    ql.copy(i.boundingSphere),
                                    ql.applyMatrix4(n),
                                    ql.radius += r,
                                !1 !== t.ray.intersectsSphere(ql)) {
                                    jl.copy(n).invert(),
                                        Hl.copy(t.ray).applyMatrix4(jl);
                                    var a = (r = r / ((this.scale.x + this.scale.y + this.scale.z) / 3)) * r;
                                    const d = new Fn
                                        , p = new Fn
                                        , f = new Fn
                                        , m = new Fn;
                                    var o = this.isLineSegments ? 2 : 1;
                                    if (i.isBufferGeometry) {
                                        const n = i.index;
                                        var h, l = i.attributes.position;
                                        if (null !== n)
                                            for (let i = Math.max(0, s.start), r = Math.min(n.count, s.start + s.count) - 1; i < r; i += o) {
                                                var u = n.getX(i)
                                                    , c = n.getX(i + 1);
                                                d.fromBufferAttribute(l, u),
                                                    p.fromBufferAttribute(l, c),
                                                a < Hl.distanceSqToSegment(d, p, m, f) || (m.applyMatrix4(this.matrixWorld),
                                                (c = t.ray.origin.distanceTo(m)) < t.near || c > t.far || e.push({
                                                    distance: c,
                                                    point: f.clone().applyMatrix4(this.matrixWorld),
                                                    index: i,
                                                    face: null,
                                                    faceIndex: null,
                                                    object: this
                                                }))
                                            }
                                        else
                                            for (let i = Math.max(0, s.start), n = Math.min(l.count, s.start + s.count) - 1; i < n; i += o)
                                                d.fromBufferAttribute(l, i),
                                                    p.fromBufferAttribute(l, i + 1),
                                                a < Hl.distanceSqToSegment(d, p, m, f) || (m.applyMatrix4(this.matrixWorld),
                                                (h = t.ray.origin.distanceTo(m)) < t.near || h > t.far || e.push({
                                                    distance: h,
                                                    point: f.clone().applyMatrix4(this.matrixWorld),
                                                    index: i,
                                                    face: null,
                                                    faceIndex: null,
                                                    object: this
                                                }))
                                    } else
                                        i.isGeometry
                                }
                            }
                            updateMorphTargets() {
                                var t = this.geometry;
                                if (t.isBufferGeometry) {
                                    var e = t.morphAttributes
                                        , i = Object.keys(e);
                                    if (0 < i.length) {
                                        var n = e[i[0]];
                                        if (void 0 !== n) {
                                            this.morphTargetInfluences = [],
                                                this.morphTargetDictionary = {};
                                            for (let t = 0, e = n.length; t < e; t++) {
                                                var r = n[t].name || String(t);
                                                this.morphTargetInfluences.push(0),
                                                    this.morphTargetDictionary[r] = t
                                            }
                                        }
                                    }
                                } else
                                    void 0 !== (t = t.morphTargets) && t.length
                            }
                        }
                        Xl.prototype.isLine = !0;
                        const Zl = new Fn
                            , Jl = new Fn;
                        class Yl extends Xl {
                            constructor(t, e) {
                                super(t, e),
                                    this.type = "LineSegments"
                            }
                            computeLineDistances() {
                                const t = this.geometry;
                                if (t.isBufferGeometry) {
                                    if (null === t.index) {
                                        var e = t.attributes.position;
                                        const i = [];
                                        for (let t = 0, n = e.count; t < n; t += 2)
                                            Zl.fromBufferAttribute(e, t),
                                                Jl.fromBufferAttribute(e, t + 1),
                                                i[t] = 0 === t ? 0 : i[t - 1],
                                                i[t + 1] = i[t] + Zl.distanceTo(Jl);
                                        t.setAttribute("lineDistance", new ys(i,1))
                                    }
                                } else
                                    t.isGeometry;
                                return this
                            }
                        }
                        Yl.prototype.isLineSegments = !0;
                        class Ql extends Xl {
                            constructor(t, e) {
                                super(t, e),
                                    this.type = "LineLoop"
                            }
                        }
                        Ql.prototype.isLineLoop = !0;
                        class Kl extends $r {
                            constructor(t) {
                                super(),
                                    this.type = "PointsMaterial",
                                    this.color = new as(16777215),
                                    this.map = null,
                                    this.alphaMap = null,
                                    this.size = 1,
                                    this.sizeAttenuation = !0,
                                    this.setValues(t)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.color.copy(t.color),
                                    this.map = t.map,
                                    this.alphaMap = t.alphaMap,
                                    this.size = t.size,
                                    this.sizeAttenuation = t.sizeAttenuation,
                                    this
                            }
                        }
                        Kl.prototype.isPointsMaterial = !0;
                        const $l = new mr
                            , tu = new fr
                            , eu = new ar
                            , iu = new Fn;
                        class nu extends Vr {
                            constructor(t=new Ps, e=new Kl) {
                                super(),
                                    this.type = "Points",
                                    this.geometry = t,
                                    this.material = e,
                                    this.updateMorphTargets()
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.material = t.material,
                                    this.geometry = t.geometry,
                                    this
                            }
                            raycast(t, e) {
                                const i = this.geometry;
                                var n = this.matrixWorld
                                    , r = t.params.Points.threshold
                                    , s = i.drawRange;
                                if (null === i.boundingSphere && i.computeBoundingSphere(),
                                    eu.copy(i.boundingSphere),
                                    eu.applyMatrix4(n),
                                    eu.radius += r,
                                !1 !== t.ray.intersectsSphere(eu)) {
                                    $l.copy(n).invert(),
                                        tu.copy(t.ray).applyMatrix4($l);
                                    var a = (r = r / ((this.scale.x + this.scale.y + this.scale.z) / 3)) * r;
                                    if (i.isBufferGeometry) {
                                        const r = i.index;
                                        var o = i.attributes.position;
                                        if (null !== r)
                                            for (let i = Math.max(0, s.start), l = Math.min(r.count, s.start + s.count); i < l; i++) {
                                                var h = r.getX(i);
                                                iu.fromBufferAttribute(o, h),
                                                    ru(iu, h, a, n, t, e, this)
                                            }
                                        else
                                            for (let i = Math.max(0, s.start), r = Math.min(o.count, s.start + s.count); i < r; i++)
                                                iu.fromBufferAttribute(o, i),
                                                    ru(iu, i, a, n, t, e, this)
                                    }
                                }
                            }
                            updateMorphTargets() {
                                var t = this.geometry;
                                if (t.isBufferGeometry) {
                                    var e = t.morphAttributes
                                        , i = Object.keys(e);
                                    if (0 < i.length) {
                                        var n = e[i[0]];
                                        if (void 0 !== n) {
                                            this.morphTargetInfluences = [],
                                                this.morphTargetDictionary = {};
                                            for (let t = 0, e = n.length; t < e; t++) {
                                                var r = n[t].name || String(t);
                                                this.morphTargetInfluences.push(0),
                                                    this.morphTargetDictionary[r] = t
                                            }
                                        }
                                    }
                                } else
                                    void 0 !== (t = t.morphTargets) && t.length
                            }
                        }
                        function ru(t, e, i, n, r, s, a) {
                            var o = tu.distanceSqToPoint(t);
                            if (o < i) {
                                const i = new Fn;
                                tu.closestPointToPoint(t, i),
                                    i.applyMatrix4(n),
                                    n = r.ray.origin.distanceTo(i),
                                n < r.near || n > r.far || s.push({
                                    distance: n,
                                    distanceToRay: Math.sqrt(o),
                                    point: i,
                                    index: e,
                                    face: null,
                                    object: a
                                })
                            }
                        }
                        nu.prototype.isPoints = !0;
                        class su extends In {
                            constructor(t, e, i, n, r, s, a, o, h) {
                                super(t, e, i, n, r, s, a, o, h),
                                    this.format = void 0 !== a ? a : ve,
                                    this.minFilter = void 0 !== s ? s : $t,
                                    this.magFilter = void 0 !== r ? r : $t,
                                    this.generateMipmaps = !1;
                                const l = this;
                                "requestVideoFrameCallback"in t && t.requestVideoFrameCallback((function e() {
                                        l.needsUpdate = !0,
                                            t.requestVideoFrameCallback(e)
                                    }
                                ))
                            }
                            clone() {
                                return new this.constructor(this.image).copy(this)
                            }
                            update() {
                                var t = this.image;
                                0 == "requestVideoFrameCallback"in t && t.readyState >= t.HAVE_CURRENT_DATA && (this.needsUpdate = !0)
                            }
                        }
                        su.prototype.isVideoTexture = !0;
                        class au extends In {
                            constructor(t, e, i) {
                                super({
                                    width: t,
                                    height: e
                                }),
                                    this.format = i,
                                    this.magFilter = Zt,
                                    this.minFilter = Zt,
                                    this.generateMipmaps = !1,
                                    this.needsUpdate = !0
                            }
                        }
                        au.prototype.isFramebufferTexture = !0;
                        class ou extends In {
                            constructor(t, e, i, n, r, s, a, o, h, l, u, c) {
                                super(null, s, a, o, h, l, n, r, u, c),
                                    this.image = {
                                        width: e,
                                        height: i
                                    },
                                    this.mipmaps = t,
                                    this.flipY = !1,
                                    this.generateMipmaps = !1
                            }
                        }
                        ou.prototype.isCompressedTexture = !0;
                        class hu extends In {
                            constructor(t, e, i, n, r, s, a, o, h) {
                                super(t, e, i, n, r, s, a, o, h),
                                    this.needsUpdate = !0
                            }
                        }
                        hu.prototype.isCanvasTexture = !0;
                        class lu extends Ps {
                            constructor(t=1, e=8, i=0, n=2 * Math.PI) {
                                super(),
                                    this.type = "CircleGeometry",
                                    this.parameters = {
                                        radius: t,
                                        segments: e,
                                        thetaStart: i,
                                        thetaLength: n
                                    },
                                    e = Math.max(3, e);
                                const r = []
                                    , s = []
                                    , a = []
                                    , o = []
                                    , h = new Fn
                                    , l = new wn;
                                s.push(0, 0, 0),
                                    a.push(0, 0, 1),
                                    o.push(.5, .5);
                                for (let r = 0, c = 3; r <= e; r++,
                                    c += 3) {
                                    var u = i + r / e * n;
                                    h.x = t * Math.cos(u),
                                        h.y = t * Math.sin(u),
                                        s.push(h.x, h.y, h.z),
                                        a.push(0, 0, 1),
                                        l.x = (s[c] / t + 1) / 2,
                                        l.y = (s[c + 1] / t + 1) / 2,
                                        o.push(l.x, l.y)
                                }
                                for (let t = 1; t <= e; t++)
                                    r.push(t, t + 1, 0);
                                this.setIndex(r),
                                    this.setAttribute("position", new ys(s,3)),
                                    this.setAttribute("normal", new ys(a,3)),
                                    this.setAttribute("uv", new ys(o,2))
                            }
                            static fromJSON(t) {
                                return new lu(t.radius,t.segments,t.thetaStart,t.thetaLength)
                            }
                        }
                        class uu extends Ps {
                            constructor(t=1, e=1, i=1, n=8, r=1, s=!1, a=0, o=2 * Math.PI) {
                                super(),
                                    this.type = "CylinderGeometry",
                                    this.parameters = {
                                        radiusTop: t,
                                        radiusBottom: e,
                                        height: i,
                                        radialSegments: n,
                                        heightSegments: r,
                                        openEnded: s,
                                        thetaStart: a,
                                        thetaLength: o
                                    };
                                const h = this;
                                n = Math.floor(n),
                                    r = Math.floor(r);
                                const l = []
                                    , u = []
                                    , c = []
                                    , d = [];
                                let p = 0;
                                const f = []
                                    , m = i / 2;
                                let g = 0;
                                function v(i) {
                                    var r = p;
                                    const s = new wn
                                        , f = new Fn;
                                    let v = 0;
                                    var _ = !0 === i ? t : e
                                        , y = !0 === i ? 1 : -1;
                                    for (let t = 1; t <= n; t++)
                                        u.push(0, m * y, 0),
                                            c.push(0, y, 0),
                                            d.push(.5, .5),
                                            p++;
                                    var x = p;
                                    for (let t = 0; t <= n; t++) {
                                        var b = t / n * o + a
                                            , w = Math.cos(b);
                                        b = Math.sin(b);
                                        f.x = _ * b,
                                            f.y = m * y,
                                            f.z = _ * w,
                                            u.push(f.x, f.y, f.z),
                                            c.push(0, y, 0),
                                            s.x = .5 * w + .5,
                                            s.y = .5 * b * y + .5,
                                            d.push(s.x, s.y),
                                            p++
                                    }
                                    for (let t = 0; t < n; t++) {
                                        var S = r + t
                                            , M = x + t;
                                        !0 === i ? l.push(M, M + 1, S) : l.push(M + 1, M, S),
                                            v += 3
                                    }
                                    h.addGroup(g, v, !0 === i ? 1 : 2),
                                        g += v
                                }
                                !function() {
                                    const s = new Fn
                                        , v = new Fn;
                                    let _ = 0;
                                    var y = (e - t) / i;
                                    for (let h = 0; h <= r; h++) {
                                        const l = [];
                                        var x = h / r
                                            , b = x * (e - t) + t;
                                        for (let t = 0; t <= n; t++) {
                                            var w = t / n
                                                , S = w * o + a
                                                , M = Math.sin(S);
                                            S = Math.cos(S);
                                            v.x = b * M,
                                                v.y = -x * i + m,
                                                v.z = b * S,
                                                u.push(v.x, v.y, v.z),
                                                s.set(M, y, S).normalize(),
                                                c.push(s.x, s.y, s.z),
                                                d.push(w, 1 - x),
                                                l.push(p++)
                                        }
                                        f.push(l)
                                    }
                                    for (let t = 0; t < n; t++)
                                        for (let e = 0; e < r; e++) {
                                            var C = f[e][t]
                                                , A = f[e + 1][t]
                                                , T = f[e + 1][t + 1]
                                                , P = f[e][t + 1];
                                            l.push(C, A, P),
                                                l.push(A, T, P),
                                                _ += 6
                                        }
                                    h.addGroup(g, _, 0),
                                        g += _
                                }(),
                                !1 === s && (0 < t && v(!0),
                                0 < e && v(!1)),
                                    this.setIndex(l),
                                    this.setAttribute("position", new ys(u,3)),
                                    this.setAttribute("normal", new ys(c,3)),
                                    this.setAttribute("uv", new ys(d,2))
                            }
                            static fromJSON(t) {
                                return new uu(t.radiusTop,t.radiusBottom,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)
                            }
                        }
                        class cu extends uu {
                            constructor(t=1, e=1, i=8, n=1, r=!1, s=0, a=2 * Math.PI) {
                                super(0, t, e, i, n, r, s, a),
                                    this.type = "ConeGeometry",
                                    this.parameters = {
                                        radius: t,
                                        height: e,
                                        radialSegments: i,
                                        heightSegments: n,
                                        openEnded: r,
                                        thetaStart: s,
                                        thetaLength: a
                                    }
                            }
                            static fromJSON(t) {
                                return new cu(t.radius,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)
                            }
                        }
                        class du extends Ps {
                            constructor(t=[], e=[], i=1, n=0) {
                                super(),
                                    this.type = "PolyhedronGeometry",
                                    this.parameters = {
                                        vertices: t,
                                        indices: e,
                                        radius: i,
                                        detail: n
                                    };
                                const r = []
                                    , s = [];
                                function a(t) {
                                    r.push(t.x, t.y, t.z)
                                }
                                function o(e, i) {
                                    e *= 3,
                                        i.x = t[0 + e],
                                        i.y = t[1 + e],
                                        i.z = t[2 + e]
                                }
                                function h(t, e, i, n) {
                                    n < 0 && 1 === t.x && (s[e] = t.x - 1),
                                    0 === i.x && 0 === i.z && (s[e] = n / 2 / Math.PI + .5)
                                }
                                function l(t) {
                                    return Math.atan2(t.z, -t.x)
                                }
                                !function(t) {
                                    var i = new Fn
                                        , n = new Fn
                                        , r = new Fn;
                                    for (let s = 0; s < e.length; s += 3)
                                        o(e[s + 0], i),
                                            o(e[s + 1], n),
                                            o(e[s + 2], r),
                                            function(t, e, i, n) {
                                                const r = n + 1
                                                    , s = [];
                                                for (let n = 0; n <= r; n++) {
                                                    s[n] = [];
                                                    const a = t.clone().lerp(i, n / r);
                                                    var o = e.clone().lerp(i, n / r)
                                                        , h = r - n;
                                                    for (let t = 0; t <= h; t++)
                                                        s[n][t] = 0 === t && n === r ? a : a.clone().lerp(o, t / h)
                                                }
                                                for (let t = 0; t < r; t++)
                                                    for (let e = 0; e < 2 * (r - t) - 1; e++) {
                                                        var l = Math.floor(e / 2);
                                                        e % 2 == 0 ? (a(s[t][l + 1]),
                                                            a(s[t + 1][l]),
                                                            a(s[t][l])) : (a(s[t][l + 1]),
                                                            a(s[t + 1][l + 1]),
                                                            a(s[t + 1][l]))
                                                    }
                                            }(i, n, r, t)
                                }(n),
                                    function(t) {
                                        const e = new Fn;
                                        for (let i = 0; i < r.length; i += 3)
                                            e.x = r[i + 0],
                                                e.y = r[i + 1],
                                                e.z = r[i + 2],
                                                e.normalize().multiplyScalar(t),
                                                r[i + 0] = e.x,
                                                r[i + 1] = e.y,
                                                r[i + 2] = e.z
                                    }(i),
                                    function() {
                                        const t = new Fn;
                                        for (let n = 0; n < r.length; n += 3) {
                                            t.x = r[n + 0],
                                                t.y = r[n + 1],
                                                t.z = r[n + 2];
                                            var e = l(t) / 2 / Math.PI + .5
                                                , i = function(t) {
                                                return Math.atan2(-t.y, Math.sqrt(t.x * t.x + t.z * t.z))
                                            }(t) / Math.PI + .5;
                                            s.push(e, 1 - i)
                                        }
                                        (function() {
                                                const t = new Fn
                                                    , e = new Fn
                                                    , i = new Fn
                                                    , n = new Fn
                                                    , a = new wn
                                                    , o = new wn
                                                    , u = new wn;
                                                for (let d = 0, p = 0; d < r.length; d += 9,
                                                    p += 6) {
                                                    t.set(r[d + 0], r[d + 1], r[d + 2]),
                                                        e.set(r[d + 3], r[d + 4], r[d + 5]),
                                                        i.set(r[d + 6], r[d + 7], r[d + 8]),
                                                        a.set(s[p + 0], s[p + 1]),
                                                        o.set(s[p + 2], s[p + 3]),
                                                        u.set(s[p + 4], s[p + 5]),
                                                        n.copy(t).add(e).add(i).divideScalar(3);
                                                    var c = l(n);
                                                    h(a, p + 0, t, c),
                                                        h(o, p + 2, e, c),
                                                        h(u, p + 4, i, c)
                                                }
                                            }
                                        )(),
                                            function() {
                                                for (let a = 0; a < s.length; a += 6) {
                                                    var t = s[a + 0]
                                                        , e = s[a + 2]
                                                        , i = s[a + 4]
                                                        , n = Math.max(t, e, i)
                                                        , r = Math.min(t, e, i);
                                                    .9 < n && r < .1 && (t < .2 && (s[a + 0] += 1),
                                                    e < .2 && (s[a + 2] += 1),
                                                    i < .2 && (s[a + 4] += 1))
                                                }
                                            }()
                                    }(),
                                    this.setAttribute("position", new ys(r,3)),
                                    this.setAttribute("normal", new ys(r.slice(),3)),
                                    this.setAttribute("uv", new ys(s,2)),
                                    0 === n ? this.computeVertexNormals() : this.normalizeNormals()
                            }
                            static fromJSON(t) {
                                return new du(t.vertices,t.indices,t.radius,t.details)
                            }
                        }
                        class pu extends du {
                            constructor(t=1, e=0) {
                                var i = (1 + Math.sqrt(5)) / 2
                                    , n = 1 / i;
                                super([-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -n, -i, 0, -n, i, 0, n, -i, 0, n, i, -n, -i, 0, -n, i, 0, n, -i, 0, n, i, 0, -i, 0, -n, i, 0, -n, -i, 0, n, i, 0, n], [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], t, e),
                                    this.type = "DodecahedronGeometry",
                                    this.parameters = {
                                        radius: t,
                                        detail: e
                                    }
                            }
                            static fromJSON(t) {
                                return new pu(t.radius,t.detail)
                            }
                        }
                        const fu = new Fn
                            , mu = new Fn
                            , gu = new Fn
                            , vu = new Qr;
                        class _u extends Ps {
                            constructor(t=null, e=1) {
                                if (super(),
                                    this.type = "EdgesGeometry",
                                    this.parameters = {
                                        geometry: t,
                                        thresholdAngle: e
                                    },
                                null !== t) {
                                    var i = Math.pow(10, 4)
                                        , n = Math.cos(dn * e);
                                    const m = t.getIndex();
                                    var r = t.getAttribute("position")
                                        , s = (m || r).count;
                                    const g = [0, 0, 0];
                                    var a, o, h = ["a", "b", "c"];
                                    const v = new Array(3)
                                        , _ = {}
                                        , y = [];
                                    for (let t = 0; t < s; t += 3) {
                                        m ? (g[0] = m.getX(t),
                                            g[1] = m.getX(t + 1),
                                            g[2] = m.getX(t + 2)) : (g[0] = t,
                                            g[1] = t + 1,
                                            g[2] = t + 2);
                                        const {a: e, b: s, c: a} = vu;
                                        if (e.fromBufferAttribute(r, g[0]),
                                            s.fromBufferAttribute(r, g[1]),
                                            a.fromBufferAttribute(r, g[2]),
                                            vu.getNormal(gu),
                                            v[0] = `${Math.round(e.x * i)},${Math.round(e.y * i)},` + Math.round(e.z * i),
                                            v[1] = `${Math.round(s.x * i)},${Math.round(s.y * i)},` + Math.round(s.z * i),
                                            v[2] = `${Math.round(a.x * i)},${Math.round(a.y * i)},` + Math.round(a.z * i),
                                        v[0] !== v[1] && v[1] !== v[2] && v[2] !== v[0])
                                            for (let t = 0; t < 3; t++) {
                                                var l = (t + 1) % 3
                                                    , u = v[t]
                                                    , c = v[l]
                                                    , d = vu[h[t]]
                                                    , p = vu[h[l]]
                                                    , f = u + "_" + c;
                                                (u = c + "_" + u)in _ && _[u] ? (gu.dot(_[u].normal) <= n && (y.push(d.x, d.y, d.z),
                                                    y.push(p.x, p.y, p.z)),
                                                    _[u] = null) : f in _ || (_[f] = {
                                                    index0: g[t],
                                                    index1: g[l],
                                                    normal: gu.clone()
                                                })
                                            }
                                    }
                                    for (const t in _)
                                        _[t] && (({index0: a, index1: o} = _[t]),
                                            fu.fromBufferAttribute(r, a),
                                            mu.fromBufferAttribute(r, o),
                                            y.push(fu.x, fu.y, fu.z),
                                            y.push(mu.x, mu.y, mu.z));
                                    this.setAttribute("position", new ys(y,3))
                                }
                            }
                        }
                        class yu {
                            constructor() {
                                this.type = "Curve",
                                    this.arcLengthDivisions = 200
                            }
                            getPoint() {
                                return null
                            }
                            getPointAt(t, e) {
                                return t = this.getUtoTmapping(t),
                                    this.getPoint(t, e)
                            }
                            getPoints(t=5) {
                                const e = [];
                                for (let i = 0; i <= t; i++)
                                    e.push(this.getPoint(i / t));
                                return e
                            }
                            getSpacedPoints(t=5) {
                                const e = [];
                                for (let i = 0; i <= t; i++)
                                    e.push(this.getPointAt(i / t));
                                return e
                            }
                            getLength() {
                                var t = this.getLengths();
                                return t[t.length - 1]
                            }
                            getLengths(t=this.arcLengthDivisions) {
                                if (this.cacheArcLengths && this.cacheArcLengths.length === t + 1 && !this.needsUpdate)
                                    return this.cacheArcLengths;
                                this.needsUpdate = !1;
                                const e = [];
                                let i, n = this.getPoint(0), r = 0;
                                e.push(0);
                                for (let s = 1; s <= t; s++)
                                    i = this.getPoint(s / t),
                                        r += i.distanceTo(n),
                                        e.push(r),
                                        n = i;
                                return this.cacheArcLengths = e,
                                    e
                            }
                            updateArcLengths() {
                                this.needsUpdate = !0,
                                    this.getLengths()
                            }
                            getUtoTmapping(t, e) {
                                var i = this.getLengths();
                                let n = 0;
                                var r = i.length;
                                let s;
                                s = e || t * i[r - 1];
                                let a, o = 0, h = r - 1;
                                for (; o <= h; )
                                    if (n = Math.floor(o + (h - o) / 2),
                                    (a = i[n] - s) < 0)
                                        o = n + 1;
                                    else {
                                        if (!(0 < a)) {
                                            h = n;
                                            break
                                        }
                                        h = n - 1
                                    }
                                return n = h,
                                    i[n] === s ? n / (r - 1) : (n + (e = (s - (e = i[n])) / ((t = i[n + 1]) - e))) / (r - 1)
                            }
                            getTangent(t, e) {
                                let i = t - 1e-4
                                    , n = t + 1e-4;
                                i < 0 && (i = 0),
                                1 < n && (n = 1);
                                var r = this.getPoint(i);
                                t = this.getPoint(n);
                                const s = e || new (r.isVector2 ? wn : Fn);
                                return s.copy(t).sub(r).normalize(),
                                    s
                            }
                            getTangentAt(t, e) {
                                return t = this.getUtoTmapping(t),
                                    this.getTangent(t, e)
                            }
                            computeFrenetFrames(t, e) {
                                const i = new Fn
                                    , n = []
                                    , r = []
                                    , s = []
                                    , a = new Fn
                                    , o = new mr;
                                for (let e = 0; e <= t; e++) {
                                    var h = e / t;
                                    n[e] = this.getTangentAt(h, new Fn)
                                }
                                r[0] = new Fn,
                                    s[0] = new Fn;
                                let l = Number.MAX_VALUE;
                                var u, c = Math.abs(n[0].x), d = Math.abs(n[0].y), p = Math.abs(n[0].z);
                                c <= l && (l = c,
                                    i.set(1, 0, 0)),
                                d <= l && (l = d,
                                    i.set(0, 1, 0)),
                                p <= l && i.set(0, 0, 1),
                                    a.crossVectors(n[0], i).normalize(),
                                    r[0].crossVectors(n[0], a),
                                    s[0].crossVectors(n[0], r[0]);
                                for (let e = 1; e <= t; e++)
                                    r[e] = r[e - 1].clone(),
                                        s[e] = s[e - 1].clone(),
                                        a.crossVectors(n[e - 1], n[e]),
                                    a.length() > Number.EPSILON && (a.normalize(),
                                        u = Math.acos(mn(n[e - 1].dot(n[e]), -1, 1)),
                                        r[e].applyMatrix4(o.makeRotationAxis(a, u))),
                                        s[e].crossVectors(n[e], r[e]);
                                if (!0 === e) {
                                    let e = Math.acos(mn(r[0].dot(r[t]), -1, 1));
                                    e /= t,
                                    0 < n[0].dot(a.crossVectors(r[0], r[t])) && (e = -e);
                                    for (let i = 1; i <= t; i++)
                                        r[i].applyMatrix4(o.makeRotationAxis(n[i], e * i)),
                                            s[i].crossVectors(n[i], r[i])
                                }
                                return {
                                    tangents: n,
                                    normals: r,
                                    binormals: s
                                }
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                            copy(t) {
                                return this.arcLengthDivisions = t.arcLengthDivisions,
                                    this
                            }
                            toJSON() {
                                const t = {
                                    metadata: {
                                        version: 4.5,
                                        type: "Curve",
                                        generator: "Curve.toJSON"
                                    }
                                };
                                return t.arcLengthDivisions = this.arcLengthDivisions,
                                    t.type = this.type,
                                    t
                            }
                            fromJSON(t) {
                                return this.arcLengthDivisions = t.arcLengthDivisions,
                                    this
                            }
                        }
                        class xu extends yu {
                            constructor(t=0, e=0, i=1, n=1, r=0, s=2 * Math.PI, a=!1, o=0) {
                                super(),
                                    this.type = "EllipseCurve",
                                    this.aX = t,
                                    this.aY = e,
                                    this.xRadius = i,
                                    this.yRadius = n,
                                    this.aStartAngle = r,
                                    this.aEndAngle = s,
                                    this.aClockwise = a,
                                    this.aRotation = o
                            }
                            getPoint(t, e) {
                                const i = e || new wn;
                                var n = 2 * Math.PI;
                                let r = this.aEndAngle - this.aStartAngle;
                                for (var s = Math.abs(r) < Number.EPSILON; r < 0; )
                                    r += n;
                                for (; r > n; )
                                    r -= n;
                                r < Number.EPSILON && (r = s ? 0 : n),
                                !0 !== this.aClockwise || s || (r === n ? r = -n : r -= n);
                                var a = this.aStartAngle + t * r;
                                let o = this.aX + this.xRadius * Math.cos(a)
                                    , h = this.aY + this.yRadius * Math.sin(a);
                                return 0 !== this.aRotation && (e = Math.cos(this.aRotation),
                                    s = Math.sin(this.aRotation),
                                    o = (t = o - this.aX) * e - (a = h - this.aY) * s + this.aX,
                                    h = t * s + a * e + this.aY),
                                    i.set(o, h)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.aX = t.aX,
                                    this.aY = t.aY,
                                    this.xRadius = t.xRadius,
                                    this.yRadius = t.yRadius,
                                    this.aStartAngle = t.aStartAngle,
                                    this.aEndAngle = t.aEndAngle,
                                    this.aClockwise = t.aClockwise,
                                    this.aRotation = t.aRotation,
                                    this
                            }
                            toJSON() {
                                const t = super.toJSON();
                                return t.aX = this.aX,
                                    t.aY = this.aY,
                                    t.xRadius = this.xRadius,
                                    t.yRadius = this.yRadius,
                                    t.aStartAngle = this.aStartAngle,
                                    t.aEndAngle = this.aEndAngle,
                                    t.aClockwise = this.aClockwise,
                                    t.aRotation = this.aRotation,
                                    t
                            }
                            fromJSON(t) {
                                return super.fromJSON(t),
                                    this.aX = t.aX,
                                    this.aY = t.aY,
                                    this.xRadius = t.xRadius,
                                    this.yRadius = t.yRadius,
                                    this.aStartAngle = t.aStartAngle,
                                    this.aEndAngle = t.aEndAngle,
                                    this.aClockwise = t.aClockwise,
                                    this.aRotation = t.aRotation,
                                    this
                            }
                        }
                        xu.prototype.isEllipseCurve = !0;
                        class bu extends xu {
                            constructor(t, e, i, n, r, s) {
                                super(t, e, i, i, n, r, s),
                                    this.type = "ArcCurve"
                            }
                        }
                        function wu() {
                            let t = 0
                                , e = 0
                                , i = 0
                                , n = 0;
                            function r(r, s, a, o) {
                                t = r,
                                    e = a,
                                    i = -3 * r + 3 * s - 2 * a - o,
                                    n = 2 * r - 2 * s + a + o
                            }
                            return {
                                initCatmullRom: function(t, e, i, n, s) {
                                    r(e, i, s * (i - t), s * (n - e))
                                },
                                initNonuniformCatmullRom: function(t, e, i, n, s, a, o) {
                                    s = (e - t) / s - (i - t) / (s + a) + (i - e) / a,
                                        o = (i - e) / a - (n - e) / (a + o) + (n - i) / o,
                                        r(e, i, s *= a, o *= a)
                                },
                                calc: function(r) {
                                    var s = r * r;
                                    return t + e * r + i * s + n * (s * r)
                                }
                            }
                        }
                        bu.prototype.isArcCurve = !0;
                        const Su = new Fn
                            , Mu = new wu
                            , Cu = new wu
                            , Au = new wu;
                        class Tu extends yu {
                            constructor(t=[], e=!1, i="centripetal", n=.5) {
                                super(),
                                    this.type = "CatmullRomCurve3",
                                    this.points = t,
                                    this.closed = e,
                                    this.curveType = i,
                                    this.tension = n
                            }
                            getPoint(t, e=new Fn) {
                                const i = e;
                                var n = this.points;
                                t = ((e = n.length) - (this.closed ? 0 : 1)) * t;
                                let r, s, a = Math.floor(t), o = t - a;
                                this.closed ? a += 0 < a ? 0 : (Math.floor(Math.abs(a) / e) + 1) * e : 0 === o && a === e - 1 && (a = e - 2,
                                    o = 1),
                                    r = this.closed || 0 < a ? n[(a - 1) % e] : (Su.subVectors(n[0], n[1]).add(n[0]),
                                        Su);
                                const h = n[a % e]
                                    , l = n[(a + 1) % e];
                                if (s = this.closed || a + 2 < e ? n[(a + 2) % e] : (Su.subVectors(n[e - 1], n[e - 2]).add(n[e - 1]),
                                    Su),
                                "centripetal" === this.curveType || "chordal" === this.curveType) {
                                    e = "chordal" === this.curveType ? .5 : .25;
                                    let t = Math.pow(r.distanceToSquared(h), e)
                                        , i = Math.pow(h.distanceToSquared(l), e)
                                        , n = Math.pow(l.distanceToSquared(s), e);
                                    i < 1e-4 && (i = 1),
                                    t < 1e-4 && (t = i),
                                    n < 1e-4 && (n = i),
                                        Mu.initNonuniformCatmullRom(r.x, h.x, l.x, s.x, t, i, n),
                                        Cu.initNonuniformCatmullRom(r.y, h.y, l.y, s.y, t, i, n),
                                        Au.initNonuniformCatmullRom(r.z, h.z, l.z, s.z, t, i, n)
                                } else
                                    "catmullrom" === this.curveType && (Mu.initCatmullRom(r.x, h.x, l.x, s.x, this.tension),
                                        Cu.initCatmullRom(r.y, h.y, l.y, s.y, this.tension),
                                        Au.initCatmullRom(r.z, h.z, l.z, s.z, this.tension));
                                return i.set(Mu.calc(o), Cu.calc(o), Au.calc(o)),
                                    i
                            }
                            copy(t) {
                                super.copy(t),
                                    this.points = [];
                                for (let e = 0, i = t.points.length; e < i; e++) {
                                    const i = t.points[e];
                                    this.points.push(i.clone())
                                }
                                return this.closed = t.closed,
                                    this.curveType = t.curveType,
                                    this.tension = t.tension,
                                    this
                            }
                            toJSON() {
                                const t = super.toJSON();
                                t.points = [];
                                for (let e = 0, i = this.points.length; e < i; e++) {
                                    const i = this.points[e];
                                    t.points.push(i.toArray())
                                }
                                return t.closed = this.closed,
                                    t.curveType = this.curveType,
                                    t.tension = this.tension,
                                    t
                            }
                            fromJSON(t) {
                                super.fromJSON(t),
                                    this.points = [];
                                for (let i = 0, n = t.points.length; i < n; i++) {
                                    var e = t.points[i];
                                    this.points.push((new Fn).fromArray(e))
                                }
                                return this.closed = t.closed,
                                    this.curveType = t.curveType,
                                    this.tension = t.tension,
                                    this
                            }
                        }
                        function Pu(t, e, i, n, r) {
                            var s = .5 * (n - e);
                            return (2 * i - 2 * n + s + (e = .5 * (r - i))) * (t * (r = t * t)) + (-3 * i + 3 * n - 2 * s - e) * r + s * t + i
                        }
                        function Eu(t, e, i, n) {
                            return (r = 1 - (r = t)) * r * e + 2 * (1 - t) * t * i + t * t * n;
                            var r
                        }
                        function Lu(t, e, i, n, r) {
                            return (s = 1 - (s = t)) * s * s * e + 3 * (e = 1 - t) * e * t * i + 3 * (1 - t) * t * t * n + t * t * t * r;
                            var s
                        }
                        Tu.prototype.isCatmullRomCurve3 = !0;
                        class Iu extends yu {
                            constructor(t=new wn, e=new wn, i=new wn, n=new wn) {
                                super(),
                                    this.type = "CubicBezierCurve",
                                    this.v0 = t,
                                    this.v1 = e,
                                    this.v2 = i,
                                    this.v3 = n
                            }
                            getPoint(t, e=new wn) {
                                const i = e;
                                var n = this.v0
                                    , r = this.v1
                                    , s = this.v2;
                                e = this.v3;
                                return i.set(Lu(t, n.x, r.x, s.x, e.x), Lu(t, n.y, r.y, s.y, e.y)),
                                    i
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.v0.copy(t.v0),
                                    this.v1.copy(t.v1),
                                    this.v2.copy(t.v2),
                                    this.v3.copy(t.v3),
                                    this
                            }
                            toJSON() {
                                const t = super.toJSON();
                                return t.v0 = this.v0.toArray(),
                                    t.v1 = this.v1.toArray(),
                                    t.v2 = this.v2.toArray(),
                                    t.v3 = this.v3.toArray(),
                                    t
                            }
                            fromJSON(t) {
                                return super.fromJSON(t),
                                    this.v0.fromArray(t.v0),
                                    this.v1.fromArray(t.v1),
                                    this.v2.fromArray(t.v2),
                                    this.v3.fromArray(t.v3),
                                    this
                            }
                        }
                        Iu.prototype.isCubicBezierCurve = !0;
                        class ku extends yu {
                            constructor(t=new Fn, e=new Fn, i=new Fn, n=new Fn) {
                                super(),
                                    this.type = "CubicBezierCurve3",
                                    this.v0 = t,
                                    this.v1 = e,
                                    this.v2 = i,
                                    this.v3 = n
                            }
                            getPoint(t, e=new Fn) {
                                const i = e;
                                var n = this.v0
                                    , r = this.v1
                                    , s = this.v2;
                                e = this.v3;
                                return i.set(Lu(t, n.x, r.x, s.x, e.x), Lu(t, n.y, r.y, s.y, e.y), Lu(t, n.z, r.z, s.z, e.z)),
                                    i
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.v0.copy(t.v0),
                                    this.v1.copy(t.v1),
                                    this.v2.copy(t.v2),
                                    this.v3.copy(t.v3),
                                    this
                            }
                            toJSON() {
                                const t = super.toJSON();
                                return t.v0 = this.v0.toArray(),
                                    t.v1 = this.v1.toArray(),
                                    t.v2 = this.v2.toArray(),
                                    t.v3 = this.v3.toArray(),
                                    t
                            }
                            fromJSON(t) {
                                return super.fromJSON(t),
                                    this.v0.fromArray(t.v0),
                                    this.v1.fromArray(t.v1),
                                    this.v2.fromArray(t.v2),
                                    this.v3.fromArray(t.v3),
                                    this
                            }
                        }
                        ku.prototype.isCubicBezierCurve3 = !0;
                        class Nu extends yu {
                            constructor(t=new wn, e=new wn) {
                                super(),
                                    this.type = "LineCurve",
                                    this.v1 = t,
                                    this.v2 = e
                            }
                            getPoint(t, e=new wn) {
                                const i = e;
                                return 1 === t ? i.copy(this.v2) : (i.copy(this.v2).sub(this.v1),
                                    i.multiplyScalar(t).add(this.v1)),
                                    i
                            }
                            getPointAt(t, e) {
                                return this.getPoint(t, e)
                            }
                            getTangent(t, e) {
                                const i = e || new wn;
                                return i.copy(this.v2).sub(this.v1).normalize(),
                                    i
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.v1.copy(t.v1),
                                    this.v2.copy(t.v2),
                                    this
                            }
                            toJSON() {
                                const t = super.toJSON();
                                return t.v1 = this.v1.toArray(),
                                    t.v2 = this.v2.toArray(),
                                    t
                            }
                            fromJSON(t) {
                                return super.fromJSON(t),
                                    this.v1.fromArray(t.v1),
                                    this.v2.fromArray(t.v2),
                                    this
                            }
                        }
                        Nu.prototype.isLineCurve = !0;
                        class Ou extends yu {
                            constructor(t=new Fn, e=new Fn) {
                                super(),
                                    this.type = "LineCurve3",
                                    this.isLineCurve3 = !0,
                                    this.v1 = t,
                                    this.v2 = e
                            }
                            getPoint(t, e=new Fn) {
                                const i = e;
                                return 1 === t ? i.copy(this.v2) : (i.copy(this.v2).sub(this.v1),
                                    i.multiplyScalar(t).add(this.v1)),
                                    i
                            }
                            getPointAt(t, e) {
                                return this.getPoint(t, e)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.v1.copy(t.v1),
                                    this.v2.copy(t.v2),
                                    this
                            }
                            toJSON() {
                                const t = super.toJSON();
                                return t.v1 = this.v1.toArray(),
                                    t.v2 = this.v2.toArray(),
                                    t
                            }
                            fromJSON(t) {
                                return super.fromJSON(t),
                                    this.v1.fromArray(t.v1),
                                    this.v2.fromArray(t.v2),
                                    this
                            }
                        }
                        class Du extends yu {
                            constructor(t=new wn, e=new wn, i=new wn) {
                                super(),
                                    this.type = "QuadraticBezierCurve",
                                    this.v0 = t,
                                    this.v1 = e,
                                    this.v2 = i
                            }
                            getPoint(t, e=new wn) {
                                const i = e;
                                var n = this.v0
                                    , r = this.v1;
                                e = this.v2;
                                return i.set(Eu(t, n.x, r.x, e.x), Eu(t, n.y, r.y, e.y)),
                                    i
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.v0.copy(t.v0),
                                    this.v1.copy(t.v1),
                                    this.v2.copy(t.v2),
                                    this
                            }
                            toJSON() {
                                const t = super.toJSON();
                                return t.v0 = this.v0.toArray(),
                                    t.v1 = this.v1.toArray(),
                                    t.v2 = this.v2.toArray(),
                                    t
                            }
                            fromJSON(t) {
                                return super.fromJSON(t),
                                    this.v0.fromArray(t.v0),
                                    this.v1.fromArray(t.v1),
                                    this.v2.fromArray(t.v2),
                                    this
                            }
                        }
                        Du.prototype.isQuadraticBezierCurve = !0;
                        class Ru extends yu {
                            constructor(t=new Fn, e=new Fn, i=new Fn) {
                                super(),
                                    this.type = "QuadraticBezierCurve3",
                                    this.v0 = t,
                                    this.v1 = e,
                                    this.v2 = i
                            }
                            getPoint(t, e=new Fn) {
                                const i = e;
                                var n = this.v0
                                    , r = this.v1;
                                e = this.v2;
                                return i.set(Eu(t, n.x, r.x, e.x), Eu(t, n.y, r.y, e.y), Eu(t, n.z, r.z, e.z)),
                                    i
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.v0.copy(t.v0),
                                    this.v1.copy(t.v1),
                                    this.v2.copy(t.v2),
                                    this
                            }
                            toJSON() {
                                const t = super.toJSON();
                                return t.v0 = this.v0.toArray(),
                                    t.v1 = this.v1.toArray(),
                                    t.v2 = this.v2.toArray(),
                                    t
                            }
                            fromJSON(t) {
                                return super.fromJSON(t),
                                    this.v0.fromArray(t.v0),
                                    this.v1.fromArray(t.v1),
                                    this.v2.fromArray(t.v2),
                                    this
                            }
                        }
                        Ru.prototype.isQuadraticBezierCurve3 = !0;
                        class zu extends yu {
                            constructor(t=[]) {
                                super(),
                                    this.type = "SplineCurve",
                                    this.points = t
                            }
                            getPoint(t, e=new wn) {
                                const i = e;
                                var n = this.points
                                    , r = (s = (n.length - 1) * t) - (a = Math.floor(s))
                                    , s = (e = n[0 === a ? a : a - 1],
                                    t = n[a],
                                    n[a > n.length - 2 ? n.length - 1 : a + 1])
                                    , a = n[a > n.length - 3 ? n.length - 1 : a + 2];
                                return i.set(Pu(r, e.x, t.x, s.x, a.x), Pu(r, e.y, t.y, s.y, a.y)),
                                    i
                            }
                            copy(t) {
                                super.copy(t),
                                    this.points = [];
                                for (let e = 0, i = t.points.length; e < i; e++) {
                                    const i = t.points[e];
                                    this.points.push(i.clone())
                                }
                                return this
                            }
                            toJSON() {
                                const t = super.toJSON();
                                t.points = [];
                                for (let e = 0, i = this.points.length; e < i; e++) {
                                    const i = this.points[e];
                                    t.points.push(i.toArray())
                                }
                                return t
                            }
                            fromJSON(t) {
                                super.fromJSON(t),
                                    this.points = [];
                                for (let i = 0, n = t.points.length; i < n; i++) {
                                    var e = t.points[i];
                                    this.points.push((new wn).fromArray(e))
                                }
                                return this
                            }
                        }
                        zu.prototype.isSplineCurve = !0;
                        var Fu = Object.freeze({
                            __proto__: null,
                            ArcCurve: bu,
                            CatmullRomCurve3: Tu,
                            CubicBezierCurve: Iu,
                            CubicBezierCurve3: ku,
                            EllipseCurve: xu,
                            LineCurve: Nu,
                            LineCurve3: Ou,
                            QuadraticBezierCurve: Du,
                            QuadraticBezierCurve3: Ru,
                            SplineCurve: zu
                        });
                        class Bu extends yu {
                            constructor() {
                                super(),
                                    this.type = "CurvePath",
                                    this.curves = [],
                                    this.autoClose = !1
                            }
                            add(t) {
                                this.curves.push(t)
                            }
                            closePath() {
                                const t = this.curves[0].getPoint(0);
                                var e = this.curves[this.curves.length - 1].getPoint(1);
                                t.equals(e) || this.curves.push(new Nu(e,t))
                            }
                            getPoint(t, e) {
                                var i = t * this.getLength()
                                    , n = this.getCurveLengths();
                                let r = 0;
                                for (; r < n.length; ) {
                                    if (n[r] >= i) {
                                        var s = n[r] - i;
                                        const t = this.curves[r];
                                        var a = t.getLength();
                                        return t.getPointAt(0 === a ? 0 : 1 - s / a, e)
                                    }
                                    r++
                                }
                                return null
                            }
                            getLength() {
                                var t = this.getCurveLengths();
                                return t[t.length - 1]
                            }
                            updateArcLengths() {
                                this.needsUpdate = !0,
                                    this.cacheLengths = null,
                                    this.getCurveLengths()
                            }
                            getCurveLengths() {
                                if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
                                    return this.cacheLengths;
                                const t = [];
                                let e = 0;
                                for (let i = 0, n = this.curves.length; i < n; i++)
                                    e += this.curves[i].getLength(),
                                        t.push(e);
                                return this.cacheLengths = t,
                                    t
                            }
                            getSpacedPoints(t=40) {
                                const e = [];
                                for (let i = 0; i <= t; i++)
                                    e.push(this.getPoint(i / t));
                                return this.autoClose && e.push(e[0]),
                                    e
                            }
                            getPoints(t=12) {
                                const e = [];
                                let i;
                                for (let a = 0, o = this.curves; a < o.length; a++) {
                                    const h = o[a];
                                    var n = h && h.isEllipseCurve ? 2 * t : h && (h.isLineCurve || h.isLineCurve3) ? 1 : h && h.isSplineCurve ? t * h.points.length : t
                                        , r = h.getPoints(n);
                                    for (let t = 0; t < r.length; t++) {
                                        var s = r[t];
                                        i && i.equals(s) || (e.push(s),
                                            i = s)
                                    }
                                }
                                return this.autoClose && 1 < e.length && !e[e.length - 1].equals(e[0]) && e.push(e[0]),
                                    e
                            }
                            copy(t) {
                                super.copy(t),
                                    this.curves = [];
                                for (let e = 0, i = t.curves.length; e < i; e++) {
                                    const i = t.curves[e];
                                    this.curves.push(i.clone())
                                }
                                return this.autoClose = t.autoClose,
                                    this
                            }
                            toJSON() {
                                const t = super.toJSON();
                                t.autoClose = this.autoClose,
                                    t.curves = [];
                                for (let e = 0, i = this.curves.length; e < i; e++) {
                                    const i = this.curves[e];
                                    t.curves.push(i.toJSON())
                                }
                                return t
                            }
                            fromJSON(t) {
                                super.fromJSON(t),
                                    this.autoClose = t.autoClose,
                                    this.curves = [];
                                for (let i = 0, n = t.curves.length; i < n; i++) {
                                    var e = t.curves[i];
                                    this.curves.push((new Fu[e.type]).fromJSON(e))
                                }
                                return this
                            }
                        }
                        class Vu extends Bu {
                            constructor(t) {
                                super(),
                                    this.type = "Path",
                                    this.currentPoint = new wn,
                                t && this.setFromPoints(t)
                            }
                            setFromPoints(t) {
                                this.moveTo(t[0].x, t[0].y);
                                for (let e = 1, i = t.length; e < i; e++)
                                    this.lineTo(t[e].x, t[e].y);
                                return this
                            }
                            moveTo(t, e) {
                                return this.currentPoint.set(t, e),
                                    this
                            }
                            lineTo(t, e) {
                                var i = new Nu(this.currentPoint.clone(),new wn(t,e));
                                return this.curves.push(i),
                                    this.currentPoint.set(t, e),
                                    this
                            }
                            quadraticCurveTo(t, e, i, n) {
                                return e = new Du(this.currentPoint.clone(),new wn(t,e),new wn(i,n)),
                                    this.curves.push(e),
                                    this.currentPoint.set(i, n),
                                    this
                            }
                            bezierCurveTo(t, e, i, n, r, s) {
                                return n = new Iu(this.currentPoint.clone(),new wn(t,e),new wn(i,n),new wn(r,s)),
                                    this.curves.push(n),
                                    this.currentPoint.set(r, s),
                                    this
                            }
                            splineThru(t) {
                                var e = [this.currentPoint.clone()].concat(t);
                                e = new zu(e);
                                return this.curves.push(e),
                                    this.currentPoint.copy(t[t.length - 1]),
                                    this
                            }
                            arc(t, e, i, n, r, s) {
                                var a = this.currentPoint.x
                                    , o = this.currentPoint.y;
                                return this.absarc(t + a, e + o, i, n, r, s),
                                    this
                            }
                            absarc(t, e, i, n, r, s) {
                                return this.absellipse(t, e, i, i, n, r, s),
                                    this
                            }
                            ellipse(t, e, i, n, r, s, a, o) {
                                var h = this.currentPoint.x
                                    , l = this.currentPoint.y;
                                return this.absellipse(t + h, e + l, i, n, r, s, a, o),
                                    this
                            }
                            absellipse(t, e, i, n, r, s, a, o) {
                                const h = new xu(t,e,i,n,r,s,a,o);
                                if (0 < this.curves.length) {
                                    const t = h.getPoint(0);
                                    t.equals(this.currentPoint) || this.lineTo(t.x, t.y)
                                }
                                return this.curves.push(h),
                                    o = h.getPoint(1),
                                    this.currentPoint.copy(o),
                                    this
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.currentPoint.copy(t.currentPoint),
                                    this
                            }
                            toJSON() {
                                const t = super.toJSON();
                                return t.currentPoint = this.currentPoint.toArray(),
                                    t
                            }
                            fromJSON(t) {
                                return super.fromJSON(t),
                                    this.currentPoint.fromArray(t.currentPoint),
                                    this
                            }
                        }
                        class Uu extends Vu {
                            constructor(t) {
                                super(t),
                                    this.uuid = fn(),
                                    this.type = "Shape",
                                    this.holes = []
                            }
                            getPointsHoles(t) {
                                const e = [];
                                for (let i = 0, n = this.holes.length; i < n; i++)
                                    e[i] = this.holes[i].getPoints(t);
                                return e
                            }
                            extractPoints(t) {
                                return {
                                    shape: this.getPoints(t),
                                    holes: this.getPointsHoles(t)
                                }
                            }
                            copy(t) {
                                super.copy(t),
                                    this.holes = [];
                                for (let e = 0, i = t.holes.length; e < i; e++) {
                                    const i = t.holes[e];
                                    this.holes.push(i.clone())
                                }
                                return this
                            }
                            toJSON() {
                                const t = super.toJSON();
                                t.uuid = this.uuid,
                                    t.holes = [];
                                for (let e = 0, i = this.holes.length; e < i; e++) {
                                    const i = this.holes[e];
                                    t.holes.push(i.toJSON())
                                }
                                return t
                            }
                            fromJSON(t) {
                                super.fromJSON(t),
                                    this.uuid = t.uuid,
                                    this.holes = [];
                                for (let i = 0, n = t.holes.length; i < n; i++) {
                                    var e = t.holes[i];
                                    this.holes.push((new Vu).fromJSON(e))
                                }
                                return this
                            }
                        }
                        const Gu = function(t, e, i=2) {
                            var n = e && e.length
                                , r = n ? e[0] * i : t.length;
                            let s = Wu(t, 0, r, i, !0);
                            var a = [];
                            if (!s || s.next === s.prev)
                                return a;
                            let o, h, l, u, c, d, p;
                            if (n && (s = function(t, e, i, n) {
                                const r = [];
                                let s, a, o, h, l;
                                for (s = 0,
                                         a = e.length; s < a; s++)
                                    o = e[s] * n,
                                        h = s < a - 1 ? e[s + 1] * n : t.length,
                                        l = Wu(t, o, h, n, !1),
                                    l === l.next && (l.steiner = !0),
                                        r.push(function(t) {
                                            let e = t
                                                , i = t;
                                            for (; (e.x < i.x || e.x === i.x && e.y < i.y) && (i = e),
                                                       e = e.next,
                                                   e !== t; )
                                                ;
                                            return i
                                        }(l));
                                for (r.sort(qu),
                                         s = 0; s < r.length; s++)
                                    !function(t, e) {
                                        (e = function(t, e) {
                                            let i = e;
                                            var n = t.x
                                                , r = t.y;
                                            let s, a = -1 / 0;
                                            do {
                                                if (r <= i.y && r >= i.next.y && i.next.y !== i.y) {
                                                    var o = i.x + (r - i.y) * (i.next.x - i.x) / (i.next.y - i.y);
                                                    if (o <= n && o > a) {
                                                        if ((a = o) === n) {
                                                            if (r === i.y)
                                                                return i;
                                                            if (r === i.next.y)
                                                                return i.next
                                                        }
                                                        s = i.x < i.next.x ? i : i.next
                                                    }
                                                }
                                            } while (i = i.next,
                                            i !== e);
                                            if (!s)
                                                return null;
                                            if (n === a)
                                                return s;
                                            var h = s
                                                , l = s.x
                                                , u = s.y;
                                            let c, d = 1 / 0;
                                            for (i = s; n >= i.x && i.x >= l && n !== i.x && Zu(r < u ? n : a, r, l, u, r < u ? a : n, r, i.x, i.y) && (c = Math.abs(r - i.y) / (n - i.x),
                                            tc(i, t) && (c < d || c === d && (i.x > s.x || i.x === s.x && function(t, e) {
                                                return Ju(t.prev, t, e.prev) < 0 && Ju(e.next, t, t.next) < 0
                                            }(s, i))) && (s = i,
                                                d = c)),
                                                i = i.next,
                                            i !== h; )
                                                ;
                                            return s
                                        }(t, e)) && (t = ec(e, t),
                                            ju(e, e.next),
                                            ju(t, t.next))
                                    }(r[s], i),
                                        i = ju(i, i.next);
                                return i
                            }(t, e, s, i)),
                            t.length > 80 * i) {
                                o = l = t[0],
                                    h = u = t[1];
                                for (let e = i; e < r; e += i)
                                    c = t[e],
                                        d = t[e + 1],
                                    c < o && (o = c),
                                    d < h && (h = d),
                                    c > l && (l = c),
                                    d > u && (u = d);
                                p = Math.max(l - o, u - h),
                                    p = 0 !== p ? 1 / p : 0
                            }
                            return Hu(s, a, i, o, h, p),
                                a
                        };
                        function Wu(t, e, i, n, r) {
                            let s, a;
                            if (r === 0 < function(t, e, i, n) {
                                let r = 0;
                                for (let s = e, a = i - n; s < i; s += n)
                                    r += (t[a] - t[s]) * (t[s + 1] + t[a + 1]),
                                        a = s;
                                return r
                            }(t, e, i, n))
                                for (s = e; s < i; s += n)
                                    a = ic(s, t[s], t[s + 1], a);
                            else
                                for (s = i - n; s >= e; s -= n)
                                    a = ic(s, t[s], t[s + 1], a);
                            return a && Yu(a, a.next) && (nc(a),
                                a = a.next),
                                a
                        }
                        function ju(t, e) {
                            if (!t)
                                return t;
                            e = e || t;
                            let i, n = t;
                            do {
                                if (i = !1,
                                n.steiner || !Yu(n, n.next) && 0 !== Ju(n.prev, n, n.next))
                                    n = n.next;
                                else {
                                    if (nc(n),
                                        n = e = n.prev,
                                    n === n.next)
                                        break;
                                    i = !0
                                }
                            } while (i || n !== e);
                            return e
                        }
                        function Hu(t, e, i, n, r, s, a) {
                            if (t) {
                                !a && s && function(t, e, i, n) {
                                    let r = t;
                                    for (; null === r.z && (r.z = Xu(r.x, r.y, e, i, n)),
                                               r.prevZ = r.prev,
                                               r.nextZ = r.next,
                                               r = r.next,
                                           r !== t; )
                                        ;
                                    r.prevZ.nextZ = null,
                                        r.prevZ = null,
                                        function(t) {
                                            let e, i, n, r, s, a, o, h, l = 1;
                                            do {
                                                for (i = t,
                                                         t = null,
                                                         s = null,
                                                         a = 0; i; ) {
                                                    for (a++,
                                                             n = i,
                                                             o = 0,
                                                             e = 0; e < l && (o++,
                                                        n = n.nextZ,
                                                        n); e++)
                                                        ;
                                                    for (h = l; 0 < o || 0 < h && n; )
                                                        0 !== o && (0 === h || !n || i.z <= n.z) ? (r = i,
                                                            i = i.nextZ,
                                                            o--) : (r = n,
                                                            n = n.nextZ,
                                                            h--),
                                                            s ? s.nextZ = r : t = r,
                                                            r.prevZ = s,
                                                            s = r;
                                                    i = n
                                                }
                                            } while (s.nextZ = null,
                                                l *= 2,
                                            1 < a)
                                        }(r)
                                }(t, n, r, s);
                                let o, h, l = t;
                                for (; t.prev !== t.next; )
                                    if (o = t.prev,
                                        h = t.next,
                                        s ? function(t, e, i, n) {
                                            var r = t.prev
                                                , s = t
                                                , a = t.next;
                                            if (0 <= Ju(r, s, a))
                                                return !1;
                                            var o = (r.x < s.x ? r.x < a.x ? r : a : s.x < a.x ? s : a).x
                                                , h = (r.y < s.y ? r.y < a.y ? r : a : s.y < a.y ? s : a).y
                                                , l = (r.x > s.x ? r.x > a.x ? r : a : s.x > a.x ? s : a).x
                                                , u = (r.y > s.y ? r.y > a.y ? r : a : s.y > a.y ? s : a).y
                                                , c = Xu(o, h, e, i, n)
                                                , d = Xu(l, u, e, i, n);
                                            let p = t.prevZ
                                                , f = t.nextZ;
                                            for (; p && p.z >= c && f && f.z <= d; ) {
                                                if (p !== t.prev && p !== t.next && Zu(r.x, r.y, s.x, s.y, a.x, a.y, p.x, p.y) && 0 <= Ju(p.prev, p, p.next))
                                                    return !1;
                                                if (p = p.prevZ,
                                                f !== t.prev && f !== t.next && Zu(r.x, r.y, s.x, s.y, a.x, a.y, f.x, f.y) && 0 <= Ju(f.prev, f, f.next))
                                                    return !1;
                                                f = f.nextZ
                                            }
                                            for (; p && p.z >= c; ) {
                                                if (p !== t.prev && p !== t.next && Zu(r.x, r.y, s.x, s.y, a.x, a.y, p.x, p.y) && 0 <= Ju(p.prev, p, p.next))
                                                    return !1;
                                                p = p.prevZ
                                            }
                                            for (; f && f.z <= d; ) {
                                                if (f !== t.prev && f !== t.next && Zu(r.x, r.y, s.x, s.y, a.x, a.y, f.x, f.y) && 0 <= Ju(f.prev, f, f.next))
                                                    return !1;
                                                f = f.nextZ
                                            }
                                            return !0
                                        }(t, n, r, s) : function(t) {
                                            var e = t.prev
                                                , i = t
                                                , n = t.next;
                                            if (0 <= Ju(e, i, n))
                                                return !1;
                                            let r = t.next.next;
                                            for (; r !== t.prev; ) {
                                                if (Zu(e.x, e.y, i.x, i.y, n.x, n.y, r.x, r.y) && 0 <= Ju(r.prev, r, r.next))
                                                    return !1;
                                                r = r.next
                                            }
                                            return !0
                                        }(t))
                                        e.push(o.i / i),
                                            e.push(t.i / i),
                                            e.push(h.i / i),
                                            nc(t),
                                            t = h.next,
                                            l = h.next;
                                    else if ((t = h) === l) {
                                        a ? 1 === a ? Hu(t = function(t, e, i) {
                                            let n = t;
                                            do {
                                                var r = n.prev
                                                    , s = n.next.next;
                                                !Yu(r, s) && Qu(r, n, n.next, s) && tc(r, s) && tc(s, r) && (e.push(r.i / i),
                                                    e.push(n.i / i),
                                                    e.push(s.i / i),
                                                    nc(n),
                                                    nc(n.next),
                                                    n = t = s),
                                                    n = n.next
                                            } while (n !== t);
                                            return ju(n)
                                        }(ju(t), e, i), e, i, n, r, s, 2) : 2 === a && function(t, e, i, n, r, s) {
                                            let a = t;
                                            do {
                                                let t = a.next.next;
                                                for (; t !== a.prev; ) {
                                                    if (a.i !== t.i && function(t, e) {
                                                        return t.next.i !== e.i && t.prev.i !== e.i && !function(t, e) {
                                                            let i = t;
                                                            do {
                                                                if (i.i !== t.i && i.next.i !== t.i && i.i !== e.i && i.next.i !== e.i && Qu(i, i.next, t, e))
                                                                    return !0
                                                            } while (i = i.next,
                                                            i !== t);
                                                            return !1
                                                        }(t, e) && (tc(t, e) && tc(e, t) && function(t, e) {
                                                            let i = t
                                                                , n = !1;
                                                            for (var r = (t.x + e.x) / 2, s = (t.y + e.y) / 2; i.y > s != i.next.y > s && i.next.y !== i.y && r < (i.next.x - i.x) * (s - i.y) / (i.next.y - i.y) + i.x && (n = !n),
                                                                i = i.next,
                                                            i !== t; )
                                                                ;
                                                            return n
                                                        }(t, e) && (Ju(t.prev, t, e.prev) || Ju(t, e.prev, e)) || Yu(t, e) && 0 < Ju(t.prev, t, t.next) && 0 < Ju(e.prev, e, e.next))
                                                    }(a, t)) {
                                                        var o = ec(a, t);
                                                        return a = ju(a, a.next),
                                                            o = ju(o, o.next),
                                                            Hu(a, e, i, n, r, s),
                                                            Hu(o, e, i, n, r, s)
                                                    }
                                                    t = t.next
                                                }
                                            } while (a = a.next,
                                            a !== t)
                                        }(t, e, i, n, r, s) : Hu(ju(t), e, i, n, r, s, 1);
                                        break
                                    }
                            }
                        }
                        function qu(t, e) {
                            return t.x - e.x
                        }
                        function Xu(t, e, i, n, r) {
                            return (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t = 32767 * (t - i) * r) | t << 8)) | t << 4)) | t << 2)) | t << 1)) | (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = 32767 * (e - n) * r) | e << 8)) | e << 4)) | e << 2)) | e << 1)) << 1
                        }
                        function Zu(t, e, i, n, r, s, a, o) {
                            return 0 <= (r - a) * (e - o) - (t - a) * (s - o) && 0 <= (t - a) * (n - o) - (i - a) * (e - o) && 0 <= (i - a) * (s - o) - (r - a) * (n - o)
                        }
                        function Ju(t, e, i) {
                            return (e.y - t.y) * (i.x - e.x) - (e.x - t.x) * (i.y - e.y)
                        }
                        function Yu(t, e) {
                            return t.x === e.x && t.y === e.y
                        }
                        function Qu(t, e, i, n) {
                            var r = $u(Ju(t, e, i))
                                , s = $u(Ju(t, e, n))
                                , a = $u(Ju(i, n, t))
                                , o = $u(Ju(i, n, e));
                            return r !== s && a !== o || 0 === r && Ku(t, i, e) || 0 === s && Ku(t, n, e) || 0 === a && Ku(i, t, n) || !(0 !== o || !Ku(i, e, n))
                        }
                        function Ku(t, e, i) {
                            return e.x <= Math.max(t.x, i.x) && e.x >= Math.min(t.x, i.x) && e.y <= Math.max(t.y, i.y) && e.y >= Math.min(t.y, i.y)
                        }
                        function $u(t) {
                            return 0 < t ? 1 : t < 0 ? -1 : 0
                        }
                        function tc(t, e) {
                            return Ju(t.prev, t, t.next) < 0 ? 0 <= Ju(t, e, t.next) && 0 <= Ju(t, t.prev, e) : Ju(t, e, t.prev) < 0 || Ju(t, t.next, e) < 0
                        }
                        function ec(t, e) {
                            const i = new rc(t.i,t.x,t.y)
                                , n = new rc(e.i,e.x,e.y)
                                , r = t.next
                                , s = e.prev;
                            return (t.next = e).prev = t,
                                i.next = r,
                                r.prev = i,
                                n.next = i,
                                i.prev = n,
                                s.next = n,
                                n.prev = s,
                                n
                        }
                        function ic(t, e, i, n) {
                            const r = new rc(t,e,i);
                            return n ? (r.next = n.next,
                                (r.prev = n).next.prev = r,
                                n.next = r) : (r.prev = r,
                                r.next = r),
                                r
                        }
                        function nc(t) {
                            t.next.prev = t.prev,
                                t.prev.next = t.next,
                            t.prevZ && (t.prevZ.nextZ = t.nextZ),
                            t.nextZ && (t.nextZ.prevZ = t.prevZ)
                        }
                        function rc(t, e, i) {
                            this.i = t,
                                this.x = e,
                                this.y = i,
                                this.prev = null,
                                this.next = null,
                                this.z = null,
                                this.prevZ = null,
                                this.nextZ = null,
                                this.steiner = !1
                        }
                        class sc {
                            static area(t) {
                                var e = t.length;
                                let i = 0;
                                for (let n = e - 1, r = 0; r < e; n = r++)
                                    i += t[n].x * t[r].y - t[r].x * t[n].y;
                                return .5 * i
                            }
                            static isClockWise(t) {
                                return sc.area(t) < 0
                            }
                            static triangulateShape(t, e) {
                                var i = [];
                                const n = []
                                    , r = [];
                                ac(t),
                                    oc(i, t);
                                let s = t.length;
                                e.forEach(ac);
                                for (let t = 0; t < e.length; t++)
                                    n.push(s),
                                        s += e[t].length,
                                        oc(i, e[t]);
                                const a = Gu(i, n);
                                for (let t = 0; t < a.length; t += 3)
                                    r.push(a.slice(t, t + 3));
                                return r
                            }
                        }
                        function ac(t) {
                            var e = t.length;
                            2 < e && t[e - 1].equals(t[0]) && t.pop()
                        }
                        function oc(t, e) {
                            for (let i = 0; i < e.length; i++)
                                t.push(e[i].x),
                                    t.push(e[i].y)
                        }
                        class hc extends Ps {
                            constructor(t=new Uu([new wn(.5,.5), new wn(-.5,.5), new wn(-.5,-.5), new wn(.5,-.5)]), e={}) {
                                super(),
                                    this.type = "ExtrudeGeometry",
                                    this.parameters = {
                                        shapes: t,
                                        options: e
                                    },
                                    t = Array.isArray(t) ? t : [t];
                                const i = this
                                    , n = []
                                    , r = [];
                                for (let s = 0, a = t.length; s < a; s++)
                                    !function(t) {
                                        const s = []
                                            , a = void 0 !== e.curveSegments ? e.curveSegments : 12
                                            , o = void 0 !== e.steps ? e.steps : 1;
                                        let h = void 0 !== e.depth ? e.depth : 1
                                            , l = void 0 === e.bevelEnabled || e.bevelEnabled
                                            , u = void 0 !== e.bevelThickness ? e.bevelThickness : .2
                                            , c = void 0 !== e.bevelSize ? e.bevelSize : u - .1
                                            , d = void 0 !== e.bevelOffset ? e.bevelOffset : 0
                                            , p = void 0 !== e.bevelSegments ? e.bevelSegments : 3;
                                        const f = e.extrudePath
                                            , m = void 0 !== e.UVGenerator ? e.UVGenerator : lc;
                                        void 0 !== e.amount && (h = e.amount);
                                        let g, v, _, y, x, b = !1;
                                        f && (g = f.getSpacedPoints(o),
                                            b = !0,
                                            l = !1,
                                            v = f.computeFrenetFrames(o, !1),
                                            _ = new Fn,
                                            y = new Fn,
                                            x = new Fn),
                                        l || (p = 0,
                                            u = 0,
                                            c = 0,
                                            d = 0);
                                        let w = (t = t.extractPoints(a)).shape;
                                        const S = t.holes;
                                        if (!sc.isClockWise(w)) {
                                            w = w.reverse();
                                            for (let t = 0, e = S.length; t < e; t++) {
                                                const e = S[t];
                                                sc.isClockWise(e) && (S[t] = e.reverse())
                                            }
                                        }
                                        const M = sc.triangulateShape(w, S)
                                            , C = w;
                                        for (let t = 0, e = S.length; t < e; t++) {
                                            var A = S[t];
                                            w = w.concat(A)
                                        }
                                        function T(t, e, i) {
                                            return e.clone().multiplyScalar(i).add(t)
                                        }
                                        const P = w.length
                                            , E = M.length;
                                        function L(t, e, i) {
                                            let n, r, s;
                                            var a = t.x - e.x
                                                , o = t.y - e.y
                                                , h = i.x - t.x
                                                , l = i.y - t.y
                                                , u = a * a + o * o;
                                            if (Math.abs(a * l - o * h) > Number.EPSILON) {
                                                var c = Math.sqrt(u)
                                                    , d = Math.sqrt(h * h + l * l)
                                                    , p = e.x - o / c;
                                                c = e.y + a / c;
                                                if (n = p + a * (d = ((i.x - l / d - p) * l - (i.y + h / d - c) * h) / (a * l - o * h)) - t.x,
                                                    r = c + o * d - t.y,
                                                (t = n * n + r * r) <= 2)
                                                    return new wn(n,r);
                                                s = Math.sqrt(t / 2)
                                            } else {
                                                let t = !1;
                                                a > Number.EPSILON ? h > Number.EPSILON && (t = !0) : a < -Number.EPSILON ? h < -Number.EPSILON && (t = !0) : Math.sign(o) === Math.sign(l) && (t = !0),
                                                    s = t ? (n = -o,
                                                        r = a,
                                                        Math.sqrt(u)) : (n = a,
                                                        r = o,
                                                        Math.sqrt(u / 2))
                                            }
                                            return new wn(n / s,r / s)
                                        }
                                        const I = [];
                                        for (let t = 0, e = C.length, i = e - 1, n = t + 1; t < e; t++,
                                            i++,
                                            n++)
                                            i === e && (i = 0),
                                            n === e && (n = 0),
                                                I[t] = L(C[t], C[i], C[n]);
                                        const k = [];
                                        let N, O = I.concat();
                                        for (let t = 0, e = S.length; t < e; t++) {
                                            var D = S[t];
                                            N = [];
                                            for (let t = 0, e = D.length, i = e - 1, n = t + 1; t < e; t++,
                                                i++,
                                                n++)
                                                i === e && (i = 0),
                                                n === e && (n = 0),
                                                    N[t] = L(D[t], D[i], D[n]);
                                            k.push(N),
                                                O = O.concat(N)
                                        }
                                        for (let t = 0; t < p; t++) {
                                            var R = t / p
                                                , z = u * Math.cos(R * Math.PI / 2);
                                            const e = c * Math.sin(R * Math.PI / 2) + d;
                                            for (let t = 0, i = C.length; t < i; t++) {
                                                var F = T(C[t], I[t], e);
                                                Y(F.x, F.y, -z)
                                            }
                                            for (let t = 0, i = S.length; t < i; t++) {
                                                var B = S[t];
                                                N = k[t];
                                                for (let t = 0, i = B.length; t < i; t++) {
                                                    var V = T(B[t], N[t], e);
                                                    Y(V.x, V.y, -z)
                                                }
                                            }
                                        }
                                        const U = c + d;
                                        for (let t = 0; t < P; t++) {
                                            var G = l ? T(w[t], O[t], U) : w[t];
                                            b ? (y.copy(v.normals[0]).multiplyScalar(G.x),
                                                _.copy(v.binormals[0]).multiplyScalar(G.y),
                                                x.copy(g[0]).add(y).add(_),
                                                Y(x.x, x.y, x.z)) : Y(G.x, G.y, 0)
                                        }
                                        for (let t = 1; t <= o; t++)
                                            for (let e = 0; e < P; e++) {
                                                var W = l ? T(w[e], O[e], U) : w[e];
                                                b ? (y.copy(v.normals[t]).multiplyScalar(W.x),
                                                    _.copy(v.binormals[t]).multiplyScalar(W.y),
                                                    x.copy(g[t]).add(y).add(_),
                                                    Y(x.x, x.y, x.z)) : Y(W.x, W.y, h / o * t)
                                            }
                                        for (let t = p - 1; 0 <= t; t--) {
                                            var j = t / p
                                                , H = u * Math.cos(j * Math.PI / 2);
                                            const e = c * Math.sin(j * Math.PI / 2) + d;
                                            for (let t = 0, i = C.length; t < i; t++) {
                                                var q = T(C[t], I[t], e);
                                                Y(q.x, q.y, h + H)
                                            }
                                            for (let t = 0, i = S.length; t < i; t++) {
                                                var X = S[t];
                                                N = k[t];
                                                for (let t = 0, i = X.length; t < i; t++) {
                                                    var Z = T(X[t], N[t], e);
                                                    b ? Y(Z.x, Z.y + g[o - 1].y, g[o - 1].x + H) : Y(Z.x, Z.y, h + H)
                                                }
                                            }
                                        }
                                        function J(t, e) {
                                            let r = t.length;
                                            for (; 0 <= --r; ) {
                                                var s = r;
                                                let l = r - 1;
                                                l < 0 && (l = t.length - 1);
                                                for (let t = 0, r = o + 2 * p; t < r; t++) {
                                                    var a = P * t
                                                        , h = P * (t + 1);
                                                    !function(t, e, r, s) {
                                                        K(t),
                                                            K(e),
                                                            K(s),
                                                            K(e),
                                                            K(r),
                                                            K(s),
                                                            s = n.length / 3,
                                                            $((s = m.generateSideWallUV(i, n, s - 6, s - 3, s - 2, s - 1))[0]),
                                                            $(s[1]),
                                                            $(s[3]),
                                                            $(s[1]),
                                                            $(s[2]),
                                                            $(s[3])
                                                    }(e + s + a, e + l + a, e + l + h, e + s + h)
                                                }
                                            }
                                        }
                                        function Y(t, e, i) {
                                            s.push(t),
                                                s.push(e),
                                                s.push(i)
                                        }
                                        function Q(t, e, r) {
                                            K(t),
                                                K(e),
                                                K(r),
                                                r = n.length / 3,
                                                $((r = m.generateTopUV(i, n, r - 3, r - 2, r - 1))[0]),
                                                $(r[1]),
                                                $(r[2])
                                        }
                                        function K(t) {
                                            n.push(s[3 * t + 0]),
                                                n.push(s[3 * t + 1]),
                                                n.push(s[3 * t + 2])
                                        }
                                        function $(t) {
                                            r.push(t.x),
                                                r.push(t.y)
                                        }
                                        (function() {
                                                var t = n.length / 3;
                                                if (l) {
                                                    let t = 0 * P;
                                                    for (let i = 0; i < E; i++) {
                                                        var e = M[i];
                                                        Q(e[2] + t, e[1] + t, e[0] + t)
                                                    }
                                                    t = P * (o + 2 * p);
                                                    for (let e = 0; e < E; e++) {
                                                        var r = M[e];
                                                        Q(r[0] + t, r[1] + t, r[2] + t)
                                                    }
                                                } else {
                                                    for (let t = 0; t < E; t++) {
                                                        var s = M[t];
                                                        Q(s[2], s[1], s[0])
                                                    }
                                                    for (let t = 0; t < E; t++) {
                                                        var a = M[t];
                                                        Q(a[0] + P * o, a[1] + P * o, a[2] + P * o)
                                                    }
                                                }
                                                i.addGroup(t, n.length / 3 - t, 0)
                                            }
                                        )(),
                                            function() {
                                                var t = n.length / 3;
                                                let e = 0;
                                                J(C, e),
                                                    e += C.length;
                                                for (let t = 0, i = S.length; t < i; t++) {
                                                    var r = S[t];
                                                    J(r, e),
                                                        e += r.length
                                                }
                                                i.addGroup(t, n.length / 3 - t, 1)
                                            }()
                                    }(t[s]);
                                this.setAttribute("position", new ys(n,3)),
                                    this.setAttribute("uv", new ys(r,2)),
                                    this.computeVertexNormals()
                            }
                            toJSON() {
                                var t = super.toJSON();
                                return function(t, e, i) {
                                    if (i.shapes = [],
                                        Array.isArray(t))
                                        for (let e = 0, r = t.length; e < r; e++) {
                                            var n = t[e];
                                            i.shapes.push(n.uuid)
                                        }
                                    else
                                        i.shapes.push(t.uuid);
                                    return void 0 !== e.extrudePath && (i.options.extrudePath = e.extrudePath.toJSON()),
                                        i
                                }(this.parameters.shapes, this.parameters.options, t)
                            }
                            static fromJSON(t, e) {
                                const i = [];
                                for (let r = 0, s = t.shapes.length; r < s; r++) {
                                    var n = e[t.shapes[r]];
                                    i.push(n)
                                }
                                var r = t.options.extrudePath;
                                return void 0 !== r && (t.options.extrudePath = (new Fu[r.type]).fromJSON(r)),
                                    new hc(i,t.options)
                            }
                        }
                        const lc = {
                            generateTopUV: function(t, e, i, n, r) {
                                var s = e[3 * i]
                                    , a = e[3 * i + 1]
                                    , o = e[3 * n];
                                i = e[3 * n + 1],
                                    n = e[3 * r],
                                    r = e[3 * r + 1];
                                return [new wn(s,a), new wn(o,i), new wn(n,r)]
                            },
                            generateSideWallUV: function(t, e, i, n, r, s) {
                                var a = e[3 * i]
                                    , o = e[3 * i + 1]
                                    , h = e[3 * i + 2]
                                    , l = e[3 * n]
                                    , u = e[3 * n + 1]
                                    , c = e[3 * n + 2]
                                    , d = e[3 * r]
                                    , p = e[3 * r + 1];
                                i = e[3 * r + 2],
                                    n = e[3 * s],
                                    r = e[3 * s + 1],
                                    s = e[3 * s + 2];
                                return Math.abs(o - u) < Math.abs(a - l) ? [new wn(a,1 - h), new wn(l,1 - c), new wn(d,1 - i), new wn(n,1 - s)] : [new wn(o,1 - h), new wn(u,1 - c), new wn(p,1 - i), new wn(r,1 - s)]
                            }
                        };
                        class uc extends du {
                            constructor(t=1, e=0) {
                                var i = (1 + Math.sqrt(5)) / 2;
                                super([-1, i, 0, 1, i, 0, -1, -i, 0, 1, -i, 0, 0, -1, i, 0, 1, i, 0, -1, -i, 0, 1, -i, i, 0, -1, i, 0, 1, -i, 0, -1, -i, 0, 1], [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], t, e),
                                    this.type = "IcosahedronGeometry",
                                    this.parameters = {
                                        radius: t,
                                        detail: e
                                    }
                            }
                            static fromJSON(t) {
                                return new uc(t.radius,t.detail)
                            }
                        }
                        class cc extends Ps {
                            constructor(t=[new wn(0,.5), new wn(.5,0), new wn(0,-.5)], e=12, i=0, n=2 * Math.PI) {
                                super(),
                                    this.type = "LatheGeometry",
                                    this.parameters = {
                                        points: t,
                                        segments: e,
                                        phiStart: i,
                                        phiLength: n
                                    },
                                    e = Math.floor(e),
                                    n = mn(n, 0, 2 * Math.PI);
                                const r = []
                                    , s = []
                                    , a = []
                                    , o = []
                                    , h = [];
                                var l = 1 / e;
                                const u = new Fn
                                    , c = new wn
                                    , d = new Fn
                                    , p = new Fn
                                    , f = new Fn;
                                let m = 0
                                    , g = 0;
                                for (let e = 0; e <= t.length - 1; e++)
                                    switch (e) {
                                        case 0:
                                            m = t[e + 1].x - t[e].x,
                                                g = t[e + 1].y - t[e].y,
                                                d.x = +g,
                                                d.y = -m,
                                                d.z = 0 * g,
                                                f.copy(d),
                                                d.normalize(),
                                                o.push(d.x, d.y, d.z);
                                            break;
                                        case t.length - 1:
                                            o.push(f.x, f.y, f.z);
                                            break;
                                        default:
                                            m = t[e + 1].x - t[e].x,
                                                g = t[e + 1].y - t[e].y,
                                                d.x = +g,
                                                d.y = -m,
                                                d.z = 0 * g,
                                                p.copy(d),
                                                d.x += f.x,
                                                d.y += f.y,
                                                d.z += f.z,
                                                d.normalize(),
                                                o.push(d.x, d.y, d.z),
                                                f.copy(p)
                                    }
                                for (let r = 0; r <= e; r++) {
                                    var v = i + r * l * n
                                        , _ = Math.sin(v)
                                        , y = Math.cos(v);
                                    for (let i = 0; i <= t.length - 1; i++) {
                                        u.x = t[i].x * _,
                                            u.y = t[i].y,
                                            u.z = t[i].x * y,
                                            s.push(u.x, u.y, u.z),
                                            c.x = r / e,
                                            c.y = i / (t.length - 1),
                                            a.push(c.x, c.y);
                                        var x = o[3 * i + 0] * _
                                            , b = o[3 * i + 1]
                                            , w = o[3 * i + 0] * y;
                                        h.push(x, b, w)
                                    }
                                }
                                for (let i = 0; i < e; i++)
                                    for (let e = 0; e < t.length - 1; e++) {
                                        var S = e + i * t.length
                                            , M = S + t.length
                                            , C = S + t.length + 1
                                            , A = S + 1;
                                        r.push(S, M, A),
                                            r.push(M, C, A)
                                    }
                                this.setIndex(r),
                                    this.setAttribute("position", new ys(s,3)),
                                    this.setAttribute("uv", new ys(a,2)),
                                    this.setAttribute("normal", new ys(h,3))
                            }
                            static fromJSON(t) {
                                return new cc(t.points,t.segments,t.phiStart,t.phiLength)
                            }
                        }
                        class dc extends du {
                            constructor(t=1, e=0) {
                                super([1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], t, e),
                                    this.type = "OctahedronGeometry",
                                    this.parameters = {
                                        radius: t,
                                        detail: e
                                    }
                            }
                            static fromJSON(t) {
                                return new dc(t.radius,t.detail)
                            }
                        }
                        class pc extends Ps {
                            constructor(t=.5, e=1, i=8, n=1, r=0, s=2 * Math.PI) {
                                super(),
                                    this.type = "RingGeometry",
                                    this.parameters = {
                                        innerRadius: t,
                                        outerRadius: e,
                                        thetaSegments: i,
                                        phiSegments: n,
                                        thetaStart: r,
                                        thetaLength: s
                                    },
                                    i = Math.max(3, i);
                                const a = []
                                    , o = []
                                    , h = []
                                    , l = [];
                                let u = t;
                                var c = (e - t) / (n = Math.max(1, n));
                                const d = new Fn
                                    , p = new wn;
                                for (let t = 0; t <= n; t++) {
                                    for (let t = 0; t <= i; t++) {
                                        var f = r + t / i * s;
                                        d.x = u * Math.cos(f),
                                            d.y = u * Math.sin(f),
                                            o.push(d.x, d.y, d.z),
                                            h.push(0, 0, 1),
                                            p.x = (d.x / e + 1) / 2,
                                            p.y = (d.y / e + 1) / 2,
                                            l.push(p.x, p.y)
                                    }
                                    u += c
                                }
                                for (let t = 0; t < n; t++) {
                                    var m = t * (i + 1);
                                    for (let t = 0; t < i; t++) {
                                        var g = t + m
                                            , v = g + i + 1
                                            , _ = g + i + 2
                                            , y = g + 1;
                                        a.push(g, v, y),
                                            a.push(v, _, y)
                                    }
                                }
                                this.setIndex(a),
                                    this.setAttribute("position", new ys(o,3)),
                                    this.setAttribute("normal", new ys(h,3)),
                                    this.setAttribute("uv", new ys(l,2))
                            }
                            static fromJSON(t) {
                                return new pc(t.innerRadius,t.outerRadius,t.thetaSegments,t.phiSegments,t.thetaStart,t.thetaLength)
                            }
                        }
                        class fc extends Ps {
                            constructor(t=new Uu([new wn(0,.5), new wn(-.5,-.5), new wn(.5,-.5)]), e=12) {
                                super(),
                                    this.type = "ShapeGeometry",
                                    this.parameters = {
                                        shapes: t,
                                        curveSegments: e
                                    };
                                const i = []
                                    , n = []
                                    , r = []
                                    , s = [];
                                let a = 0
                                    , o = 0;
                                if (!1 === Array.isArray(t))
                                    h(t);
                                else
                                    for (let e = 0; e < t.length; e++)
                                        h(t[e]),
                                            this.addGroup(a, o, e),
                                            a += o,
                                            o = 0;
                                function h(t) {
                                    var a = n.length / 3;
                                    let h = (t = t.extractPoints(e)).shape;
                                    const l = t.holes;
                                    !1 === sc.isClockWise(h) && (h = h.reverse());
                                    for (let t = 0, e = l.length; t < e; t++) {
                                        const e = l[t];
                                        !0 === sc.isClockWise(e) && (l[t] = e.reverse())
                                    }
                                    var u = sc.triangulateShape(h, l);
                                    for (let t = 0, e = l.length; t < e; t++) {
                                        var c = l[t];
                                        h = h.concat(c)
                                    }
                                    for (let t = 0, e = h.length; t < e; t++) {
                                        var d = h[t];
                                        n.push(d.x, d.y, 0),
                                            r.push(0, 0, 1),
                                            s.push(d.x, d.y)
                                    }
                                    for (let t = 0, e = u.length; t < e; t++) {
                                        var p = u[t]
                                            , f = p[0] + a
                                            , m = p[1] + a;
                                        p = p[2] + a;
                                        i.push(f, m, p),
                                            o += 3
                                    }
                                }
                                this.setIndex(i),
                                    this.setAttribute("position", new ys(n,3)),
                                    this.setAttribute("normal", new ys(r,3)),
                                    this.setAttribute("uv", new ys(s,2))
                            }
                            toJSON() {
                                var t = super.toJSON();
                                return function(t, e) {
                                    if (e.shapes = [],
                                        Array.isArray(t))
                                        for (let n = 0, r = t.length; n < r; n++) {
                                            var i = t[n];
                                            e.shapes.push(i.uuid)
                                        }
                                    else
                                        e.shapes.push(t.uuid);
                                    return e
                                }(this.parameters.shapes, t)
                            }
                            static fromJSON(t, e) {
                                const i = [];
                                for (let r = 0, s = t.shapes.length; r < s; r++) {
                                    var n = e[t.shapes[r]];
                                    i.push(n)
                                }
                                return new fc(i,t.curveSegments)
                            }
                        }
                        class mc extends Ps {
                            constructor(t=1, e=32, i=16, n=0, r=2 * Math.PI, s=0, a=Math.PI) {
                                super(),
                                    this.type = "SphereGeometry",
                                    this.parameters = {
                                        radius: t,
                                        widthSegments: e,
                                        heightSegments: i,
                                        phiStart: n,
                                        phiLength: r,
                                        thetaStart: s,
                                        thetaLength: a
                                    },
                                    e = Math.max(3, Math.floor(e)),
                                    i = Math.max(2, Math.floor(i));
                                var o = Math.min(s + a, Math.PI);
                                let h = 0;
                                const l = []
                                    , u = new Fn
                                    , c = new Fn
                                    , d = []
                                    , p = []
                                    , f = []
                                    , m = [];
                                for (let d = 0; d <= i; d++) {
                                    const _ = [];
                                    var g = d / i;
                                    let y = 0;
                                    0 == d && 0 == s ? y = .5 / e : d == i && o == Math.PI && (y = -.5 / e);
                                    for (let i = 0; i <= e; i++) {
                                        var v = i / e;
                                        u.x = -t * Math.cos(n + v * r) * Math.sin(s + g * a),
                                            u.y = t * Math.cos(s + g * a),
                                            u.z = t * Math.sin(n + v * r) * Math.sin(s + g * a),
                                            p.push(u.x, u.y, u.z),
                                            c.copy(u).normalize(),
                                            f.push(c.x, c.y, c.z),
                                            m.push(v + y, 1 - g),
                                            _.push(h++)
                                    }
                                    l.push(_)
                                }
                                for (let t = 0; t < i; t++)
                                    for (let n = 0; n < e; n++) {
                                        var _ = l[t][n + 1]
                                            , y = l[t][n]
                                            , x = l[t + 1][n]
                                            , b = l[t + 1][n + 1];
                                        (0 !== t || 0 < s) && d.push(_, y, b),
                                        (t !== i - 1 || o < Math.PI) && d.push(y, x, b)
                                    }
                                this.setIndex(d),
                                    this.setAttribute("position", new ys(p,3)),
                                    this.setAttribute("normal", new ys(f,3)),
                                    this.setAttribute("uv", new ys(m,2))
                            }
                            static fromJSON(t) {
                                return new mc(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)
                            }
                        }
                        class gc extends du {
                            constructor(t=1, e=0) {
                                super([1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], t, e),
                                    this.type = "TetrahedronGeometry",
                                    this.parameters = {
                                        radius: t,
                                        detail: e
                                    }
                            }
                            static fromJSON(t) {
                                return new gc(t.radius,t.detail)
                            }
                        }
                        class vc extends Ps {
                            constructor(t=1, e=.4, i=8, n=6, r=2 * Math.PI) {
                                super(),
                                    this.type = "TorusGeometry",
                                    this.parameters = {
                                        radius: t,
                                        tube: e,
                                        radialSegments: i,
                                        tubularSegments: n,
                                        arc: r
                                    },
                                    i = Math.floor(i),
                                    n = Math.floor(n);
                                const s = []
                                    , a = []
                                    , o = []
                                    , h = []
                                    , l = new Fn
                                    , u = new Fn
                                    , c = new Fn;
                                for (let s = 0; s <= i; s++)
                                    for (let f = 0; f <= n; f++) {
                                        var d = f / n * r
                                            , p = s / i * Math.PI * 2;
                                        u.x = (t + e * Math.cos(p)) * Math.cos(d),
                                            u.y = (t + e * Math.cos(p)) * Math.sin(d),
                                            u.z = e * Math.sin(p),
                                            a.push(u.x, u.y, u.z),
                                            l.x = t * Math.cos(d),
                                            l.y = t * Math.sin(d),
                                            c.subVectors(u, l).normalize(),
                                            o.push(c.x, c.y, c.z),
                                            h.push(f / n),
                                            h.push(s / i)
                                    }
                                for (let t = 1; t <= i; t++)
                                    for (let e = 1; e <= n; e++) {
                                        var f = (n + 1) * t + e - 1
                                            , m = (n + 1) * (t - 1) + e - 1
                                            , g = (n + 1) * (t - 1) + e
                                            , v = (n + 1) * t + e;
                                        s.push(f, m, v),
                                            s.push(m, g, v)
                                    }
                                this.setIndex(s),
                                    this.setAttribute("position", new ys(a,3)),
                                    this.setAttribute("normal", new ys(o,3)),
                                    this.setAttribute("uv", new ys(h,2))
                            }
                            static fromJSON(t) {
                                return new vc(t.radius,t.tube,t.radialSegments,t.tubularSegments,t.arc)
                            }
                        }
                        class _c extends Ps {
                            constructor(t=1, e=.4, i=64, n=8, r=2, s=3) {
                                super(),
                                    this.type = "TorusKnotGeometry",
                                    this.parameters = {
                                        radius: t,
                                        tube: e,
                                        tubularSegments: i,
                                        radialSegments: n,
                                        p: r,
                                        q: s
                                    },
                                    i = Math.floor(i),
                                    n = Math.floor(n);
                                const a = []
                                    , o = []
                                    , h = []
                                    , l = []
                                    , u = new Fn
                                    , c = new Fn;
                                var d = new Fn
                                    , p = new Fn;
                                const f = new Fn
                                    , m = new Fn
                                    , g = new Fn;
                                for (let a = 0; a <= i; ++a) {
                                    var v = a / i * r * Math.PI * 2;
                                    M(v, r, s, t, d),
                                        M(.01 + v, r, s, t, p),
                                        m.subVectors(p, d),
                                        g.addVectors(p, d),
                                        f.crossVectors(m, g),
                                        g.crossVectors(f, m),
                                        f.normalize(),
                                        g.normalize();
                                    for (let t = 0; t <= n; ++t) {
                                        var _ = t / n * Math.PI * 2
                                            , y = -e * Math.cos(_);
                                        _ = e * Math.sin(_);
                                        u.x = d.x + (y * g.x + _ * f.x),
                                            u.y = d.y + (y * g.y + _ * f.y),
                                            u.z = d.z + (y * g.z + _ * f.z),
                                            o.push(u.x, u.y, u.z),
                                            c.subVectors(u, d).normalize(),
                                            h.push(c.x, c.y, c.z),
                                            l.push(a / i),
                                            l.push(t / n)
                                    }
                                }
                                for (let t = 1; t <= i; t++)
                                    for (let e = 1; e <= n; e++) {
                                        var x = (n + 1) * (t - 1) + (e - 1)
                                            , b = (n + 1) * t + (e - 1)
                                            , w = (n + 1) * t + e
                                            , S = (n + 1) * (t - 1) + e;
                                        a.push(x, b, S),
                                            a.push(b, w, S)
                                    }
                                function M(t, e, i, n, r) {
                                    var s = Math.cos(t)
                                        , a = Math.sin(t);
                                    e = i / e * t,
                                        t = Math.cos(e);
                                    r.x = n * (2 + t) * .5 * s,
                                        r.y = n * (2 + t) * a * .5,
                                        r.z = n * Math.sin(e) * .5
                                }
                                this.setIndex(a),
                                    this.setAttribute("position", new ys(o,3)),
                                    this.setAttribute("normal", new ys(h,3)),
                                    this.setAttribute("uv", new ys(l,2))
                            }
                            static fromJSON(t) {
                                return new _c(t.radius,t.tube,t.tubularSegments,t.radialSegments,t.p,t.q)
                            }
                        }
                        class yc extends Ps {
                            constructor(t=new Ru(new Fn(-1,-1,0),new Fn(-1,1,0),new Fn(1,1,0)), e=64, i=1, n=8, r=!1) {
                                super(),
                                    this.type = "TubeGeometry",
                                    this.parameters = {
                                        path: t,
                                        tubularSegments: e,
                                        radius: i,
                                        radialSegments: n,
                                        closed: r
                                    };
                                const s = t.computeFrenetFrames(e, r);
                                this.tangents = s.tangents,
                                    this.normals = s.normals,
                                    this.binormals = s.binormals;
                                const a = new Fn
                                    , o = new Fn
                                    , h = new wn;
                                let l = new Fn;
                                const u = []
                                    , c = []
                                    , d = []
                                    , p = [];
                                function f(r) {
                                    l = t.getPointAt(r / e, l);
                                    var h = s.normals[r]
                                        , d = s.binormals[r];
                                    for (let t = 0; t <= n; t++) {
                                        var p = t / n * Math.PI * 2
                                            , f = Math.sin(p);
                                        p = -Math.cos(p);
                                        o.x = p * h.x + f * d.x,
                                            o.y = p * h.y + f * d.y,
                                            o.z = p * h.z + f * d.z,
                                            o.normalize(),
                                            c.push(o.x, o.y, o.z),
                                            a.x = l.x + i * o.x,
                                            a.y = l.y + i * o.y,
                                            a.z = l.z + i * o.z,
                                            u.push(a.x, a.y, a.z)
                                    }
                                }
                                !function() {
                                    for (let t = 0; t < e; t++)
                                        f(t);
                                    f(!1 === r ? e : 0),
                                        function() {
                                            for (let t = 0; t <= e; t++)
                                                for (let i = 0; i <= n; i++)
                                                    h.x = t / e,
                                                        h.y = i / n,
                                                        d.push(h.x, h.y)
                                        }(),
                                        function() {
                                            for (let a = 1; a <= e; a++)
                                                for (let e = 1; e <= n; e++) {
                                                    var t = (n + 1) * (a - 1) + (e - 1)
                                                        , i = (n + 1) * a + (e - 1)
                                                        , r = (n + 1) * a + e
                                                        , s = (n + 1) * (a - 1) + e;
                                                    p.push(t, i, s),
                                                        p.push(i, r, s)
                                                }
                                        }()
                                }(),
                                    this.setIndex(p),
                                    this.setAttribute("position", new ys(u,3)),
                                    this.setAttribute("normal", new ys(c,3)),
                                    this.setAttribute("uv", new ys(d,2))
                            }
                            toJSON() {
                                const t = super.toJSON();
                                return t.path = this.parameters.path.toJSON(),
                                    t
                            }
                            static fromJSON(t) {
                                return new yc((new Fu[t.path.type]).fromJSON(t.path),t.tubularSegments,t.radius,t.radialSegments,t.closed)
                            }
                        }
                        class xc extends Ps {
                            constructor(t=null) {
                                if (super(),
                                    this.type = "WireframeGeometry",
                                    this.parameters = {
                                        geometry: t
                                    },
                                null !== t) {
                                    const u = [];
                                    var e = new Set;
                                    const c = new Fn
                                        , d = new Fn;
                                    if (null !== t.index) {
                                        var i = t.attributes.position;
                                        const o = t.index;
                                        let h = t.groups;
                                        0 === h.length && (h = [{
                                            start: 0,
                                            count: o.count,
                                            materialIndex: 0
                                        }]);
                                        for (let t = 0, l = h.length; t < l; ++t) {
                                            var n = h[t]
                                                , r = n.start;
                                            for (let t = r, h = r + n.count; t < h; t += 3)
                                                for (let n = 0; n < 3; n++) {
                                                    var s = o.getX(t + n)
                                                        , a = o.getX(t + (n + 1) % 3);
                                                    c.fromBufferAttribute(i, s),
                                                        d.fromBufferAttribute(i, a),
                                                    !0 === bc(c, d, e) && (u.push(c.x, c.y, c.z),
                                                        u.push(d.x, d.y, d.z))
                                                }
                                        }
                                    } else {
                                        var o = t.attributes.position;
                                        for (let t = 0, i = o.count / 3; t < i; t++)
                                            for (let i = 0; i < 3; i++) {
                                                var h = 3 * t + i
                                                    , l = 3 * t + (i + 1) % 3;
                                                c.fromBufferAttribute(o, h),
                                                    d.fromBufferAttribute(o, l),
                                                !0 === bc(c, d, e) && (u.push(c.x, c.y, c.z),
                                                    u.push(d.x, d.y, d.z))
                                            }
                                    }
                                    this.setAttribute("position", new ys(u,3))
                                }
                            }
                        }
                        function bc(t, e, i) {
                            var n = `${t.x},${t.y},${t.z}-${e.x},${e.y},` + e.z;
                            t = `${e.x},${e.y},${e.z}-${t.x},${t.y},` + t.z;
                            return !0 !== i.has(n) && !0 !== i.has(t) && (i.add(n, t),
                                !0)
                        }
                        var wc = Object.freeze({
                            __proto__: null,
                            BoxGeometry: Zs,
                            BoxBufferGeometry: Zs,
                            CircleGeometry: lu,
                            CircleBufferGeometry: lu,
                            ConeGeometry: cu,
                            ConeBufferGeometry: cu,
                            CylinderGeometry: uu,
                            CylinderBufferGeometry: uu,
                            DodecahedronGeometry: pu,
                            DodecahedronBufferGeometry: pu,
                            EdgesGeometry: _u,
                            ExtrudeGeometry: hc,
                            ExtrudeBufferGeometry: hc,
                            IcosahedronGeometry: uc,
                            IcosahedronBufferGeometry: uc,
                            LatheGeometry: cc,
                            LatheBufferGeometry: cc,
                            OctahedronGeometry: dc,
                            OctahedronBufferGeometry: dc,
                            PlaneGeometry: pa,
                            PlaneBufferGeometry: pa,
                            PolyhedronGeometry: du,
                            PolyhedronBufferGeometry: du,
                            RingGeometry: pc,
                            RingBufferGeometry: pc,
                            ShapeGeometry: fc,
                            ShapeBufferGeometry: fc,
                            SphereGeometry: mc,
                            SphereBufferGeometry: mc,
                            TetrahedronGeometry: gc,
                            TetrahedronBufferGeometry: gc,
                            TorusGeometry: vc,
                            TorusBufferGeometry: vc,
                            TorusKnotGeometry: _c,
                            TorusKnotBufferGeometry: _c,
                            TubeGeometry: yc,
                            TubeBufferGeometry: yc,
                            WireframeGeometry: xc
                        });
                        class Sc extends $r {
                            constructor(t) {
                                super(),
                                    this.type = "ShadowMaterial",
                                    this.color = new as(0),
                                    this.transparent = !0,
                                    this.setValues(t)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.color.copy(t.color),
                                    this
                            }
                        }
                        Sc.prototype.isShadowMaterial = !0;
                        class Mc extends $r {
                            constructor(t) {
                                super(),
                                    this.defines = {
                                        STANDARD: ""
                                    },
                                    this.type = "MeshStandardMaterial",
                                    this.color = new as(16777215),
                                    this.roughness = 1,
                                    this.metalness = 0,
                                    this.map = null,
                                    this.lightMap = null,
                                    this.lightMapIntensity = 1,
                                    this.aoMap = null,
                                    this.aoMapIntensity = 1,
                                    this.emissive = new as(0),
                                    this.emissiveIntensity = 1,
                                    this.emissiveMap = null,
                                    this.bumpMap = null,
                                    this.bumpScale = 1,
                                    this.normalMap = null,
                                    this.normalMapType = Ni,
                                    this.normalScale = new wn(1,1),
                                    this.displacementMap = null,
                                    this.displacementScale = 1,
                                    this.displacementBias = 0,
                                    this.roughnessMap = null,
                                    this.metalnessMap = null,
                                    this.alphaMap = null,
                                    this.envMap = null,
                                    this.envMapIntensity = 1,
                                    this.refractionRatio = .98,
                                    this.wireframe = !1,
                                    this.wireframeLinewidth = 1,
                                    this.wireframeLinecap = "round",
                                    this.wireframeLinejoin = "round",
                                    this.flatShading = !1,
                                    this.setValues(t)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.defines = {
                                        STANDARD: ""
                                    },
                                    this.color.copy(t.color),
                                    this.roughness = t.roughness,
                                    this.metalness = t.metalness,
                                    this.map = t.map,
                                    this.lightMap = t.lightMap,
                                    this.lightMapIntensity = t.lightMapIntensity,
                                    this.aoMap = t.aoMap,
                                    this.aoMapIntensity = t.aoMapIntensity,
                                    this.emissive.copy(t.emissive),
                                    this.emissiveMap = t.emissiveMap,
                                    this.emissiveIntensity = t.emissiveIntensity,
                                    this.bumpMap = t.bumpMap,
                                    this.bumpScale = t.bumpScale,
                                    this.normalMap = t.normalMap,
                                    this.normalMapType = t.normalMapType,
                                    this.normalScale.copy(t.normalScale),
                                    this.displacementMap = t.displacementMap,
                                    this.displacementScale = t.displacementScale,
                                    this.displacementBias = t.displacementBias,
                                    this.roughnessMap = t.roughnessMap,
                                    this.metalnessMap = t.metalnessMap,
                                    this.alphaMap = t.alphaMap,
                                    this.envMap = t.envMap,
                                    this.envMapIntensity = t.envMapIntensity,
                                    this.refractionRatio = t.refractionRatio,
                                    this.wireframe = t.wireframe,
                                    this.wireframeLinewidth = t.wireframeLinewidth,
                                    this.wireframeLinecap = t.wireframeLinecap,
                                    this.wireframeLinejoin = t.wireframeLinejoin,
                                    this.flatShading = t.flatShading,
                                    this
                            }
                        }
                        Mc.prototype.isMeshStandardMaterial = !0;
                        class Cc extends Mc {
                            constructor(t) {
                                super(),
                                    this.defines = {
                                        STANDARD: "",
                                        PHYSICAL: ""
                                    },
                                    this.type = "MeshPhysicalMaterial",
                                    this.clearcoatMap = null,
                                    this.clearcoatRoughness = 0,
                                    this.clearcoatRoughnessMap = null,
                                    this.clearcoatNormalScale = new wn(1,1),
                                    this.clearcoatNormalMap = null,
                                    this.ior = 1.5,
                                    Object.defineProperty(this, "reflectivity", {
                                        get: function() {
                                            return mn(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1)
                                        },
                                        set: function(t) {
                                            this.ior = (1 + .4 * t) / (1 - .4 * t)
                                        }
                                    }),
                                    this.sheenColor = new as(0),
                                    this.sheenColorMap = null,
                                    this.sheenRoughness = 1,
                                    this.sheenRoughnessMap = null,
                                    this.transmissionMap = null,
                                    this.thickness = 0,
                                    this.thicknessMap = null,
                                    this.attenuationDistance = 0,
                                    this.attenuationColor = new as(1,1,1),
                                    this.specularIntensity = 1,
                                    this.specularIntensityMap = null,
                                    this.specularColor = new as(1,1,1),
                                    this.specularColorMap = null,
                                    this._sheen = 0,
                                    this._clearcoat = 0,
                                    this._transmission = 0,
                                    this.setValues(t)
                            }
                            get sheen() {
                                return this._sheen
                            }
                            set sheen(t) {
                                0 < this._sheen != 0 < t && this.version++,
                                    this._sheen = t
                            }
                            get clearcoat() {
                                return this._clearcoat
                            }
                            set clearcoat(t) {
                                0 < this._clearcoat != 0 < t && this.version++,
                                    this._clearcoat = t
                            }
                            get transmission() {
                                return this._transmission
                            }
                            set transmission(t) {
                                0 < this._transmission != 0 < t && this.version++,
                                    this._transmission = t
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.defines = {
                                        STANDARD: "",
                                        PHYSICAL: ""
                                    },
                                    this.clearcoat = t.clearcoat,
                                    this.clearcoatMap = t.clearcoatMap,
                                    this.clearcoatRoughness = t.clearcoatRoughness,
                                    this.clearcoatRoughnessMap = t.clearcoatRoughnessMap,
                                    this.clearcoatNormalMap = t.clearcoatNormalMap,
                                    this.clearcoatNormalScale.copy(t.clearcoatNormalScale),
                                    this.ior = t.ior,
                                    this.sheen = t.sheen,
                                    this.sheenColor.copy(t.sheenColor),
                                    this.sheenColorMap = t.sheenColorMap,
                                    this.sheenRoughness = t.sheenRoughness,
                                    this.sheenRoughnessMap = t.sheenRoughnessMap,
                                    this.transmission = t.transmission,
                                    this.transmissionMap = t.transmissionMap,
                                    this.thickness = t.thickness,
                                    this.thicknessMap = t.thicknessMap,
                                    this.attenuationDistance = t.attenuationDistance,
                                    this.attenuationColor.copy(t.attenuationColor),
                                    this.specularIntensity = t.specularIntensity,
                                    this.specularIntensityMap = t.specularIntensityMap,
                                    this.specularColor.copy(t.specularColor),
                                    this.specularColorMap = t.specularColorMap,
                                    this
                            }
                        }
                        Cc.prototype.isMeshPhysicalMaterial = !0;
                        class Ac extends $r {
                            constructor(t) {
                                super(),
                                    this.type = "MeshPhongMaterial",
                                    this.color = new as(16777215),
                                    this.specular = new as(1118481),
                                    this.shininess = 30,
                                    this.map = null,
                                    this.lightMap = null,
                                    this.lightMapIntensity = 1,
                                    this.aoMap = null,
                                    this.aoMapIntensity = 1,
                                    this.emissive = new as(0),
                                    this.emissiveIntensity = 1,
                                    this.emissiveMap = null,
                                    this.bumpMap = null,
                                    this.bumpScale = 1,
                                    this.normalMap = null,
                                    this.normalMapType = Ni,
                                    this.normalScale = new wn(1,1),
                                    this.displacementMap = null,
                                    this.displacementScale = 1,
                                    this.displacementBias = 0,
                                    this.specularMap = null,
                                    this.alphaMap = null,
                                    this.envMap = null,
                                    this.combine = Et,
                                    this.reflectivity = 1,
                                    this.refractionRatio = .98,
                                    this.wireframe = !1,
                                    this.wireframeLinewidth = 1,
                                    this.wireframeLinecap = "round",
                                    this.wireframeLinejoin = "round",
                                    this.flatShading = !1,
                                    this.setValues(t)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.color.copy(t.color),
                                    this.specular.copy(t.specular),
                                    this.shininess = t.shininess,
                                    this.map = t.map,
                                    this.lightMap = t.lightMap,
                                    this.lightMapIntensity = t.lightMapIntensity,
                                    this.aoMap = t.aoMap,
                                    this.aoMapIntensity = t.aoMapIntensity,
                                    this.emissive.copy(t.emissive),
                                    this.emissiveMap = t.emissiveMap,
                                    this.emissiveIntensity = t.emissiveIntensity,
                                    this.bumpMap = t.bumpMap,
                                    this.bumpScale = t.bumpScale,
                                    this.normalMap = t.normalMap,
                                    this.normalMapType = t.normalMapType,
                                    this.normalScale.copy(t.normalScale),
                                    this.displacementMap = t.displacementMap,
                                    this.displacementScale = t.displacementScale,
                                    this.displacementBias = t.displacementBias,
                                    this.specularMap = t.specularMap,
                                    this.alphaMap = t.alphaMap,
                                    this.envMap = t.envMap,
                                    this.combine = t.combine,
                                    this.reflectivity = t.reflectivity,
                                    this.refractionRatio = t.refractionRatio,
                                    this.wireframe = t.wireframe,
                                    this.wireframeLinewidth = t.wireframeLinewidth,
                                    this.wireframeLinecap = t.wireframeLinecap,
                                    this.wireframeLinejoin = t.wireframeLinejoin,
                                    this.flatShading = t.flatShading,
                                    this
                            }
                        }
                        Ac.prototype.isMeshPhongMaterial = !0;
                        class Tc extends $r {
                            constructor(t) {
                                super(),
                                    this.defines = {
                                        TOON: ""
                                    },
                                    this.type = "MeshToonMaterial",
                                    this.color = new as(16777215),
                                    this.map = null,
                                    this.gradientMap = null,
                                    this.lightMap = null,
                                    this.lightMapIntensity = 1,
                                    this.aoMap = null,
                                    this.aoMapIntensity = 1,
                                    this.emissive = new as(0),
                                    this.emissiveIntensity = 1,
                                    this.emissiveMap = null,
                                    this.bumpMap = null,
                                    this.bumpScale = 1,
                                    this.normalMap = null,
                                    this.normalMapType = Ni,
                                    this.normalScale = new wn(1,1),
                                    this.displacementMap = null,
                                    this.displacementScale = 1,
                                    this.displacementBias = 0,
                                    this.alphaMap = null,
                                    this.wireframe = !1,
                                    this.wireframeLinewidth = 1,
                                    this.wireframeLinecap = "round",
                                    this.wireframeLinejoin = "round",
                                    this.setValues(t)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.color.copy(t.color),
                                    this.map = t.map,
                                    this.gradientMap = t.gradientMap,
                                    this.lightMap = t.lightMap,
                                    this.lightMapIntensity = t.lightMapIntensity,
                                    this.aoMap = t.aoMap,
                                    this.aoMapIntensity = t.aoMapIntensity,
                                    this.emissive.copy(t.emissive),
                                    this.emissiveMap = t.emissiveMap,
                                    this.emissiveIntensity = t.emissiveIntensity,
                                    this.bumpMap = t.bumpMap,
                                    this.bumpScale = t.bumpScale,
                                    this.normalMap = t.normalMap,
                                    this.normalMapType = t.normalMapType,
                                    this.normalScale.copy(t.normalScale),
                                    this.displacementMap = t.displacementMap,
                                    this.displacementScale = t.displacementScale,
                                    this.displacementBias = t.displacementBias,
                                    this.alphaMap = t.alphaMap,
                                    this.wireframe = t.wireframe,
                                    this.wireframeLinewidth = t.wireframeLinewidth,
                                    this.wireframeLinecap = t.wireframeLinecap,
                                    this.wireframeLinejoin = t.wireframeLinejoin,
                                    this
                            }
                        }
                        Tc.prototype.isMeshToonMaterial = !0;
                        class Pc extends $r {
                            constructor(t) {
                                super(),
                                    this.type = "MeshNormalMaterial",
                                    this.bumpMap = null,
                                    this.bumpScale = 1,
                                    this.normalMap = null,
                                    this.normalMapType = Ni,
                                    this.normalScale = new wn(1,1),
                                    this.displacementMap = null,
                                    this.displacementScale = 1,
                                    this.displacementBias = 0,
                                    this.wireframe = !1,
                                    this.wireframeLinewidth = 1,
                                    this.fog = !1,
                                    this.flatShading = !1,
                                    this.setValues(t)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.bumpMap = t.bumpMap,
                                    this.bumpScale = t.bumpScale,
                                    this.normalMap = t.normalMap,
                                    this.normalMapType = t.normalMapType,
                                    this.normalScale.copy(t.normalScale),
                                    this.displacementMap = t.displacementMap,
                                    this.displacementScale = t.displacementScale,
                                    this.displacementBias = t.displacementBias,
                                    this.wireframe = t.wireframe,
                                    this.wireframeLinewidth = t.wireframeLinewidth,
                                    this.flatShading = t.flatShading,
                                    this
                            }
                        }
                        Pc.prototype.isMeshNormalMaterial = !0;
                        class Ec extends $r {
                            constructor(t) {
                                super(),
                                    this.type = "MeshLambertMaterial",
                                    this.color = new as(16777215),
                                    this.map = null,
                                    this.lightMap = null,
                                    this.lightMapIntensity = 1,
                                    this.aoMap = null,
                                    this.aoMapIntensity = 1,
                                    this.emissive = new as(0),
                                    this.emissiveIntensity = 1,
                                    this.emissiveMap = null,
                                    this.specularMap = null,
                                    this.alphaMap = null,
                                    this.envMap = null,
                                    this.combine = Et,
                                    this.reflectivity = 1,
                                    this.refractionRatio = .98,
                                    this.wireframe = !1,
                                    this.wireframeLinewidth = 1,
                                    this.wireframeLinecap = "round",
                                    this.wireframeLinejoin = "round",
                                    this.setValues(t)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.color.copy(t.color),
                                    this.map = t.map,
                                    this.lightMap = t.lightMap,
                                    this.lightMapIntensity = t.lightMapIntensity,
                                    this.aoMap = t.aoMap,
                                    this.aoMapIntensity = t.aoMapIntensity,
                                    this.emissive.copy(t.emissive),
                                    this.emissiveMap = t.emissiveMap,
                                    this.emissiveIntensity = t.emissiveIntensity,
                                    this.specularMap = t.specularMap,
                                    this.alphaMap = t.alphaMap,
                                    this.envMap = t.envMap,
                                    this.combine = t.combine,
                                    this.reflectivity = t.reflectivity,
                                    this.refractionRatio = t.refractionRatio,
                                    this.wireframe = t.wireframe,
                                    this.wireframeLinewidth = t.wireframeLinewidth,
                                    this.wireframeLinecap = t.wireframeLinecap,
                                    this.wireframeLinejoin = t.wireframeLinejoin,
                                    this
                            }
                        }
                        Ec.prototype.isMeshLambertMaterial = !0;
                        class Lc extends $r {
                            constructor(t) {
                                super(),
                                    this.defines = {
                                        MATCAP: ""
                                    },
                                    this.type = "MeshMatcapMaterial",
                                    this.color = new as(16777215),
                                    this.matcap = null,
                                    this.map = null,
                                    this.bumpMap = null,
                                    this.bumpScale = 1,
                                    this.normalMap = null,
                                    this.normalMapType = Ni,
                                    this.normalScale = new wn(1,1),
                                    this.displacementMap = null,
                                    this.displacementScale = 1,
                                    this.displacementBias = 0,
                                    this.alphaMap = null,
                                    this.flatShading = !1,
                                    this.setValues(t)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.defines = {
                                        MATCAP: ""
                                    },
                                    this.color.copy(t.color),
                                    this.matcap = t.matcap,
                                    this.map = t.map,
                                    this.bumpMap = t.bumpMap,
                                    this.bumpScale = t.bumpScale,
                                    this.normalMap = t.normalMap,
                                    this.normalMapType = t.normalMapType,
                                    this.normalScale.copy(t.normalScale),
                                    this.displacementMap = t.displacementMap,
                                    this.displacementScale = t.displacementScale,
                                    this.displacementBias = t.displacementBias,
                                    this.alphaMap = t.alphaMap,
                                    this.flatShading = t.flatShading,
                                    this
                            }
                        }
                        Lc.prototype.isMeshMatcapMaterial = !0;
                        class Ic extends Ul {
                            constructor(t) {
                                super(),
                                    this.type = "LineDashedMaterial",
                                    this.scale = 1,
                                    this.dashSize = 3,
                                    this.gapSize = 1,
                                    this.setValues(t)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.scale = t.scale,
                                    this.dashSize = t.dashSize,
                                    this.gapSize = t.gapSize,
                                    this
                            }
                        }
                        Ic.prototype.isLineDashedMaterial = !0;
                        var kc = Object.freeze({
                            __proto__: null,
                            ShadowMaterial: Sc,
                            SpriteMaterial: sl,
                            RawShaderMaterial: Ma,
                            ShaderMaterial: Ks,
                            PointsMaterial: Kl,
                            MeshPhysicalMaterial: Cc,
                            MeshStandardMaterial: Mc,
                            MeshPhongMaterial: Ac,
                            MeshToonMaterial: Tc,
                            MeshNormalMaterial: Pc,
                            MeshLambertMaterial: Ec,
                            MeshDepthMaterial: Fh,
                            MeshDistanceMaterial: Bh,
                            MeshBasicMaterial: os,
                            MeshMatcapMaterial: Lc,
                            LineDashedMaterial: Ic,
                            LineBasicMaterial: Ul,
                            Material: $r
                        });
                        const Nc = {
                            arraySlice: function(t, e, i) {
                                return Nc.isTypedArray(t) ? new t.constructor(t.subarray(e, void 0 !== i ? i : t.length)) : t.slice(e, i)
                            },
                            convertArray: function(t, e, i) {
                                return !t || !i && t.constructor === e ? t : "number" == typeof e.BYTES_PER_ELEMENT ? new e(t) : Array.prototype.slice.call(t)
                            },
                            isTypedArray: function(t) {
                                return ArrayBuffer.isView(t) && !(t instanceof DataView)
                            },
                            getKeyframeOrder: function(t) {
                                var e = t.length;
                                const i = new Array(e);
                                for (let t = 0; t !== e; ++t)
                                    i[t] = t;
                                return i.sort((function(e, i) {
                                        return t[e] - t[i]
                                    }
                                )),
                                    i
                            },
                            sortedArray: function(t, e, i) {
                                var n = t.length;
                                const r = new t.constructor(n);
                                for (let a = 0, o = 0; o !== n; ++a) {
                                    var s = i[a] * e;
                                    for (let i = 0; i !== e; ++i)
                                        r[o++] = t[s + i]
                                }
                                return r
                            },
                            flattenJSON: function(t, e, i, n) {
                                let r = 1
                                    , s = t[0];
                                for (; void 0 !== s && void 0 === s[n]; )
                                    s = t[r++];
                                if (void 0 !== s) {
                                    let a = s[n];
                                    if (void 0 !== a)
                                        if (Array.isArray(a))
                                            for (; a = s[n],
                                                   void 0 !== a && (e.push(s.time),
                                                       i.push.apply(i, a)),
                                                       s = t[r++],
                                                   void 0 !== s; )
                                                ;
                                        else if (void 0 !== a.toArray)
                                            for (; a = s[n],
                                                   void 0 !== a && (e.push(s.time),
                                                       a.toArray(i, i.length)),
                                                       s = t[r++],
                                                   void 0 !== s; )
                                                ;
                                        else
                                            for (; a = s[n],
                                                   void 0 !== a && (e.push(s.time),
                                                       i.push(a)),
                                                       s = t[r++],
                                                   void 0 !== s; )
                                                ;
                                }
                            },
                            subclip: function(t, e, i, n, r=30) {
                                const s = t.clone();
                                s.name = e;
                                const a = [];
                                for (let t = 0; t < s.tracks.length; ++t) {
                                    const e = s.tracks[t];
                                    var o = e.getValueSize();
                                    const l = []
                                        , u = [];
                                    for (let t = 0; t < e.times.length; ++t) {
                                        var h = e.times[t] * r;
                                        if (!(h < i || n <= h)) {
                                            l.push(e.times[t]);
                                            for (let i = 0; i < o; ++i)
                                                u.push(e.values[t * o + i])
                                        }
                                    }
                                    0 !== l.length && (e.times = Nc.convertArray(l, e.times.constructor),
                                        e.values = Nc.convertArray(u, e.values.constructor),
                                        a.push(e))
                                }
                                s.tracks = a;
                                let l = 1 / 0;
                                for (let t = 0; t < s.tracks.length; ++t)
                                    l > s.tracks[t].times[0] && (l = s.tracks[t].times[0]);
                                for (let t = 0; t < s.tracks.length; ++t)
                                    s.tracks[t].shift(-1 * l);
                                return s.resetDuration(),
                                    s
                            },
                            makeClipAdditive: function(t, e=0, i=t, n=30) {
                                var r = i.tracks.length
                                    , s = e / (n = n <= 0 ? 30 : n);
                                for (let e = 0; e < r; ++e) {
                                    const n = i.tracks[e]
                                        , r = n.ValueTypeName;
                                    if ("bool" !== r && "string" !== r) {
                                        const e = t.tracks.find((function(t) {
                                                return t.name === n.name && t.ValueTypeName === r
                                            }
                                        ));
                                        if (void 0 !== e) {
                                            let t = 0;
                                            var a = n.getValueSize();
                                            n.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (t = a / 3);
                                            let i = 0;
                                            var o = e.getValueSize();
                                            e.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (i = o / 3);
                                            var h = n.times.length - 1;
                                            let m;
                                            if (s <= n.times[0]) {
                                                var l = t
                                                    , u = a - t;
                                                m = Nc.arraySlice(n.values, l, u)
                                            } else if (s >= n.times[h]) {
                                                h = h * a + t;
                                                var c = h + a - t;
                                                m = Nc.arraySlice(n.values, h, c)
                                            } else {
                                                const e = n.createInterpolant();
                                                c = t,
                                                    a -= t,
                                                    e.evaluate(s),
                                                    m = Nc.arraySlice(e.resultBuffer, c, a)
                                            }
                                            if ("quaternion" === r) {
                                                (new zn).fromArray(m).normalize().conjugate().toArray(m)
                                            }
                                            var d = e.times.length;
                                            for (let t = 0; t < d; ++t) {
                                                var p = t * o + i;
                                                if ("quaternion" === r)
                                                    zn.multiplyQuaternionsFlat(e.values, p, m, 0, e.values, p);
                                                else {
                                                    var f = o - 2 * i;
                                                    for (let t = 0; t < f; ++t)
                                                        e.values[p + t] -= m[t]
                                                }
                                            }
                                        }
                                    }
                                }
                                return t.blendMode = Ci,
                                    t
                            }
                        };
                        class Oc {
                            constructor(t, e, i, n) {
                                this.parameterPositions = t,
                                    this._cachedIndex = 0,
                                    this.resultBuffer = void 0 !== n ? n : new e.constructor(i),
                                    this.sampleValues = e,
                                    this.valueSize = i,
                                    this.settings = null,
                                    this.DefaultSettings_ = {}
                            }
                            evaluate(t) {
                                var e = this.parameterPositions;
                                let i = this._cachedIndex
                                    , n = e[i]
                                    , r = e[i - 1];
                                t: {
                                    e: {
                                        let l;
                                        i: {
                                            n: if (!(t < n)) {
                                                for (var s = i + 2; ; ) {
                                                    if (void 0 === n) {
                                                        if (t < r)
                                                            break n;
                                                        return i = e.length,
                                                            this._cachedIndex = i,
                                                            this.afterEnd_(i - 1, t, r)
                                                    }
                                                    if (i === s)
                                                        break;
                                                    if (r = n,
                                                        n = e[++i],
                                                    t < n)
                                                        break e
                                                }
                                                l = e.length;
                                                break i
                                            }
                                            if (t >= r)
                                                break t;
                                            var a = e[1];
                                            t < a && (i = 2,
                                                r = a);
                                            for (var o = i - 2; ; ) {
                                                if (void 0 === r)
                                                    return this._cachedIndex = 0,
                                                        this.beforeStart_(0, t, n);
                                                if (i === o)
                                                    break;
                                                if (n = r,
                                                    r = e[--i - 1],
                                                t >= r)
                                                    break e
                                            }
                                            l = i,
                                                i = 0
                                        }
                                        for (; i < l; ) {
                                            var h = i + l >>> 1;
                                            t < e[h] ? l = h : i = 1 + h
                                        }
                                        if (n = e[i],
                                            r = e[i - 1],
                                        void 0 === r)
                                            return this._cachedIndex = 0,
                                                this.beforeStart_(0, t, n);
                                        if (void 0 === n)
                                            return i = e.length,
                                                this._cachedIndex = i,
                                                this.afterEnd_(i - 1, r, t)
                                    }
                                    this._cachedIndex = i,
                                        this.intervalChanged_(i, r, n)
                                }
                                return this.interpolate_(i, r, t, n)
                            }
                            getSettings_() {
                                return this.settings || this.DefaultSettings_
                            }
                            copySampleValue_(t) {
                                const e = this.resultBuffer
                                    , i = this.sampleValues
                                    , n = this.valueSize
                                    , r = t * n;
                                for (let t = 0; t !== n; ++t)
                                    e[t] = i[r + t];
                                return e
                            }
                            interpolate_() {
                                throw new Error("call to abstract method")
                            }
                            intervalChanged_() {}
                        }
                        Oc.prototype.beforeStart_ = Oc.prototype.copySampleValue_,
                            Oc.prototype.afterEnd_ = Oc.prototype.copySampleValue_;
                        class Dc extends Oc {
                            constructor(t, e, i, n) {
                                super(t, e, i, n),
                                    this._weightPrev = -0,
                                    this._offsetPrev = -0,
                                    this._weightNext = -0,
                                    this._offsetNext = -0,
                                    this.DefaultSettings_ = {
                                        endingStart: bi,
                                        endingEnd: bi
                                    }
                            }
                            intervalChanged_(t, e, i) {
                                var n = this.parameterPositions;
                                let r = t - 2
                                    , s = t + 1
                                    , a = n[r]
                                    , o = n[s];
                                if (void 0 === a)
                                    switch (this.getSettings_().endingStart) {
                                        case wi:
                                            r = t,
                                                a = 2 * e - i;
                                            break;
                                        case Si:
                                            r = n.length - 2,
                                                a = e + n[r] - n[r + 1];
                                            break;
                                        default:
                                            r = t,
                                                a = i
                                    }
                                if (void 0 === o)
                                    switch (this.getSettings_().endingEnd) {
                                        case wi:
                                            s = t,
                                                o = 2 * i - e;
                                            break;
                                        case Si:
                                            s = 1,
                                                o = i + n[1] - n[0];
                                            break;
                                        default:
                                            s = t - 1,
                                                o = e
                                    }
                                var h = .5 * (i - e)
                                    , l = this.valueSize;
                                this._weightPrev = h / (e - a),
                                    this._weightNext = h / (o - i),
                                    this._offsetPrev = r * l,
                                    this._offsetNext = s * l
                            }
                            interpolate_(t, e, i, n) {
                                const r = this.resultBuffer
                                    , s = this.sampleValues
                                    , a = this.valueSize
                                    , o = t * a
                                    , h = o - a
                                    , l = this._offsetPrev
                                    , u = this._offsetNext
                                    , c = this._weightPrev
                                    , d = this._weightNext
                                    , p = (i - e) / (n - e)
                                    , f = p * p
                                    , m = f * p;
                                var g = -c * m + 2 * c * f - c * p
                                    , v = (1 + c) * m + (-1.5 - 2 * c) * f + (-.5 + c) * p + 1
                                    , _ = (-1 - d) * m + (1.5 + d) * f + .5 * p
                                    , y = d * m - d * f;
                                for (let t = 0; t !== a; ++t)
                                    r[t] = g * s[l + t] + v * s[h + t] + _ * s[o + t] + y * s[u + t];
                                return r
                            }
                        }
                        class Rc extends Oc {
                            constructor(t, e, i, n) {
                                super(t, e, i, n)
                            }
                            interpolate_(t, e, i, n) {
                                const r = this.resultBuffer
                                    , s = this.sampleValues
                                    , a = this.valueSize
                                    , o = t * a
                                    , h = o - a
                                    , l = (i - e) / (n - e)
                                    , u = 1 - l;
                                for (let t = 0; t !== a; ++t)
                                    r[t] = s[h + t] * u + s[o + t] * l;
                                return r
                            }
                        }
                        class zc extends Oc {
                            constructor(t, e, i, n) {
                                super(t, e, i, n)
                            }
                            interpolate_(t) {
                                return this.copySampleValue_(t - 1)
                            }
                        }
                        class Fc {
                            constructor(t, e, i, n) {
                                if (void 0 === t)
                                    throw new Error("THREE.KeyframeTrack: track name is undefined");
                                if (void 0 === e || 0 === e.length)
                                    throw new Error("THREE.KeyframeTrack: no keyframes in track named " + t);
                                this.name = t,
                                    this.times = Nc.convertArray(e, this.TimeBufferType),
                                    this.values = Nc.convertArray(i, this.ValueBufferType),
                                    this.setInterpolation(n || this.DefaultInterpolation)
                            }
                            static toJSON(t) {
                                const e = t.constructor;
                                let i;
                                var n;
                                return e.toJSON !== this.toJSON ? i = e.toJSON(t) : (i = {
                                    name: t.name,
                                    times: Nc.convertArray(t.times, Array),
                                    values: Nc.convertArray(t.values, Array)
                                },
                                (n = t.getInterpolation()) !== t.DefaultInterpolation && (i.interpolation = n)),
                                    i.type = t.ValueTypeName,
                                    i
                            }
                            InterpolantFactoryMethodDiscrete(t) {
                                return new zc(this.times,this.values,this.getValueSize(),t)
                            }
                            InterpolantFactoryMethodLinear(t) {
                                return new Rc(this.times,this.values,this.getValueSize(),t)
                            }
                            InterpolantFactoryMethodSmooth(t) {
                                return new Dc(this.times,this.values,this.getValueSize(),t)
                            }
                            setInterpolation(t) {
                                let e;
                                switch (t) {
                                    case _i:
                                        e = this.InterpolantFactoryMethodDiscrete;
                                        break;
                                    case yi:
                                        e = this.InterpolantFactoryMethodLinear;
                                        break;
                                    case xi:
                                        e = this.InterpolantFactoryMethodSmooth
                                }
                                if (void 0 !== e)
                                    return this.createInterpolant = e,
                                        this;
                                var i = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
                                if (void 0 === this.createInterpolant) {
                                    if (t === this.DefaultInterpolation)
                                        throw new Error(i);
                                    this.setInterpolation(this.DefaultInterpolation)
                                }
                                return this
                            }
                            getInterpolation() {
                                switch (this.createInterpolant) {
                                    case this.InterpolantFactoryMethodDiscrete:
                                        return _i;
                                    case this.InterpolantFactoryMethodLinear:
                                        return yi;
                                    case this.InterpolantFactoryMethodSmooth:
                                        return xi
                                }
                            }
                            getValueSize() {
                                return this.values.length / this.times.length
                            }
                            shift(t) {
                                if (0 !== t) {
                                    const e = this.times;
                                    for (let i = 0, n = e.length; i !== n; ++i)
                                        e[i] += t
                                }
                                return this
                            }
                            scale(t) {
                                if (1 !== t) {
                                    const e = this.times;
                                    for (let i = 0, n = e.length; i !== n; ++i)
                                        e[i] *= t
                                }
                                return this
                            }
                            trim(t, e) {
                                var i, n = this.times, r = n.length;
                                let s = 0
                                    , a = r - 1;
                                for (; s !== r && n[s] < t; )
                                    ++s;
                                for (; -1 !== a && n[a] > e; )
                                    --a;
                                return ++a,
                                0 === s && a === r || (s >= a && (a = Math.max(a, 1),
                                    s = a - 1),
                                    i = this.getValueSize(),
                                    this.times = Nc.arraySlice(n, s, a),
                                    this.values = Nc.arraySlice(this.values, s * i, a * i)),
                                    this
                            }
                            validate() {
                                let t = !0;
                                var e = this.getValueSize();
                                e - Math.floor(e) != 0 && (t = !1);
                                var i = this.times
                                    , n = this.values
                                    , r = i.length;
                                0 === r && (t = !1);
                                let s = null;
                                for (let e = 0; e !== r; e++) {
                                    var a = i[e];
                                    if ("number" == typeof a && isNaN(a)) {
                                        t = !1;
                                        break
                                    }
                                    if (null !== s && s > a) {
                                        t = !1;
                                        break
                                    }
                                    s = a
                                }
                                if (void 0 !== n && Nc.isTypedArray(n))
                                    for (let e = 0, i = n.length; e !== i; ++e) {
                                        var o = n[e];
                                        if (isNaN(o)) {
                                            t = !1;
                                            break
                                        }
                                    }
                                return t
                            }
                            optimize() {
                                const t = Nc.arraySlice(this.times)
                                    , e = Nc.arraySlice(this.values)
                                    , i = this.getValueSize()
                                    , n = this.getInterpolation() === xi
                                    , r = t.length - 1;
                                let s = 1;
                                for (let p = 1; p < r; ++p) {
                                    let r = !1;
                                    var a = t[p];
                                    if (a !== t[p + 1] && (1 !== p || a !== t[0]))
                                        if (n)
                                            r = !0;
                                        else {
                                            var o = p * i
                                                , h = o - i
                                                , l = o + i;
                                            for (let t = 0; t !== i; ++t) {
                                                var u = e[o + t];
                                                if (u !== e[h + t] || u !== e[l + t]) {
                                                    r = !0;
                                                    break
                                                }
                                            }
                                        }
                                    if (r) {
                                        if (p !== s) {
                                            t[s] = t[p];
                                            var c = p * i
                                                , d = s * i;
                                            for (let t = 0; t !== i; ++t)
                                                e[d + t] = e[c + t]
                                        }
                                        ++s
                                    }
                                }
                                if (0 < r) {
                                    t[s] = t[r];
                                    for (let t = r * i, n = s * i, a = 0; a !== i; ++a)
                                        e[n + a] = e[t + a];
                                    ++s
                                }
                                return s !== t.length ? (this.times = Nc.arraySlice(t, 0, s),
                                    this.values = Nc.arraySlice(e, 0, s * i)) : (this.times = t,
                                    this.values = e),
                                    this
                            }
                            clone() {
                                var t = Nc.arraySlice(this.times, 0)
                                    , e = Nc.arraySlice(this.values, 0);
                                const i = new (0,
                                    this.constructor)(this.name,t,e);
                                return i.createInterpolant = this.createInterpolant,
                                    i
                            }
                        }
                        Fc.prototype.TimeBufferType = Float32Array,
                            Fc.prototype.ValueBufferType = Float32Array,
                            Fc.prototype.DefaultInterpolation = yi;
                        class Bc extends Fc {
                        }
                        Bc.prototype.ValueTypeName = "bool",
                            Bc.prototype.ValueBufferType = Array,
                            Bc.prototype.DefaultInterpolation = _i,
                            Bc.prototype.InterpolantFactoryMethodLinear = void 0,
                            Bc.prototype.InterpolantFactoryMethodSmooth = void 0;
                        class Vc extends Fc {
                        }
                        Vc.prototype.ValueTypeName = "color";
                        class Gc extends Fc {
                        }
                        Gc.prototype.ValueTypeName = "number";
                        class Wc extends Oc {
                            constructor(t, e, i, n) {
                                super(t, e, i, n)
                            }
                            interpolate_(t, e, i, n) {
                                var r = this.resultBuffer
                                    , s = this.sampleValues
                                    , a = this.valueSize
                                    , o = (i - e) / (n - e);
                                let h = t * a;
                                for (var l = h + a; h !== l; h += 4)
                                    zn.slerpFlat(r, 0, s, h - a, s, h, o);
                                return r
                            }
                        }
                        class jc extends Fc {
                            InterpolantFactoryMethodLinear(t) {
                                return new Wc(this.times,this.values,this.getValueSize(),t)
                            }
                        }
                        jc.prototype.ValueTypeName = "quaternion",
                            jc.prototype.DefaultInterpolation = yi,
                            jc.prototype.InterpolantFactoryMethodSmooth = void 0;
                        class Hc extends Fc {
                        }
                        Hc.prototype.ValueTypeName = "string",
                            Hc.prototype.ValueBufferType = Array,
                            Hc.prototype.DefaultInterpolation = _i,
                            Hc.prototype.InterpolantFactoryMethodLinear = void 0,
                            Hc.prototype.InterpolantFactoryMethodSmooth = void 0;
                        class qc extends Fc {
                        }
                        class Xc {
                            constructor(t, e=-1, i, n=Mi) {
                                this.name = t,
                                    this.tracks = i,
                                    this.duration = e,
                                    this.blendMode = n,
                                    this.uuid = fn(),
                                this.duration < 0 && this.resetDuration()
                            }
                            static parse(t) {
                                const e = []
                                    , i = t.tracks
                                    , n = 1 / (t.fps || 1);
                                for (let t = 0, r = i.length; t !== r; ++t)
                                    e.push(function(t) {
                                        if (void 0 === t.type)
                                            throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
                                        const e = function(t) {
                                            switch (t.toLowerCase()) {
                                                case "scalar":
                                                case "double":
                                                case "float":
                                                case "number":
                                                case "integer":
                                                    return Gc;
                                                case "vector":
                                                case "vector2":
                                                case "vector3":
                                                case "vector4":
                                                    return qc;
                                                case "color":
                                                    return Vc;
                                                case "quaternion":
                                                    return jc;
                                                case "bool":
                                                case "boolean":
                                                    return Bc;
                                                case "string":
                                                    return Hc
                                            }
                                            throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + t)
                                        }(t.type);
                                        var i, n;
                                        return void 0 === t.times && (i = [],
                                            n = [],
                                            Nc.flattenJSON(t.keys, i, n, "value"),
                                            t.times = i,
                                            t.values = n),
                                            void 0 !== e.parse ? e.parse(t) : new e(t.name,t.times,t.values,t.interpolation)
                                    }(i[t]).scale(n));
                                const r = new this(t.name,t.duration,e,t.blendMode);
                                return r.uuid = t.uuid,
                                    r
                            }
                            static toJSON(t) {
                                const e = []
                                    , i = t.tracks;
                                t = {
                                    name: t.name,
                                    duration: t.duration,
                                    tracks: e,
                                    uuid: t.uuid,
                                    blendMode: t.blendMode
                                };
                                for (let t = 0, n = i.length; t !== n; ++t)
                                    e.push(Fc.toJSON(i[t]));
                                return t
                            }
                            static CreateFromMorphTargetSequence(t, e, i, n) {
                                var r = e.length;
                                const s = [];
                                for (let t = 0; t < r; t++) {
                                    let o = []
                                        , h = [];
                                    o.push((t + r - 1) % r, t, (t + 1) % r),
                                        h.push(0, 1, 0);
                                    var a = Nc.getKeyframeOrder(o);
                                    o = Nc.sortedArray(o, 1, a),
                                        h = Nc.sortedArray(h, 1, a),
                                    n || 0 !== o[0] || (o.push(r),
                                        h.push(h[0])),
                                        s.push(new Gc(".morphTargetInfluences[" + e[t].name + "]",o,h).scale(1 / i))
                                }
                                return new this(t,-1,s)
                            }
                            static findByName(t, e) {
                                let i = t;
                                Array.isArray(t) || (i = t.geometry && t.geometry.animations || t.animations);
                                for (let t = 0; t < i.length; t++)
                                    if (i[t].name === e)
                                        return i[t];
                                return null
                            }
                            static CreateClipsFromMorphTargetSequences(t, e, i) {
                                const n = {};
                                var r = /^([\w-]*?)([\d]+)$/;
                                for (let e = 0, i = t.length; e < i; e++) {
                                    const i = t[e];
                                    var s = i.name.match(r);
                                    if (s && 1 < s.length) {
                                        let t = n[s = s[1]];
                                        t || (n[s] = t = []),
                                            t.push(i)
                                    }
                                }
                                const a = [];
                                for (const t in n)
                                    a.push(this.CreateFromMorphTargetSequence(t, n[t], e, i));
                                return a
                            }
                            static parseAnimation(t, e) {
                                if (!t)
                                    return null;
                                function i(t, e, i, n, r) {
                                    var s, a;
                                    0 !== i.length && (s = [],
                                        a = [],
                                        Nc.flattenJSON(i, s, a, n),
                                    0 !== s.length && r.push(new t(e,s,a)))
                                }
                                const n = [];
                                var r = t.name || "default"
                                    , s = t.fps || 30
                                    , a = t.blendMode;
                                let o = t.length || -1;
                                var h = t.hierarchy || [];
                                for (let t = 0; t < h.length; t++) {
                                    var l = h[t].keys;
                                    if (l && 0 !== l.length)
                                        if (l[0].morphTargets) {
                                            const t = {};
                                            let e;
                                            for (e = 0; e < l.length; e++)
                                                if (l[e].morphTargets)
                                                    for (let i = 0; i < l[e].morphTargets.length; i++)
                                                        t[l[e].morphTargets[i]] = -1;
                                            for (const i in t) {
                                                const t = []
                                                    , r = [];
                                                for (let n = 0; n !== l[e].morphTargets.length; ++n) {
                                                    var u = l[e];
                                                    t.push(u.time),
                                                        r.push(u.morphTarget === i ? 1 : 0)
                                                }
                                                n.push(new Gc(".morphTargetInfluence[" + i + "]",t,r))
                                            }
                                            o = t.length * (s || 1)
                                        } else {
                                            var c = ".bones[" + e[t].name + "]";
                                            i(qc, c + ".position", l, "pos", n),
                                                i(jc, c + ".quaternion", l, "rot", n),
                                                i(qc, c + ".scale", l, "scl", n)
                                        }
                                }
                                return 0 === n.length ? null : new this(r,o,n,a)
                            }
                            resetDuration() {
                                let t = 0;
                                for (let i = 0, n = this.tracks.length; i !== n; ++i) {
                                    var e = this.tracks[i];
                                    t = Math.max(t, e.times[e.times.length - 1])
                                }
                                return this.duration = t,
                                    this
                            }
                            trim() {
                                for (let t = 0; t < this.tracks.length; t++)
                                    this.tracks[t].trim(0, this.duration);
                                return this
                            }
                            validate() {
                                let t = !0;
                                for (let e = 0; e < this.tracks.length; e++)
                                    t = t && this.tracks[e].validate();
                                return t
                            }
                            optimize() {
                                for (let t = 0; t < this.tracks.length; t++)
                                    this.tracks[t].optimize();
                                return this
                            }
                            clone() {
                                const t = [];
                                for (let e = 0; e < this.tracks.length; e++)
                                    t.push(this.tracks[e].clone());
                                return new this.constructor(this.name,this.duration,t,this.blendMode)
                            }
                            toJSON() {
                                return this.constructor.toJSON(this)
                            }
                        }
                        const Zc = {
                            enabled: !(qc.prototype.ValueTypeName = "vector"),
                            files: {},
                            add: function(t, e) {
                                !1 !== this.enabled && (this.files[t] = e)
                            },
                            get: function(t) {
                                if (!1 !== this.enabled)
                                    return this.files[t]
                            },
                            remove: function(t) {
                                delete this.files[t]
                            },
                            clear: function() {
                                this.files = {}
                            }
                        };
                        class Jc {
                            constructor(t, e, i) {
                                const n = this;
                                let r, s = !1, a = 0, o = 0;
                                const h = [];
                                this.onStart = void 0,
                                    this.onLoad = t,
                                    this.onProgress = e,
                                    this.onError = i,
                                    this.itemStart = function(t) {
                                        o++,
                                        !1 === s && void 0 !== n.onStart && n.onStart(t, a, o),
                                            s = !0
                                    }
                                    ,
                                    this.itemEnd = function(t) {
                                        a++,
                                        void 0 !== n.onProgress && n.onProgress(t, a, o),
                                        a === o && (s = !1,
                                        void 0 !== n.onLoad && n.onLoad())
                                    }
                                    ,
                                    this.itemError = function(t) {
                                        void 0 !== n.onError && n.onError(t)
                                    }
                                    ,
                                    this.resolveURL = function(t) {
                                        return r ? r(t) : t
                                    }
                                    ,
                                    this.setURLModifier = function(t) {
                                        return r = t,
                                            this
                                    }
                                    ,
                                    this.addHandler = function(t, e) {
                                        return h.push(t, e),
                                            this
                                    }
                                    ,
                                    this.removeHandler = function(t) {
                                        return -1 !== (t = h.indexOf(t)) && h.splice(t, 2),
                                            this
                                    }
                                    ,
                                    this.getHandler = function(t) {
                                        for (let i = 0, n = h.length; i < n; i += 2) {
                                            const n = h[i];
                                            var e = h[i + 1];
                                            if (n.global && (n.lastIndex = 0),
                                                n.test(t))
                                                return e
                                        }
                                        return null
                                    }
                            }
                        }
                        const Yc = new Jc;
                        class Qc {
                            constructor(t) {
                                this.manager = void 0 !== t ? t : Yc,
                                    this.crossOrigin = "anonymous",
                                    this.withCredentials = !1,
                                    this.path = "",
                                    this.resourcePath = "",
                                    this.requestHeader = {}
                            }
                            load() {}
                            loadAsync(t, e) {
                                const i = this;
                                return new Promise((function(n, r) {
                                        i.load(t, n, e, r)
                                    }
                                ))
                            }
                            parse() {}
                            setCrossOrigin(t) {
                                return this.crossOrigin = t,
                                    this
                            }
                            setWithCredentials(t) {
                                return this.withCredentials = t,
                                    this
                            }
                            setPath(t) {
                                return this.path = t,
                                    this
                            }
                            setResourcePath(t) {
                                return this.resourcePath = t,
                                    this
                            }
                            setRequestHeader(t) {
                                return this.requestHeader = t,
                                    this
                            }
                        }
                        const Kc = {};
                        class $c extends Qc {
                            constructor(t) {
                                super(t)
                            }
                            load(t, e, i, n) {
                                void 0 === t && (t = ""),
                                void 0 !== this.path && (t = this.path + t),
                                    t = this.manager.resolveURL(t);
                                const r = Zc.get(t);
                                if (void 0 !== r)
                                    return this.manager.itemStart(t),
                                        setTimeout((()=>{
                                                e && e(r),
                                                    this.manager.itemEnd(t)
                                            }
                                        ), 0),
                                        r;
                                var s;
                                void 0 === Kc[t] ? (Kc[t] = [],
                                    Kc[t].push({
                                        onLoad: e,
                                        onProgress: i,
                                        onError: n
                                    }),
                                    s = new Request(t,{
                                        headers: new Headers(this.requestHeader),
                                        credentials: this.withCredentials ? "include" : "same-origin"
                                    }),
                                    fetch(s).then((e=>{
                                            if (200 !== e.status && 0 !== e.status)
                                                throw Error(`fetch for "${e.url}" responded with ${e.status}: ` + e.statusText);
                                            {
                                                if (e.status,
                                                "undefined" == typeof ReadableStream || void 0 === e.body.getReader)
                                                    return e;
                                                const i = Kc[t]
                                                    , n = e.body.getReader()
                                                    , r = (e = e.headers.get("Content-Length")) ? parseInt(e) : 0
                                                    , s = 0 !== r;
                                                let a = 0;
                                                return e = new ReadableStream({
                                                    start(t) {
                                                        !function e() {
                                                            n.read().then((({done: n, value: o})=>{
                                                                    if (n)
                                                                        t.close();
                                                                    else {
                                                                        a += o.byteLength;
                                                                        const n = new ProgressEvent("progress",{
                                                                            lengthComputable: s,
                                                                            loaded: a,
                                                                            total: r
                                                                        });
                                                                        for (let t = 0, e = i.length; t < e; t++) {
                                                                            const e = i[t];
                                                                            e.onProgress && e.onProgress(n)
                                                                        }
                                                                        t.enqueue(o),
                                                                            e()
                                                                    }
                                                                }
                                                            ))
                                                        }()
                                                    }
                                                }),
                                                    new Response(e)
                                            }
                                        }
                                    )).then((t=>{
                                            switch (this.responseType) {
                                                case "arraybuffer":
                                                    return t.arrayBuffer();
                                                case "blob":
                                                    return t.blob();
                                                case "document":
                                                    return t.text().then((t=>(new DOMParser).parseFromString(t, this.mimeType)));
                                                case "json":
                                                    return t.json();
                                                default:
                                                    return t.text()
                                            }
                                        }
                                    )).then((e=>{
                                            Zc.add(t, e);
                                            var i = Kc[t];
                                            delete Kc[t];
                                            for (let t = 0, n = i.length; t < n; t++) {
                                                const n = i[t];
                                                n.onLoad && n.onLoad(e)
                                            }
                                        }
                                    )).catch((e=>{
                                            var i = Kc[t];
                                            if (void 0 === i)
                                                throw this.manager.itemError(t),
                                                    e;
                                            delete Kc[t];
                                            for (let t = 0, n = i.length; t < n; t++) {
                                                const n = i[t];
                                                n.onError && n.onError(e)
                                            }
                                            this.manager.itemError(t)
                                        }
                                    )).finally((()=>{
                                            this.manager.itemEnd(t)
                                        }
                                    )),
                                    this.manager.itemStart(t)) : Kc[t].push({
                                    onLoad: e,
                                    onProgress: i,
                                    onError: n
                                })
                            }
                            setResponseType(t) {
                                return this.responseType = t,
                                    this
                            }
                            setMimeType(t) {
                                return this.mimeType = t,
                                    this
                            }
                        }
                        class td extends Qc {
                            constructor(t) {
                                super(t)
                            }
                            load(t, e, i, n) {
                                const r = this
                                    , s = new $c(this.manager);
                                s.setPath(this.path),
                                    s.setRequestHeader(this.requestHeader),
                                    s.setWithCredentials(this.withCredentials),
                                    s.load(t, (function(i) {
                                            try {
                                                e(r.parse(JSON.parse(i)))
                                            } catch (i) {
                                                n && n(i),
                                                    r.manager.itemError(t)
                                            }
                                        }
                                    ), i, n)
                            }
                            parse(t) {
                                const e = [];
                                for (let n = 0; n < t.length; n++) {
                                    var i = Xc.parse(t[n]);
                                    e.push(i)
                                }
                                return e
                            }
                        }
                        class ed extends Qc {
                            constructor(t) {
                                super(t)
                            }
                            load(t, e, i, n) {
                                const r = this
                                    , s = []
                                    , a = new ou
                                    , o = new $c(this.manager);
                                o.setPath(this.path),
                                    o.setResponseType("arraybuffer"),
                                    o.setRequestHeader(this.requestHeader),
                                    o.setWithCredentials(r.withCredentials);
                                let h = 0;
                                if (Array.isArray(t))
                                    for (let l = 0, u = t.length; l < u; ++l)
                                        !function(l) {
                                            o.load(t[l], (function(t) {
                                                    t = r.parse(t, !0),
                                                        s[l] = {
                                                            width: t.width,
                                                            height: t.height,
                                                            format: t.format,
                                                            mipmaps: t.mipmaps
                                                        },
                                                        h += 1,
                                                    6 === h && (1 === t.mipmapCount && (a.minFilter = $t),
                                                        a.image = s,
                                                        a.format = t.format,
                                                        a.needsUpdate = !0,
                                                    e && e(a))
                                                }
                                            ), i, n)
                                        }(l);
                                else
                                    o.load(t, (function(t) {
                                            var i = r.parse(t, !0);
                                            if (i.isCubemap) {
                                                var n = i.mipmaps.length / i.mipmapCount;
                                                for (let t = 0; t < n; t++) {
                                                    s[t] = {
                                                        mipmaps: []
                                                    };
                                                    for (let e = 0; e < i.mipmapCount; e++)
                                                        s[t].mipmaps.push(i.mipmaps[t * i.mipmapCount + e]),
                                                            s[t].format = i.format,
                                                            s[t].width = i.width,
                                                            s[t].height = i.height
                                                }
                                                a.image = s
                                            } else
                                                a.image.width = i.width,
                                                    a.image.height = i.height,
                                                    a.mipmaps = i.mipmaps;
                                            1 === i.mipmapCount && (a.minFilter = $t),
                                                a.format = i.format,
                                                a.needsUpdate = !0,
                                            e && e(a)
                                        }
                                    ), i, n);
                                return a
                            }
                        }
                        class id extends Qc {
                            constructor(t) {
                                super(t)
                            }
                            load(t, e, i, n) {
                                void 0 !== this.path && (t = this.path + t),
                                    t = this.manager.resolveURL(t);
                                const r = this
                                    , s = Zc.get(t);
                                if (void 0 !== s)
                                    return r.manager.itemStart(t),
                                        setTimeout((function() {
                                                e && e(s),
                                                    r.manager.itemEnd(t)
                                            }
                                        ), 0),
                                        s;
                                const a = Tn("img");
                                function o() {
                                    l(),
                                        Zc.add(t, this),
                                    e && e(this),
                                        r.manager.itemEnd(t)
                                }
                                function h(e) {
                                    l(),
                                    n && n(e),
                                        r.manager.itemError(t),
                                        r.manager.itemEnd(t)
                                }
                                function l() {
                                    a.removeEventListener("load", o, !1),
                                        a.removeEventListener("error", h, !1)
                                }
                                return a.addEventListener("load", o, !1),
                                    a.addEventListener("error", h, !1),
                                "data:" !== t.substr(0, 5) && void 0 !== this.crossOrigin && (a.crossOrigin = this.crossOrigin),
                                    r.manager.itemStart(t),
                                    a.src = t,
                                    a
                            }
                        }
                        class nd extends Qc {
                            constructor(t) {
                                super(t)
                            }
                            load(t, e, i, n) {
                                const r = new ia
                                    , s = new id(this.manager);
                                s.setCrossOrigin(this.crossOrigin),
                                    s.setPath(this.path);
                                let a = 0;
                                for (let i = 0; i < t.length; ++i)
                                    !function(i) {
                                        s.load(t[i], (function(t) {
                                                r.images[i] = t,
                                                    a++,
                                                6 === a && (r.needsUpdate = !0,
                                                e && e(r))
                                            }
                                        ), void 0, n)
                                    }(i);
                                return r
                            }
                        }
                        class rd extends Qc {
                            constructor(t) {
                                super(t)
                            }
                            load(t, e, i, n) {
                                const r = this
                                    , s = new Il
                                    , a = new $c(this.manager);
                                return a.setResponseType("arraybuffer"),
                                    a.setRequestHeader(this.requestHeader),
                                    a.setPath(this.path),
                                    a.setWithCredentials(r.withCredentials),
                                    a.load(t, (function(t) {
                                            (t = r.parse(t)) && (void 0 !== t.image ? s.image = t.image : void 0 !== t.data && (s.image.width = t.width,
                                                s.image.height = t.height,
                                                s.image.data = t.data),
                                                s.wrapS = void 0 !== t.wrapS ? t.wrapS : qt,
                                                s.wrapT = void 0 !== t.wrapT ? t.wrapT : qt,
                                                s.magFilter = void 0 !== t.magFilter ? t.magFilter : $t,
                                                s.minFilter = void 0 !== t.minFilter ? t.minFilter : $t,
                                                s.anisotropy = void 0 !== t.anisotropy ? t.anisotropy : 1,
                                            void 0 !== t.encoding && (s.encoding = t.encoding),
                                            void 0 !== t.flipY && (s.flipY = t.flipY),
                                            void 0 !== t.format && (s.format = t.format),
                                            void 0 !== t.type && (s.type = t.type),
                                            void 0 !== t.mipmaps && (s.mipmaps = t.mipmaps,
                                                s.minFilter = ie),
                                            1 === t.mipmapCount && (s.minFilter = $t),
                                            void 0 !== t.generateMipmaps && (s.generateMipmaps = t.generateMipmaps),
                                                s.needsUpdate = !0,
                                            e && e(s, t))
                                        }
                                    ), i, n),
                                    s
                            }
                        }
                        class sd extends Qc {
                            constructor(t) {
                                super(t)
                            }
                            load(t, e, i, n) {
                                const r = new In
                                    , s = new id(this.manager);
                                return s.setCrossOrigin(this.crossOrigin),
                                    s.setPath(this.path),
                                    s.load(t, (function(t) {
                                            r.image = t,
                                                r.needsUpdate = !0,
                                            void 0 !== e && e(r)
                                        }
                                    ), i, n),
                                    r
                            }
                        }
                        class ad extends Vr {
                            constructor(t, e=1) {
                                super(),
                                    this.type = "Light",
                                    this.color = new as(t),
                                    this.intensity = e
                            }
                            dispose() {}
                            copy(t) {
                                return super.copy(t),
                                    this.color.copy(t.color),
                                    this.intensity = t.intensity,
                                    this
                            }
                            toJSON(t) {
                                const e = super.toJSON(t);
                                return e.object.color = this.color.getHex(),
                                    e.object.intensity = this.intensity,
                                void 0 !== this.groundColor && (e.object.groundColor = this.groundColor.getHex()),
                                void 0 !== this.distance && (e.object.distance = this.distance),
                                void 0 !== this.angle && (e.object.angle = this.angle),
                                void 0 !== this.decay && (e.object.decay = this.decay),
                                void 0 !== this.penumbra && (e.object.penumbra = this.penumbra),
                                void 0 !== this.shadow && (e.object.shadow = this.shadow.toJSON()),
                                    e
                            }
                        }
                        ad.prototype.isLight = !0;
                        class od extends ad {
                            constructor(t, e, i) {
                                super(t, i),
                                    this.type = "HemisphereLight",
                                    this.position.copy(Vr.DefaultUp),
                                    this.updateMatrix(),
                                    this.groundColor = new as(e)
                            }
                            copy(t) {
                                return ad.prototype.copy.call(this, t),
                                    this.groundColor.copy(t.groundColor),
                                    this
                            }
                        }
                        od.prototype.isHemisphereLight = !0;
                        const hd = new mr
                            , ld = new Fn
                            , ud = new Fn;
                        class cd {
                            constructor(t) {
                                this.camera = t,
                                    this.bias = 0,
                                    this.normalBias = 0,
                                    this.radius = 1,
                                    this.blurSamples = 8,
                                    this.mapSize = new wn(512,512),
                                    this.map = null,
                                    this.mapPass = null,
                                    this.matrix = new mr,
                                    this.autoUpdate = !0,
                                    this.needsUpdate = !1,
                                    this._frustum = new ua,
                                    this._frameExtents = new wn(1,1),
                                    this._viewportCount = 1,
                                    this._viewports = [new Nn(0,0,1,1)]
                            }
                            getViewportCount() {
                                return this._viewportCount
                            }
                            getFrustum() {
                                return this._frustum
                            }
                            updateMatrices(t) {
                                const e = this.camera
                                    , i = this.matrix;
                                ld.setFromMatrixPosition(t.matrixWorld),
                                    e.position.copy(ld),
                                    ud.setFromMatrixPosition(t.target.matrixWorld),
                                    e.lookAt(ud),
                                    e.updateMatrixWorld(),
                                    hd.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse),
                                    this._frustum.setFromProjectionMatrix(hd),
                                    i.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1),
                                    i.multiply(e.projectionMatrix),
                                    i.multiply(e.matrixWorldInverse)
                            }
                            getViewport(t) {
                                return this._viewports[t]
                            }
                            getFrameExtents() {
                                return this._frameExtents
                            }
                            dispose() {
                                this.map && this.map.dispose(),
                                this.mapPass && this.mapPass.dispose()
                            }
                            copy(t) {
                                return this.camera = t.camera.clone(),
                                    this.bias = t.bias,
                                    this.radius = t.radius,
                                    this.mapSize.copy(t.mapSize),
                                    this
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                            toJSON() {
                                const t = {};
                                return 0 !== this.bias && (t.bias = this.bias),
                                0 !== this.normalBias && (t.normalBias = this.normalBias),
                                1 !== this.radius && (t.radius = this.radius),
                                512 === this.mapSize.x && 512 === this.mapSize.y || (t.mapSize = this.mapSize.toArray()),
                                    t.camera = this.camera.toJSON(!1).object,
                                    delete t.camera.matrix,
                                    t
                            }
                        }
                        class dd extends cd {
                            constructor() {
                                super(new ta(50,1,.5,500)),
                                    this.focus = 1
                            }
                            updateMatrices(t) {
                                const e = this.camera;
                                var i = 2 * pn * t.angle * this.focus
                                    , n = this.mapSize.width / this.mapSize.height
                                    , r = t.distance || e.far;
                                i === e.fov && n === e.aspect && r === e.far || (e.fov = i,
                                    e.aspect = n,
                                    e.far = r,
                                    e.updateProjectionMatrix()),
                                    super.updateMatrices(t)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.focus = t.focus,
                                    this
                            }
                        }
                        dd.prototype.isSpotLightShadow = !0;
                        class pd extends ad {
                            constructor(t, e, i=0, n=Math.PI / 3, r=0, s=1) {
                                super(t, e),
                                    this.type = "SpotLight",
                                    this.position.copy(Vr.DefaultUp),
                                    this.updateMatrix(),
                                    this.target = new Vr,
                                    this.distance = i,
                                    this.angle = n,
                                    this.penumbra = r,
                                    this.decay = s,
                                    this.shadow = new dd
                            }
                            get power() {
                                return this.intensity * Math.PI
                            }
                            set power(t) {
                                this.intensity = t / Math.PI
                            }
                            dispose() {
                                this.shadow.dispose()
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.distance = t.distance,
                                    this.angle = t.angle,
                                    this.penumbra = t.penumbra,
                                    this.decay = t.decay,
                                    this.target = t.target.clone(),
                                    this.shadow = t.shadow.clone(),
                                    this
                            }
                        }
                        pd.prototype.isSpotLight = !0;
                        const fd = new mr
                            , md = new Fn
                            , gd = new Fn;
                        class vd extends cd {
                            constructor() {
                                super(new ta(90,1,.5,500)),
                                    this._frameExtents = new wn(4,2),
                                    this._viewportCount = 6,
                                    this._viewports = [new Nn(2,1,1,1), new Nn(0,1,1,1), new Nn(3,1,1,1), new Nn(1,1,1,1), new Nn(3,0,1,1), new Nn(1,0,1,1)],
                                    this._cubeDirections = [new Fn(1,0,0), new Fn(-1,0,0), new Fn(0,0,1), new Fn(0,0,-1), new Fn(0,1,0), new Fn(0,-1,0)],
                                    this._cubeUps = [new Fn(0,1,0), new Fn(0,1,0), new Fn(0,1,0), new Fn(0,1,0), new Fn(0,0,1), new Fn(0,0,-1)]
                            }
                            updateMatrices(t, e=0) {
                                const i = this.camera
                                    , n = this.matrix;
                                var r = t.distance || i.far;
                                r !== i.far && (i.far = r,
                                    i.updateProjectionMatrix()),
                                    md.setFromMatrixPosition(t.matrixWorld),
                                    i.position.copy(md),
                                    gd.copy(i.position),
                                    gd.add(this._cubeDirections[e]),
                                    i.up.copy(this._cubeUps[e]),
                                    i.lookAt(gd),
                                    i.updateMatrixWorld(),
                                    n.makeTranslation(-md.x, -md.y, -md.z),
                                    fd.multiplyMatrices(i.projectionMatrix, i.matrixWorldInverse),
                                    this._frustum.setFromProjectionMatrix(fd)
                            }
                        }
                        vd.prototype.isPointLightShadow = !0;
                        class _d extends ad {
                            constructor(t, e, i=0, n=1) {
                                super(t, e),
                                    this.type = "PointLight",
                                    this.distance = i,
                                    this.decay = n,
                                    this.shadow = new vd
                            }
                            get power() {
                                return 4 * this.intensity * Math.PI
                            }
                            set power(t) {
                                this.intensity = t / (4 * Math.PI)
                            }
                            dispose() {
                                this.shadow.dispose()
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.distance = t.distance,
                                    this.decay = t.decay,
                                    this.shadow = t.shadow.clone(),
                                    this
                            }
                        }
                        _d.prototype.isPointLight = !0;
                        class yd extends cd {
                            constructor() {
                                super(new Sa(-5,5,5,-5,.5,500))
                            }
                        }
                        yd.prototype.isDirectionalLightShadow = !0;
                        class xd extends ad {
                            constructor(t, e) {
                                super(t, e),
                                    this.type = "DirectionalLight",
                                    this.position.copy(Vr.DefaultUp),
                                    this.updateMatrix(),
                                    this.target = new Vr,
                                    this.shadow = new yd
                            }
                            dispose() {
                                this.shadow.dispose()
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.target = t.target.clone(),
                                    this.shadow = t.shadow.clone(),
                                    this
                            }
                        }
                        xd.prototype.isDirectionalLight = !0;
                        class bd extends ad {
                            constructor(t, e) {
                                super(t, e),
                                    this.type = "AmbientLight"
                            }
                        }
                        bd.prototype.isAmbientLight = !0;
                        class wd extends ad {
                            constructor(t, e, i=10, n=10) {
                                super(t, e),
                                    this.type = "RectAreaLight",
                                    this.width = i,
                                    this.height = n
                            }
                            get power() {
                                return this.intensity * this.width * this.height * Math.PI
                            }
                            set power(t) {
                                this.intensity = t / (this.width * this.height * Math.PI)
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.width = t.width,
                                    this.height = t.height,
                                    this
                            }
                            toJSON(t) {
                                const e = super.toJSON(t);
                                return e.object.width = this.width,
                                    e.object.height = this.height,
                                    e
                            }
                        }
                        wd.prototype.isRectAreaLight = !0;
                        class Sd {
                            constructor() {
                                this.coefficients = [];
                                for (let t = 0; t < 9; t++)
                                    this.coefficients.push(new Fn)
                            }
                            set(t) {
                                for (let e = 0; e < 9; e++)
                                    this.coefficients[e].copy(t[e]);
                                return this
                            }
                            zero() {
                                for (let t = 0; t < 9; t++)
                                    this.coefficients[t].set(0, 0, 0);
                                return this
                            }
                            getAt(t, e) {
                                var i = t.x
                                    , n = t.y
                                    , r = t.z;
                                t = this.coefficients;
                                return e.copy(t[0]).multiplyScalar(.282095),
                                    e.addScaledVector(t[1], .488603 * n),
                                    e.addScaledVector(t[2], .488603 * r),
                                    e.addScaledVector(t[3], .488603 * i),
                                    e.addScaledVector(t[4], i * n * 1.092548),
                                    e.addScaledVector(t[5], n * r * 1.092548),
                                    e.addScaledVector(t[6], .315392 * (3 * r * r - 1)),
                                    e.addScaledVector(t[7], i * r * 1.092548),
                                    e.addScaledVector(t[8], .546274 * (i * i - n * n)),
                                    e
                            }
                            getIrradianceAt(t, e) {
                                var i = t.x
                                    , n = t.y
                                    , r = t.z;
                                t = this.coefficients;
                                return e.copy(t[0]).multiplyScalar(.886227),
                                    e.addScaledVector(t[1], 1.023328 * n),
                                    e.addScaledVector(t[2], 1.023328 * r),
                                    e.addScaledVector(t[3], 1.023328 * i),
                                    e.addScaledVector(t[4], .858086 * i * n),
                                    e.addScaledVector(t[5], .858086 * n * r),
                                    e.addScaledVector(t[6], .743125 * r * r - .247708),
                                    e.addScaledVector(t[7], .858086 * i * r),
                                    e.addScaledVector(t[8], .429043 * (i * i - n * n)),
                                    e
                            }
                            add(t) {
                                for (let e = 0; e < 9; e++)
                                    this.coefficients[e].add(t.coefficients[e]);
                                return this
                            }
                            addScaledSH(t, e) {
                                for (let i = 0; i < 9; i++)
                                    this.coefficients[i].addScaledVector(t.coefficients[i], e);
                                return this
                            }
                            scale(t) {
                                for (let e = 0; e < 9; e++)
                                    this.coefficients[e].multiplyScalar(t);
                                return this
                            }
                            lerp(t, e) {
                                for (let i = 0; i < 9; i++)
                                    this.coefficients[i].lerp(t.coefficients[i], e);
                                return this
                            }
                            equals(t) {
                                for (let e = 0; e < 9; e++)
                                    if (!this.coefficients[e].equals(t.coefficients[e]))
                                        return !1;
                                return !0
                            }
                            copy(t) {
                                return this.set(t.coefficients)
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                            fromArray(t, e=0) {
                                const i = this.coefficients;
                                for (let n = 0; n < 9; n++)
                                    i[n].fromArray(t, e + 3 * n);
                                return this
                            }
                            toArray(t=[], e=0) {
                                const i = this.coefficients;
                                for (let n = 0; n < 9; n++)
                                    i[n].toArray(t, e + 3 * n);
                                return t
                            }
                            static getBasisAt(t, e) {
                                var i = t.x
                                    , n = t.y;
                                t = t.z;
                                e[0] = .282095,
                                    e[1] = .488603 * n,
                                    e[2] = .488603 * t,
                                    e[3] = .488603 * i,
                                    e[4] = 1.092548 * i * n,
                                    e[5] = 1.092548 * n * t,
                                    e[6] = .315392 * (3 * t * t - 1),
                                    e[7] = 1.092548 * i * t,
                                    e[8] = .546274 * (i * i - n * n)
                            }
                        }
                        Sd.prototype.isSphericalHarmonics3 = !0;
                        class Md extends ad {
                            constructor(t=new Sd, e=1) {
                                super(void 0, e),
                                    this.sh = t
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.sh.copy(t.sh),
                                    this
                            }
                            fromJSON(t) {
                                return this.intensity = t.intensity,
                                    this.sh.fromArray(t.sh),
                                    this
                            }
                            toJSON(t) {
                                const e = super.toJSON(t);
                                return e.object.sh = this.sh.toArray(),
                                    e
                            }
                        }
                        Md.prototype.isLightProbe = !0;
                        class Cd extends Qc {
                            constructor(t) {
                                super(t),
                                    this.textures = {}
                            }
                            load(t, e, i, n) {
                                const r = this
                                    , s = new $c(r.manager);
                                s.setPath(r.path),
                                    s.setRequestHeader(r.requestHeader),
                                    s.setWithCredentials(r.withCredentials),
                                    s.load(t, (function(i) {
                                            try {
                                                e(r.parse(JSON.parse(i)))
                                            } catch (i) {
                                                n && n(i),
                                                    r.manager.itemError(t)
                                            }
                                        }
                                    ), i, n)
                            }
                            parse(t) {
                                const e = this.textures;
                                function i(t) {
                                    return e[t],
                                        e[t]
                                }
                                const n = new kc[t.type];
                                if (void 0 !== t.uuid && (n.uuid = t.uuid),
                                void 0 !== t.name && (n.name = t.name),
                                void 0 !== t.color && void 0 !== n.color && n.color.setHex(t.color),
                                void 0 !== t.roughness && (n.roughness = t.roughness),
                                void 0 !== t.metalness && (n.metalness = t.metalness),
                                void 0 !== t.sheen && (n.sheen = t.sheen),
                                void 0 !== t.sheenColor && (n.sheenColor = (new as).setHex(t.sheenColor)),
                                void 0 !== t.sheenRoughness && (n.sheenRoughness = t.sheenRoughness),
                                void 0 !== t.emissive && void 0 !== n.emissive && n.emissive.setHex(t.emissive),
                                void 0 !== t.specular && void 0 !== n.specular && n.specular.setHex(t.specular),
                                void 0 !== t.specularIntensity && (n.specularIntensity = t.specularIntensity),
                                void 0 !== t.specularColor && void 0 !== n.specularColor && n.specularColor.setHex(t.specularColor),
                                void 0 !== t.shininess && (n.shininess = t.shininess),
                                void 0 !== t.clearcoat && (n.clearcoat = t.clearcoat),
                                void 0 !== t.clearcoatRoughness && (n.clearcoatRoughness = t.clearcoatRoughness),
                                void 0 !== t.transmission && (n.transmission = t.transmission),
                                void 0 !== t.thickness && (n.thickness = t.thickness),
                                void 0 !== t.attenuationDistance && (n.attenuationDistance = t.attenuationDistance),
                                void 0 !== t.attenuationColor && void 0 !== n.attenuationColor && n.attenuationColor.setHex(t.attenuationColor),
                                void 0 !== t.fog && (n.fog = t.fog),
                                void 0 !== t.flatShading && (n.flatShading = t.flatShading),
                                void 0 !== t.blending && (n.blending = t.blending),
                                void 0 !== t.combine && (n.combine = t.combine),
                                void 0 !== t.side && (n.side = t.side),
                                void 0 !== t.shadowSide && (n.shadowSide = t.shadowSide),
                                void 0 !== t.opacity && (n.opacity = t.opacity),
                                void 0 !== t.format && (n.format = t.format),
                                void 0 !== t.transparent && (n.transparent = t.transparent),
                                void 0 !== t.alphaTest && (n.alphaTest = t.alphaTest),
                                void 0 !== t.depthTest && (n.depthTest = t.depthTest),
                                void 0 !== t.depthWrite && (n.depthWrite = t.depthWrite),
                                void 0 !== t.colorWrite && (n.colorWrite = t.colorWrite),
                                void 0 !== t.stencilWrite && (n.stencilWrite = t.stencilWrite),
                                void 0 !== t.stencilWriteMask && (n.stencilWriteMask = t.stencilWriteMask),
                                void 0 !== t.stencilFunc && (n.stencilFunc = t.stencilFunc),
                                void 0 !== t.stencilRef && (n.stencilRef = t.stencilRef),
                                void 0 !== t.stencilFuncMask && (n.stencilFuncMask = t.stencilFuncMask),
                                void 0 !== t.stencilFail && (n.stencilFail = t.stencilFail),
                                void 0 !== t.stencilZFail && (n.stencilZFail = t.stencilZFail),
                                void 0 !== t.stencilZPass && (n.stencilZPass = t.stencilZPass),
                                void 0 !== t.wireframe && (n.wireframe = t.wireframe),
                                void 0 !== t.wireframeLinewidth && (n.wireframeLinewidth = t.wireframeLinewidth),
                                void 0 !== t.wireframeLinecap && (n.wireframeLinecap = t.wireframeLinecap),
                                void 0 !== t.wireframeLinejoin && (n.wireframeLinejoin = t.wireframeLinejoin),
                                void 0 !== t.rotation && (n.rotation = t.rotation),
                                1 !== t.linewidth && (n.linewidth = t.linewidth),
                                void 0 !== t.dashSize && (n.dashSize = t.dashSize),
                                void 0 !== t.gapSize && (n.gapSize = t.gapSize),
                                void 0 !== t.scale && (n.scale = t.scale),
                                void 0 !== t.polygonOffset && (n.polygonOffset = t.polygonOffset),
                                void 0 !== t.polygonOffsetFactor && (n.polygonOffsetFactor = t.polygonOffsetFactor),
                                void 0 !== t.polygonOffsetUnits && (n.polygonOffsetUnits = t.polygonOffsetUnits),
                                void 0 !== t.dithering && (n.dithering = t.dithering),
                                void 0 !== t.alphaToCoverage && (n.alphaToCoverage = t.alphaToCoverage),
                                void 0 !== t.premultipliedAlpha && (n.premultipliedAlpha = t.premultipliedAlpha),
                                void 0 !== t.visible && (n.visible = t.visible),
                                void 0 !== t.toneMapped && (n.toneMapped = t.toneMapped),
                                void 0 !== t.userData && (n.userData = t.userData),
                                void 0 !== t.vertexColors && ("number" == typeof t.vertexColors ? n.vertexColors = 0 < t.vertexColors : n.vertexColors = t.vertexColors),
                                void 0 !== t.uniforms)
                                    for (const e in t.uniforms) {
                                        var r = t.uniforms[e];
                                        switch (n.uniforms[e] = {},
                                            r.type) {
                                            case "t":
                                                n.uniforms[e].value = i(r.value);
                                                break;
                                            case "c":
                                                n.uniforms[e].value = (new as).setHex(r.value);
                                                break;
                                            case "v2":
                                                n.uniforms[e].value = (new wn).fromArray(r.value);
                                                break;
                                            case "v3":
                                                n.uniforms[e].value = (new Fn).fromArray(r.value);
                                                break;
                                            case "v4":
                                                n.uniforms[e].value = (new Nn).fromArray(r.value);
                                                break;
                                            case "m3":
                                                n.uniforms[e].value = (new Sn).fromArray(r.value);
                                                break;
                                            case "m4":
                                                n.uniforms[e].value = (new mr).fromArray(r.value);
                                                break;
                                            default:
                                                n.uniforms[e].value = r.value
                                        }
                                    }
                                if (void 0 !== t.defines && (n.defines = t.defines),
                                void 0 !== t.vertexShader && (n.vertexShader = t.vertexShader),
                                void 0 !== t.fragmentShader && (n.fragmentShader = t.fragmentShader),
                                void 0 !== t.extensions)
                                    for (const e in t.extensions)
                                        n.extensions[e] = t.extensions[e];
                                if (void 0 !== t.shading && (n.flatShading = 1 === t.shading),
                                void 0 !== t.size && (n.size = t.size),
                                void 0 !== t.sizeAttenuation && (n.sizeAttenuation = t.sizeAttenuation),
                                void 0 !== t.map && (n.map = i(t.map)),
                                void 0 !== t.matcap && (n.matcap = i(t.matcap)),
                                void 0 !== t.alphaMap && (n.alphaMap = i(t.alphaMap)),
                                void 0 !== t.bumpMap && (n.bumpMap = i(t.bumpMap)),
                                void 0 !== t.bumpScale && (n.bumpScale = t.bumpScale),
                                void 0 !== t.normalMap && (n.normalMap = i(t.normalMap)),
                                void 0 !== t.normalMapType && (n.normalMapType = t.normalMapType),
                                void 0 !== t.normalScale) {
                                    let e = t.normalScale;
                                    !1 === Array.isArray(e) && (e = [e, e]),
                                        n.normalScale = (new wn).fromArray(e)
                                }
                                return void 0 !== t.displacementMap && (n.displacementMap = i(t.displacementMap)),
                                void 0 !== t.displacementScale && (n.displacementScale = t.displacementScale),
                                void 0 !== t.displacementBias && (n.displacementBias = t.displacementBias),
                                void 0 !== t.roughnessMap && (n.roughnessMap = i(t.roughnessMap)),
                                void 0 !== t.metalnessMap && (n.metalnessMap = i(t.metalnessMap)),
                                void 0 !== t.emissiveMap && (n.emissiveMap = i(t.emissiveMap)),
                                void 0 !== t.emissiveIntensity && (n.emissiveIntensity = t.emissiveIntensity),
                                void 0 !== t.specularMap && (n.specularMap = i(t.specularMap)),
                                void 0 !== t.specularIntensityMap && (n.specularIntensityMap = i(t.specularIntensityMap)),
                                void 0 !== t.specularColorMap && (n.specularColorMap = i(t.specularColorMap)),
                                void 0 !== t.envMap && (n.envMap = i(t.envMap)),
                                void 0 !== t.envMapIntensity && (n.envMapIntensity = t.envMapIntensity),
                                void 0 !== t.reflectivity && (n.reflectivity = t.reflectivity),
                                void 0 !== t.refractionRatio && (n.refractionRatio = t.refractionRatio),
                                void 0 !== t.lightMap && (n.lightMap = i(t.lightMap)),
                                void 0 !== t.lightMapIntensity && (n.lightMapIntensity = t.lightMapIntensity),
                                void 0 !== t.aoMap && (n.aoMap = i(t.aoMap)),
                                void 0 !== t.aoMapIntensity && (n.aoMapIntensity = t.aoMapIntensity),
                                void 0 !== t.gradientMap && (n.gradientMap = i(t.gradientMap)),
                                void 0 !== t.clearcoatMap && (n.clearcoatMap = i(t.clearcoatMap)),
                                void 0 !== t.clearcoatRoughnessMap && (n.clearcoatRoughnessMap = i(t.clearcoatRoughnessMap)),
                                void 0 !== t.clearcoatNormalMap && (n.clearcoatNormalMap = i(t.clearcoatNormalMap)),
                                void 0 !== t.clearcoatNormalScale && (n.clearcoatNormalScale = (new wn).fromArray(t.clearcoatNormalScale)),
                                void 0 !== t.transmissionMap && (n.transmissionMap = i(t.transmissionMap)),
                                void 0 !== t.thicknessMap && (n.thicknessMap = i(t.thicknessMap)),
                                void 0 !== t.sheenColorMap && (n.sheenColorMap = i(t.sheenColorMap)),
                                void 0 !== t.sheenRoughnessMap && (n.sheenRoughnessMap = i(t.sheenRoughnessMap)),
                                    n
                            }
                            setTextures(t) {
                                return this.textures = t,
                                    this
                            }
                        }
                        class Ad {
                            static decodeText(t) {
                                if ("undefined" != typeof TextDecoder)
                                    return (new TextDecoder).decode(t);
                                let e = "";
                                for (let i = 0, n = t.length; i < n; i++)
                                    e += String.fromCharCode(t[i]);
                                try {
                                    return decodeURIComponent(escape(e))
                                } catch (t) {
                                    return e
                                }
                            }
                            static extractUrlBase(t) {
                                var e = t.lastIndexOf("/");
                                return -1 === e ? "./" : t.substr(0, e + 1)
                            }
                            static resolveURL(t, e) {
                                return "string" != typeof t || "" === t ? "" : (/^https?:\/\//i.test(e) && /^\//.test(t) && (e = e.replace(/(^https?:\/\/[^\/]+).*/i, "$1")),
                                    /^(https?:)?\/\//i.test(t) || /^data:.*,.*$/i.test(t) || /^blob:.*$/i.test(t) ? t : e + t)
                            }
                        }
                        class Td extends Ps {
                            constructor() {
                                super(),
                                    this.type = "InstancedBufferGeometry",
                                    this.instanceCount = 1 / 0
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.instanceCount = t.instanceCount,
                                    this
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                            toJSON() {
                                const t = super.toJSON(this);
                                return t.instanceCount = this.instanceCount,
                                    t.isInstancedBufferGeometry = !0,
                                    t
                            }
                        }
                        Td.prototype.isInstancedBufferGeometry = !0;
                        class Pd extends Qc {
                            constructor(t) {
                                super(t)
                            }
                            load(t, e, i, n) {
                                const r = this
                                    , s = new $c(r.manager);
                                s.setPath(r.path),
                                    s.setRequestHeader(r.requestHeader),
                                    s.setWithCredentials(r.withCredentials),
                                    s.load(t, (function(i) {
                                            try {
                                                e(r.parse(JSON.parse(i)))
                                            } catch (i) {
                                                n && n(i),
                                                    r.manager.itemError(t)
                                            }
                                        }
                                    ), i, n)
                            }
                            parse(t) {
                                const e = {}
                                    , i = {};
                                function n(t, n) {
                                    if (void 0 !== e[n])
                                        return e[n];
                                    var r = t.interleavedBuffers[n];
                                    t = function(t, e) {
                                        return void 0 !== i[e] ? i[e] : (t = (t = t.arrayBuffers)[e],
                                            t = new Uint32Array(t).buffer,
                                            i[e] = t)
                                    }(t, r.buffer),
                                        t = An(r.type, t);
                                    const s = new il(t,r.stride);
                                    return s.uuid = r.uuid,
                                        e[n] = s,
                                        s
                                }
                                const r = new (t.isInstancedBufferGeometry ? Td : Ps);
                                var s = t.data.index;
                                void 0 !== s && (m = An(s.type, s.array),
                                    r.setIndex(new us(m,1)));
                                var a = t.data.attributes;
                                for (const e in a) {
                                    var o = a[e];
                                    let i;
                                    if (o.isInterleavedBufferAttribute) {
                                        var h = n(t.data, o.data);
                                        i = new rl(h,o.itemSize,o.offset,o.normalized)
                                    } else {
                                        h = An(o.type, o.array);
                                        i = new (o.isInstancedBufferAttribute ? Dl : us)(h,o.itemSize,o.normalized)
                                    }
                                    void 0 !== o.name && (i.name = o.name),
                                    void 0 !== o.usage && i.setUsage(o.usage),
                                    void 0 !== o.updateRange && (i.updateRange.offset = o.updateRange.offset,
                                        i.updateRange.count = o.updateRange.count),
                                        r.setAttribute(e, i)
                                }
                                var l = t.data.morphAttributes;
                                if (l)
                                    for (const e in l) {
                                        var u = l[e];
                                        const i = [];
                                        for (let e = 0, r = u.length; e < r; e++) {
                                            var c, d = u[e];
                                            let r;
                                            r = d.isInterleavedBufferAttribute ? (c = n(t.data, d.data),
                                                new rl(c,d.itemSize,d.offset,d.normalized)) : (c = An(d.type, d.array),
                                                new us(c,d.itemSize,d.normalized)),
                                            void 0 !== d.name && (r.name = d.name),
                                                i.push(r)
                                        }
                                        r.morphAttributes[e] = i
                                    }
                                t.data.morphTargetsRelative && (r.morphTargetsRelative = !0);
                                var p = t.data.groups || t.data.drawcalls || t.data.offsets;
                                if (void 0 !== p)
                                    for (let t = 0, e = p.length; t !== e; ++t) {
                                        var f = p[t];
                                        r.addGroup(f.start, f.count, f.materialIndex)
                                    }
                                var m = t.data.boundingSphere;
                                if (void 0 !== m) {
                                    const t = new Fn;
                                    void 0 !== m.center && t.fromArray(m.center),
                                        r.boundingSphere = new ar(t,m.radius)
                                }
                                return t.name && (r.name = t.name),
                                t.userData && (r.userData = t.userData),
                                    r
                            }
                        }
                        class Ed extends Qc {
                            constructor(t) {
                                super(t)
                            }
                            load(t, e, i, n) {
                                const r = this;
                                var s = "" === this.path ? Ad.extractUrlBase(t) : this.path;
                                this.resourcePath = this.resourcePath || s;
                                const a = new $c(this.manager);
                                a.setPath(this.path),
                                    a.setRequestHeader(this.requestHeader),
                                    a.setWithCredentials(this.withCredentials),
                                    a.load(t, (function(t) {
                                            let i = null;
                                            try {
                                                i = JSON.parse(t)
                                            } catch (t) {
                                                return void (void 0 !== n && n(t))
                                            }
                                            const s = i.metadata;
                                            void 0 !== s && void 0 !== s.type && "geometry" !== s.type.toLowerCase() && r.parse(i, e)
                                        }
                                    ), i, n)
                            }
                            async loadAsync(t, e) {
                                var i = "" === this.path ? Ad.extractUrlBase(t) : this.path;
                                this.resourcePath = this.resourcePath || i;
                                const n = new $c(this.manager);
                                n.setPath(this.path),
                                    n.setRequestHeader(this.requestHeader),
                                    n.setWithCredentials(this.withCredentials),
                                    e = await n.loadAsync(t, e);
                                const r = (e = JSON.parse(e)).metadata;
                                if (void 0 === r || void 0 === r.type || "geometry" === r.type.toLowerCase())
                                    throw new Error("THREE.ObjectLoader: Can't load " + t);
                                return this.parseAsync(e)
                            }
                            parse(t, e) {
                                var i = this.parseAnimations(t.animations)
                                    , n = this.parseShapes(t.shapes)
                                    , r = this.parseGeometries(t.geometries, n)
                                    , s = this.parseImages(t.images, (function() {
                                        void 0 !== e && e(o)
                                    }
                                ))
                                    , a = this.parseTextures(t.textures, s);
                                n = this.parseMaterials(t.materials, a);
                                const o = this.parseObject(t.object, r, n, a, i);
                                if (t = this.parseSkeletons(t.skeletons, o),
                                    this.bindSkeletons(o, t),
                                void 0 !== e) {
                                    let t = !1;
                                    for (const e in s)
                                        if (s[e]instanceof HTMLImageElement) {
                                            t = !0;
                                            break
                                        }
                                    !1 === t && e(o)
                                }
                                return o
                            }
                            async parseAsync(t) {
                                var e = this.parseAnimations(t.animations)
                                    , i = this.parseShapes(t.shapes)
                                    , n = this.parseGeometries(t.geometries, i)
                                    , r = await this.parseImagesAsync(t.images);
                                i = this.parseTextures(t.textures, r),
                                    r = this.parseMaterials(t.materials, i),
                                    e = this.parseObject(t.object, n, r, i, e),
                                    t = this.parseSkeletons(t.skeletons, e);
                                return this.bindSkeletons(e, t),
                                    e
                            }
                            parseShapes(t) {
                                const e = {};
                                if (void 0 !== t)
                                    for (let n = 0, r = t.length; n < r; n++) {
                                        var i = (new Uu).fromJSON(t[n]);
                                        e[i.uuid] = i
                                    }
                                return e
                            }
                            parseSkeletons(t, e) {
                                const i = {}
                                    , n = {};
                                if (e.traverse((function(t) {
                                        t.isBone && (n[t.uuid] = t)
                                    }
                                )),
                                void 0 !== t)
                                    for (let e = 0, s = t.length; e < s; e++) {
                                        var r = (new Ol).fromJSON(t[e], n);
                                        i[r.uuid] = r
                                    }
                                return i
                            }
                            parseGeometries(t, e) {
                                const i = {};
                                if (void 0 !== t) {
                                    const r = new Pd;
                                    for (let s = 0, a = t.length; s < a; s++) {
                                        let a;
                                        var n = t[s];
                                        switch (n.type) {
                                            case "BufferGeometry":
                                            case "InstancedBufferGeometry":
                                                a = r.parse(n);
                                                break;
                                            case "Geometry":
                                                break;
                                            default:
                                                n.type in wc && (a = wc[n.type].fromJSON(n, e))
                                        }
                                        a.uuid = n.uuid,
                                        void 0 !== n.name && (a.name = n.name),
                                        !0 === a.isBufferGeometry && void 0 !== n.userData && (a.userData = n.userData),
                                            i[n.uuid] = a
                                    }
                                }
                                return i
                            }
                            parseMaterials(t, e) {
                                const i = {}
                                    , n = {};
                                if (void 0 !== t) {
                                    const a = new Cd;
                                    a.setTextures(e);
                                    for (let e = 0, o = t.length; e < o; e++) {
                                        var r = t[e];
                                        if ("MultiMaterial" === r.type) {
                                            const t = [];
                                            for (let e = 0; e < r.materials.length; e++) {
                                                var s = r.materials[e];
                                                void 0 === i[s.uuid] && (i[s.uuid] = a.parse(s)),
                                                    t.push(i[s.uuid])
                                            }
                                            n[r.uuid] = t
                                        } else
                                            void 0 === i[r.uuid] && (i[r.uuid] = a.parse(r)),
                                                n[r.uuid] = i[r.uuid]
                                    }
                                }
                                return n
                            }
                            parseAnimations(t) {
                                const e = {};
                                if (void 0 !== t)
                                    for (let n = 0; n < t.length; n++) {
                                        var i = t[n];
                                        e[(i = Xc.parse(i)).uuid] = i
                                    }
                                return e
                            }
                            parseImages(t, e) {
                                const i = this
                                    , n = {};
                                let r;
                                function s(t) {
                                    if ("string" != typeof t)
                                        return t.data ? {
                                            data: An(t.type, t.data),
                                            width: t.width,
                                            height: t.height
                                        } : null;
                                    var e;
                                    t = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(t = t) ? t : i.resourcePath + t;
                                    return e = t,
                                        i.manager.itemStart(e),
                                        r.load(e, (function() {
                                                i.manager.itemEnd(e)
                                            }
                                        ), void 0, (function() {
                                                i.manager.itemError(e),
                                                    i.manager.itemEnd(e)
                                            }
                                        ))
                                }
                                if (void 0 !== t && 0 < t.length) {
                                    e = new Jc(e),
                                        r = new id(e),
                                        r.setCrossOrigin(this.crossOrigin);
                                    for (let e = 0, i = t.length; e < i; e++) {
                                        var a = t[e]
                                            , o = a.url;
                                        if (Array.isArray(o)) {
                                            n[a.uuid] = [];
                                            for (let t = 0, e = o.length; t < e; t++) {
                                                var h = s(o[t]);
                                                null !== h && (h instanceof HTMLImageElement ? n[a.uuid].push(h) : n[a.uuid].push(new Il(h.data,h.width,h.height)))
                                            }
                                        } else {
                                            var l = s(a.url);
                                            null !== l && (n[a.uuid] = l)
                                        }
                                    }
                                }
                                return n
                            }
                            async parseImagesAsync(t) {
                                const e = this
                                    , i = {};
                                let n;
                                async function r(t) {
                                    return "string" != typeof t ? t.data ? {
                                        data: An(t.type, t.data),
                                        width: t.width,
                                        height: t.height
                                    } : null : (t = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(t) ? t : e.resourcePath + t,
                                        n.loadAsync(t))
                                }
                                if (void 0 !== t && 0 < t.length) {
                                    n = new id(this.manager),
                                        n.setCrossOrigin(this.crossOrigin);
                                    for (let e = 0, n = t.length; e < n; e++) {
                                        var s = t[e]
                                            , a = s.url;
                                        if (Array.isArray(a)) {
                                            i[s.uuid] = [];
                                            for (let t = 0, e = a.length; t < e; t++) {
                                                var o = await r(a[t]);
                                                null !== o && (o instanceof HTMLImageElement ? i[s.uuid].push(o) : i[s.uuid].push(new Il(o.data,o.width,o.height)))
                                            }
                                        } else {
                                            var h = await r(s.url);
                                            null !== h && (i[s.uuid] = h)
                                        }
                                    }
                                }
                                return i
                            }
                            parseTextures(t, e) {
                                function i(t, e) {
                                    return "number" == typeof t ? t : e[t]
                                }
                                const n = {};
                                if (void 0 !== t)
                                    for (let a = 0, o = t.length; a < o; a++) {
                                        var r = t[a];
                                        let o;
                                        r.image,
                                            e[r.image];
                                        var s = e[r.image];
                                        Array.isArray(s) ? (o = new ia(s),
                                        6 === s.length && (o.needsUpdate = !0)) : (o = s && s.data ? new Il(s.data,s.width,s.height) : new In(s),
                                        s && (o.needsUpdate = !0)),
                                            o.uuid = r.uuid,
                                        void 0 !== r.name && (o.name = r.name),
                                        void 0 !== r.mapping && (o.mapping = i(r.mapping, Ld)),
                                        void 0 !== r.offset && o.offset.fromArray(r.offset),
                                        void 0 !== r.repeat && o.repeat.fromArray(r.repeat),
                                        void 0 !== r.center && o.center.fromArray(r.center),
                                        void 0 !== r.rotation && (o.rotation = r.rotation),
                                        void 0 !== r.wrap && (o.wrapS = i(r.wrap[0], Id),
                                            o.wrapT = i(r.wrap[1], Id)),
                                        void 0 !== r.format && (o.format = r.format),
                                        void 0 !== r.type && (o.type = r.type),
                                        void 0 !== r.encoding && (o.encoding = r.encoding),
                                        void 0 !== r.minFilter && (o.minFilter = i(r.minFilter, kd)),
                                        void 0 !== r.magFilter && (o.magFilter = i(r.magFilter, kd)),
                                        void 0 !== r.anisotropy && (o.anisotropy = r.anisotropy),
                                        void 0 !== r.flipY && (o.flipY = r.flipY),
                                        void 0 !== r.premultiplyAlpha && (o.premultiplyAlpha = r.premultiplyAlpha),
                                        void 0 !== r.unpackAlignment && (o.unpackAlignment = r.unpackAlignment),
                                        void 0 !== r.userData && (o.userData = r.userData),
                                            n[r.uuid] = o
                                    }
                                return n
                            }
                            parseObject(t, e, i, n, r) {
                                let s, a, o;
                                function h(t) {
                                    return e[t],
                                        e[t]
                                }
                                function l(t) {
                                    if (void 0 !== t) {
                                        if (Array.isArray(t)) {
                                            const n = [];
                                            for (let r = 0, s = t.length; r < s; r++) {
                                                var e = t[r];
                                                i[e],
                                                    n.push(i[e])
                                            }
                                            return n
                                        }
                                        return i[t],
                                            i[t]
                                    }
                                }
                                function u(t) {
                                    return n[t],
                                        n[t]
                                }
                                switch (t.type) {
                                    case "Scene":
                                        s = new el,
                                        void 0 !== t.background && (Number.isInteger(t.background) ? s.background = new as(t.background) : s.background = u(t.background)),
                                        void 0 !== t.environment && (s.environment = u(t.environment)),
                                        void 0 !== t.fog && ("Fog" === t.fog.type ? s.fog = new tl(t.fog.color,t.fog.near,t.fog.far) : "FogExp2" === t.fog.type && (s.fog = new $h(t.fog.color,t.fog.density)));
                                        break;
                                    case "PerspectiveCamera":
                                        s = new ta(t.fov,t.aspect,t.near,t.far),
                                        void 0 !== t.focus && (s.focus = t.focus),
                                        void 0 !== t.zoom && (s.zoom = t.zoom),
                                        void 0 !== t.filmGauge && (s.filmGauge = t.filmGauge),
                                        void 0 !== t.filmOffset && (s.filmOffset = t.filmOffset),
                                        void 0 !== t.view && (s.view = Object.assign({}, t.view));
                                        break;
                                    case "OrthographicCamera":
                                        s = new Sa(t.left,t.right,t.top,t.bottom,t.near,t.far),
                                        void 0 !== t.zoom && (s.zoom = t.zoom),
                                        void 0 !== t.view && (s.view = Object.assign({}, t.view));
                                        break;
                                    case "AmbientLight":
                                        s = new bd(t.color,t.intensity);
                                        break;
                                    case "DirectionalLight":
                                        s = new xd(t.color,t.intensity);
                                        break;
                                    case "PointLight":
                                        s = new _d(t.color,t.intensity,t.distance,t.decay);
                                        break;
                                    case "RectAreaLight":
                                        s = new wd(t.color,t.intensity,t.width,t.height);
                                        break;
                                    case "SpotLight":
                                        s = new pd(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);
                                        break;
                                    case "HemisphereLight":
                                        s = new od(t.color,t.groundColor,t.intensity);
                                        break;
                                    case "LightProbe":
                                        s = (new Md).fromJSON(t);
                                        break;
                                    case "SkinnedMesh":
                                        a = h(t.geometry),
                                            o = l(t.material),
                                            s = new El(a,o),
                                        void 0 !== t.bindMode && (s.bindMode = t.bindMode),
                                        void 0 !== t.bindMatrix && s.bindMatrix.fromArray(t.bindMatrix),
                                        void 0 !== t.skeleton && (s.skeleton = t.skeleton);
                                        break;
                                    case "Mesh":
                                        a = h(t.geometry),
                                            o = l(t.material),
                                            s = new qs(a,o);
                                        break;
                                    case "InstancedMesh":
                                        a = h(t.geometry),
                                            o = l(t.material);
                                        var c = t.count
                                            , d = t.instanceMatrix
                                            , p = t.instanceColor;
                                        s = new Vl(a,o,c),
                                            s.instanceMatrix = new Dl(new Float32Array(d.array),16),
                                        void 0 !== p && (s.instanceColor = new Dl(new Float32Array(p.array),p.itemSize));
                                        break;
                                    case "LOD":
                                        s = new Sl;
                                        break;
                                    case "Line":
                                        s = new Xl(h(t.geometry),l(t.material));
                                        break;
                                    case "LineLoop":
                                        s = new Ql(h(t.geometry),l(t.material));
                                        break;
                                    case "LineSegments":
                                        s = new Yl(h(t.geometry),l(t.material));
                                        break;
                                    case "PointCloud":
                                    case "Points":
                                        s = new nu(h(t.geometry),l(t.material));
                                        break;
                                    case "Sprite":
                                        s = new yl(l(t.material));
                                        break;
                                    case "Group":
                                        s = new Hh;
                                        break;
                                    case "Bone":
                                        s = new Ll;
                                        break;
                                    default:
                                        s = new Vr
                                }
                                if (s.uuid = t.uuid,
                                void 0 !== t.name && (s.name = t.name),
                                    void 0 !== t.matrix ? (s.matrix.fromArray(t.matrix),
                                    void 0 !== t.matrixAutoUpdate && (s.matrixAutoUpdate = t.matrixAutoUpdate),
                                    s.matrixAutoUpdate && s.matrix.decompose(s.position, s.quaternion, s.scale)) : (void 0 !== t.position && s.position.fromArray(t.position),
                                    void 0 !== t.rotation && s.rotation.fromArray(t.rotation),
                                    void 0 !== t.quaternion && s.quaternion.fromArray(t.quaternion),
                                    void 0 !== t.scale && s.scale.fromArray(t.scale)),
                                void 0 !== t.castShadow && (s.castShadow = t.castShadow),
                                void 0 !== t.receiveShadow && (s.receiveShadow = t.receiveShadow),
                                t.shadow && (void 0 !== t.shadow.bias && (s.shadow.bias = t.shadow.bias),
                                void 0 !== t.shadow.normalBias && (s.shadow.normalBias = t.shadow.normalBias),
                                void 0 !== t.shadow.radius && (s.shadow.radius = t.shadow.radius),
                                void 0 !== t.shadow.mapSize && s.shadow.mapSize.fromArray(t.shadow.mapSize),
                                void 0 !== t.shadow.camera && (s.shadow.camera = this.parseObject(t.shadow.camera))),
                                void 0 !== t.visible && (s.visible = t.visible),
                                void 0 !== t.frustumCulled && (s.frustumCulled = t.frustumCulled),
                                void 0 !== t.renderOrder && (s.renderOrder = t.renderOrder),
                                void 0 !== t.userData && (s.userData = t.userData),
                                void 0 !== t.layers && (s.layers.mask = t.layers),
                                void 0 !== t.children) {
                                    var f = t.children;
                                    for (let t = 0; t < f.length; t++)
                                        s.add(this.parseObject(f[t], e, i, n, r))
                                }
                                if (void 0 !== t.animations) {
                                    var m = t.animations;
                                    for (let t = 0; t < m.length; t++) {
                                        var g = m[t];
                                        s.animations.push(r[g])
                                    }
                                }
                                if ("LOD" === t.type) {
                                    void 0 !== t.autoUpdate && (s.autoUpdate = t.autoUpdate);
                                    var v = t.levels;
                                    for (let t = 0; t < v.length; t++) {
                                        var _ = v[t]
                                            , y = s.getObjectByProperty("uuid", _.object);
                                        void 0 !== y && s.addLevel(y, _.distance)
                                    }
                                }
                                return s
                            }
                            bindSkeletons(t, e) {
                                0 !== Object.keys(e).length && t.traverse((function(t) {
                                        var i;
                                        !0 === t.isSkinnedMesh && void 0 !== t.skeleton && (void 0 === (i = e[t.skeleton]) || t.bind(i, t.bindMatrix))
                                    }
                                ))
                            }
                            setTexturePath(t) {
                                return this.setResourcePath(t)
                            }
                        }
                        const Ld = {
                            UVMapping: Ft,
                            CubeReflectionMapping: Bt,
                            CubeRefractionMapping: Vt,
                            EquirectangularReflectionMapping: Ut,
                            EquirectangularRefractionMapping: Gt,
                            CubeUVReflectionMapping: Wt,
                            CubeUVRefractionMapping: jt
                        }
                            , Id = {
                            RepeatWrapping: Ht,
                            ClampToEdgeWrapping: qt,
                            MirroredRepeatWrapping: Xt
                        }
                            , kd = {
                            NearestFilter: Zt,
                            NearestMipmapNearestFilter: Jt,
                            NearestMipmapLinearFilter: Qt,
                            LinearFilter: $t,
                            LinearMipmapNearestFilter: te,
                            LinearMipmapLinearFilter: ie
                        };
                        class Nd extends Qc {
                            constructor(t) {
                                super(t),
                                    this.options = {
                                        premultiplyAlpha: "none"
                                    }
                            }
                            setOptions(t) {
                                return this.options = t,
                                    this
                            }
                            load(t, e, i, n) {
                                void 0 === t && (t = ""),
                                void 0 !== this.path && (t = this.path + t),
                                    t = this.manager.resolveURL(t);
                                const r = this
                                    , s = Zc.get(t);
                                if (void 0 !== s)
                                    return r.manager.itemStart(t),
                                        setTimeout((function() {
                                                e && e(s),
                                                    r.manager.itemEnd(t)
                                            }
                                        ), 0),
                                        s;
                                const a = {};
                                a.credentials = "anonymous" === this.crossOrigin ? "same-origin" : "include",
                                    a.headers = this.requestHeader,
                                    fetch(t, a).then((function(t) {
                                            return t.blob()
                                        }
                                    )).then((function(t) {
                                            return createImageBitmap(t, Object.assign(r.options, {
                                                colorSpaceConversion: "none"
                                            }))
                                        }
                                    )).then((function(i) {
                                            Zc.add(t, i),
                                            e && e(i),
                                                r.manager.itemEnd(t)
                                        }
                                    )).catch((function(e) {
                                            n && n(e),
                                                r.manager.itemError(t),
                                                r.manager.itemEnd(t)
                                        }
                                    )),
                                    r.manager.itemStart(t)
                            }
                        }
                        let Od;
                        Nd.prototype.isImageBitmapLoader = !0;
                        const Dd = {
                            getContext: function() {
                                return void 0 === Od && (Od = new (window.AudioContext || window.webkitAudioContext)),
                                    Od
                            },
                            setContext: function(t) {
                                Od = t
                            }
                        };
                        class Rd extends Qc {
                            constructor(t) {
                                super(t)
                            }
                            load(t, e, i, n) {
                                const r = this
                                    , s = new $c(this.manager);
                                s.setResponseType("arraybuffer"),
                                    s.setPath(this.path),
                                    s.setRequestHeader(this.requestHeader),
                                    s.setWithCredentials(this.withCredentials),
                                    s.load(t, (function(i) {
                                            try {
                                                var s = i.slice(0);
                                                Dd.getContext().decodeAudioData(s, (function(t) {
                                                        e(t)
                                                    }
                                                ))
                                            } catch (i) {
                                                n && n(i),
                                                    r.manager.itemError(t)
                                            }
                                        }
                                    ), i, n)
                            }
                        }
                        class zd extends Md {
                            constructor(t, e, i=1) {
                                super(void 0, i);
                                var n = (new as).set(t);
                                i = (new as).set(e),
                                    t = new Fn(n.r,n.g,n.b),
                                    e = new Fn(i.r,i.g,i.b),
                                    i = (n = Math.sqrt(Math.PI)) * Math.sqrt(.75);
                                this.sh.coefficients[0].copy(t).add(e).multiplyScalar(n),
                                    this.sh.coefficients[1].copy(t).sub(e).multiplyScalar(i)
                            }
                        }
                        zd.prototype.isHemisphereLightProbe = !0;
                        class Fd extends Md {
                            constructor(t, e=1) {
                                super(void 0, e),
                                    t = (new as).set(t),
                                    this.sh.coefficients[0].set(t.r, t.g, t.b).multiplyScalar(2 * Math.sqrt(Math.PI))
                            }
                        }
                        Fd.prototype.isAmbientLightProbe = !0;
                        const Bd = new mr
                            , Vd = new mr
                            , Ud = new mr;
                        class Gd {
                            constructor() {
                                this.type = "StereoCamera",
                                    this.aspect = 1,
                                    this.eyeSep = .064,
                                    this.cameraL = new ta,
                                    this.cameraL.layers.enable(1),
                                    this.cameraL.matrixAutoUpdate = !1,
                                    this.cameraR = new ta,
                                    this.cameraR.layers.enable(2),
                                    this.cameraR.matrixAutoUpdate = !1,
                                    this._cache = {
                                        focus: null,
                                        fov: null,
                                        aspect: null,
                                        near: null,
                                        far: null,
                                        zoom: null,
                                        eyeSep: null
                                    }
                            }
                            update(t) {
                                const e = this._cache;
                                var i, n, r, s;
                                e.focus === t.focus && e.fov === t.fov && e.aspect === t.aspect * this.aspect && e.near === t.near && e.far === t.far && e.zoom === t.zoom && e.eyeSep === this.eyeSep || (e.focus = t.focus,
                                    e.fov = t.fov,
                                    e.aspect = t.aspect * this.aspect,
                                    e.near = t.near,
                                    e.far = t.far,
                                    e.zoom = t.zoom,
                                    e.eyeSep = this.eyeSep,
                                    Ud.copy(t.projectionMatrix),
                                    i = (s = e.eyeSep / 2) * e.near / e.focus,
                                    n = e.near * Math.tan(dn * e.fov * .5) / e.zoom,
                                    Vd.elements[12] = -s,
                                    Bd.elements[12] = s,
                                    r = -n * e.aspect + i,
                                    s = n * e.aspect + i,
                                    Ud.elements[0] = 2 * e.near / (s - r),
                                    Ud.elements[8] = (s + r) / (s - r),
                                    this.cameraL.projectionMatrix.copy(Ud),
                                    r = -n * e.aspect - i,
                                    s = n * e.aspect - i,
                                    Ud.elements[0] = 2 * e.near / (s - r),
                                    Ud.elements[8] = (s + r) / (s - r),
                                    this.cameraR.projectionMatrix.copy(Ud)),
                                    this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(Vd),
                                    this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(Bd)
                            }
                        }
                        class Wd {
                            constructor(t=!0) {
                                this.autoStart = t,
                                    this.startTime = 0,
                                    this.oldTime = 0,
                                    this.elapsedTime = 0,
                                    this.running = !1
                            }
                            start() {
                                this.startTime = jd(),
                                    this.oldTime = this.startTime,
                                    this.elapsedTime = 0,
                                    this.running = !0
                            }
                            stop() {
                                this.getElapsedTime(),
                                    this.running = !1,
                                    this.autoStart = !1
                            }
                            getElapsedTime() {
                                return this.getDelta(),
                                    this.elapsedTime
                            }
                            getDelta() {
                                let t = 0;
                                return this.autoStart && !this.running ? (this.start(),
                                    0) : (this.running && (t = ((e = jd()) - this.oldTime) / 1e3,
                                    this.oldTime = e,
                                    this.elapsedTime += t),
                                    t);
                                var e
                            }
                        }
                        function jd() {
                            return ("undefined" == typeof performance ? Date : performance).now()
                        }
                        const Hd = new Fn
                            , qd = new zn
                            , Xd = new Fn
                            , Zd = new Fn;
                        class Jd extends Vr {
                            constructor() {
                                super(),
                                    this.type = "AudioListener",
                                    this.context = Dd.getContext(),
                                    this.gain = this.context.createGain(),
                                    this.gain.connect(this.context.destination),
                                    this.filter = null,
                                    this.timeDelta = 0,
                                    this._clock = new Wd
                            }
                            getInput() {
                                return this.gain
                            }
                            removeFilter() {
                                return null !== this.filter && (this.gain.disconnect(this.filter),
                                    this.filter.disconnect(this.context.destination),
                                    this.gain.connect(this.context.destination),
                                    this.filter = null),
                                    this
                            }
                            getFilter() {
                                return this.filter
                            }
                            setFilter(t) {
                                return null !== this.filter ? (this.gain.disconnect(this.filter),
                                    this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination),
                                    this.filter = t,
                                    this.gain.connect(this.filter),
                                    this.filter.connect(this.context.destination),
                                    this
                            }
                            getMasterVolume() {
                                return this.gain.gain.value
                            }
                            setMasterVolume(t) {
                                return this.gain.gain.setTargetAtTime(t, this.context.currentTime, .01),
                                    this
                            }
                            updateMatrixWorld(t) {
                                super.updateMatrixWorld(t);
                                const e = this.context.listener;
                                var i = this.up;
                                this.timeDelta = this._clock.getDelta(),
                                    this.matrixWorld.decompose(Hd, qd, Xd),
                                    Zd.set(0, 0, -1).applyQuaternion(qd),
                                    e.positionX ? (t = this.context.currentTime + this.timeDelta,
                                        e.positionX.linearRampToValueAtTime(Hd.x, t),
                                        e.positionY.linearRampToValueAtTime(Hd.y, t),
                                        e.positionZ.linearRampToValueAtTime(Hd.z, t),
                                        e.forwardX.linearRampToValueAtTime(Zd.x, t),
                                        e.forwardY.linearRampToValueAtTime(Zd.y, t),
                                        e.forwardZ.linearRampToValueAtTime(Zd.z, t),
                                        e.upX.linearRampToValueAtTime(i.x, t),
                                        e.upY.linearRampToValueAtTime(i.y, t),
                                        e.upZ.linearRampToValueAtTime(i.z, t)) : (e.setPosition(Hd.x, Hd.y, Hd.z),
                                        e.setOrientation(Zd.x, Zd.y, Zd.z, i.x, i.y, i.z))
                            }
                        }
                        class Yd extends Vr {
                            constructor(t) {
                                super(),
                                    this.type = "Audio",
                                    this.listener = t,
                                    this.context = t.context,
                                    this.gain = this.context.createGain(),
                                    this.gain.connect(t.getInput()),
                                    this.autoplay = !1,
                                    this.buffer = null,
                                    this.detune = 0,
                                    this.loop = !1,
                                    this.loopStart = 0,
                                    this.loopEnd = 0,
                                    this.offset = 0,
                                    this.duration = void 0,
                                    this.playbackRate = 1,
                                    this.isPlaying = !1,
                                    this.hasPlaybackControl = !0,
                                    this.source = null,
                                    this.sourceType = "empty",
                                    this._startedAt = 0,
                                    this._progress = 0,
                                    this._connected = !1,
                                    this.filters = []
                            }
                            getOutput() {
                                return this.gain
                            }
                            setNodeSource(t) {
                                return this.hasPlaybackControl = !1,
                                    this.sourceType = "audioNode",
                                    this.source = t,
                                    this.connect(),
                                    this
                            }
                            setMediaElementSource(t) {
                                return this.hasPlaybackControl = !1,
                                    this.sourceType = "mediaNode",
                                    this.source = this.context.createMediaElementSource(t),
                                    this.connect(),
                                    this
                            }
                            setMediaStreamSource(t) {
                                return this.hasPlaybackControl = !1,
                                    this.sourceType = "mediaStreamNode",
                                    this.source = this.context.createMediaStreamSource(t),
                                    this.connect(),
                                    this
                            }
                            setBuffer(t) {
                                return this.buffer = t,
                                    this.sourceType = "buffer",
                                this.autoplay && this.play(),
                                    this
                            }
                            play(t=0) {
                                if (!0 !== this.isPlaying && !1 !== this.hasPlaybackControl) {
                                    this._startedAt = this.context.currentTime + t;
                                    const e = this.context.createBufferSource();
                                    return e.buffer = this.buffer,
                                        e.loop = this.loop,
                                        e.loopStart = this.loopStart,
                                        e.loopEnd = this.loopEnd,
                                        e.onended = this.onEnded.bind(this),
                                        e.start(this._startedAt, this._progress + this.offset, this.duration),
                                        this.isPlaying = !0,
                                        this.source = e,
                                        this.setDetune(this.detune),
                                        this.setPlaybackRate(this.playbackRate),
                                        this.connect()
                                }
                            }
                            pause() {
                                if (!1 !== this.hasPlaybackControl)
                                    return !0 === this.isPlaying && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate,
                                    !0 === this.loop && (this._progress = this._progress % (this.duration || this.buffer.duration)),
                                        this.source.stop(),
                                        this.source.onended = null,
                                        this.isPlaying = !1),
                                        this
                            }
                            stop() {
                                if (!1 !== this.hasPlaybackControl)
                                    return this._progress = 0,
                                        this.source.stop(),
                                        this.source.onended = null,
                                        this.isPlaying = !1,
                                        this
                            }
                            connect() {
                                if (0 < this.filters.length) {
                                    this.source.connect(this.filters[0]);
                                    for (let t = 1, e = this.filters.length; t < e; t++)
                                        this.filters[t - 1].connect(this.filters[t]);
                                    this.filters[this.filters.length - 1].connect(this.getOutput())
                                } else
                                    this.source.connect(this.getOutput());
                                return this._connected = !0,
                                    this
                            }
                            disconnect() {
                                if (0 < this.filters.length) {
                                    this.source.disconnect(this.filters[0]);
                                    for (let t = 1, e = this.filters.length; t < e; t++)
                                        this.filters[t - 1].disconnect(this.filters[t]);
                                    this.filters[this.filters.length - 1].disconnect(this.getOutput())
                                } else
                                    this.source.disconnect(this.getOutput());
                                return this._connected = !1,
                                    this
                            }
                            getFilters() {
                                return this.filters
                            }
                            setFilters(t) {
                                return t = t || [],
                                    !0 === this._connected ? (this.disconnect(),
                                        this.filters = t.slice(),
                                        this.connect()) : this.filters = t.slice(),
                                    this
                            }
                            setDetune(t) {
                                if (this.detune = t,
                                void 0 !== this.source.detune)
                                    return !0 === this.isPlaying && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01),
                                        this
                            }
                            getDetune() {
                                return this.detune
                            }
                            getFilter() {
                                return this.getFilters()[0]
                            }
                            setFilter(t) {
                                return this.setFilters(t ? [t] : [])
                            }
                            setPlaybackRate(t) {
                                if (!1 !== this.hasPlaybackControl)
                                    return this.playbackRate = t,
                                    !0 === this.isPlaying && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, .01),
                                        this
                            }
                            getPlaybackRate() {
                                return this.playbackRate
                            }
                            onEnded() {
                                this.isPlaying = !1
                            }
                            getLoop() {
                                return !1 !== this.hasPlaybackControl && this.loop
                            }
                            setLoop(t) {
                                if (!1 !== this.hasPlaybackControl)
                                    return this.loop = t,
                                    !0 === this.isPlaying && (this.source.loop = this.loop),
                                        this
                            }
                            setLoopStart(t) {
                                return this.loopStart = t,
                                    this
                            }
                            setLoopEnd(t) {
                                return this.loopEnd = t,
                                    this
                            }
                            getVolume() {
                                return this.gain.gain.value
                            }
                            setVolume(t) {
                                return this.gain.gain.setTargetAtTime(t, this.context.currentTime, .01),
                                    this
                            }
                        }
                        const Qd = new Fn
                            , Kd = new zn
                            , $d = new Fn
                            , tp = new Fn;
                        class ep extends Yd {
                            constructor(t) {
                                super(t),
                                    this.panner = this.context.createPanner(),
                                    this.panner.panningModel = "HRTF",
                                    this.panner.connect(this.gain)
                            }
                            getOutput() {
                                return this.panner
                            }
                            getRefDistance() {
                                return this.panner.refDistance
                            }
                            setRefDistance(t) {
                                return this.panner.refDistance = t,
                                    this
                            }
                            getRolloffFactor() {
                                return this.panner.rolloffFactor
                            }
                            setRolloffFactor(t) {
                                return this.panner.rolloffFactor = t,
                                    this
                            }
                            getDistanceModel() {
                                return this.panner.distanceModel
                            }
                            setDistanceModel(t) {
                                return this.panner.distanceModel = t,
                                    this
                            }
                            getMaxDistance() {
                                return this.panner.maxDistance
                            }
                            setMaxDistance(t) {
                                return this.panner.maxDistance = t,
                                    this
                            }
                            setDirectionalCone(t, e, i) {
                                return this.panner.coneInnerAngle = t,
                                    this.panner.coneOuterAngle = e,
                                    this.panner.coneOuterGain = i,
                                    this
                            }
                            updateMatrixWorld(t) {
                                if (super.updateMatrixWorld(t),
                                !0 !== this.hasPlaybackControl || !1 !== this.isPlaying) {
                                    this.matrixWorld.decompose(Qd, Kd, $d),
                                        tp.set(0, 0, 1).applyQuaternion(Kd);
                                    const e = this.panner;
                                    e.positionX ? (t = this.context.currentTime + this.listener.timeDelta,
                                        e.positionX.linearRampToValueAtTime(Qd.x, t),
                                        e.positionY.linearRampToValueAtTime(Qd.y, t),
                                        e.positionZ.linearRampToValueAtTime(Qd.z, t),
                                        e.orientationX.linearRampToValueAtTime(tp.x, t),
                                        e.orientationY.linearRampToValueAtTime(tp.y, t),
                                        e.orientationZ.linearRampToValueAtTime(tp.z, t)) : (e.setPosition(Qd.x, Qd.y, Qd.z),
                                        e.setOrientation(tp.x, tp.y, tp.z))
                                }
                            }
                        }
                        class ip {
                            constructor(t, e=2048) {
                                this.analyser = t.context.createAnalyser(),
                                    this.analyser.fftSize = e,
                                    this.data = new Uint8Array(this.analyser.frequencyBinCount),
                                    t.getOutput().connect(this.analyser)
                            }
                            getFrequencyData() {
                                return this.analyser.getByteFrequencyData(this.data),
                                    this.data
                            }
                            getAverageFrequency() {
                                let t = 0;
                                var e = this.getFrequencyData();
                                for (let i = 0; i < e.length; i++)
                                    t += e[i];
                                return t / e.length
                            }
                        }
                        class np {
                            constructor(t, e, i) {
                                let n, r, s;
                                switch (this.binding = t,
                                    this.valueSize = i,
                                    e) {
                                    case "quaternion":
                                        n = this._slerp,
                                            r = this._slerpAdditive,
                                            s = this._setAdditiveIdentityQuaternion,
                                            this.buffer = new Float64Array(6 * i),
                                            this._workIndex = 5;
                                        break;
                                    case "string":
                                    case "bool":
                                        n = this._select,
                                            r = this._select,
                                            s = this._setAdditiveIdentityOther,
                                            this.buffer = new Array(5 * i);
                                        break;
                                    default:
                                        n = this._lerp,
                                            r = this._lerpAdditive,
                                            s = this._setAdditiveIdentityNumeric,
                                            this.buffer = new Float64Array(5 * i)
                                }
                                this._mixBufferRegion = n,
                                    this._mixBufferRegionAdditive = r,
                                    this._setIdentity = s,
                                    this._origIndex = 3,
                                    this._addIndex = 4,
                                    this.cumulativeWeight = 0,
                                    this.cumulativeWeightAdditive = 0,
                                    this.useCount = 0,
                                    this.referenceCount = 0
                            }
                            accumulate(t, e) {
                                const i = this.buffer
                                    , n = this.valueSize
                                    , r = t * n + n;
                                let s = this.cumulativeWeight;
                                if (0 === s) {
                                    for (let t = 0; t !== n; ++t)
                                        i[r + t] = i[t];
                                    s = e
                                } else
                                    s += e,
                                        e /= s,
                                        this._mixBufferRegion(i, r, 0, e, n);
                                this.cumulativeWeight = s
                            }
                            accumulateAdditive(t) {
                                var e = this.buffer
                                    , i = this.valueSize
                                    , n = i * this._addIndex;
                                0 === this.cumulativeWeightAdditive && this._setIdentity(),
                                    this._mixBufferRegionAdditive(e, n, 0, t, i),
                                    this.cumulativeWeightAdditive += t
                            }
                            apply(t) {
                                const e = this.valueSize
                                    , i = this.buffer
                                    , n = t * e + e
                                    , r = this.cumulativeWeight
                                    , s = this.cumulativeWeightAdditive
                                    , a = this.binding;
                                this.cumulativeWeight = 0,
                                    this.cumulativeWeightAdditive = 0,
                                r < 1 && (t = e * this._origIndex,
                                    this._mixBufferRegion(i, n, t, 1 - r, e)),
                                0 < s && this._mixBufferRegionAdditive(i, n, this._addIndex * e, 1, e);
                                for (let t = e, r = e + e; t !== r; ++t)
                                    if (i[t] !== i[t + e]) {
                                        a.setValue(i, n);
                                        break
                                    }
                            }
                            saveOriginalState() {
                                const t = this.binding
                                    , e = this.buffer
                                    , i = this.valueSize
                                    , n = i * this._origIndex;
                                t.getValue(e, n);
                                for (let t = i, r = n; t !== r; ++t)
                                    e[t] = e[n + t % i];
                                this._setIdentity(),
                                    this.cumulativeWeight = 0,
                                    this.cumulativeWeightAdditive = 0
                            }
                            restoreOriginalState() {
                                var t = 3 * this.valueSize;
                                this.binding.setValue(this.buffer, t)
                            }
                            _setAdditiveIdentityNumeric() {
                                var t = this._addIndex * this.valueSize
                                    , e = t + this.valueSize;
                                for (let i = t; i < e; i++)
                                    this.buffer[i] = 0
                            }
                            _setAdditiveIdentityQuaternion() {
                                this._setAdditiveIdentityNumeric(),
                                    this.buffer[this._addIndex * this.valueSize + 3] = 1
                            }
                            _setAdditiveIdentityOther() {
                                var t = this._origIndex * this.valueSize
                                    , e = this._addIndex * this.valueSize;
                                for (let i = 0; i < this.valueSize; i++)
                                    this.buffer[e + i] = this.buffer[t + i]
                            }
                            _select(t, e, i, n, r) {
                                if (.5 <= n)
                                    for (let n = 0; n !== r; ++n)
                                        t[e + n] = t[i + n]
                            }
                            _slerp(t, e, i, n) {
                                zn.slerpFlat(t, e, t, e, t, i, n)
                            }
                            _slerpAdditive(t, e, i, n, r) {
                                r = this._workIndex * r,
                                    zn.multiplyQuaternionsFlat(t, r, t, e, t, i),
                                    zn.slerpFlat(t, e, t, e, t, r, n)
                            }
                            _lerp(t, e, i, n, r) {
                                var s = 1 - n;
                                for (let o = 0; o !== r; ++o) {
                                    var a = e + o;
                                    t[a] = t[a] * s + t[i + o] * n
                                }
                            }
                            _lerpAdditive(t, e, i, n, r) {
                                for (let a = 0; a !== r; ++a) {
                                    var s = e + a;
                                    t[s] = t[s] + t[i + a] * n
                                }
                            }
                        }
                        b = "\\[\\]\\.:\\/";
                        const rp = new RegExp("[" + b + "]","g");
                        S = "[^" + b + "]",
                            l = "[^" + b.replace("\\.", "") + "]",
                            c = /((?:WC+[\/:])*)/.source.replace("WC", S),
                            b = /(WCOD+)?/.source.replace("WCOD", l),
                            l = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", S),
                            S = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", S);
                        const sp = new RegExp("^" + c + b + l + S + "$")
                            , ap = ["material", "materials", "bones"];
                        class op {
                            constructor(t, e, i) {
                                this.path = e,
                                    this.parsedPath = i || op.parseTrackName(e),
                                    this.node = op.findNode(t, this.parsedPath.nodeName) || t,
                                    this.rootNode = t,
                                    this.getValue = this._getValue_unbound,
                                    this.setValue = this._setValue_unbound
                            }
                            static create(t, e, i) {
                                return new (t && t.isAnimationObjectGroup ? op.Composite : op)(t,e,i)
                            }
                            static sanitizeNodeName(t) {
                                return t.replace(/\s/g, "_").replace(rp, "")
                            }
                            static parseTrackName(t) {
                                var e = sp.exec(t);
                                if (!e)
                                    throw new Error("PropertyBinding: Cannot parse trackName: " + t);
                                const i = {
                                    nodeName: e[2],
                                    objectName: e[3],
                                    objectIndex: e[4],
                                    propertyName: e[5],
                                    propertyIndex: e[6]
                                };
                                var n = i.nodeName && i.nodeName.lastIndexOf(".");
                                if (void 0 !== n && -1 !== n && (e = i.nodeName.substring(n + 1),
                                -1 !== ap.indexOf(e) && (i.nodeName = i.nodeName.substring(0, n),
                                    i.objectName = e)),
                                null === i.propertyName || 0 === i.propertyName.length)
                                    throw new Error("PropertyBinding: can not parse propertyName from trackName: " + t);
                                return i
                            }
                            static findNode(t, e) {
                                if (!e || "" === e || "." === e || -1 === e || e === t.name || e === t.uuid)
                                    return t;
                                if (t.skeleton) {
                                    var i = t.skeleton.getBoneByName(e);
                                    if (void 0 !== i)
                                        return i
                                }
                                if (t.children) {
                                    const i = function(t) {
                                        for (let r = 0; r < t.length; r++) {
                                            var n = t[r];
                                            if (n.name === e || n.uuid === e)
                                                return n;
                                            if (n = i(n.children))
                                                return n
                                        }
                                        return null
                                    };
                                    if (t = i(t.children),
                                        t)
                                        return t
                                }
                                return null
                            }
                            _getValue_unavailable() {}
                            _setValue_unavailable() {}
                            _getValue_direct(t, e) {
                                t[e] = this.targetObject[this.propertyName]
                            }
                            _getValue_array(t, e) {
                                var i = this.resolvedProperty;
                                for (let n = 0, r = i.length; n !== r; ++n)
                                    t[e++] = i[n]
                            }
                            _getValue_arrayElement(t, e) {
                                t[e] = this.resolvedProperty[this.propertyIndex]
                            }
                            _getValue_toArray(t, e) {
                                this.resolvedProperty.toArray(t, e)
                            }
                            _setValue_direct(t, e) {
                                this.targetObject[this.propertyName] = t[e]
                            }
                            _setValue_direct_setNeedsUpdate(t, e) {
                                this.targetObject[this.propertyName] = t[e],
                                    this.targetObject.needsUpdate = !0
                            }
                            _setValue_direct_setMatrixWorldNeedsUpdate(t, e) {
                                this.targetObject[this.propertyName] = t[e],
                                    this.targetObject.matrixWorldNeedsUpdate = !0
                            }
                            _setValue_array(t, e) {
                                const i = this.resolvedProperty;
                                for (let n = 0, r = i.length; n !== r; ++n)
                                    i[n] = t[e++]
                            }
                            _setValue_array_setNeedsUpdate(t, e) {
                                const i = this.resolvedProperty;
                                for (let n = 0, r = i.length; n !== r; ++n)
                                    i[n] = t[e++];
                                this.targetObject.needsUpdate = !0
                            }
                            _setValue_array_setMatrixWorldNeedsUpdate(t, e) {
                                const i = this.resolvedProperty;
                                for (let n = 0, r = i.length; n !== r; ++n)
                                    i[n] = t[e++];
                                this.targetObject.matrixWorldNeedsUpdate = !0
                            }
                            _setValue_arrayElement(t, e) {
                                this.resolvedProperty[this.propertyIndex] = t[e]
                            }
                            _setValue_arrayElement_setNeedsUpdate(t, e) {
                                this.resolvedProperty[this.propertyIndex] = t[e],
                                    this.targetObject.needsUpdate = !0
                            }
                            _setValue_arrayElement_setMatrixWorldNeedsUpdate(t, e) {
                                this.resolvedProperty[this.propertyIndex] = t[e],
                                    this.targetObject.matrixWorldNeedsUpdate = !0
                            }
                            _setValue_fromArray(t, e) {
                                this.resolvedProperty.fromArray(t, e)
                            }
                            _setValue_fromArray_setNeedsUpdate(t, e) {
                                this.resolvedProperty.fromArray(t, e),
                                    this.targetObject.needsUpdate = !0
                            }
                            _setValue_fromArray_setMatrixWorldNeedsUpdate(t, e) {
                                this.resolvedProperty.fromArray(t, e),
                                    this.targetObject.matrixWorldNeedsUpdate = !0
                            }
                            _getValue_unbound(t, e) {
                                this.bind(),
                                    this.getValue(t, e)
                            }
                            _setValue_unbound(t, e) {
                                this.bind(),
                                    this.setValue(t, e)
                            }
                            bind() {
                                let t = this.node;
                                var e = this.parsedPath
                                    , i = e.objectName
                                    , n = e.propertyName;
                                let r = e.propertyIndex;
                                if (t || (t = op.findNode(this.rootNode, e.nodeName) || this.rootNode,
                                    this.node = t),
                                    this.getValue = this._getValue_unavailable,
                                    this.setValue = this._setValue_unavailable,
                                    t) {
                                    if (i) {
                                        let n = e.objectIndex;
                                        switch (i) {
                                            case "materials":
                                                if (!t.material)
                                                    return;
                                                if (!t.material.materials)
                                                    return;
                                                t = t.material.materials;
                                                break;
                                            case "bones":
                                                if (!t.skeleton)
                                                    return;
                                                t = t.skeleton.bones;
                                                for (let e = 0; e < t.length; e++)
                                                    if (t[e].name === n) {
                                                        n = e;
                                                        break
                                                    }
                                                break;
                                            default:
                                                if (void 0 === t[i])
                                                    return;
                                                t = t[i]
                                        }
                                        if (void 0 !== n) {
                                            if (void 0 === t[n])
                                                return;
                                            t = t[n]
                                        }
                                    }
                                    var s = t[n];
                                    if (void 0 !== s) {
                                        let e = this.Versioning.None;
                                        this.targetObject = t,
                                            void 0 !== t.needsUpdate ? e = this.Versioning.NeedsUpdate : void 0 !== t.matrixWorldNeedsUpdate && (e = this.Versioning.MatrixWorldNeedsUpdate);
                                        let i = this.BindingType.Direct;
                                        if (void 0 !== r) {
                                            if ("morphTargetInfluences" === n) {
                                                if (!t.geometry)
                                                    return;
                                                if (!t.geometry.isBufferGeometry)
                                                    return;
                                                if (!t.geometry.morphAttributes)
                                                    return;
                                                void 0 !== t.morphTargetDictionary[r] && (r = t.morphTargetDictionary[r])
                                            }
                                            i = this.BindingType.ArrayElement,
                                                this.resolvedProperty = s,
                                                this.propertyIndex = r
                                        } else
                                            void 0 !== s.fromArray && void 0 !== s.toArray ? (i = this.BindingType.HasFromToArray,
                                                this.resolvedProperty = s) : Array.isArray(s) ? (i = this.BindingType.EntireArray,
                                                this.resolvedProperty = s) : this.propertyName = n;
                                        this.getValue = this.GetterByBindingType[i],
                                            this.setValue = this.SetterByBindingTypeAndVersioning[i][e]
                                    } else
                                        e.nodeName
                                }
                            }
                            unbind() {
                                this.node = null,
                                    this.getValue = this._getValue_unbound,
                                    this.setValue = this._setValue_unbound
                            }
                        }
                        op.Composite = class {
                            constructor(t, e, i) {
                                i = i || op.parseTrackName(e),
                                    this._targetGroup = t,
                                    this._bindings = t.subscribe_(e, i)
                            }
                            getValue(t, e) {
                                this.bind();
                                const i = this._targetGroup.nCachedObjects_
                                    , n = this._bindings[i];
                                void 0 !== n && n.getValue(t, e)
                            }
                            setValue(t, e) {
                                const i = this._bindings;
                                for (let n = this._targetGroup.nCachedObjects_, r = i.length; n !== r; ++n)
                                    i[n].setValue(t, e)
                            }
                            bind() {
                                const t = this._bindings;
                                for (let e = this._targetGroup.nCachedObjects_, i = t.length; e !== i; ++e)
                                    t[e].bind()
                            }
                            unbind() {
                                const t = this._bindings;
                                for (let e = this._targetGroup.nCachedObjects_, i = t.length; e !== i; ++e)
                                    t[e].unbind()
                            }
                        }
                            ,
                            op.prototype.BindingType = {
                                Direct: 0,
                                EntireArray: 1,
                                ArrayElement: 2,
                                HasFromToArray: 3
                            },
                            op.prototype.Versioning = {
                                None: 0,
                                NeedsUpdate: 1,
                                MatrixWorldNeedsUpdate: 2
                            },
                            op.prototype.GetterByBindingType = [op.prototype._getValue_direct, op.prototype._getValue_array, op.prototype._getValue_arrayElement, op.prototype._getValue_toArray],
                            op.prototype.SetterByBindingTypeAndVersioning = [[op.prototype._setValue_direct, op.prototype._setValue_direct_setNeedsUpdate, op.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [op.prototype._setValue_array, op.prototype._setValue_array_setNeedsUpdate, op.prototype._setValue_array_setMatrixWorldNeedsUpdate], [op.prototype._setValue_arrayElement, op.prototype._setValue_arrayElement_setNeedsUpdate, op.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [op.prototype._setValue_fromArray, op.prototype._setValue_fromArray_setNeedsUpdate, op.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];
                        class hp {
                            constructor() {
                                this.uuid = fn(),
                                    this._objects = Array.prototype.slice.call(arguments),
                                    this.nCachedObjects_ = 0;
                                const t = {};
                                this._indicesByUUID = t;
                                for (let e = 0, i = arguments.length; e !== i; ++e)
                                    t[arguments[e].uuid] = e;
                                this._paths = [],
                                    this._parsedPaths = [],
                                    this._bindings = [],
                                    this._bindingsIndicesByPath = {};
                                const e = this;
                                this.stats = {
                                    objects: {
                                        get total() {
                                            return e._objects.length
                                        },
                                        get inUse() {
                                            return this.total - e.nCachedObjects_
                                        }
                                    },
                                    get bindingsPerObject() {
                                        return e._bindings.length
                                    }
                                }
                            }
                            add() {
                                const t = this._objects
                                    , e = this._indicesByUUID
                                    , i = this._paths
                                    , n = this._parsedPaths
                                    , r = this._bindings
                                    , s = r.length;
                                let a, o = t.length, h = this.nCachedObjects_;
                                for (let p = 0, f = arguments.length; p !== f; ++p) {
                                    var l = arguments[p]
                                        , u = l.uuid;
                                    let f = e[u];
                                    if (void 0 === f) {
                                        f = o++,
                                            e[u] = f,
                                            t.push(l);
                                        for (let t = 0, e = s; t !== e; ++t)
                                            r[t].push(new op(l,i[t],n[t]))
                                    } else if (f < h) {
                                        a = t[f];
                                        var c = --h
                                            , d = t[c];
                                        e[d.uuid] = f,
                                            t[f] = d,
                                            e[u] = c,
                                            t[c] = l;
                                        for (let t = 0, e = s; t !== e; ++t) {
                                            const e = r[t]
                                                , s = e[c];
                                            let a = e[f];
                                            e[f] = s,
                                            void 0 === a && (a = new op(l,i[t],n[t])),
                                                e[c] = a
                                        }
                                    } else
                                        t[f]
                                }
                                this.nCachedObjects_ = h
                            }
                            remove() {
                                const t = this._objects
                                    , e = this._indicesByUUID
                                    , i = this._bindings
                                    , n = i.length;
                                let r = this.nCachedObjects_;
                                for (let u = 0, c = arguments.length; u !== c; ++u) {
                                    var s = arguments[u]
                                        , a = s.uuid
                                        , o = e[a];
                                    if (void 0 !== o && o >= r) {
                                        var h = r++
                                            , l = t[h];
                                        e[l.uuid] = o,
                                            t[o] = l,
                                            e[a] = h,
                                            t[h] = s;
                                        for (let t = 0, e = n; t !== e; ++t) {
                                            const e = i[t]
                                                , n = e[h]
                                                , r = e[o];
                                            e[o] = n,
                                                e[h] = r
                                        }
                                    }
                                }
                                this.nCachedObjects_ = r
                            }
                            uncache() {
                                const t = this._objects
                                    , e = this._indicesByUUID
                                    , i = this._bindings
                                    , n = i.length;
                                let r = this.nCachedObjects_
                                    , s = t.length;
                                for (let d = 0, p = arguments.length; d !== p; ++d) {
                                    var a = arguments[d].uuid
                                        , o = e[a];
                                    if (void 0 !== o)
                                        if (delete e[a],
                                        o < r) {
                                            var h = --r
                                                , l = (a = t[h],
                                                --s)
                                                , u = t[l];
                                            e[a.uuid] = o,
                                                t[o] = a,
                                                e[u.uuid] = h,
                                                t[h] = u,
                                                t.pop();
                                            for (let t = 0, e = n; t !== e; ++t) {
                                                const e = i[t]
                                                    , n = e[h]
                                                    , r = e[l];
                                                e[o] = n,
                                                    e[h] = r,
                                                    e.pop()
                                            }
                                        } else {
                                            var c = --s;
                                            u = t[c];
                                            0 < c && (e[u.uuid] = o),
                                                t[o] = u,
                                                t.pop();
                                            for (let t = 0, e = n; t !== e; ++t) {
                                                const e = i[t];
                                                e[o] = e[c],
                                                    e.pop()
                                            }
                                        }
                                }
                                this.nCachedObjects_ = r
                            }
                            subscribe_(t, e) {
                                const i = this._bindingsIndicesByPath;
                                let n = i[t];
                                const r = this._bindings;
                                if (void 0 !== n)
                                    return r[n];
                                const s = this._paths
                                    , a = this._parsedPaths
                                    , o = this._objects
                                    , h = o.length
                                    , l = this.nCachedObjects_
                                    , u = new Array(h);
                                n = r.length,
                                    i[t] = n,
                                    s.push(t),
                                    a.push(e),
                                    r.push(u);
                                for (let i = l, n = o.length; i !== n; ++i) {
                                    var c = o[i];
                                    u[i] = new op(c,t,e)
                                }
                                return u
                            }
                            unsubscribe_(t) {
                                const e = this._bindingsIndicesByPath
                                    , i = e[t];
                                if (void 0 !== i) {
                                    const n = this._paths
                                        , r = this._parsedPaths
                                        , s = this._bindings
                                        , a = s.length - 1
                                        , o = s[a];
                                    e[t[a]] = i,
                                        s[i] = o,
                                        s.pop(),
                                        r[i] = r[a],
                                        r.pop(),
                                        n[i] = n[a],
                                        n.pop()
                                }
                            }
                        }
                        hp.prototype.isAnimationObjectGroup = !0;
                        class lp {
                            constructor(t, e, i=null, n=e.blendMode) {
                                this._mixer = t,
                                    this._clip = e,
                                    this._localRoot = i,
                                    this.blendMode = n;
                                const r = e.tracks
                                    , s = r.length
                                    , a = new Array(s);
                                var o = {
                                    endingStart: bi,
                                    endingEnd: bi
                                };
                                for (let t = 0; t !== s; ++t) {
                                    const e = r[t].createInterpolant(null);
                                    a[t] = e,
                                        e.settings = o
                                }
                                this._interpolantSettings = o,
                                    this._interpolants = a,
                                    this._propertyBindings = new Array(s),
                                    this._cacheIndex = null,
                                    this._byClipCacheIndex = null,
                                    this._timeScaleInterpolant = null,
                                    this._weightInterpolant = null,
                                    this.loop = gi,
                                    this._loopCount = -1,
                                    this._startTime = null,
                                    this.time = 0,
                                    this.timeScale = 1,
                                    this._effectiveTimeScale = 1,
                                    this.weight = 1,
                                    this._effectiveWeight = 1,
                                    this.repetitions = 1 / 0,
                                    this.paused = !1,
                                    this.enabled = !0,
                                    this.clampWhenFinished = !1,
                                    this.zeroSlopeAtStart = !0,
                                    this.zeroSlopeAtEnd = !0
                            }
                            play() {
                                return this._mixer._activateAction(this),
                                    this
                            }
                            stop() {
                                return this._mixer._deactivateAction(this),
                                    this.reset()
                            }
                            reset() {
                                return this.paused = !1,
                                    this.enabled = !0,
                                    this.time = 0,
                                    this._loopCount = -1,
                                    this._startTime = null,
                                    this.stopFading().stopWarping()
                            }
                            isRunning() {
                                return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this)
                            }
                            isScheduled() {
                                return this._mixer._isActiveAction(this)
                            }
                            startAt(t) {
                                return this._startTime = t,
                                    this
                            }
                            setLoop(t, e) {
                                return this.loop = t,
                                    this.repetitions = e,
                                    this
                            }
                            setEffectiveWeight(t) {
                                return this.weight = t,
                                    this._effectiveWeight = this.enabled ? t : 0,
                                    this.stopFading()
                            }
                            getEffectiveWeight() {
                                return this._effectiveWeight
                            }
                            fadeIn(t) {
                                return this._scheduleFading(t, 0, 1)
                            }
                            fadeOut(t) {
                                return this._scheduleFading(t, 1, 0)
                            }
                            crossFadeFrom(t, e, i) {
                                var n, r;
                                return t.fadeOut(e),
                                    this.fadeIn(e),
                                i && (i = (n = this._clip.duration) / (r = t._clip.duration),
                                    t.warp(1, r / n, e),
                                    this.warp(i, 1, e)),
                                    this
                            }
                            crossFadeTo(t, e, i) {
                                return t.crossFadeFrom(this, e, i)
                            }
                            stopFading() {
                                var t = this._weightInterpolant;
                                return null !== t && (this._weightInterpolant = null,
                                    this._mixer._takeBackControlInterpolant(t)),
                                    this
                            }
                            setEffectiveTimeScale(t) {
                                return this.timeScale = t,
                                    this._effectiveTimeScale = this.paused ? 0 : t,
                                    this.stopWarping()
                            }
                            getEffectiveTimeScale() {
                                return this._effectiveTimeScale
                            }
                            setDuration(t) {
                                return this.timeScale = this._clip.duration / t,
                                    this.stopWarping()
                            }
                            syncWith(t) {
                                return this.time = t.time,
                                    this.timeScale = t.timeScale,
                                    this.stopWarping()
                            }
                            halt(t) {
                                return this.warp(this._effectiveTimeScale, 0, t)
                            }
                            warp(t, e, i) {
                                const n = this._mixer
                                    , r = n.time
                                    , s = this.timeScale;
                                let a = this._timeScaleInterpolant;
                                null === a && (a = n._lendControlInterpolant(),
                                    this._timeScaleInterpolant = a);
                                const o = a.parameterPositions
                                    , h = a.sampleValues;
                                return o[0] = r,
                                    o[1] = r + i,
                                    h[0] = t / s,
                                    h[1] = e / s,
                                    this
                            }
                            stopWarping() {
                                var t = this._timeScaleInterpolant;
                                return null !== t && (this._timeScaleInterpolant = null,
                                    this._mixer._takeBackControlInterpolant(t)),
                                    this
                            }
                            getMixer() {
                                return this._mixer
                            }
                            getClip() {
                                return this._clip
                            }
                            getRoot() {
                                return this._localRoot || this._mixer._root
                            }
                            _update(t, e, i, n) {
                                if (this.enabled) {
                                    var r = this._startTime;
                                    if (null !== r) {
                                        if ((r = (t - r) * i) < 0 || 0 === i)
                                            return;
                                        this._startTime = null,
                                            e = i * r
                                    }
                                    e *= this._updateTimeScale(t);
                                    var s = this._updateTime(e)
                                        , a = this._updateWeight(t);
                                    if (0 < a) {
                                        const t = this._interpolants
                                            , e = this._propertyBindings;
                                        if (this.blendMode === Ci)
                                            for (let i = 0, n = t.length; i !== n; ++i)
                                                t[i].evaluate(s),
                                                    e[i].accumulateAdditive(a);
                                        else
                                            for (let i = 0, r = t.length; i !== r; ++i)
                                                t[i].evaluate(s),
                                                    e[i].accumulate(n, a)
                                    }
                                } else
                                    this._updateWeight(t)
                            }
                            _updateWeight(t) {
                                let e = 0;
                                if (this.enabled) {
                                    e = this.weight;
                                    const n = this._weightInterpolant;
                                    var i;
                                    null !== n && (i = n.evaluate(t)[0],
                                        e *= i,
                                    t > n.parameterPositions[1] && (this.stopFading(),
                                    0 === i && (this.enabled = !1)))
                                }
                                return this._effectiveWeight = e,
                                    e
                            }
                            _updateTimeScale(t) {
                                let e = 0;
                                if (!this.paused) {
                                    e = this.timeScale;
                                    const n = this._timeScaleInterpolant;
                                    var i;
                                    null !== n && (i = n.evaluate(t)[0],
                                        e *= i,
                                    t > n.parameterPositions[1] && (this.stopWarping(),
                                        0 === e ? this.paused = !0 : this.timeScale = e))
                                }
                                return this._effectiveTimeScale = e,
                                    e
                            }
                            _updateTime(t) {
                                var e = this._clip.duration
                                    , i = this.loop;
                                let n = this.time + t
                                    , r = this._loopCount;
                                var s, a = i === vi;
                                if (0 === t)
                                    return -1 !== r && a && 1 == (1 & r) ? e - n : n;
                                if (i === mi) {
                                    -1 === r && (this._loopCount = 0,
                                        this._setEndings(!0, !0, !1));
                                    t: {
                                        if (n >= e)
                                            n = e;
                                        else {
                                            if (!(n < 0)) {
                                                this.time = n;
                                                break t
                                            }
                                            n = 0
                                        }
                                        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1,
                                            this.time = n,
                                            this._mixer.dispatchEvent({
                                                type: "finished",
                                                action: this,
                                                direction: t < 0 ? -1 : 1
                                            })
                                    }
                                } else if (-1 === r && (0 <= t ? (r = 0,
                                    this._setEndings(!0, 0 === this.repetitions, a)) : this._setEndings(0 === this.repetitions, !0, a)),
                                    n >= e || n < 0 ? (n -= e * (s = Math.floor(n / e)),
                                        r += Math.abs(s),
                                        (i = this.repetitions - r) <= 0 ? (this.clampWhenFinished ? this.paused = !0 : this.enabled = !1,
                                            n = 0 < t ? e : 0,
                                            this.time = n,
                                            this._mixer.dispatchEvent({
                                                type: "finished",
                                                action: this,
                                                direction: 0 < t ? 1 : -1
                                            })) : (1 == i ? this._setEndings(i = t < 0, !i, a) : this._setEndings(!1, !1, a),
                                            this._loopCount = r,
                                            this.time = n,
                                            this._mixer.dispatchEvent({
                                                type: "loop",
                                                action: this,
                                                loopDelta: s
                                            }))) : this.time = n,
                                a && 1 == (1 & r))
                                    return e - n;
                                return n
                            }
                            _setEndings(t, e, i) {
                                const n = this._interpolantSettings;
                                i ? (n.endingStart = wi,
                                    n.endingEnd = wi) : (n.endingStart = t ? this.zeroSlopeAtStart ? wi : bi : Si,
                                    n.endingEnd = e ? this.zeroSlopeAtEnd ? wi : bi : Si)
                            }
                            _scheduleFading(t, e, i) {
                                const n = this._mixer
                                    , r = n.time;
                                let s = this._weightInterpolant;
                                null === s && (s = n._lendControlInterpolant(),
                                    this._weightInterpolant = s);
                                const a = s.parameterPositions
                                    , o = s.sampleValues;
                                return a[0] = r,
                                    o[0] = e,
                                    a[1] = r + t,
                                    o[1] = i,
                                    this
                            }
                        }
                        class up extends ln {
                            constructor(t) {
                                super(),
                                    this._root = t,
                                    this._initMemoryManager(),
                                    this._accuIndex = 0,
                                    this.time = 0,
                                    this.timeScale = 1
                            }
                            _bindAction(t, e) {
                                const i = t._localRoot || this._root
                                    , n = t._clip.tracks
                                    , r = n.length
                                    , s = t._propertyBindings
                                    , a = t._interpolants
                                    , o = i.uuid
                                    , h = this._bindingsByRootAndName;
                                let l = h[o];
                                void 0 === l && (l = {},
                                    h[o] = l);
                                for (let t = 0; t !== r; ++t) {
                                    const r = n[t]
                                        , h = r.name;
                                    let c = l[h];
                                    if (void 0 !== c)
                                        s[t] = c;
                                    else {
                                        if (c = s[t],
                                        void 0 !== c) {
                                            null === c._cacheIndex && (++c.referenceCount,
                                                this._addInactiveBinding(c, o, h));
                                            continue
                                        }
                                        var u = e && e._propertyBindings[t].binding.parsedPath;
                                        c = new np(op.create(i, h, u),r.ValueTypeName,r.getValueSize()),
                                            ++c.referenceCount,
                                            this._addInactiveBinding(c, o, h),
                                            s[t] = c
                                    }
                                    a[t].resultBuffer = c.buffer
                                }
                            }
                            _activateAction(t) {
                                if (!this._isActiveAction(t)) {
                                    var e, i, n;
                                    null === t._cacheIndex && (e = (t._localRoot || this._root).uuid,
                                        i = t._clip.uuid,
                                        n = this._actionsByClip[i],
                                        this._bindAction(t, n && n.knownActions[0]),
                                        this._addInactiveAction(t, i, e));
                                    var r = t._propertyBindings;
                                    for (let t = 0, e = r.length; t !== e; ++t) {
                                        const e = r[t];
                                        0 == e.useCount++ && (this._lendBinding(e),
                                            e.saveOriginalState())
                                    }
                                    this._lendAction(t)
                                }
                            }
                            _deactivateAction(t) {
                                if (this._isActiveAction(t)) {
                                    var e = t._propertyBindings;
                                    for (let t = 0, i = e.length; t !== i; ++t) {
                                        const i = e[t];
                                        0 == --i.useCount && (i.restoreOriginalState(),
                                            this._takeBackBinding(i))
                                    }
                                    this._takeBackAction(t)
                                }
                            }
                            _initMemoryManager() {
                                this._actions = [],
                                    this._nActiveActions = 0,
                                    this._actionsByClip = {},
                                    this._bindings = [],
                                    this._nActiveBindings = 0,
                                    this._bindingsByRootAndName = {},
                                    this._controlInterpolants = [],
                                    this._nActiveControlInterpolants = 0;
                                const t = this;
                                this.stats = {
                                    actions: {
                                        get total() {
                                            return t._actions.length
                                        },
                                        get inUse() {
                                            return t._nActiveActions
                                        }
                                    },
                                    bindings: {
                                        get total() {
                                            return t._bindings.length
                                        },
                                        get inUse() {
                                            return t._nActiveBindings
                                        }
                                    },
                                    controlInterpolants: {
                                        get total() {
                                            return t._controlInterpolants.length
                                        },
                                        get inUse() {
                                            return t._nActiveControlInterpolants
                                        }
                                    }
                                }
                            }
                            _isActiveAction(t) {
                                return null !== (t = t._cacheIndex) && t < this._nActiveActions
                            }
                            _addInactiveAction(t, e, i) {
                                const n = this._actions
                                    , r = this._actionsByClip;
                                let s = r[e];
                                if (void 0 === s)
                                    s = {
                                        knownActions: [t],
                                        actionByRoot: {}
                                    },
                                        t._byClipCacheIndex = 0,
                                        r[e] = s;
                                else {
                                    const e = s.knownActions;
                                    t._byClipCacheIndex = e.length,
                                        e.push(t)
                                }
                                t._cacheIndex = n.length,
                                    n.push(t),
                                    s.actionByRoot[i] = t
                            }
                            _removeInactiveAction(t) {
                                const e = this._actions
                                    , i = e[e.length - 1]
                                    , n = t._cacheIndex;
                                i._cacheIndex = n,
                                    e[n] = i,
                                    e.pop(),
                                    t._cacheIndex = null;
                                const r = t._clip.uuid
                                    , s = this._actionsByClip
                                    , a = s[r]
                                    , o = a.knownActions
                                    , h = o[o.length - 1]
                                    , l = t._byClipCacheIndex;
                                h._byClipCacheIndex = l,
                                    o[l] = h,
                                    o.pop(),
                                    t._byClipCacheIndex = null;
                                delete a.actionByRoot[(t._localRoot || this._root).uuid],
                                0 === o.length && delete s[r],
                                    this._removeInactiveBindingsForAction(t)
                            }
                            _removeInactiveBindingsForAction(t) {
                                var e = t._propertyBindings;
                                for (let t = 0, i = e.length; t !== i; ++t) {
                                    const i = e[t];
                                    0 == --i.referenceCount && this._removeInactiveBinding(i)
                                }
                            }
                            _lendAction(t) {
                                const e = this._actions
                                    , i = t._cacheIndex
                                    , n = this._nActiveActions++
                                    , r = e[n];
                                t._cacheIndex = n,
                                    e[n] = t,
                                    r._cacheIndex = i,
                                    e[i] = r
                            }
                            _takeBackAction(t) {
                                const e = this._actions
                                    , i = t._cacheIndex
                                    , n = --this._nActiveActions
                                    , r = e[n];
                                t._cacheIndex = n,
                                    e[n] = t,
                                    r._cacheIndex = i,
                                    e[i] = r
                            }
                            _addInactiveBinding(t, e, i) {
                                const n = this._bindingsByRootAndName
                                    , r = this._bindings;
                                let s = n[e];
                                void 0 === s && (s = {},
                                    n[e] = s),
                                    (s[i] = t)._cacheIndex = r.length,
                                    r.push(t)
                            }
                            _removeInactiveBinding(t) {
                                const e = this._bindings
                                    , i = t.binding
                                    , n = i.rootNode.uuid
                                    , r = i.path
                                    , s = this._bindingsByRootAndName
                                    , a = s[n]
                                    , o = e[e.length - 1]
                                    , h = t._cacheIndex;
                                o._cacheIndex = h,
                                    e[h] = o,
                                    e.pop(),
                                    delete a[r],
                                0 === Object.keys(a).length && delete s[n]
                            }
                            _lendBinding(t) {
                                const e = this._bindings
                                    , i = t._cacheIndex
                                    , n = this._nActiveBindings++
                                    , r = e[n];
                                t._cacheIndex = n,
                                    e[n] = t,
                                    r._cacheIndex = i,
                                    e[i] = r
                            }
                            _takeBackBinding(t) {
                                const e = this._bindings
                                    , i = t._cacheIndex
                                    , n = --this._nActiveBindings
                                    , r = e[n];
                                t._cacheIndex = n,
                                    e[n] = t,
                                    r._cacheIndex = i,
                                    e[i] = r
                            }
                            _lendControlInterpolant() {
                                const t = this._controlInterpolants
                                    , e = this._nActiveControlInterpolants++;
                                let i = t[e];
                                return void 0 === i && (i = new Rc(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),
                                    i.__cacheIndex = e,
                                    t[e] = i),
                                    i
                            }
                            _takeBackControlInterpolant(t) {
                                const e = this._controlInterpolants
                                    , i = t.__cacheIndex
                                    , n = --this._nActiveControlInterpolants
                                    , r = e[n];
                                t.__cacheIndex = n,
                                    e[n] = t,
                                    r.__cacheIndex = i,
                                    e[i] = r
                            }
                            clipAction(t, e, i) {
                                var n = (a = e || this._root).uuid;
                                let r = "string" == typeof t ? Xc.findByName(a, t) : t;
                                var s = null !== r ? r.uuid : t
                                    , a = this._actionsByClip[s];
                                let o = null;
                                if (void 0 === i && (i = null !== r ? r.blendMode : Mi),
                                void 0 !== a) {
                                    if (void 0 !== (t = a.actionByRoot[n]) && t.blendMode === i)
                                        return t;
                                    o = a.knownActions[0],
                                    null === r && (r = o._clip)
                                }
                                return null === r ? null : (i = new lp(this,r,e,i),
                                    this._bindAction(i, o),
                                    this._addInactiveAction(i, s, n),
                                    i)
                            }
                            existingAction(t, e) {
                                var i;
                                e = (i = e || this._root).uuid,
                                    t = (i = "string" == typeof t ? Xc.findByName(i, t) : t) ? i.uuid : t;
                                return void 0 !== (t = this._actionsByClip[t]) && t.actionByRoot[e] || null
                            }
                            stopAllAction() {
                                const t = this._actions;
                                for (let e = this._nActiveActions - 1; 0 <= e; --e)
                                    t[e].stop();
                                return this
                            }
                            update(t) {
                                t *= this.timeScale;
                                var e = this._actions
                                    , i = this._nActiveActions
                                    , n = this.time += t
                                    , r = Math.sign(t)
                                    , s = this._accuIndex ^= 1;
                                for (let a = 0; a !== i; ++a) {
                                    e[a]._update(n, t, r, s)
                                }
                                const a = this._bindings
                                    , o = this._nActiveBindings;
                                for (let t = 0; t !== o; ++t)
                                    a[t].apply(s);
                                return this
                            }
                            setTime(t) {
                                for (let t = this.time = 0; t < this._actions.length; t++)
                                    this._actions[t].time = 0;
                                return this.update(t)
                            }
                            getRoot() {
                                return this._root
                            }
                            uncacheClip(t) {
                                const e = this._actions
                                    , i = t.uuid
                                    , n = this._actionsByClip
                                    , r = n[i];
                                if (void 0 !== r) {
                                    var s = r.knownActions;
                                    for (let t = 0, i = s.length; t !== i; ++t) {
                                        const i = s[t];
                                        this._deactivateAction(i);
                                        const n = i._cacheIndex
                                            , r = e[e.length - 1];
                                        i._cacheIndex = null,
                                            i._byClipCacheIndex = null,
                                            r._cacheIndex = n,
                                            e[n] = r,
                                            e.pop(),
                                            this._removeInactiveBindingsForAction(i)
                                    }
                                    delete n[i]
                                }
                            }
                            uncacheRoot(t) {
                                var e = t.uuid
                                    , i = this._actionsByClip;
                                for (const t in i) {
                                    var n = i[t].actionByRoot[e];
                                    void 0 !== n && (this._deactivateAction(n),
                                        this._removeInactiveAction(n))
                                }
                                var r = this._bindingsByRootAndName[e];
                                if (void 0 !== r)
                                    for (const t in r) {
                                        const e = r[t];
                                        e.restoreOriginalState(),
                                            this._removeInactiveBinding(e)
                                    }
                            }
                            uncacheAction(t, e) {
                                null !== (e = this.existingAction(t, e)) && (this._deactivateAction(e),
                                    this._removeInactiveAction(e))
                            }
                        }
                        up.prototype._controlInterpolantsResultBuffer = new Float32Array(1);
                        class cp {
                            constructor(t) {
                                this.value = t = "string" == typeof t ? arguments[1] : t
                            }
                            clone() {
                                return new cp(void 0 === this.value.clone ? this.value : this.value.clone())
                            }
                        }
                        class dp extends il {
                            constructor(t, e, i=1) {
                                super(t, e),
                                    this.meshPerAttribute = i
                            }
                            copy(t) {
                                return super.copy(t),
                                    this.meshPerAttribute = t.meshPerAttribute,
                                    this
                            }
                            clone(t) {
                                const e = super.clone(t);
                                return e.meshPerAttribute = this.meshPerAttribute,
                                    e
                            }
                            toJSON(t) {
                                const e = super.toJSON(t);
                                return e.isInstancedInterleavedBuffer = !0,
                                    e.meshPerAttribute = this.meshPerAttribute,
                                    e
                            }
                        }
                        dp.prototype.isInstancedInterleavedBuffer = !0;
                        class pp {
                            constructor(t, e, i, n, r) {
                                this.buffer = t,
                                    this.type = e,
                                    this.itemSize = i,
                                    this.elementSize = n,
                                    this.count = r,
                                    this.version = 0
                            }
                            set needsUpdate(t) {
                                !0 === t && this.version++
                            }
                            setBuffer(t) {
                                return this.buffer = t,
                                    this
                            }
                            setType(t, e) {
                                return this.type = t,
                                    this.elementSize = e,
                                    this
                            }
                            setItemSize(t) {
                                return this.itemSize = t,
                                    this
                            }
                            setCount(t) {
                                return this.count = t,
                                    this
                            }
                        }
                        pp.prototype.isGLBufferAttribute = !0;
                        class fp {
                            constructor(t, e, i=0, n=1 / 0) {
                                this.ray = new fr(t,e),
                                    this.near = i,
                                    this.far = n,
                                    this.camera = null,
                                    this.layers = new Ar,
                                    this.params = {
                                        Mesh: {},
                                        Line: {
                                            threshold: 1
                                        },
                                        LOD: {},
                                        Points: {
                                            threshold: 1
                                        },
                                        Sprite: {}
                                    }
                            }
                            set(t, e) {
                                this.ray.set(t, e)
                            }
                            setFromCamera(t, e) {
                                e && e.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(e.matrixWorld),
                                    this.ray.direction.set(t.x, t.y, .5).unproject(e).sub(this.ray.origin).normalize(),
                                    this.camera = e) : e && e.isOrthographicCamera && (this.ray.origin.set(t.x, t.y, (e.near + e.far) / (e.near - e.far)).unproject(e),
                                    this.ray.direction.set(0, 0, -1).transformDirection(e.matrixWorld),
                                    this.camera = e)
                            }
                            intersectObject(t, e=!0, i=[]) {
                                return gp(t, this, i, e),
                                    i.sort(mp),
                                    i
                            }
                            intersectObjects(t, e=!0, i=[]) {
                                for (let n = 0, r = t.length; n < r; n++)
                                    gp(t[n], this, i, e);
                                return i.sort(mp),
                                    i
                            }
                        }
                        function mp(t, e) {
                            return t.distance - e.distance
                        }
                        function gp(t, e, i, n) {
                            if (t.layers.test(e.layers) && t.raycast(e, i),
                            !0 === n) {
                                var r = t.children;
                                for (let t = 0, n = r.length; t < n; t++)
                                    gp(r[t], e, i, !0)
                            }
                        }
                        class vp {
                            constructor(t=1, e=0, i=0) {
                                return this.radius = t,
                                    this.phi = e,
                                    this.theta = i,
                                    this
                            }
                            set(t, e, i) {
                                return this.radius = t,
                                    this.phi = e,
                                    this.theta = i,
                                    this
                            }
                            copy(t) {
                                return this.radius = t.radius,
                                    this.phi = t.phi,
                                    this.theta = t.theta,
                                    this
                            }
                            makeSafe() {
                                return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)),
                                    this
                            }
                            setFromVector3(t) {
                                return this.setFromCartesianCoords(t.x, t.y, t.z)
                            }
                            setFromCartesianCoords(t, e, i) {
                                return this.radius = Math.sqrt(t * t + e * e + i * i),
                                    0 === this.radius ? (this.theta = 0,
                                        this.phi = 0) : (this.theta = Math.atan2(t, i),
                                        this.phi = Math.acos(mn(e / this.radius, -1, 1))),
                                    this
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                        }
                        class _p {
                            constructor(t=1, e=0, i=0) {
                                return this.radius = t,
                                    this.theta = e,
                                    this.y = i,
                                    this
                            }
                            set(t, e, i) {
                                return this.radius = t,
                                    this.theta = e,
                                    this.y = i,
                                    this
                            }
                            copy(t) {
                                return this.radius = t.radius,
                                    this.theta = t.theta,
                                    this.y = t.y,
                                    this
                            }
                            setFromVector3(t) {
                                return this.setFromCartesianCoords(t.x, t.y, t.z)
                            }
                            setFromCartesianCoords(t, e, i) {
                                return this.radius = Math.sqrt(t * t + i * i),
                                    this.theta = Math.atan2(t, i),
                                    this.y = e,
                                    this
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                        }
                        const yp = new wn;
                        class xp {
                            constructor(t=new wn(1 / 0,1 / 0), e=new wn(-1 / 0,-1 / 0)) {
                                this.min = t,
                                    this.max = e
                            }
                            set(t, e) {
                                return this.min.copy(t),
                                    this.max.copy(e),
                                    this
                            }
                            setFromPoints(t) {
                                this.makeEmpty();
                                for (let e = 0, i = t.length; e < i; e++)
                                    this.expandByPoint(t[e]);
                                return this
                            }
                            setFromCenterAndSize(t, e) {
                                return e = yp.copy(e).multiplyScalar(.5),
                                    this.min.copy(t).sub(e),
                                    this.max.copy(t).add(e),
                                    this
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                            copy(t) {
                                return this.min.copy(t.min),
                                    this.max.copy(t.max),
                                    this
                            }
                            makeEmpty() {
                                return this.min.x = this.min.y = 1 / 0,
                                    this.max.x = this.max.y = -1 / 0,
                                    this
                            }
                            isEmpty() {
                                return this.max.x < this.min.x || this.max.y < this.min.y
                            }
                            getCenter(t) {
                                return this.isEmpty() ? t.set(0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5)
                            }
                            getSize(t) {
                                return this.isEmpty() ? t.set(0, 0) : t.subVectors(this.max, this.min)
                            }
                            expandByPoint(t) {
                                return this.min.min(t),
                                    this.max.max(t),
                                    this
                            }
                            expandByVector(t) {
                                return this.min.sub(t),
                                    this.max.add(t),
                                    this
                            }
                            expandByScalar(t) {
                                return this.min.addScalar(-t),
                                    this.max.addScalar(t),
                                    this
                            }
                            containsPoint(t) {
                                return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y)
                            }
                            containsBox(t) {
                                return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y
                            }
                            getParameter(t, e) {
                                return e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y))
                            }
                            intersectsBox(t) {
                                return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y)
                            }
                            clampPoint(t, e) {
                                return e.copy(t).clamp(this.min, this.max)
                            }
                            distanceToPoint(t) {
                                return yp.copy(t).clamp(this.min, this.max).sub(t).length()
                            }
                            intersect(t) {
                                return this.min.max(t.min),
                                    this.max.min(t.max),
                                    this
                            }
                            union(t) {
                                return this.min.min(t.min),
                                    this.max.max(t.max),
                                    this
                            }
                            translate(t) {
                                return this.min.add(t),
                                    this.max.add(t),
                                    this
                            }
                            equals(t) {
                                return t.min.equals(this.min) && t.max.equals(this.max)
                            }
                        }
                        xp.prototype.isBox2 = !0;
                        const bp = new Fn
                            , wp = new Fn;
                        class Sp {
                            constructor(t=new Fn, e=new Fn) {
                                this.start = t,
                                    this.end = e
                            }
                            set(t, e) {
                                return this.start.copy(t),
                                    this.end.copy(e),
                                    this
                            }
                            copy(t) {
                                return this.start.copy(t.start),
                                    this.end.copy(t.end),
                                    this
                            }
                            getCenter(t) {
                                return t.addVectors(this.start, this.end).multiplyScalar(.5)
                            }
                            delta(t) {
                                return t.subVectors(this.end, this.start)
                            }
                            distanceSq() {
                                return this.start.distanceToSquared(this.end)
                            }
                            distance() {
                                return this.start.distanceTo(this.end)
                            }
                            at(t, e) {
                                return this.delta(e).multiplyScalar(t).add(this.start)
                            }
                            closestPointToPointParameter(t, e) {
                                bp.subVectors(t, this.start),
                                    wp.subVectors(this.end, this.start),
                                    t = wp.dot(wp);
                                let i = wp.dot(bp) / t;
                                return e && (i = mn(i, 0, 1)),
                                    i
                            }
                            closestPointToPoint(t, e, i) {
                                return e = this.closestPointToPointParameter(t, e),
                                    this.delta(i).multiplyScalar(e).add(this.start)
                            }
                            applyMatrix4(t) {
                                return this.start.applyMatrix4(t),
                                    this.end.applyMatrix4(t),
                                    this
                            }
                            equals(t) {
                                return t.start.equals(this.start) && t.end.equals(this.end)
                            }
                            clone() {
                                return (new this.constructor).copy(this)
                            }
                        }
                        const Mp = new Fn;
                        class Cp extends Vr {
                            constructor(t, e) {
                                super(),
                                    this.light = t,
                                    this.light.updateMatrixWorld(),
                                    this.matrix = t.matrixWorld,
                                    this.matrixAutoUpdate = !1,
                                    this.color = e;
                                const i = new Ps
                                    , n = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];
                                for (let t = 0, e = 1; t < 32; t++,
                                    e++) {
                                    var r = t / 32 * Math.PI * 2
                                        , s = e / 32 * Math.PI * 2;
                                    n.push(Math.cos(r), Math.sin(r), 1, Math.cos(s), Math.sin(s), 1)
                                }
                                i.setAttribute("position", new ys(n,3)),
                                    e = new Ul({
                                        fog: !1,
                                        toneMapped: !1
                                    }),
                                    this.cone = new Yl(i,e),
                                    this.add(this.cone),
                                    this.update()
                            }
                            dispose() {
                                this.cone.geometry.dispose(),
                                    this.cone.material.dispose()
                            }
                            update() {
                                this.light.updateMatrixWorld();
                                var t = this.light.distance || 1e3
                                    , e = t * Math.tan(this.light.angle);
                                this.cone.scale.set(e, e, t),
                                    Mp.setFromMatrixPosition(this.light.target.matrixWorld),
                                    this.cone.lookAt(Mp),
                                    void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color)
                            }
                        }
                        const Ap = new Fn
                            , Tp = new mr
                            , Pp = new mr;
                        class Ep extends Yl {
                            constructor(t) {
                                var e = function t(e) {
                                    const i = [];
                                    e && e.isBone && i.push(e);
                                    for (let n = 0; n < e.children.length; n++)
                                        i.push.apply(i, t(e.children[n]));
                                    return i
                                }(t);
                                const i = new Ps
                                    , n = []
                                    , r = [];
                                var s = new as(0,0,1)
                                    , a = new as(0,1,0);
                                for (let t = 0; t < e.length; t++) {
                                    var o = e[t];
                                    o.parent && o.parent.isBone && (n.push(0, 0, 0),
                                        n.push(0, 0, 0),
                                        r.push(s.r, s.g, s.b),
                                        r.push(a.r, a.g, a.b))
                                }
                                i.setAttribute("position", new ys(n,3)),
                                    i.setAttribute("color", new ys(r,3)),
                                    super(i, new Ul({
                                        vertexColors: !0,
                                        depthTest: !1,
                                        depthWrite: !1,
                                        toneMapped: !1,
                                        transparent: !0
                                    })),
                                    this.type = "SkeletonHelper",
                                    this.isSkeletonHelper = !0,
                                    this.root = t,
                                    this.bones = e,
                                    this.matrix = t.matrixWorld,
                                    this.matrixAutoUpdate = !1
                            }
                            updateMatrixWorld(t) {
                                var e = this.bones;
                                const i = this.geometry
                                    , n = i.getAttribute("position");
                                Pp.copy(this.root.matrixWorld).invert();
                                for (let t = 0, i = 0; t < e.length; t++) {
                                    var r = e[t];
                                    r.parent && r.parent.isBone && (Tp.multiplyMatrices(Pp, r.matrixWorld),
                                        Ap.setFromMatrixPosition(Tp),
                                        n.setXYZ(i, Ap.x, Ap.y, Ap.z),
                                        Tp.multiplyMatrices(Pp, r.parent.matrixWorld),
                                        Ap.setFromMatrixPosition(Tp),
                                        n.setXYZ(i + 1, Ap.x, Ap.y, Ap.z),
                                        i += 2)
                                }
                                i.getAttribute("position").needsUpdate = !0,
                                    super.updateMatrixWorld(t)
                            }
                        }
                        class Lp extends qs {
                            constructor(t, e, i) {
                                super(new mc(e,4,2), new os({
                                    wireframe: !0,
                                    fog: !1,
                                    toneMapped: !1
                                })),
                                    this.light = t,
                                    this.light.updateMatrixWorld(),
                                    this.color = i,
                                    this.type = "PointLightHelper",
                                    this.matrix = this.light.matrixWorld,
                                    this.matrixAutoUpdate = !1,
                                    this.update()
                            }
                            dispose() {
                                this.geometry.dispose(),
                                    this.material.dispose()
                            }
                            update() {
                                void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color)
                            }
                        }
                        const Ip = new Fn
                            , kp = new as
                            , Np = new as;
                        class Op extends Vr {
                            constructor(t, e, i) {
                                super(),
                                    this.light = t,
                                    this.light.updateMatrixWorld(),
                                    this.matrix = t.matrixWorld,
                                    this.matrixAutoUpdate = !1,
                                    this.color = i;
                                const n = new dc(e);
                                n.rotateY(.5 * Math.PI),
                                    this.material = new os({
                                        wireframe: !0,
                                        fog: !1,
                                        toneMapped: !1
                                    }),
                                void 0 === this.color && (this.material.vertexColors = !0),
                                    e = n.getAttribute("position"),
                                    e = new Float32Array(3 * e.count),
                                    n.setAttribute("color", new us(e,3)),
                                    this.add(new qs(n,this.material)),
                                    this.update()
                            }
                            dispose() {
                                this.children[0].geometry.dispose(),
                                    this.children[0].material.dispose()
                            }
                            update() {
                                const t = this.children[0];
                                if (void 0 !== this.color)
                                    this.material.color.set(this.color);
                                else {
                                    const i = t.geometry.getAttribute("color");
                                    kp.copy(this.light.color),
                                        Np.copy(this.light.groundColor);
                                    for (let t = 0, n = i.count; t < n; t++) {
                                        var e = t < n / 2 ? kp : Np;
                                        i.setXYZ(t, e.r, e.g, e.b)
                                    }
                                    i.needsUpdate = !0
                                }
                                t.lookAt(Ip.setFromMatrixPosition(this.light.matrixWorld).negate())
                            }
                        }
                        class Dp extends Yl {
                            constructor(t=10, e=10, i=4473924, n=8947848) {
                                i = new as(i),
                                    n = new as(n);
                                var r = e / 2
                                    , s = t / e
                                    , a = t / 2;
                                const o = []
                                    , h = [];
                                for (let t = 0, l = 0, u = -a; t <= e; t++,
                                    u += s) {
                                    o.push(-a, 0, u, a, 0, u),
                                        o.push(u, 0, -a, u, 0, a);
                                    const e = t === r ? i : n;
                                    e.toArray(h, l),
                                        l += 3,
                                        e.toArray(h, l),
                                        l += 3,
                                        e.toArray(h, l),
                                        l += 3,
                                        e.toArray(h, l),
                                        l += 3
                                }
                                const l = new Ps;
                                l.setAttribute("position", new ys(o,3)),
                                    l.setAttribute("color", new ys(h,3)),
                                    super(l, t = new Ul({
                                        vertexColors: !0,
                                        toneMapped: !1
                                    })),
                                    this.type = "GridHelper"
                            }
                        }
                        class Rp extends Yl {
                            constructor(t=10, e=16, i=8, n=64, r=4473924, s=8947848) {
                                r = new as(r),
                                    s = new as(s);
                                const a = []
                                    , o = [];
                                for (let i = 0; i <= e; i++) {
                                    var h = i / e * (2 * Math.PI)
                                        , l = Math.sin(h) * t;
                                    h = Math.cos(h) * t;
                                    a.push(0, 0, 0),
                                        a.push(l, 0, h),
                                        h = 1 & i ? r : s,
                                        o.push(h.r, h.g, h.b),
                                        o.push(h.r, h.g, h.b)
                                }
                                for (let e = 0; e <= i; e++) {
                                    var u = 1 & e ? r : s
                                        , c = t - t / i * e;
                                    for (let t = 0; t < n; t++) {
                                        var d = t / n * (2 * Math.PI)
                                            , p = Math.sin(d) * c
                                            , f = Math.cos(d) * c;
                                        a.push(p, 0, f),
                                            o.push(u.r, u.g, u.b),
                                            d = (t + 1) / n * (2 * Math.PI),
                                            p = Math.sin(d) * c,
                                            f = Math.cos(d) * c,
                                            a.push(p, 0, f),
                                            o.push(u.r, u.g, u.b)
                                    }
                                }
                                const m = new Ps;
                                m.setAttribute("position", new ys(a,3)),
                                    m.setAttribute("color", new ys(o,3)),
                                    super(m, new Ul({
                                        vertexColors: !0,
                                        toneMapped: !1
                                    })),
                                    this.type = "PolarGridHelper"
                            }
                        }
                        const zp = new Fn
                            , Fp = new Fn
                            , Bp = new Fn;
                        class Vp extends Vr {
                            constructor(t, e, i) {
                                super(),
                                    this.light = t,
                                    this.light.updateMatrixWorld(),
                                    this.matrix = t.matrixWorld,
                                    this.matrixAutoUpdate = !1,
                                    this.color = i,
                                void 0 === e && (e = 1);
                                let n = new Ps;
                                n.setAttribute("position", new ys([-e, e, 0, e, e, 0, e, -e, 0, -e, -e, 0, -e, e, 0],3)),
                                    e = new Ul({
                                        fog: !1,
                                        toneMapped: !1
                                    }),
                                    this.lightPlane = new Xl(n,e),
                                    this.add(this.lightPlane),
                                    n = new Ps,
                                    n.setAttribute("position", new ys([0, 0, 0, 0, 0, 1],3)),
                                    this.targetLine = new Xl(n,e),
                                    this.add(this.targetLine),
                                    this.update()
                            }
                            dispose() {
                                this.lightPlane.geometry.dispose(),
                                    this.lightPlane.material.dispose(),
                                    this.targetLine.geometry.dispose(),
                                    this.targetLine.material.dispose()
                            }
                            update() {
                                zp.setFromMatrixPosition(this.light.matrixWorld),
                                    Fp.setFromMatrixPosition(this.light.target.matrixWorld),
                                    Bp.subVectors(Fp, zp),
                                    this.lightPlane.lookAt(Fp),
                                    void 0 !== this.color ? (this.lightPlane.material.color.set(this.color),
                                        this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color),
                                        this.targetLine.material.color.copy(this.light.color)),
                                    this.targetLine.lookAt(Fp),
                                    this.targetLine.scale.z = Bp.length()
                            }
                        }
                        const Up = new Fn
                            , Gp = new $s;
                        class Wp extends Yl {
                            constructor(t) {
                                const e = new Ps;
                                var i = new Ul({
                                    color: 16777215,
                                    vertexColors: !0,
                                    toneMapped: !1
                                });
                                const n = []
                                    , r = []
                                    , s = {};
                                var a = new as(16755200)
                                    , o = new as(16711680)
                                    , h = new as(43775)
                                    , l = new as(16777215)
                                    , u = new as(3355443);
                                function c(t, e, i) {
                                    d(t, i),
                                        d(e, i)
                                }
                                function d(t, e) {
                                    n.push(0, 0, 0),
                                        r.push(e.r, e.g, e.b),
                                    void 0 === s[t] && (s[t] = []),
                                        s[t].push(n.length / 3 - 1)
                                }
                                c("n1", "n2", a),
                                    c("n2", "n4", a),
                                    c("n4", "n3", a),
                                    c("n3", "n1", a),
                                    c("f1", "f2", a),
                                    c("f2", "f4", a),
                                    c("f4", "f3", a),
                                    c("f3", "f1", a),
                                    c("n1", "f1", a),
                                    c("n2", "f2", a),
                                    c("n3", "f3", a),
                                    c("n4", "f4", a),
                                    c("p", "n1", o),
                                    c("p", "n2", o),
                                    c("p", "n3", o),
                                    c("p", "n4", o),
                                    c("u1", "u2", h),
                                    c("u2", "u3", h),
                                    c("u3", "u1", h),
                                    c("c", "t", l),
                                    c("p", "c", u),
                                    c("cn1", "cn2", u),
                                    c("cn3", "cn4", u),
                                    c("cf1", "cf2", u),
                                    c("cf3", "cf4", u),
                                    e.setAttribute("position", new ys(n,3)),
                                    e.setAttribute("color", new ys(r,3)),
                                    super(e, i),
                                    this.type = "CameraHelper",
                                    this.camera = t,
                                this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(),
                                    this.matrix = t.matrixWorld,
                                    this.matrixAutoUpdate = !1,
                                    this.pointMap = s,
                                    this.update()
                            }
                            update() {
                                const t = this.geometry;
                                var e = this.pointMap;
                                Gp.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),
                                    jp("c", e, t, Gp, 0, 0, -1),
                                    jp("t", e, t, Gp, 0, 0, 1),
                                    jp("n1", e, t, Gp, -1, -1, -1),
                                    jp("n2", e, t, Gp, 1, -1, -1),
                                    jp("n3", e, t, Gp, -1, 1, -1),
                                    jp("n4", e, t, Gp, 1, 1, -1),
                                    jp("f1", e, t, Gp, -1, -1, 1),
                                    jp("f2", e, t, Gp, 1, -1, 1),
                                    jp("f3", e, t, Gp, -1, 1, 1),
                                    jp("f4", e, t, Gp, 1, 1, 1),
                                    jp("u1", e, t, Gp, .7, 1.1, -1),
                                    jp("u2", e, t, Gp, -.7, 1.1, -1),
                                    jp("u3", e, t, Gp, 0, 2, -1),
                                    jp("cf1", e, t, Gp, -1, 0, 1),
                                    jp("cf2", e, t, Gp, 1, 0, 1),
                                    jp("cf3", e, t, Gp, 0, -1, 1),
                                    jp("cf4", e, t, Gp, 0, 1, 1),
                                    jp("cn1", e, t, Gp, -1, 0, -1),
                                    jp("cn2", e, t, Gp, 1, 0, -1),
                                    jp("cn3", e, t, Gp, 0, -1, -1),
                                    jp("cn4", e, t, Gp, 0, 1, -1),
                                    t.getAttribute("position").needsUpdate = !0
                            }
                            dispose() {
                                this.geometry.dispose(),
                                    this.material.dispose()
                            }
                        }
                        function jp(t, e, i, n, r, s, a) {
                            Up.set(r, s, a).unproject(n);
                            var o = e[t];
                            if (void 0 !== o) {
                                const t = i.getAttribute("position");
                                for (let e = 0, i = o.length; e < i; e++)
                                    t.setXYZ(o[e], Up.x, Up.y, Up.z)
                            }
                        }
                        const Hp = new Un;
                        class qp extends Yl {
                            constructor(t, e=16776960) {
                                var i = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7])
                                    , n = new Float32Array(24);
                                const r = new Ps;
                                r.setIndex(new us(i,1)),
                                    r.setAttribute("position", new us(n,3)),
                                    super(r, new Ul({
                                        color: e,
                                        toneMapped: !1
                                    })),
                                    this.object = t,
                                    this.type = "BoxHelper",
                                    this.matrixAutoUpdate = !1,
                                    this.update()
                            }
                            update(t) {
                                if (void 0 !== this.object && Hp.setFromObject(this.object),
                                    !Hp.isEmpty()) {
                                    var e = Hp.min
                                        , i = Hp.max;
                                    const t = this.geometry.attributes.position
                                        , n = t.array;
                                    n[0] = i.x,
                                        n[1] = i.y,
                                        n[2] = i.z,
                                        n[3] = e.x,
                                        n[4] = i.y,
                                        n[5] = i.z,
                                        n[6] = e.x,
                                        n[7] = e.y,
                                        n[8] = i.z,
                                        n[9] = i.x,
                                        n[10] = e.y,
                                        n[11] = i.z,
                                        n[12] = i.x,
                                        n[13] = i.y,
                                        n[14] = e.z,
                                        n[15] = e.x,
                                        n[16] = i.y,
                                        n[17] = e.z,
                                        n[18] = e.x,
                                        n[19] = e.y,
                                        n[20] = e.z,
                                        n[21] = i.x,
                                        n[22] = e.y,
                                        n[23] = e.z,
                                        t.needsUpdate = !0,
                                        this.geometry.computeBoundingSphere()
                                }
                            }
                            setFromObject(t) {
                                return this.object = t,
                                    this.update(),
                                    this
                            }
                            copy(t) {
                                return Yl.prototype.copy.call(this, t),
                                    this.object = t.object,
                                    this
                            }
                        }
                        class Xp extends Yl {
                            constructor(t, e=16776960) {
                                var i = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
                                const n = new Ps;
                                n.setIndex(new us(i,1)),
                                    n.setAttribute("position", new ys([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1],3)),
                                    super(n, new Ul({
                                        color: e,
                                        toneMapped: !1
                                    })),
                                    this.box = t,
                                    this.type = "Box3Helper",
                                    this.geometry.computeBoundingSphere()
                            }
                            updateMatrixWorld(t) {
                                const e = this.box;
                                e.isEmpty() || (e.getCenter(this.position),
                                    e.getSize(this.scale),
                                    this.scale.multiplyScalar(.5),
                                    super.updateMatrixWorld(t))
                            }
                        }
                        class Zp extends Xl {
                            constructor(t, e=1, i=16776960) {
                                const n = new Ps;
                                n.setAttribute("position", new ys([1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0],3)),
                                    n.computeBoundingSphere(),
                                    super(n, new Ul({
                                        color: i,
                                        toneMapped: !1
                                    })),
                                    this.type = "PlaneHelper",
                                    this.plane = t,
                                    this.size = e;
                                const r = new Ps;
                                r.setAttribute("position", new ys([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1],3)),
                                    r.computeBoundingSphere(),
                                    this.add(new qs(r,new os({
                                        color: i,
                                        opacity: .2,
                                        transparent: !0,
                                        depthWrite: !1,
                                        toneMapped: !1
                                    })))
                            }
                            updateMatrixWorld(t) {
                                let e = -this.plane.constant;
                                Math.abs(e) < 1e-8 && (e = 1e-8),
                                    this.scale.set(.5 * this.size, .5 * this.size, e),
                                    this.children[0].material.side = e < 0 ? J : Z,
                                    this.lookAt(this.plane.normal),
                                    super.updateMatrixWorld(t)
                            }
                        }
                        const Jp = new Fn;
                        let Yp, Qp;
                        class Kp extends Vr {
                            constructor(t=new Fn(0,0,1), e=new Fn(0,0,0), i=1, n=16776960, r=.2 * i, s=.2 * r) {
                                super(),
                                    this.type = "ArrowHelper",
                                void 0 === Yp && (Yp = new Ps,
                                    Yp.setAttribute("position", new ys([0, 0, 0, 0, 1, 0],3)),
                                    Qp = new uu(0,.5,1,5,1),
                                    Qp.translate(0, -.5, 0)),
                                    this.position.copy(e),
                                    this.line = new Xl(Yp,new Ul({
                                        color: n,
                                        toneMapped: !1
                                    })),
                                    this.line.matrixAutoUpdate = !1,
                                    this.add(this.line),
                                    this.cone = new qs(Qp,new os({
                                        color: n,
                                        toneMapped: !1
                                    })),
                                    this.cone.matrixAutoUpdate = !1,
                                    this.add(this.cone),
                                    this.setDirection(t),
                                    this.setLength(i, r, s)
                            }
                            setDirection(t) {
                                .99999 < t.y ? this.quaternion.set(0, 0, 0, 1) : t.y < -.99999 ? this.quaternion.set(1, 0, 0, 0) : (Jp.set(t.z, 0, -t.x).normalize(),
                                    t = Math.acos(t.y),
                                    this.quaternion.setFromAxisAngle(Jp, t))
                            }
                            setLength(t, e=.2 * t, i=.2 * e) {
                                this.line.scale.set(1, Math.max(1e-4, t - e), 1),
                                    this.line.updateMatrix(),
                                    this.cone.scale.set(i, e, i),
                                    this.cone.position.y = t,
                                    this.cone.updateMatrix()
                            }
                            setColor(t) {
                                this.line.material.color.set(t),
                                    this.cone.material.color.set(t)
                            }
                            copy(t) {
                                return super.copy(t, !1),
                                    this.line.copy(t.line),
                                    this.cone.copy(t.cone),
                                    this
                            }
                        }
                        class $p extends Yl {
                            constructor(t=1) {
                                t = [0, 0, 0, t, 0, 0, 0, 0, 0, 0, t, 0, 0, 0, 0, 0, 0, t];
                                const e = new Ps;
                                e.setAttribute("position", new ys(t,3)),
                                    e.setAttribute("color", new ys([1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1],3)),
                                    super(e, t = new Ul({
                                        vertexColors: !0,
                                        toneMapped: !1
                                    })),
                                    this.type = "AxesHelper"
                            }
                            setColors(t, e, i) {
                                const n = new as;
                                var r = this.geometry.attributes.color.array;
                                return n.set(t),
                                    n.toArray(r, 0),
                                    n.toArray(r, 3),
                                    n.set(e),
                                    n.toArray(r, 6),
                                    n.toArray(r, 9),
                                    n.set(i),
                                    n.toArray(r, 12),
                                    n.toArray(r, 15),
                                    this.geometry.attributes.color.needsUpdate = !0,
                                    this
                            }
                            dispose() {
                                this.geometry.dispose(),
                                    this.material.dispose()
                            }
                        }
                        class tf {
                            constructor() {
                                this.type = "ShapePath",
                                    this.color = new as,
                                    this.subPaths = [],
                                    this.currentPath = null
                            }
                            moveTo(t, e) {
                                return this.currentPath = new Vu,
                                    this.subPaths.push(this.currentPath),
                                    this.currentPath.moveTo(t, e),
                                    this
                            }
                            lineTo(t, e) {
                                return this.currentPath.lineTo(t, e),
                                    this
                            }
                            quadraticCurveTo(t, e, i, n) {
                                return this.currentPath.quadraticCurveTo(t, e, i, n),
                                    this
                            }
                            bezierCurveTo(t, e, i, n, r, s) {
                                return this.currentPath.bezierCurveTo(t, e, i, n, r, s),
                                    this
                            }
                            splineThru(t) {
                                return this.currentPath.splineThru(t),
                                    this
                            }
                            toShapes(t, e) {
                                function i(t) {
                                    const e = [];
                                    for (let n = 0, r = t.length; n < r; n++) {
                                        var i = t[n];
                                        const r = new Uu;
                                        r.curves = i.curves,
                                            e.push(r)
                                    }
                                    return e
                                }
                                const n = sc.isClockWise
                                    , r = this.subPaths;
                                if (0 === r.length)
                                    return [];
                                if (!0 === e)
                                    return i(r);
                                let s, a, o;
                                const h = [];
                                if (1 === r.length)
                                    return a = r[0],
                                        o = new Uu,
                                        o.curves = a.curves,
                                        h.push(o),
                                        h;
                                let l = !n(r[0].getPoints());
                                l = t ? !l : l;
                                const u = []
                                    , c = [];
                                let d = []
                                    , p = 0;
                                var f, m;
                                c[p] = void 0,
                                    d[p] = [];
                                for (let e = 0, i = r.length; e < i; e++)
                                    a = r[e],
                                        s = n(f = a.getPoints()),
                                        s = t ? !s : s,
                                        s ? (!l && c[p] && p++,
                                            c[p] = {
                                                s: new Uu,
                                                p: f
                                            },
                                            c[p].s.curves = a.curves,
                                        l && p++,
                                            d[p] = []) : d[p].push({
                                            h: a,
                                            p: f[0]
                                        });
                                if (!c[0])
                                    return i(r);
                                if (1 < c.length) {
                                    let t = !1;
                                    const e = [];
                                    for (let t = 0, e = c.length; t < e; t++)
                                        u[t] = [];
                                    for (let i = 0, n = c.length; i < n; i++) {
                                        var g = d[i];
                                        for (let n = 0; n < g.length; n++) {
                                            var v = g[n];
                                            let r = !0;
                                            for (let s = 0; s < c.length; s++)
                                                !function(t, e) {
                                                    var i = e.length;
                                                    let n = !1;
                                                    for (let s = i - 1, a = 0; a < i; s = a++) {
                                                        let i = e[s]
                                                            , o = e[a]
                                                            , h = o.x - i.x
                                                            , l = o.y - i.y;
                                                        if (Math.abs(l) > Number.EPSILON) {
                                                            if (l < 0 && (i = e[a],
                                                                h = -h,
                                                                o = e[s],
                                                                l = -l),
                                                                !(t.y < i.y || t.y > o.y))
                                                                if (t.y === i.y) {
                                                                    if (t.x === i.x)
                                                                        return 1
                                                                } else {
                                                                    var r = l * (t.x - i.x) - h * (t.y - i.y);
                                                                    if (0 == r)
                                                                        return 1;
                                                                    r < 0 || (n = !n)
                                                                }
                                                        } else if (t.y === i.y && (o.x <= t.x && t.x <= i.x || i.x <= t.x && t.x <= o.x))
                                                            return 1
                                                    }
                                                    return n
                                                }(v.p, c[s].p) || (i !== s && e.push({
                                                    froms: i,
                                                    tos: s,
                                                    hole: n
                                                }),
                                                    r ? (r = !1,
                                                        u[s].push(v)) : t = !0);
                                            r && u[i].push(v)
                                        }
                                    }
                                    0 < e.length && (t || (d = u))
                                }
                                for (let t = 0, e = c.length; t < e; t++) {
                                    o = c[t].s,
                                        h.push(o);
                                    for (let e = 0, i = (m = d[t]).length; e < i; e++)
                                        o.holes.push(m[e].h)
                                }
                                return h
                            }
                        }
                        const ef = new Float32Array(1)
                            , nf = new Int32Array(ef.buffer);
                        class rf {
                            static toHalfFloat(t) {
                                65504 < t && (t = 65504),
                                    ef[0] = t;
                                var e = nf[0];
                                let i = e >> 16 & 32768
                                    , n = e >> 12 & 2047;
                                return (t = e >> 23 & 255) < 103 || (142 < t ? (i |= 31744,
                                    i |= (255 == t ? 0 : 1) && 8388607 & e) : t < 113 ? (n |= 2048,
                                    i |= (n >> 114 - t) + (n >> 113 - t & 1)) : (i |= t - 112 << 10 | n >> 1,
                                    i += 1 & n)),
                                    i
                            }
                        }
                        const sf = 0
                            , af = 1
                            , of = 0
                            , hf = 1
                            , lf = 2;
                        yu.create = function(t, e) {
                            return t.prototype = Object.create(yu.prototype),
                                (t.prototype.constructor = t).prototype.getPoint = e,
                                t
                        }
                            ,
                            Vu.prototype.fromPoints = function(t) {
                                return this.setFromPoints(t)
                            }
                            ,
                            Dp.prototype.setColors = function() {}
                            ,
                            Ep.prototype.update = function() {}
                            ,
                            Qc.prototype.extractUrlBase = function(t) {
                                return Ad.extractUrlBase(t)
                            }
                            ,
                            Qc.Handlers = {
                                add: function() {},
                                get: function() {}
                            },
                            xp.prototype.center = function(t) {
                                return this.getCenter(t)
                            }
                            ,
                            xp.prototype.empty = function() {
                                return this.isEmpty()
                            }
                            ,
                            xp.prototype.isIntersectionBox = function(t) {
                                return this.intersectsBox(t)
                            }
                            ,
                            xp.prototype.size = function(t) {
                                return this.getSize(t)
                            }
                            ,
                            Un.prototype.center = function(t) {
                                return this.getCenter(t)
                            }
                            ,
                            Un.prototype.empty = function() {
                                return this.isEmpty()
                            }
                            ,
                            Un.prototype.isIntersectionBox = function(t) {
                                return this.intersectsBox(t)
                            }
                            ,
                            Un.prototype.isIntersectionSphere = function(t) {
                                return this.intersectsSphere(t)
                            }
                            ,
                            Un.prototype.size = function(t) {
                                return this.getSize(t)
                            }
                            ,
                            ar.prototype.empty = function() {
                                return this.isEmpty()
                            }
                            ,
                            ua.prototype.setFromMatrix = function(t) {
                                return this.setFromProjectionMatrix(t)
                            }
                            ,
                            Sp.prototype.center = function(t) {
                                return this.getCenter(t)
                            }
                            ,
                            Sn.prototype.flattenToArrayOffset = function(t, e) {
                                return this.toArray(t, e)
                            }
                            ,
                            Sn.prototype.multiplyVector3 = function(t) {
                                return t.applyMatrix3(this)
                            }
                            ,
                            Sn.prototype.multiplyVector3Array = function() {}
                            ,
                            Sn.prototype.applyToBufferAttribute = function(t) {
                                return t.applyMatrix3(this)
                            }
                            ,
                            Sn.prototype.applyToVector3Array = function() {}
                            ,
                            Sn.prototype.getInverse = function(t) {
                                return this.copy(t).invert()
                            }
                            ,
                            mr.prototype.extractPosition = function(t) {
                                return this.copyPosition(t)
                            }
                            ,
                            mr.prototype.flattenToArrayOffset = function(t, e) {
                                return this.toArray(t, e)
                            }
                            ,
                            mr.prototype.getPosition = function() {
                                return (new Fn).setFromMatrixColumn(this, 3)
                            }
                            ,
                            mr.prototype.setRotationFromQuaternion = function(t) {
                                return this.makeRotationFromQuaternion(t)
                            }
                            ,
                            mr.prototype.multiplyToArray = function() {}
                            ,
                            mr.prototype.multiplyVector3 = function(t) {
                                return t.applyMatrix4(this)
                            }
                            ,
                            mr.prototype.multiplyVector4 = function(t) {
                                return t.applyMatrix4(this)
                            }
                            ,
                            mr.prototype.multiplyVector3Array = function() {}
                            ,
                            mr.prototype.rotateAxis = function(t) {
                                t.transformDirection(this)
                            }
                            ,
                            mr.prototype.crossVector = function(t) {
                                return t.applyMatrix4(this)
                            }
                            ,
                            mr.prototype.translate = function() {}
                            ,
                            mr.prototype.rotateX = function() {}
                            ,
                            mr.prototype.rotateY = function() {}
                            ,
                            mr.prototype.rotateZ = function() {}
                            ,
                            mr.prototype.rotateByAxis = function() {}
                            ,
                            mr.prototype.applyToBufferAttribute = function(t) {
                                return t.applyMatrix4(this)
                            }
                            ,
                            mr.prototype.applyToVector3Array = function() {}
                            ,
                            mr.prototype.makeFrustum = function(t, e, i, n, r, s) {
                                return this.makePerspective(t, e, n, i, r, s)
                            }
                            ,
                            mr.prototype.getInverse = function(t) {
                                return this.copy(t).invert()
                            }
                            ,
                            oa.prototype.isIntersectionLine = function(t) {
                                return this.intersectsLine(t)
                            }
                            ,
                            zn.prototype.multiplyVector3 = function(t) {
                                return t.applyQuaternion(this)
                            }
                            ,
                            zn.prototype.inverse = function() {
                                return this.invert()
                            }
                            ,
                            fr.prototype.isIntersectionBox = function(t) {
                                return this.intersectsBox(t)
                            }
                            ,
                            fr.prototype.isIntersectionPlane = function(t) {
                                return this.intersectsPlane(t)
                            }
                            ,
                            fr.prototype.isIntersectionSphere = function(t) {
                                return this.intersectsSphere(t)
                            }
                            ,
                            Qr.prototype.area = function() {
                                return this.getArea()
                            }
                            ,
                            Qr.prototype.barycoordFromPoint = function(t, e) {
                                return this.getBarycoord(t, e)
                            }
                            ,
                            Qr.prototype.midpoint = function(t) {
                                return this.getMidpoint(t)
                            }
                            ,
                            Qr.prototypenormal = function(t) {
                                return this.getNormal(t)
                            }
                            ,
                            Qr.prototype.plane = function(t) {
                                return this.getPlane(t)
                            }
                            ,
                            Qr.barycoordFromPoint = function(t, e, i, n, r) {
                                return Qr.getBarycoord(t, e, i, n, r)
                            }
                            ,
                            Qr.normal = function(t, e, i, n) {
                                return Qr.getNormal(t, e, i, n)
                            }
                            ,
                            Uu.prototype.extractAllPoints = function(t) {
                                return this.extractPoints(t)
                            }
                            ,
                            Uu.prototype.extrude = function(t) {
                                return new hc(this,t)
                            }
                            ,
                            Uu.prototype.makeGeometry = function(t) {
                                return new fc(this,t)
                            }
                            ,
                            wn.prototype.fromAttribute = function(t, e, i) {
                                return this.fromBufferAttribute(t, e, i)
                            }
                            ,
                            wn.prototype.distanceToManhattan = function(t) {
                                return this.manhattanDistanceTo(t)
                            }
                            ,
                            wn.prototype.lengthManhattan = function() {
                                return this.manhattanLength()
                            }
                            ,
                            Fn.prototype.setEulerFromRotationMatrix = function() {}
                            ,
                            Fn.prototype.setEulerFromQuaternion = function() {}
                            ,
                            Fn.prototype.getPositionFromMatrix = function(t) {
                                return this.setFromMatrixPosition(t)
                            }
                            ,
                            Fn.prototype.getScaleFromMatrix = function(t) {
                                return this.setFromMatrixScale(t)
                            }
                            ,
                            Fn.prototype.getColumnFromMatrix = function(t, e) {
                                return this.setFromMatrixColumn(e, t)
                            }
                            ,
                            Fn.prototype.applyProjection = function(t) {
                                return this.applyMatrix4(t)
                            }
                            ,
                            Fn.prototype.fromAttribute = function(t, e, i) {
                                return this.fromBufferAttribute(t, e, i)
                            }
                            ,
                            Fn.prototype.distanceToManhattan = function(t) {
                                return this.manhattanDistanceTo(t)
                            }
                            ,
                            Fn.prototype.lengthManhattan = function() {
                                return this.manhattanLength()
                            }
                            ,
                            Nn.prototype.fromAttribute = function(t, e, i) {
                                return this.fromBufferAttribute(t, e, i)
                            }
                            ,
                            Nn.prototype.lengthManhattan = function() {
                                return this.manhattanLength()
                            }
                            ,
                            Vr.prototype.getChildByName = function(t) {
                                return this.getObjectByName(t)
                            }
                            ,
                            Vr.prototype.renderDepth = function() {}
                            ,
                            Vr.prototype.translate = function(t, e) {
                                return this.translateOnAxis(e, t)
                            }
                            ,
                            Vr.prototype.getWorldRotation = function() {}
                            ,
                            Vr.prototype.applyMatrix = function(t) {
                                return this.applyMatrix4(t)
                            }
                            ,
                            Object.defineProperties(Vr.prototype, {
                                eulerOrder: {
                                    get: function() {
                                        return this.rotation.order
                                    },
                                    set: function(t) {
                                        this.rotation.order = t
                                    }
                                },
                                useQuaternion: {
                                    get: function() {},
                                    set: function() {}
                                }
                            }),
                            qs.prototype.setDrawMode = function() {}
                            ,
                            Object.defineProperties(qs.prototype, {
                                drawMode: {
                                    get: function() {
                                        return Ai
                                    },
                                    set: function() {}
                                }
                            }),
                            El.prototype.initBones = function() {}
                            ,
                            ta.prototype.setLens = function(t, e) {
                                void 0 !== e && (this.filmGauge = e),
                                    this.setFocalLength(t)
                            }
                            ,
                            Object.defineProperties(ad.prototype, {
                                onlyShadow: {
                                    set: function() {}
                                },
                                shadowCameraFov: {
                                    set: function(t) {
                                        this.shadow.camera.fov = t
                                    }
                                },
                                shadowCameraLeft: {
                                    set: function(t) {
                                        this.shadow.camera.left = t
                                    }
                                },
                                shadowCameraRight: {
                                    set: function(t) {
                                        this.shadow.camera.right = t
                                    }
                                },
                                shadowCameraTop: {
                                    set: function(t) {
                                        this.shadow.camera.top = t
                                    }
                                },
                                shadowCameraBottom: {
                                    set: function(t) {
                                        this.shadow.camera.bottom = t
                                    }
                                },
                                shadowCameraNear: {
                                    set: function(t) {
                                        this.shadow.camera.near = t
                                    }
                                },
                                shadowCameraFar: {
                                    set: function(t) {
                                        this.shadow.camera.far = t
                                    }
                                },
                                shadowCameraVisible: {
                                    set: function() {}
                                },
                                shadowBias: {
                                    set: function(t) {
                                        this.shadow.bias = t
                                    }
                                },
                                shadowDarkness: {
                                    set: function() {}
                                },
                                shadowMapWidth: {
                                    set: function(t) {
                                        this.shadow.mapSize.width = t
                                    }
                                },
                                shadowMapHeight: {
                                    set: function(t) {
                                        this.shadow.mapSize.height = t
                                    }
                                }
                            }),
                            Object.defineProperties(us.prototype, {
                                length: {
                                    get: function() {
                                        return this.array.length
                                    }
                                },
                                dynamic: {
                                    get: function() {
                                        return this.usage === Ki
                                    },
                                    set: function() {
                                        this.setUsage(Ki)
                                    }
                                }
                            }),
                            us.prototype.setDynamic = function(t) {
                                return this.setUsage(!0 === t ? Ki : Qi),
                                    this
                            }
                            ,
                            us.prototype.copyIndicesArray = function() {}
                            ,
                            us.prototype.setArray = function() {}
                            ,
                            Ps.prototype.addIndex = function(t) {
                                this.setIndex(t)
                            }
                            ,
                            Ps.prototype.addAttribute = function(t, e) {
                                return e && e.isBufferAttribute || e && e.isInterleavedBufferAttribute ? "index" === t ? (this.setIndex(e),
                                    this) : this.setAttribute(t, e) : this.setAttribute(t, new us(e,arguments[2]))
                            }
                            ,
                            Ps.prototype.addDrawCall = function(t, e, i) {
                                this.addGroup(t, e)
                            }
                            ,
                            Ps.prototype.clearDrawCalls = function() {
                                this.clearGroups()
                            }
                            ,
                            Ps.prototype.computeOffsets = function() {}
                            ,
                            Ps.prototype.removeAttribute = function(t) {
                                return this.deleteAttribute(t)
                            }
                            ,
                            Ps.prototype.applyMatrix = function(t) {
                                return this.applyMatrix4(t)
                            }
                            ,
                            Object.defineProperties(Ps.prototype, {
                                drawcalls: {
                                    get: function() {
                                        return this.groups
                                    }
                                },
                                offsets: {
                                    get: function() {
                                        return this.groups
                                    }
                                }
                            }),
                            il.prototype.setDynamic = function(t) {
                                return this.setUsage(!0 === t ? Ki : Qi),
                                    this
                            }
                            ,
                            il.prototype.setArray = function() {}
                            ,
                            hc.prototype.getArrays = function() {}
                            ,
                            hc.prototype.addShapeList = function() {}
                            ,
                            hc.prototype.addShape = function() {}
                        ,
                        el.prototype.dispose = function() {}
                        ,
                        cp.prototype.onUpdate = function() {
                            return this
                        }
                        ,
                        Object.defineProperties($r.prototype, {
                            wrapAround: {
                                get: function() {},
                                set: function() {}
                            },
                            overdraw: {
                                get: function() {},
                                set: function() {}
                            },
                            wrapRGB: {
                                get: function() {
                                    return new as
                                }
                            },
                            shading: {
                                get: function() {},
                                set: function(t) {
                                    this.flatShading = t === Q
                                }
                            },
                            stencilMask: {
                                get: function() {
                                    return this.stencilFuncMask
                                },
                                set: function(t) {
                                    this.stencilFuncMask = t
                                }
                            },
                            vertexTangents: {
                                get: function() {},
                                set: function() {}
                            }
                        }),
                        Object.defineProperties(Ks.prototype, {
                            derivatives: {
                                get: function() {
                                    return this.extensions.derivatives
                                },
                                set: function(t) {
                                    this.extensions.derivatives = t
                                }
                            }
                        }),
                        Qh.prototype.clearTarget = function(t, e, i, n) {
                            this.setRenderTarget(t),
                                this.clear(e, i, n)
                        }
                        ,
                        Qh.prototype.animate = function(t) {
                            this.setAnimationLoop(t)
                        }
                        ,
                        Qh.prototype.getCurrentRenderTarget = function() {
                            return this.getRenderTarget()
                        }
                        ,
                        Qh.prototype.getMaxAnisotropy = function() {
                            return this.capabilities.getMaxAnisotropy()
                        }
                        ,
                        Qh.prototype.getPrecision = function() {
                            return this.capabilities.precision
                        }
                        ,
                        Qh.prototype.resetGLState = function() {
                            return this.state.reset()
                        }
                        ,
                        Qh.prototype.supportsFloatTextures = function() {
                            return this.extensions.get("OES_texture_float")
                        }
                        ,
                        Qh.prototype.supportsHalfFloatTextures = function() {
                            return this.extensions.get("OES_texture_half_float")
                        }
                        ,
                        Qh.prototype.supportsStandardDerivatives = function() {
                            return this.extensions.get("OES_standard_derivatives")
                        }
                        ,
                        Qh.prototype.supportsCompressedTextureS3TC = function() {
                            return this.extensions.get("WEBGL_compressed_texture_s3tc")
                        }
                        ,
                        Qh.prototype.supportsCompressedTexturePVRTC = function() {
                            return this.extensions.get("WEBGL_compressed_texture_pvrtc")
                        }
                        ,
                        Qh.prototype.supportsBlendMinMax = function() {
                            return this.extensions.get("EXT_blend_minmax")
                        }
                        ,
                        Qh.prototype.supportsVertexTextures = function() {
                            return this.capabilities.vertexTextures
                        }
                        ,
                        Qh.prototype.supportsInstancedArrays = function() {
                            return this.extensions.get("ANGLE_instanced_arrays")
                        }
                        ,
                        Qh.prototype.enableScissorTest = function(t) {
                            this.setScissorTest(t)
                        }
                        ,
                        Qh.prototype.initMaterial = function() {}
                        ,
                        Qh.prototype.addPrePlugin = function() {}
                        ,
                        Qh.prototype.addPostPlugin = function() {}
                        ,
                        Qh.prototype.updateShadowMap = function() {}
                        ,
                        Qh.prototype.setFaceCulling = function() {}
                        ,
                        Qh.prototype.allocTextureUnit = function() {}
                        ,
                        Qh.prototype.setTexture = function() {}
                        ,
                        Qh.prototype.setTexture2D = function() {}
                        ,
                        Qh.prototype.setTextureCube = function() {}
                        ,
                        Qh.prototype.getActiveMipMapLevel = function() {
                            return this.getActiveMipmapLevel()
                        }
                        ,
                        Object.defineProperties(Qh.prototype, {
                            shadowMapEnabled: {
                                get: function() {
                                    return this.shadowMap.enabled
                                },
                                set: function(t) {
                                    this.shadowMap.enabled = t
                                }
                            },
                            shadowMapType: {
                                get: function() {
                                    return this.shadowMap.type
                                },
                                set: function(t) {
                                    this.shadowMap.type = t
                                }
                            },
                            shadowMapCullFace: {
                                get: function() {},
                                set: function() {}
                            },
                            context: {
                                get: function() {
                                    return this.getContext()
                                }
                            },
                            vr: {
                                get: function() {
                                    return this.xr
                                }
                            },
                            gammaInput: {
                                get: function() {
                                    return !1
                                },
                                set: function() {}
                            },
                            gammaOutput: {
                                get: function() {
                                    return !1
                                },
                                set: function(t) {
                                    this.outputEncoding = !0 === t ? Li : Ei
                                }
                            },
                            toneMappingWhitePoint: {
                                get: function() {
                                    return 1
                                },
                                set: function() {}
                            },
                            gammaFactor: {
                                get: function() {
                                    return 2
                                },
                                set: function() {}
                            }
                        }),
                        Object.defineProperties(Vh.prototype, {
                            cullFace: {
                                get: function() {},
                                set: function() {}
                            },
                            renderReverseSided: {
                                get: function() {},
                                set: function() {}
                            },
                            renderSingleSided: {
                                get: function() {},
                                set: function() {}
                            }
                        }),
                        Object.defineProperties(On.prototype, {
                            wrapS: {
                                get: function() {
                                    return this.texture.wrapS
                                },
                                set: function(t) {
                                    this.texture.wrapS = t
                                }
                            },
                            wrapT: {
                                get: function() {
                                    return this.texture.wrapT
                                },
                                set: function(t) {
                                    this.texture.wrapT = t
                                }
                            },
                            magFilter: {
                                get: function() {
                                    return this.texture.magFilter
                                },
                                set: function(t) {
                                    this.texture.magFilter = t
                                }
                            },
                            minFilter: {
                                get: function() {
                                    return this.texture.minFilter
                                },
                                set: function(t) {
                                    this.texture.minFilter = t
                                }
                            },
                            anisotropy: {
                                get: function() {
                                    return this.texture.anisotropy
                                },
                                set: function(t) {
                                    this.texture.anisotropy = t
                                }
                            },
                            offset: {
                                get: function() {
                                    return this.texture.offset
                                },
                                set: function(t) {
                                    this.texture.offset = t
                                }
                            },
                            repeat: {
                                get: function() {
                                    return this.texture.repeat
                                },
                                set: function(t) {
                                    this.texture.repeat = t
                                }
                            },
                            format: {
                                get: function() {
                                    return this.texture.format
                                },
                                set: function(t) {
                                    this.texture.format = t
                                }
                            },
                            type: {
                                get: function() {
                                    return this.texture.type
                                },
                                set: function(t) {
                                    this.texture.type = t
                                }
                            },
                            generateMipmaps: {
                                get: function() {
                                    return this.texture.generateMipmaps
                                },
                                set: function(t) {
                                    this.texture.generateMipmaps = t
                                }
                            }
                        }),
                        Yd.prototype.load = function(t) {
                            const e = this;
                            return (new Rd).load(t, (function(t) {
                                    e.setBuffer(t)
                                }
                            )),
                                this
                        }
                        ,
                        ip.prototype.getData = function() {
                            return this.getFrequencyData()
                        }
                        ,
                        ea.prototype.updateCubeMap = function(t, e) {
                            return this.update(t, e)
                        }
                        ,
                        ea.prototype.clear = function(t, e, i, n) {
                            return this.renderTarget.clear(t, e, i, n)
                        }
                        ,
                        En.crossOrigin = void 0,
                        En.loadTexture = function(t, e, i, n) {
                            const r = new sd;
                            r.setCrossOrigin(this.crossOrigin);
                            const s = r.load(t, i, void 0, n);
                            return e && (s.mapping = e),
                                s
                        }
                        ,
                        En.loadTextureCube = function(t, e, i, n) {
                            const r = new nd;
                            r.setCrossOrigin(this.crossOrigin);
                            const s = r.load(t, i, void 0, n);
                            return e && (s.mapping = e),
                                s
                        }
                        ,
                        En.loadCompressedTexture = function() {}
                        ,
                        En.loadCompressedTextureCube = function() {}
                        ;
                        const uf = {
                            createMultiMaterialObject: function() {},
                            detach: function() {},
                            attach: function() {}
                        };
                        function cf(t, e, i) {
                            var n = i.length - t - 1;
                            if (e >= i[n])
                                return n - 1;
                            if (e <= i[t])
                                return t;
                            let r = t
                                , s = n
                                , a = Math.floor((r + s) / 2);
                            for (; e < i[a] || e >= i[a + 1]; )
                                e < i[a] ? s = a : r = a,
                                    a = Math.floor((r + s) / 2);
                            return a
                        }
                        function df(t, e, i, n) {
                            const r = []
                                , s = []
                                , a = [];
                            for (let u = r[0] = 1; u <= i; ++u) {
                                s[u] = e - n[t + 1 - u],
                                    a[u] = n[t + u] - e;
                                let i = 0;
                                for (let t = 0; t < u; ++t) {
                                    var o = a[t + 1]
                                        , h = s[u - t]
                                        , l = r[t] / (o + h);
                                    r[t] = i + o * l,
                                        i = h * l
                                }
                                r[u] = i
                            }
                            return r
                        }
                        "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{
                            detail: {
                                revision: z
                            }
                        })),
                        "undefined" != typeof window && (window.__THREE__ || (window.__THREE__ = z));
                        class pf {
                            constructor(t, e, i, n, r) {
                                this.degree1 = t,
                                    this.degree2 = e,
                                    this.knots1 = i,
                                    this.knots2 = n,
                                    this.controlPoints = [];
                                var s = i.length - t - 1
                                    , a = n.length - e - 1;
                                for (let t = 0; t < s; ++t) {
                                    this.controlPoints[t] = [];
                                    for (let e = 0; e < a; ++e) {
                                        var o = r[t][e];
                                        this.controlPoints[t][e] = new Nn(o.x,o.y,o.z,o.w)
                                    }
                                }
                            }
                            getPoint(t, e, i) {
                                t = this.knots1[0] + t * (this.knots1[this.knots1.length - 1] - this.knots1[0]),
                                    e = this.knots2[0] + e * (this.knots2[this.knots2.length - 1] - this.knots2[0]),
                                    function(t, e, i, n, r, s, a, o) {
                                        var h = cf(t, s, i)
                                            , l = cf(e, a, n)
                                            , u = df(h, s, t, i)
                                            , c = df(l, a, e, n);
                                        const d = [];
                                        for (let i = 0; i <= e; ++i) {
                                            d[i] = new Nn(0,0,0,0);
                                            for (let n = 0; n <= t; ++n) {
                                                const s = r[h - t + n][l - e + i].clone();
                                                var p = s.w;
                                                s.x *= p,
                                                    s.y *= p,
                                                    s.z *= p,
                                                    d[i].add(s.multiplyScalar(u[n]))
                                            }
                                        }
                                        const f = new Nn(0,0,0,0);
                                        for (let t = 0; t <= e; ++t)
                                            f.add(d[t].multiplyScalar(c[t]));
                                        f.divideScalar(f.w),
                                            o.set(f.x, f.y, f.z)
                                    }(this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, t, e, i)
                            }
                        }
                        class ff extends Ps {
                            constructor(t=((t,e,i)=>i.set(t, e, Math.cos(t) * Math.sin(e))), e=8, i=8) {
                                super(),
                                    this.type = "ParametricGeometry",
                                    this.parameters = {
                                        func: t,
                                        slices: e,
                                        stacks: i
                                    };
                                const n = []
                                    , r = []
                                    , s = []
                                    , a = []
                                    , o = new Fn;
                                var h = new Fn
                                    , l = new Fn;
                                const u = new Fn
                                    , c = new Fn;
                                t.length;
                                var d = e + 1;
                                for (let n = 0; n <= i; n++) {
                                    var p = n / i;
                                    for (let i = 0; i <= e; i++) {
                                        var f = i / e;
                                        t(f, p, h),
                                            r.push(h.x, h.y, h.z),
                                            0 <= f - 1e-5 ? (t(f - 1e-5, p, l),
                                                u.subVectors(h, l)) : (t(1e-5 + f, p, l),
                                                u.subVectors(l, h)),
                                            0 <= p - 1e-5 ? (t(f, p - 1e-5, l),
                                                c.subVectors(h, l)) : (t(f, 1e-5 + p, l),
                                                c.subVectors(l, h)),
                                            o.crossVectors(u, c).normalize(),
                                            s.push(o.x, o.y, o.z),
                                            a.push(f, p)
                                    }
                                }
                                for (let t = 0; t < i; t++)
                                    for (let i = 0; i < e; i++) {
                                        var m = t * d + i
                                            , g = t * d + i + 1
                                            , v = (t + 1) * d + i + 1
                                            , _ = (t + 1) * d + i;
                                        n.push(m, g, _),
                                            n.push(g, v, _)
                                    }
                                this.setIndex(n),
                                    this.setAttribute("position", new ys(r,3)),
                                    this.setAttribute("normal", new ys(s,3)),
                                    this.setAttribute("uv", new ys(a,2))
                            }
                        }
                        function mf(t, e) {
                            var i, n = wf, r = Object[n(181)](t);
                            return Object[n(163)] && (i = Object.getOwnPropertySymbols(t),
                            e && (i = i.filter((function(e) {
                                    var i = n;
                                    return Object[i(167)](t, e)[i(142)]
                                }
                            ))),
                                r.push[n(199)](r, i)),
                                r
                        }
                        function gf(t) {
                            for (var e = wf, i = 1; i < arguments[e(197)]; i++) {
                                var n = null != arguments[i] ? arguments[i] : {};
                                i % 2 ? mf(Object(n), !0)[e(162)]((function(e) {
                                        a(t, e, n[e])
                                    }
                                )) : Object[e(215)] ? Object.defineProperties(t, Object[e(215)](n)) : mf(Object(n))[e(162)]((function(i) {
                                        var r = e;
                                        Object[r(183)](t, i, Object[r(167)](n, i))
                                    }
                                ))
                            }
                            return t
                        }
                        function vf() {
                            var t = ["traverse", "rotateZ", "psdWidth", "5001040SyQAvU", "renderThree ", "Name", "Mesh", "frameData", "rotateY", "forEach", "getOwnPropertySymbols", "1248132bbTUiA", "BoundingRect", "rect", "getOwnPropertyDescriptor", "push", "DirectionalLight", "formatBezierPoints", "MeshLambertMaterial", "add", "数据异常：存在不符合预期的宽高值的图层：", "position", ", w: ", "预览图", "910081cYhRiQ", "time", "extractFrameData", "Points", "keys", "render", "defineProperty", "set", ", h: ", "center", "clear", "updateMatrix", "geometry", "log", "positionX", "rotateX", "wrapS", "不扭曲的智能对象：", "key", "renderThree", "length", "rotation", "apply", "clearScene", "children", "---耗时点 1：setTimeout--- ", "wrapT", "domElement", "WebGLRenderer", "matrix3To4", "lowp", "dispose", "Vector3", "splice", "2897532lzsQDX", "map", "deleteGroup", "Width", "getOwnPropertyDescriptors", "style", "tan", "layerKey", "concat", "warn", "remove", "isArray", "cropDesignCanvas", "error", "bezierPoints", "4250679fQRZQx", "Matrix4", "3384598ZZwXom", "normalize", "renderLists", "sdsDebug", "Height", "files", "CanvasTexture", "Scene", "enabled", "getPoint", "psdHeight", "enumerable", "setSize", "positionY", "lookAt", "split", "initialize", "timeEnd", "material", "12InwWfB", "36490160OLztek", "matrix4"];
                            return (vf = function() {
                                    return t
                                }
                            )()
                        }
                        function _f() {}
                        !function() {
                            for (var t = wf, e = vf(); ; )
                                try {
                                    if (919027 == -parseInt(t(177)) + -parseInt(t(164)) / 2 + -parseInt(t(226)) / 3 + -parseInt(t(211)) / 4 + parseInt(t(156)) / 5 + -parseInt(t(150)) / 6 * (parseInt(t(228)) / 7) + parseInt(t(151)) / 8)
                                        break;
                                    e.push(e.shift())
                                } catch (t) {
                                    e.push(e.shift())
                                }
                        }();
                        var yf = {
                            enabled: !1,
                            files: {},
                            add: function(t, e) {
                                var i = wf;
                                !1 !== this[i(139)] && (this[i(136)][t] = e)
                            },
                            get: function(t) {
                                var e = wf;
                                if (!1 !== this[e(139)])
                                    return this[e(136)][t]
                            },
                            remove: function(t) {
                                delete this[wf(136)][t]
                            },
                            clear: function() {
                                this[wf(136)] = {}
                            }
                        }
                            , xf = {
                            log: function() {
                                var t, e = wf;
                                return document[e(134)] ? (t = console)[e(190)].apply(t, arguments) : _f
                            },
                            warn: function() {
                                var t, e = wf;
                                return document[e(134)] ? (t = console).warn[e(199)](t, arguments) : _f
                            },
                            time: function() {
                                var t, e = wf;
                                return document.sdsDebug ? (t = console)[e(178)][e(199)](t, arguments) : _f
                            },
                            timeEnd: function() {
                                var t, e = wf;
                                return document[e(134)] ? (t = console)[e(148)][e(199)](t, arguments) : _f
                            },
                            error: function(t) {
                                var e = wf;
                                return Uc.message[e(224)](e(176)[e(219)](t)),
                                    document.sdsDebug ? void 0 : _f
                            }
                        };
                        function bf(t, e, i) {
                            return e in t ? Object[wf(183)](t, e, {
                                value: i,
                                enumerable: !0,
                                configurable: !0,
                                writable: !0
                            }) : t[e] = i,
                                t
                        }
                        function wf(t, e) {
                            var i = vf();
                            return (wf = function(t, e) {
                                    return i[t -= 134]
                                }
                            )(t, e)
                        }
                        const Sf = s((function i(n) {
                                var r = wf
                                    , s = this;
                                e(this, i),
                                    bf(this, r(147), (function() {}
                                    )),
                                    bf(this, r(170), (function(t) {
                                            var e = []
                                                , i = [];
                                            return t.forEach((function(t, n) {
                                                    var r = wf;
                                                    (i = n % 4 == 0 ? [] : i).push(t),
                                                    n % 4 == 3 && e[r(168)](i)
                                                }
                                            )),
                                                e
                                        }
                                    )),
                                    bf(this, r(206), (function(t) {
                                            var e = r;
                                            return (t = R(t))[e(210)](2, 0, 0),
                                                t[e(210)](6, 0, 0),
                                                t[e(210)](8, 0, 0),
                                                t[e(210)](9, 0, 0),
                                                t[e(210)](10, 0, 1),
                                                t[e(210)](11, 0, 0),
                                                t.splice(14, 0, 0),
                                                t
                                        }
                                    )),
                                    bf(this, r(179), (function(t) {
                                            var e = r
                                                , i = t.matrix3;
                                            i = s[e(206)](i);
                                            return gf(gf({}, t), {}, {
                                                matrix4: i
                                            })
                                        }
                                    )),
                                    bf(this, r(213), (function(e) {
                                            var i = r;
                                            e && e[i(153)]((function(e) {
                                                    var n = i;
                                                    e instanceof t[n(159)] && (e[n(189)][n(208)](),
                                                        e.geometry = null,
                                                        e[n(149)][n(212)].dispose(),
                                                        e.material[n(208)](),
                                                        e[n(149)] = null)
                                                }
                                            ))
                                        }
                                    )),
                                    bf(this, r(200), (function(e, i, n) {
                                            var a = r;
                                            0 < i[a(197)] && (i[a(162)]((function(i) {
                                                    var n = a;
                                                    i instanceof t[n(138)] ? i[n(201)][n(162)]((function(t) {
                                                            s.deleteGroup(t)
                                                        }
                                                    )) : s[n(213)](i),
                                                        e[n(221)](i)
                                                }
                                            )),
                                                e[a(187)]()),
                                                n()
                                        }
                                    )),
                                    bf(this, r(196), (function(e, i) {
                                            var n, a, o, h = r, l = e[h(160)], u = e.cropDesignCanvas, c = e[h(218)], d = e[h(155)], p = e[h(141)], f = e.webglCanvas, m = [], g = d, v = p;
                                            (function() {
                                                    var e = h;
                                                    a = new (t[e(138)]),
                                                        (o = new ta(90,g / v,1,2e3))[e(174)].x = 0,
                                                        o[e(174)].y = 0;
                                                    var i = g < v ? v : g;
                                                    function r(t) {
                                                        return +t
                                                    }
                                                    o[e(174)].z = -i * (.5 / Math[e(217)](Math.PI / 180 * 45)),
                                                        o.up.x = 0,
                                                        o.up.y = -1,
                                                        o.up.z = 0,
                                                        o[e(145)](0, 0, 0),
                                                        (s = new (t[e(169)])("#fff"))[e(174)].set(0, 0, -2e3)[e(229)](),
                                                        a[e(172)](s),
                                                        (d = new (t[e(169)])("#fff"))[e(174)].set(0, 0, 2e3).normalize(),
                                                        a[e(172)](d),
                                                        (i = new (t[e(137)])(u))[e(198)] = 90 * Math.PI / 180,
                                                        i[e(193)] = 1e3,
                                                        i[e(203)] = 1e3;
                                                    var s = new (t[e(171)])({
                                                        map: i,
                                                        side: 2
                                                    })
                                                        , c = l[e(225)].map((function(i) {
                                                            var n = e;
                                                            return i[n(212)]((function(e) {
                                                                    return new (t[n(209)])(r(e.x),r(e.y),0)
                                                                }
                                                            ))
                                                        }
                                                    ))
                                                        , d = c.length - 1
                                                        , p = (i = (i = []).concat[e(199)](i, R(R(new Array(2))[e(212)]((function(t, i) {
                                                            var n = e;
                                                            return R(new Array(c[n(197)]))[n(212)]((function() {
                                                                    return i
                                                                }
                                                            ))
                                                        }
                                                    )))),
                                                        new pf(d,d,i,i,c));
                                                    i = new ff((function(t, i, n) {
                                                            return p[e(140)](t, i, n)
                                                        }
                                                    ),20,20);
                                                    i.applyMatrix4((new (t[e(227)]))[e(184)](l[e(152)][0], l.matrix4[4], l[e(152)][8], l[e(152)][12], l[e(152)][1], l[e(152)][5], l[e(152)][9], l[e(152)][13], l[e(152)][2], l.matrix4[6], l[e(152)][10], l[e(152)][14], l[e(152)][3], l[e(152)][7], l[e(152)][11], l.matrix4[15])),
                                                        (i = new (t[e(159)])(i,s)).matrixAutoUpdate = !1,
                                                        s = l[e(166)],
                                                        i[e(174)].x = s[e(191)],
                                                        i[e(174)].y = s[e(144)],
                                                        i[e(174)].z = 0,
                                                        i[e(198)].x = Math.PI / 180 * 0,
                                                        i.rotation.y = Math.PI / 180 * 0,
                                                        i[e(198)].z = Math.PI / 180 * 0,
                                                        i[e(189)][e(154)](Math.PI / 180 * 0),
                                                        i[e(189)][e(192)](Math.PI / 180 * 0),
                                                        i[e(189)][e(161)](Math.PI / 180 * 0),
                                                        i[e(189)].computeBoundingBox(),
                                                        i.geometry[e(186)](),
                                                        i[e(188)](),
                                                        a[e(172)](i),
                                                        m.push(i),
                                                    (i = f)[e(216)] || (i.style = {
                                                        width: g,
                                                        height: v
                                                    }),
                                                        n = null,
                                                        (n = new (t[e(205)])({
                                                            alpha: !0,
                                                            canvas: i,
                                                            precision: e(207),
                                                            preserveDrawingBuffer: !1
                                                        }))[e(143)](g, v)
                                                }
                                            )(),
                                                xf.time(h(202).concat(c)),
                                                setTimeout((function() {
                                                        var t = h;
                                                        xf[t(148)]("---耗时点 1：setTimeout--- "[t(219)](c)),
                                                            n[t(182)](a, o);
                                                        var e = n[t(204)];
                                                        i(e),
                                                            s.clearScene(a, m, (function() {
                                                                    var e = t;
                                                                    o.clear(),
                                                                        m = [],
                                                                        n[e(230)][e(208)](),
                                                                        n[e(208)](),
                                                                        n = o = a = null,
                                                                        yf[e(187)]()
                                                                }
                                                            ))
                                                    }
                                                ), 0)
                                        }
                                    )),
                                    bf(this, "handleSmartObject", (function(t, e) {
                                            var i = r
                                                , n = t.layer
                                                , a = t[i(223)]
                                                , o = t.psdWidth
                                                , h = t[i(141)]
                                                , l = t.webglCanvas
                                                , u = !0;
                                            f = Array[i(222)](n[i(180)]) ? n.Points : (xf[i(190)](i(194), n),
                                                u = !1,
                                                [{
                                                    x: 0,
                                                    y: 0
                                                }, {
                                                    x: 0 + (d = (c = D(n.OriginalSize[i(146)](",").map((function(t) {
                                                            return +t
                                                        }
                                                    )), 2))[0]) / 3,
                                                    y: 0
                                                }, {
                                                    x: 0 + d / 3 * 2,
                                                    y: 0
                                                }, {
                                                    x: 0 + d,
                                                    y: 0
                                                }, {
                                                    x: 0,
                                                    y: 0 + (p = c[1]) / 3
                                                }, {
                                                    x: 0 + d / 3,
                                                    y: 0 + p / 3
                                                }, {
                                                    x: 0 + d / 3 * 2,
                                                    y: 0 + p / 3
                                                }, {
                                                    x: 0 + d,
                                                    y: 0 + p / 3
                                                }, {
                                                    x: 0,
                                                    y: 0 + p / 3 * 2
                                                }, {
                                                    x: 0 + d / 3,
                                                    y: 0 + p / 3 * 2
                                                }, {
                                                    x: 0 + d / 3 * 2,
                                                    y: 0 + p / 3 * 2
                                                }, {
                                                    x: 0 + d,
                                                    y: 0 + p / 3 * 2
                                                }, {
                                                    x: 0,
                                                    y: 0 + p
                                                }, {
                                                    x: 0 + d / 3,
                                                    y: 0 + p
                                                }, {
                                                    x: 0 + d / 3 * 2,
                                                    y: 0 + p
                                                }, {
                                                    x: 0 + d,
                                                    y: 0 + p
                                                }]);
                                            t = s[i(170)](f);
                                            var c = D(n[i(165)].split(",").map((function(t) {
                                                    return +t
                                                }
                                            )), 4)
                                                , d = c[0]
                                                , p = c[1]
                                                , f = c[2];
                                            c = c[3],
                                                c = s.extractFrameData({
                                                    bezierPoints: t,
                                                    rect: {
                                                        width: f,
                                                        height: c,
                                                        positionX: u && 20 < n[i(214)] && 20 < n.Height ? n.X + (n.Width / 2 - o / 2) : d + (f / 2 - o / 2),
                                                        positionY: u && 20 < n[i(214)] && 20 < n[i(135)] ? n.Y + (n[i(135)] / 2 - h / 2) : p + (c / 2 - h / 2)
                                                    },
                                                    matrix3: n.Matrix3
                                                });
                                            (n[i(214)] < 50 || n[i(135)] < 50) && xf[i(220)](i(173)[i(219)](n[i(158)], i(175)).concat(n[i(214)], i(185))[i(219)](n[i(135)])),
                                                xf[i(178)](i(157)[i(219)](n[i(195)])),
                                                s[i(196)]({
                                                    frameData: c,
                                                    cropDesignCanvas: a,
                                                    layerKey: n[i(195)],
                                                    psdWidth: o,
                                                    psdHeight: h,
                                                    webglCanvas: l
                                                }, (function(t) {
                                                        var r = i;
                                                        xf.timeEnd(r(157)[r(219)](n[r(195)])),
                                                            e(t)
                                                    }
                                                ))
                                        }
                                    )),
                                    this[r(147)](n)
                            }
                        ));
                        var Mf = i(9944);
                        function Cf(t, e) {
                            return (Cf = Object.setPrototypeOf || function(t, e) {
                                    return t.__proto__ = e,
                                        t
                                }
                            )(t, e)
                        }
                        function Af(t) {
                            return (Af = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                                        return typeof t
                                    }
                                    : function(t) {
                                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
                                    }
                            )(t)
                        }
                        function Tf(t, e) {
                            if (e && ("object" === Af(e) || "function" == typeof e))
                                return e;
                            if (void 0 !== e)
                                throw new TypeError("Derived constructors may only return object or undefined");
                            return function(t) {
                                if (void 0 === t)
                                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                return t
                            }(t)
                        }
                        function Pf(t) {
                            return (Pf = Object.setPrototypeOf ? Object.getPrototypeOf : function(t) {
                                    return t.__proto__ || Object.getPrototypeOf(t)
                                }
                            )(t)
                        }
                        function Ef() {
                            var t = ["100%", "textAlign", "prototype", "value", "wrapDiv", "fdWrap", "url(https://img.foxpsd.com/foxpsd_close.png) no-repeat center", "img_url", "#38f", "5677749WpKtuA", "@@iterator", "10048980sAZAWm", "670px", "29431garulh", "678605xaJHtK", "querySelectorAll", "sham", "foxpsd-big-show", "overflowY", "width", "className", "mySwiper", "38NBBBlD", "img", "toString", "100px", "fixed", "#eee", "backgroundPosition", "fbody", "createElement", "550px", "Map", "display", "appendChild", "1px #eee solid", "element", "justifyContent", "absolute", "contain", "call", "createSwiper", "16aidNJd", "relative", "position", "auto", "isArray", "35px", "float", "-wrap .foxpsd-vertical-item", "div", "next", "boxSizing", "src", "_onchange", "Set", "slide", "focpsd_mask_", "backgroundRepeat", "hidden", "padding", "borderColor", "marginBottom", "border-box", "background", "height", "foxpsd-big-show-wrap", "dotWrap", "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.", "5px", "iterator", "backgroundSize", "valueOf", "renderDots", "inline-block", "onchange", "concat", "number", "return", "forEach", "Arguments", "50px auto", "3167128RtujnS", "constructor", "overflowX", "6060940vDSJbQ", "verticalDom", "remove", "done", "baseHeight", "renderSwiperItem", "swiperEl", "swiperClass", "center", "9IxQSKp", "100vh", "kill", "foxpsd-vertical-item", "left", "450822NoYojc", "12TECXhk", "7TyfLDF", "backgroundImage", "right", "childNodes", "length", "xiaoguotuList", "test", "flex", "string", "construct", "baseWidth", "top", "zIndex", "style", "int", "onclick", "margin", "no-repeat", "from", "100vw"];
                            return (Ef = function() {
                                    return t
                                }
                            )()
                        }
                        function Lf(t, e) {
                            var i = Ef();
                            return (Lf = function(t, e) {
                                    return i[t -= 310]
                                }
                            )(t, e)
                        }
                        function If(t, e) {
                            var i = Lf;
                            (null == e || e > t[i(368)]) && (e = t[i(368)]);
                            for (var n = 0, r = new Array(e); n < e; n++)
                                r[n] = t[n];
                            return r
                        }
                        !function() {
                            for (var t = Lf, e = Ef(); ; )
                                try {
                                    if (434398 == +parseInt(t(397)) * (-parseInt(t(406)) / 2) + parseInt(t(362)) / 3 * (-parseInt(t(426)) / 4) + -parseInt(t(398)) / 5 * (-parseInt(t(363)) / 6) + parseInt(t(364)) / 7 * (parseInt(t(345)) / 8) + parseInt(t(357)) / 9 * (parseInt(t(348)) / 10) + -parseInt(t(393)) / 11 + parseInt(t(395)) / 12)
                                        break;
                                    e.push(e.shift())
                                } catch (t) {
                                    e.push(e.shift())
                                }
                        }();
                        var kf = function() {
                            var t = Lf;
                            !function(t, e) {
                                if ("function" != typeof e && null !== e)
                                    throw new TypeError("Super expression must either be null or a function");
                                t.prototype = Object.create(e && e.prototype, {
                                    constructor: {
                                        value: t,
                                        writable: !0,
                                        configurable: !0
                                    }
                                }),
                                    Object.defineProperty(t, "prototype", {
                                        writable: !1
                                    }),
                                e && Cf(t, e)
                            }(n, v);
                            var i = function(t) {
                                var e = function() {
                                    var t = Lf;
                                    if ("undefined" == typeof Reflect || !Reflect[t(373)])
                                        return !1;
                                    if (Reflect[t(373)][t(400)])
                                        return !1;
                                    if ("function" == typeof Proxy)
                                        return !0;
                                    try {
                                        return Boolean.prototype[t(335)][t(424)](Reflect[t(373)](Boolean, [], (function() {}
                                        ))),
                                            !0
                                    } catch (t) {
                                        return !1
                                    }
                                }();
                                return function() {
                                    var i, n = Lf, r = Pf(t);
                                    return Tf(this, e ? (i = Pf(this).constructor,
                                        Reflect[n(373)](r, arguments, i)) : r.apply(this, arguments))
                                }
                            }(n);
                            function n(t, r) {
                                var s = Lf
                                    , a = void 0 === (o = r[s(374)]) ? 0 : o
                                    , o = void 0 === (h = r[s(352)]) ? 0 : h
                                    , h = void 0 === (h = r[s(420)]) ? null : h;
                                r = void 0 === (r = r[s(338)]) ? null : r;
                                return e(this, n),
                                    (r = i[s(424)](this, t, {
                                        baseWidth: a,
                                        baseHeight: o,
                                        element: h,
                                        onchange: r
                                    }))[s(355)] = s(401),
                                    r
                            }
                            return s(n, [{
                                key: t(378),
                                value: function() {
                                    var e = t
                                        , i = (s = this[e(388)]())[e(389)]
                                        , n = s[e(413)]
                                        , r = (a = this.renderHtml())[e(354)]
                                        , s = a.swiperWrap
                                        , a = a[e(330)];
                                    return r[e(377)].width = "550px",
                                        this[e(353)](s),
                                        this[e(336)](a),
                                        n.appendChild(r),
                                        this[e(420)][e(418)](i),
                                        this[e(425)](r),
                                        this[e(349)](n),
                                        this.close(i),
                                        this[e(405)]
                                }
                            }, {
                                key: t(338),
                                value: function(e) {
                                    var i = t;
                                    this[i(317)] && this._onchange(e);
                                    for (var n = document[i(399)](".".concat(this[i(355)], i(312))), r = 0; r < n.length; r++)
                                        n[r][i(377)][i(324)] = r == e ? "#38f" : i(411)
                                }
                            }, {
                                key: "close",
                                value: function(e) {
                                    var i = t
                                        , n = this
                                        , r = document[i(414)]("div");
                                    r[i(377)][i(428)] = i(422),
                                        r[i(377)][i(403)] = i(310),
                                        r[i(377)].height = i(310),
                                        r[i(377)][i(323)] = i(332),
                                        r[i(377)][i(366)] = "100px",
                                        r[i(377)][i(375)] = "50px",
                                        r[i(377)][i(327)] = i(390),
                                        r[i(377)][i(334)] = i(423),
                                        e[i(418)](r),
                                        r[i(379)] = function() {
                                            var t = i;
                                            e[t(350)](),
                                                n[t(405)][t(359)]()
                                        }
                                }
                            }, {
                                key: t(388),
                                value: function() {
                                    var e = t
                                        , i = document[e(414)](e(313));
                                    i.className = e(329),
                                        i[e(377)].position = e(410),
                                        i[e(377)][e(375)] = 0,
                                        i[e(377)][e(361)] = 0,
                                        i[e(377)][e(403)] = e(383),
                                        i[e(377)][e(328)] = e(358),
                                        i[e(377)].background = "#fff",
                                        i[e(377)][e(376)] = "99999";
                                    var n = document[e(414)]("div");
                                    return i[e(418)](n),
                                        n.style.width = e(396),
                                        n[e(377)][e(380)] = e(344),
                                        n[e(377)][e(417)] = e(371),
                                        n.style[e(421)] = "space-between",
                                        {
                                            fdWrap: i,
                                            fbody: n
                                        }
                                }
                            }, {
                                key: "verticalDom",
                                value: function(e) {
                                    var i = t
                                        , n = this
                                        , r = this[i(369)]
                                        , s = document[i(414)](i(313));
                                    s[i(377)][i(403)] = i(409),
                                        s[i(377)][i(328)] = "550px",
                                        s.style[i(402)] = i(429),
                                        s[i(377)][i(347)] = i(322);
                                    for (var a = 0; a < r[i(368)]; a++)
                                        !function(t) {
                                            var e = i
                                                , a = r[t]
                                                , o = document.createElement(e(313));
                                            o[e(404)] = e(360),
                                                o[e(377)][e(365)] = "url("[e(339)](a.img_url, ")"),
                                                o[e(377)][e(334)] = e(423),
                                                o.style[e(412)] = e(356),
                                                o[e(377)][e(321)] = e(381),
                                                o[e(377)][e(315)] = e(326),
                                                o[e(377)][e(403)] = e(384),
                                                o.style[e(328)] = "100px",
                                                o[e(377)][e(325)] = "10px",
                                                o.style.border = e(419),
                                            0 == t && (o.style[e(324)] = e(392)),
                                                s[e(418)](o),
                                                o[e(379)] = function() {
                                                    var i = e;
                                                    n.mySwiper[i(319)](t),
                                                        o.parentNode[i(367)][i(342)]((function(t) {
                                                                var e = i;
                                                                t.style.borderColor = e(411)
                                                            }
                                                        )),
                                                        o[i(377)][i(324)] = i(392)
                                                }
                                        }(a);
                                    e[i(418)](s)
                                }
                            }, {
                                key: "renderSwiperItem",
                                value: function(e) {
                                    var i, n = t, r = 1, s = function(t, e) {
                                        var i = Lf
                                            , n = "undefined" != typeof Symbol && t[Symbol[i(333)]] || t[i(394)];
                                        if (!n) {
                                            if (Array[i(430)](t) || (n = function(t, e) {
                                                var i = Lf;
                                                if (t) {
                                                    if (typeof t === i(372))
                                                        return If(t, e);
                                                    var n = Object[i(386)][i(408)][i(424)](t).slice(8, -1);
                                                    return (n = "Object" === n && t[i(346)] ? t[i(346)].name : n) === i(416) || n === i(318) ? Array[i(382)](t) : n === i(343) || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/[i(370)](n) ? If(t, e) : void 0
                                                }
                                            }(t)) || e && t && typeof t[i(368)] === i(340)) {
                                                n && (t = n);
                                                var r = 0;
                                                return {
                                                    s: e = function() {}
                                                    ,
                                                    n: function() {
                                                        return r >= t[i(368)] ? {
                                                            done: !0
                                                        } : {
                                                            done: !1,
                                                            value: t[r++]
                                                        }
                                                    },
                                                    e: function(t) {
                                                        throw t
                                                    },
                                                    f: e
                                                }
                                            }
                                            throw new TypeError(i(331))
                                        }
                                        var s, a = !0, o = !1;
                                        return {
                                            s: function() {
                                                n = n[i(424)](t)
                                            },
                                            n: function() {
                                                var t = n[i(314)]();
                                                return a = t.done,
                                                    t
                                            },
                                            e: function(t) {
                                                o = !0,
                                                    s = t
                                            },
                                            f: function() {
                                                var t = i;
                                                try {
                                                    a || null == n[t(341)] || n[t(341)]()
                                                } finally {
                                                    if (o)
                                                        throw s
                                                }
                                            }
                                        }
                                    }(this.xiaoguotuList);
                                    try {
                                        for (s.s(); !(i = s.n())[n(351)]; ) {
                                            var a = i[n(387)]
                                                , o = document[n(414)](n(313));
                                            o[n(377)][n(311)] = n(361),
                                                o[n(377)][n(428)] = n(427),
                                                o[n(377)][n(403)] = n(384),
                                                o[n(377)][n(385)] = "center";
                                            var h = document[n(414)](n(407));
                                            h.id = n(320)[n(339)](r),
                                                h[n(377)][n(417)] = n(337),
                                                h[n(377)][n(376)] = 3,
                                                h[n(377)].maxHeight = n(415),
                                                h[n(316)] = a[n(391)],
                                                o.appendChild(h),
                                                e[n(418)](o),
                                                r++
                                        }
                                    } catch (e) {
                                        s.e(e)
                                    } finally {
                                        s.f()
                                    }
                                }
                            }]),
                                n
                        }();
                        function Nf() {
                            var t = ["length", "charCodeAt", "1336936tgnMNf", "----", "4678709CwZYmz", "1GKdxAI", "3433656mzuEAx", "3071892WEhVDi", "fromCharCode", "2262545ewcSBo", "626046VOaEXB", "log", "743276BGVTzI", "random"];
                            return (Nf = function() {
                                    return t
                                }
                            )()
                        }
                        !function() {
                            for (var t = Df, e = Nf(); ; )
                                try {
                                    if (627653 == +parseInt(t(281)) * (parseInt(t(286)) / 2) + parseInt(t(283)) / 3 + -parseInt(t(288)) / 4 + -parseInt(t(285)) / 5 + -parseInt(t(282)) / 6 + parseInt(t(280)) / 7 + -parseInt(t(278)) / 8)
                                        break;
                                    e.push(e.shift())
                                } catch (t) {
                                    e.push(e.shift())
                                }
                        }();
                        var Of = {};
                        function Df(t, e) {
                            var i = Nf();
                            return (Df = function(t, e) {
                                    return i[t -= 277]
                                }
                            )(t, e)
                        }
                        Of.DI = function(t) {
                            for (var e = Df, i = 0, n = 0; n < t; n++)
                                i += Math[e(289)]();
                            return i / t < Math.PI / 4
                        }
                            ,
                            Of.VR = function(t, e) {
                                var i = Df
                                    , n = "";
                                Of.DI(29) || (e -= 4);
                                for (var r = 0; r < t.length; r++)
                                    n += String[i(284)](t.charCodeAt(r) - e - r);
                                return n
                            }
                            ,
                            Of.j4 = function(t, e) {
                                var i = Df
                                    , n = "";
                                Of.DI(29) || (e += 4);
                                for (var r = 0; r < t[i(290)]; r++)
                                    n += String[i(284)](t[i(277)](r) + e + r);
                                return n
                            }
                            ,
                            Of.Jy = function(t) {
                                var e = Df
                                    , i = "";
                                Of.DI(28) || (t += "-3");
                                for (var n = 0; n < t[e(290)]; n++) {
                                    var r = t[e(277)](n);
                                    if (r < 32 || 127 < r)
                                        throw "e";
                                    i += String[e(284)](32 + (r - 32 + 17 + 3 * n) % 96)
                                }
                                return i
                            }
                            ,
                            Of.MQ = function(t) {
                                var e = Df
                                    , i = "";
                                Of.DI(28) || (t += "-1");
                                for (var n = 0; n < t[e(290)]; n++) {
                                    var r = t[e(277)](n);
                                    r -= 32,
                                        r += 96e4,
                                        r -= 17 + 3 * n,
                                        r %= 96,
                                        i += String[e(284)](32 + r)
                                }
                                return i
                            }
                            ,
                            Of.p2 = function(t) {
                                var e = Df
                                    , i = "";
                                Of.DI(28) || (t += "-3");
                                for (var n = 0; n < t.length; n++) {
                                    var r = t.charCodeAt(n);
                                    if (r < 32 || 126 < r)
                                        throw "e";
                                    i += String[e(284)](32 + (r - 32 + 17 + 3 * n) % 95)
                                }
                                return i
                            }
                            ,
                            Of.Y0 = function(t) {
                                var e = Df
                                    , i = "";
                                Of.DI(28) || (t += "-1");
                                for (var n = 0; n < t[e(290)]; n++) {
                                    var r = t[e(277)](n);
                                    r -= 32,
                                        r += 95e4,
                                        r -= 17 + 3 * n,
                                        r %= 95,
                                        i += String[e(284)](32 + r)
                                }
                                return i
                            }
                            ,
                            Of.Dy = function(t, e) {
                                var i = Df
                                    , n = "";
                                Of.DI(29) || (e += 3);
                                for (var r = 0; r < t[i(290)]; r++)
                                    n += String.fromCharCode((256 << 16) + t[i(277)](r) + e * r & 255);
                                return n
                            }
                        ;
                        const Rf = Of;
                        var zf = Ff;
                        function Ff(t, e) {
                            var i = Uf();
                            return (Ff = function(t, e) {
                                    return i[t -= 427]
                                }
                            )(t, e)
                        }
                        function Bf(t, e) {
                            var i = Ff
                                , n = typeof Symbol !== i(568) && t[Symbol[i(613)]] || t[i(539)];
                            if (!n) {
                                if (Array.isArray(t) || (n = function(t, e) {
                                    var i = Ff;
                                    if (t) {
                                        if (typeof t === i(563))
                                            return Vf(t, e);
                                        var n = Object[i(616)].toString[i(475)](t)[i(516)](8, -1);
                                        return (n = "Object" === n && t[i(580)] ? t[i(580)][i(608)] : n) === i(521) || "Set" === n ? Array[i(462)](t) : n === i(529) || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/[i(547)](n) ? Vf(t, e) : void 0
                                    }
                                }(t)) || e && t && typeof t[i(557)] === i(525)) {
                                    n && (t = n);
                                    var r = 0;
                                    return {
                                        s: e = function() {}
                                        ,
                                        n: function() {
                                            return r >= t[i(557)] ? {
                                                done: !0
                                            } : {
                                                done: !1,
                                                value: t[r++]
                                            }
                                        },
                                        e: function(t) {
                                            throw t
                                        },
                                        f: e
                                    }
                                }
                                throw new TypeError(i(524))
                            }
                            var s, a = !0, o = !1;
                            return {
                                s: function() {
                                    n = n[i(475)](t)
                                },
                                n: function() {
                                    var t = n[i(518)]();
                                    return a = t.done,
                                        t
                                },
                                e: function(t) {
                                    o = !0,
                                        s = t
                                },
                                f: function() {
                                    var t = i;
                                    try {
                                        a || null == n[t(455)] || n[t(455)]()
                                    } finally {
                                        if (o)
                                            throw s
                                    }
                                }
                            }
                        }
                        function Vf(t, e) {
                            var i = Ff;
                            (null == e || e > t[i(557)]) && (e = t[i(557)]);
                            for (var n = 0, r = new Array(e); n < e; n++)
                                r[n] = t[n];
                            return r
                        }
                        function Uf() {
                            var t = ["BoundingRect", "zoomIn", "apply", "1000px", "@@iterator", "getItem", "bounds", "localStorage", "___", "replaceWith", "clear", "paper", "test", "appendChild", "参数不合法", "canvas", "businessGoodsType", "testBaseUrl", "5px", "https://img.foxpsd.com/foxpsd_fangda.png", "Matrix3", "padding", "length", "innerHTML", "drawImage", "docementSvg", "layers", "abrupt", "string", "7389235puwVav", "wrapDiv", "您的产品订阅已过期，请前往 foxpsd.com 重新订阅", "10px", "undefined", "isArray", "goodsSku", "random", "image/png", "height", "left", "setItem", "done", "preCanvas", "projects", "clipCanvas", "constructor", "@u($L4,,843;;GCSWsKZc_h", "初始化组件失败，请前往 foxpsd.com 联系开发者", "view", "div", "clip", "getPos", "save", "OffscreenCanvas", "opacity", "getSkuToSvgList", "image", "8704704ttdfCu", "borderRadius", "getElementById", "layerInfo", "getView", "xiaoguotuList", "int", "getClipCanvas", "style", "right", "setup", "mySwiper", "wrap", "30px", "swiper", "525HwutRR", "name", "filter", "renderAll", "parentNode", "onload", "iterator", "参数data 类型不正确", "data", "prototype", "image 请传输图片链接", "none", "svg", "parseSvg", "createElement", "element", "stop", "foxpsd_mask_", "update", "4tuHrPC", "jishu", "请传入 goodsSku", "100%", "code", "y(+*0ZRU/;GBH<iAPQ", "width", "use", "7v-.1*2,=@/:EH@RAYa[SPgbo:", "toDataURL", "同时处理的psdSkus 最大限度是10个", "7392530TjqyAc", "悥皀亢咻讛闽巩辽朔＀诪醿斡讒间", "get", "value", "223974dgsOyd", "some", "45048zYWvNx", "wrapWidth", "return", "mark", "forEach", "command", "setSize", "@u($L17+X39A:,RF!XS`a.", "src", "from", "getTime", "floor", "center", "carousel", "push", "background", "prev", "R*,#-3-A+A9BD", "img_url", "remove", "content", "@u($L(36.@^4KMDm", "call", "rasterize", "userAgent", "position", "img", "load", "join", "Raster", "Size", "log", "display", "preLayer", "fangda", "title", "blendMode", "y),+1ZRU0<HCI=iBQR", "render", "webglCanvas", "catch", "points", "end", "onclick", "top", "getContext", "canvasToImg", "originalSize", "stringify", "matrix", "commandAll", "27aZrMRH", "removeChild", "sent", "psdSkus", "foxpsd_preview_", "209500aqfFlA", "anonymous", "baseWidth", "sessionStorage", "psd_svg", "handleSmartObject", "concat", "slice", "layerInfoArr", "next", "commandJSON", "clipPath", "Map", "msg", "clearRect", "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.", "number", "list", "rect", "post", "Arguments", "wrapHeight", "token", "872399TfUIit", "finish", "className"];
                            return (Uf = function() {
                                    return t
                                }
                            )()
                        }
                        !function() {
                            for (var t = Ff, e = Uf(); ; )
                                try {
                                    if (981538 == +parseInt(t(532)) + -parseInt(t(509)) / 2 + -parseInt(t(451)) / 3 + parseInt(t(436)) / 4 * (parseInt(t(564)) / 5) + parseInt(t(592)) / 6 + -parseInt(t(607)) / 7 * (parseInt(t(453)) / 8) + -parseInt(t(504)) / 9 * (parseInt(t(447)) / 10))
                                        break;
                                    e.push(e.shift())
                                } catch (t) {
                                    e.push(e.shift())
                                }
                        }();
                        var Gf = P()
                            , Wf = Rf.Y0(zf(490));
                        function jf(t, e) {
                            var i = zf
                                , n = !1;
                            return t && e && (e = window.sessionStorage[i(540)](Gf)) ? (e = Number(e),
                            (new Date)[i(463)]() - e < 288e5 || n) : n
                        }
                        function Hf() {
                            return qf[zf(537)](this, arguments)
                        }
                        function qf() {
                            var t = zf;
                            return (qf = h(u()[t(456)]((function e(i, n, r) {
                                    var s, o, h, l = t;
                                    return u()[l(604)]((function(t) {
                                            for (var e, u = l; ; )
                                                switch (t[u(469)] = t[u(518)]) {
                                                    case 0:
                                                        if (!(s = (s = window[u(542)][u(540)]("jishu-number")) ? Number(s) : r)) {
                                                            t.next = 17;
                                                            break
                                                        }
                                                        if (100,
                                                            300,
                                                            e = void 0,
                                                            e = zf,
                                                        Math[e(464)](200 * Math[e(571)]()) + 100 <= s)
                                                            return o = {
                                                                userAgent: navigator[u(477)],
                                                                use: parseInt(s),
                                                                actual: s
                                                            },
                                                                t[u(518)] = 8,
                                                                M()[u(528)](""[u(515)](Wf)[u(515)](Rf.Y0(u(581))), {
                                                                    sku: n,
                                                                    number: o[u(443)],
                                                                    content: JSON[u(501)](o)
                                                                }, {
                                                                    headers: a({}, Rf.Y0(u(470)), i)
                                                                });
                                                        t.next = 17;
                                                        break;
                                                    case 8:
                                                        if (!(h = t.sent).data[u(440)] || 1e4 != h[u(615)][u(440)]) {
                                                            t.next = 13;
                                                            break
                                                        }
                                                        s = 0,
                                                            t[u(518)] = 17;
                                                        break;
                                                    case 13:
                                                        throw h = (new Date)[u(463)](),
                                                            window[u(512)][u(575)](Gf, h - 432e5),
                                                            "".concat(Rf.j4(u(448), 3), " ")[u(515)](Rf.MQ(u(441)));
                                                    case 17:
                                                        window[u(542)][u(575)](Rf.MQ('{}*"2M1;6.4D'), s);
                                                    case 18:
                                                    case "end":
                                                        return t[u(433)]()
                                                }
                                        }
                                    ), e)
                                }
                            ))))[t(537)](this, arguments)
                        }
                        var Xf, Zf, Jf, Yf, Qf, Kf, $f, tm, em, im, nm, rm, sm, am;
                        s(om, [{
                            key: (am = zf)(598),
                            value: (rm = am,
                                    sm = h(u()[rm(456)]((function t() {
                                            var e;
                                            return u().wrap((function(t) {
                                                    for (var i = Ff; ; )
                                                        switch (t[i(469)] = t.next) {
                                                            case 0:
                                                                return om[i(546)][i(578)][i(457)]((function(t) {
                                                                        var e = i;
                                                                        t[e(545)](),
                                                                            t[e(472)]()
                                                                    }
                                                                )),
                                                                    om[i(546)][i(578)] = null,
                                                                    om[i(546)].projects = [],
                                                                    t[i(518)] = 5,
                                                                    M()[i(449)](""[i(515)](Wf)[i(515)](Rf.Y0(i(474))).concat(this[i(570)]), {
                                                                        headers: a({}, Rf.Y0(i(470)), this[i(531)])
                                                                    });
                                                            case 5:
                                                                if ((e = t[i(506)])[i(615)][i(440)] && 10001 != e[i(615)][i(440)]) {
                                                                    t[i(518)] = 8;
                                                                    break
                                                                }
                                                                throw i(566);
                                                            case 8:
                                                                if (this[i(551)] = e[i(615)][i(615)],
                                                                    window[i(512)][i(575)](Gf, "" + (new Date)[i(463)]()),
                                                                this.psdSkus && this[i(597)][i(557)] <= 0)
                                                                    return t[i(518)] = 13,
                                                                        this[i(590)](this[i(507)]);
                                                                t.next = 14;
                                                                break;
                                                            case 13:
                                                                this[i(597)] = t[i(506)];
                                                            case 14:
                                                                if (this[i(597)][i(557)] <= 0)
                                                                    throw i(582);
                                                                t[i(518)] = 16;
                                                                break;
                                                            case 16:
                                                                return this[i(432)][i(558)] = "",
                                                                    this[i(606)](),
                                                                    t.next = 20,
                                                                    this.parseSvg();
                                                            case 20:
                                                                this[i(536)] && this[i(487)](),
                                                                this[i(612)] && this[i(612)](),
                                                                    this[i(480)] = !0;
                                                            case 23:
                                                            case i(495):
                                                                return t[i(433)]()
                                                        }
                                                }
                                            ), t, this)
                                        }
                                    ))),
                                    function() {
                                        return sm[rm(537)](this, arguments)
                                    }
                            )
                        }, {
                            key: am(487),
                            value: (nm = h(u().mark((function t() {
                                        var e, i, n = this;
                                        return u().wrap((function(t) {
                                                for (var r = Ff; ; )
                                                    switch (t[r(469)] = t[r(518)]) {
                                                        case 0:
                                                            if (jf(this.goodsSku, this[r(531)])) {
                                                                t[r(518)] = 2;
                                                                break
                                                            }
                                                            return t[r(562)](r(455));
                                                        case 2:
                                                            (e = document.createElement(r(584)))[r(534)] = "fangda",
                                                                (i = document[r(431)](r(479)))[r(461)] = r(554),
                                                                i[r(600)][r(442)] = r(439),
                                                                e[r(548)](i),
                                                                e.style[r(468)] = "rgba(0,0,0,.3)",
                                                                e.style[r(593)] = r(538),
                                                                e.style[r(442)] = r(605),
                                                                e.style[r(573)] = "30px",
                                                                e[r(600)].position = "absolute",
                                                                e[r(600)][r(601)] = r(567),
                                                                e[r(600)][r(497)] = r(567),
                                                                e[r(600)].zIndex = "10",
                                                                e.style[r(556)] = r(553),
                                                                this[r(432)][r(548)](e),
                                                                e[r(496)] = h(u()[r(456)]((function t() {
                                                                        var e, i;
                                                                        return u().wrap((function(t) {
                                                                                for (var r = Ff; ; )
                                                                                    switch (t[r(469)] = t.next) {
                                                                                        case 0:
                                                                                            return t.next = 2,
                                                                                                n[r(499)]();
                                                                                        case 2:
                                                                                            e = t[r(506)],
                                                                                                i = [],
                                                                                                e.forEach((function(t) {
                                                                                                        var e = r
                                                                                                            , n = {};
                                                                                                        n[e(471)] = t,
                                                                                                            i[e(467)](n)
                                                                                                    }
                                                                                                )),
                                                                                                new kf(i,{
                                                                                                    element: n[r(432)]
                                                                                                })[r(598)]();
                                                                                        case 7:
                                                                                        case r(495):
                                                                                            return t[r(433)]()
                                                                                    }
                                                                            }
                                                                        ), t)
                                                                    }
                                                                )));
                                                        case 19:
                                                        case r(495):
                                                            return t[r(433)]()
                                                    }
                                            }
                                        ), t, this)
                                    }
                                ))),
                                    function() {
                                        return nm[Ff(537)](this, arguments)
                                    }
                            )
                        }, {
                            key: am(499),
                            value: (em = am,
                                    im = h(u()[em(456)]((function t() {
                                            var e, i, n, r, s = arguments;
                                            return u().wrap((function(t) {
                                                    for (var a = Ff; ; )
                                                        switch (t[a(469)] = t[a(518)]) {
                                                            case 0:
                                                                if (e = 0 < s.length && void 0 !== s[0] ? s[0] : 1e3,
                                                                    i = [],
                                                                    this[a(577)]) {
                                                                    t[a(518)] = 5;
                                                                    break
                                                                }
                                                                return this.xiaoguotuList[a(457)]((function(t) {
                                                                        var e = a;
                                                                        i[e(467)](t[e(471)])
                                                                    }
                                                                )),
                                                                    t.abrupt(a(455), i);
                                                            case 5:
                                                                t.t0 = u().keys(this[a(519)]);
                                                            case 6:
                                                                if ((t.t1 = t.t0())[a(576)]) {
                                                                    t[a(518)] = 12;
                                                                    break
                                                                }
                                                                return n = t.t1[a(450)],
                                                                    t[a(518)] = 10,
                                                                    this[a(458)]({
                                                                        canvas: this[a(519)][n],
                                                                        layers: n,
                                                                        renderAll: !0
                                                                    });
                                                            case 10:
                                                                t[a(518)] = 6;
                                                                break;
                                                            case 12:
                                                                return r = new (om[a(546)][a(482)])(new (om[a(546)][a(483)])(e,e)),
                                                                    om[a(546)][a(578)][a(457)]((function(t) {
                                                                            var n = a
                                                                                , s = t[n(540)]({
                                                                                name: "foxpsd-svg"
                                                                            })
                                                                                , o = s[n(541)].width
                                                                                , h = s.bounds[n(573)]
                                                                                , l = o / h;
                                                                            s.bounds[n(442)] = e,
                                                                                s.bounds[n(573)] = s.bounds.width / l,
                                                                                l = (t = s[n(476)]({
                                                                                    raster: r,
                                                                                    insert: !1
                                                                                }))[n(550)][n(445)](n(572)),
                                                                                s[n(541)][n(442)] = o,
                                                                                s[n(541)][n(573)] = h,
                                                                                t.remove(),
                                                                                i[n(467)](l)
                                                                        }
                                                                    )),
                                                                    t.abrupt(a(455), i);
                                                            case 15:
                                                            case a(495):
                                                                return t[a(433)]()
                                                        }
                                                }
                                            ), t, this)
                                        }
                                    ))),
                                    function() {
                                        return im[em(537)](this, arguments)
                                    }
                            )
                        }, {
                            key: am(590),
                            value: ($f = am,
                                    tm = h(u()[$f(456)]((function t(e) {
                                            var i, n, r, s = $f;
                                            return u()[s(604)]((function(t) {
                                                    for (var o = s; ; )
                                                        switch (t[o(469)] = t.next) {
                                                            case 0:
                                                                return t[o(518)] = 2,
                                                                    M()[o(449)](""[o(515)](Wf)[o(515)](Rf.Y0(o(460)))[o(515)](e[o(481)](","))[o(515)](Rf.Y0(o(444))).concat(this.goodsSku), {
                                                                        headers: a({}, Rf.Y0(o(470)), this[o(531)])
                                                                    });
                                                            case 2:
                                                                if ((i = t[o(506)])[o(615)].code && 10001 != i[o(615)].code) {
                                                                    t[o(518)] = 5;
                                                                    break
                                                                }
                                                                throw i[o(615)][o(522)];
                                                            case 5:
                                                                return n = i[o(615)][o(615)][o(526)],
                                                                    r = [],
                                                                    n.forEach((function(t) {
                                                                            var e = o;
                                                                            t = {
                                                                                title: t[e(488)],
                                                                                img_url: t[e(471)],
                                                                                psd_svg: t[e(429)]
                                                                            };
                                                                            r[e(467)](t)
                                                                        }
                                                                    )),
                                                                    t.abrupt(o(455), r);
                                                            case 9:
                                                            case o(495):
                                                                return t[o(433)]()
                                                        }
                                                }
                                            ), t, this)
                                        }
                                    ))),
                                    function(t) {
                                        return tm[$f(537)](this, arguments)
                                    }
                            )
                        }, {
                            key: am(606),
                            value: function() {
                                var t, e = am, i = this;
                                jf(this[e(570)], this.token) && ((t = new v(this[e(597)],{
                                    baseWidth: this[e(511)],
                                    baseHeight: this[e(511)],
                                    element: this[e(432)],
                                    onchange: function(t) {
                                        var n = e;
                                        if (i[n(577)])
                                            for (var r in i[n(519)])
                                                i[n(458)]({
                                                    canvas: i[n(519)][r],
                                                    layers: r
                                                })
                                    }
                                }))[e(598)](),
                                    this.carousel = t[e(603)])
                            }
                        }, {
                            key: am(430),
                            value: (Qf = am,
                                    Kf = h(u()[Qf(456)]((function t() {
                                            var e, i, n, r, s, a, o, h = Qf;
                                            return u()[h(604)]((function(t) {
                                                    for (var l = h; ; )
                                                        switch (t[l(469)] = t[l(518)]) {
                                                            case 0:
                                                                if (jf(this[l(570)], this[l(531)])) {
                                                                    t.next = 2;
                                                                    break
                                                                }
                                                                return t[l(562)](l(455));
                                                            case 2:
                                                                e = this[l(597)],
                                                                    i = 0;
                                                            case 4:
                                                                if (i < e[l(557)])
                                                                    return n = e[i],
                                                                        om[l(546)][l(602)](document[l(594)](l(508)[l(515)](i + 1))),
                                                                        t[l(518)] = 9,
                                                                        function() {
                                                                            return I[L(400)](this, arguments)
                                                                        }(n[l(513)]);
                                                                t[l(518)] = 28;
                                                                break;
                                                            case 9:
                                                                o = t[l(506)],
                                                                    n[l(517)] = o[l(595)],
                                                                    n[l(560)] = o[l(560)],
                                                                    n.wrapWidth = o[l(454)],
                                                                    n[l(530)] = o[l(530)],
                                                                    r = om[l(546)][l(578)][i][l(596)](),
                                                                    s = w().projects[i].importSVG(n[l(560)], {
                                                                        insert: !0
                                                                    }),
                                                                    a = s.bounds.width,
                                                                    o = s[l(541)][l(573)],
                                                                    o = a / o,
                                                                    r[l(541)][l(442)] / o > r[l(541)][l(573)] ? (s.bounds[l(442)] = r.bounds[l(573)] * o,
                                                                        s[l(541)].height = r.bounds.height) : (s[l(541)][l(442)] = r[l(541)][l(442)],
                                                                        s[l(541)][l(573)] = r.bounds[l(442)] / o),
                                                                    s.bounds[l(574)] = r[l(465)].x - s[l(541)][l(442)] / 2,
                                                                    s.bounds[l(497)] = r.center.y - s[l(541)][l(573)] / 2,
                                                                    s[l(608)] = "foxpsd-svg",
                                                                    s.getItems({
                                                                        className: l(482)
                                                                    }).forEach((function(t) {
                                                                            var e = l
                                                                                , i = new (om[e(546)][e(482)])({
                                                                                crossOrigin: e(510),
                                                                                source: t.source,
                                                                                insert: !1
                                                                            });
                                                                            i[e(459)](t.size),
                                                                                i[e(502)] = t[e(502)],
                                                                                i[e(608)] = t[e(608)],
                                                                                i[e(489)] = t.blendMode,
                                                                                i[e(589)] = t[e(589)],
                                                                                t[e(544)](i),
                                                                                i[e(583)][e(435)]()
                                                                        }
                                                                    ));
                                                            case 25:
                                                                i++,
                                                                    t.next = 4;
                                                                break;
                                                            case 28:
                                                            case "end":
                                                                return t[l(433)]()
                                                        }
                                                }
                                            ), t, this)
                                        }
                                    ))),
                                    function() {
                                        return Kf[Qf(537)](this, arguments)
                                    }
                            )
                        }, {
                            key: am(458),
                            value: (Jf = am,
                                    Yf = h(u()[Jf(456)]((function t(e) {
                                            var i, n, r, s, a, o, l, c, d, p, f, m, g, v, _, y, x, b, w, S, C;
                                            return u().wrap((function(t) {
                                                    for (var A = Ff; ; )
                                                        switch (t.prev = t[A(518)]) {
                                                            case 0:
                                                                if (i = e.canvas,
                                                                    n = e[A(591)],
                                                                    r = e[A(561)],
                                                                    a = e[A(610)],
                                                                    s = void 0 !== a && a,
                                                                    l = e[A(437)],
                                                                    a = void 0 === l || l,
                                                                    jf(this[A(570)], this[A(531)])) {
                                                                    t[A(518)] = 3;
                                                                    break
                                                                }
                                                                return t[A(562)](A(455));
                                                            case 3:
                                                                if ((i || n) && r) {
                                                                    t[A(518)] = 5;
                                                                    break
                                                                }
                                                                throw A(549);
                                                            case 5:
                                                                if (n && typeof n != A(563))
                                                                    throw A(427);
                                                                t[A(518)] = 7;
                                                                break;
                                                            case 7:
                                                                if (o = i,
                                                                    n)
                                                                    return t.t0 = k,
                                                                        t.next = 12,
                                                                        function(t) {
                                                                            return new Promise((e = h(u().mark((function e(i) {
                                                                                        var n, r, s, a = L;
                                                                                        return u()[a(417)]((function(e) {
                                                                                                for (var o = a; ; )
                                                                                                    switch (e[o(386)] = e[o(410)]) {
                                                                                                        case 0:
                                                                                                            if (/^data:/[o(349)](t))
                                                                                                                return i(t),
                                                                                                                    e[o(403)]("return");
                                                                                                            e[o(410)] = 3;
                                                                                                            break;
                                                                                                        case 3:
                                                                                                            return n = t[o(411)](t[o(401)](".") + 1).toLowerCase(),
                                                                                                                e[o(410)] = 6,
                                                                                                                M()[o(391)](t, {
                                                                                                                    responseType: o(357)
                                                                                                                });
                                                                                                        case 6:
                                                                                                            r = e[o(339)],
                                                                                                                (s = new FileReader)[o(396)](r[o(356)]),
                                                                                                                s.onloadend = function() {
                                                                                                                    var t = s[(t = o)(404)][t(375)]()[t(392)](t(335), t(371).concat(n, ";"));
                                                                                                                    i(t)
                                                                                                                }
                                                                                                            ;
                                                                                                        case 10:
                                                                                                        case o(422):
                                                                                                            return e[o(379)]()
                                                                                                    }
                                                                                            }
                                                                                        ), e)
                                                                                    }
                                                                                ))),
                                                                                    function(t) {
                                                                                        return e[L(400)](this, arguments)
                                                                                    }
                                                                            ));
                                                                            var e
                                                                        }(n);
                                                                t.next = 21;
                                                                break;
                                                            case 12:
                                                                return t.t1 = t.sent,
                                                                    t[A(518)] = 15,
                                                                    (0,
                                                                        t.t0)(t.t1);
                                                            case 15:
                                                                l = t[A(506)],
                                                                    (o = document[A(431)]("canvas"))[A(442)] = l[A(442)],
                                                                    o[A(573)] = l[A(573)],
                                                                    o.getContext("2d")[A(559)](l, 0, 0, l[A(442)], l[A(573)]);
                                                            case 21:
                                                                m = this[A(597)],
                                                                    c = r.split(","),
                                                                    this[A(577)] = o,
                                                                    this[A(486)] = r,
                                                                    this[A(519)][r] = o,
                                                                    f = this[A(466)][A(586)](),
                                                                    d = s ? m : [m[f]],
                                                                    p = s ? om[A(546)][A(578)] : [om[A(546)][A(578)][f]],
                                                                (m = document[A(594)](A(434)[A(515)](f + 1))) && (m.style[A(485)] = A(428)),
                                                                    f = [],
                                                                    m = Bf(d),
                                                                    t[A(469)] = 33,
                                                                    m.s();
                                                            case 35:
                                                                if ((v = m.n()).done) {
                                                                    t[A(518)] = 43;
                                                                    break
                                                                }
                                                                if ((g = v[A(450)]).layerInfoArr) {
                                                                    t[A(518)] = 39;
                                                                    break
                                                                }
                                                                throw "数据还没有准备好，请稍后再试";
                                                            case 39:
                                                                v = g[A(517)][A(609)]((function(t) {
                                                                        var e = A;
                                                                        return c[e(452)]((function(i) {
                                                                                var n = e;
                                                                                return i == t.id.split(n(543))[0]
                                                                            }
                                                                        ))
                                                                    }
                                                                )),
                                                                    f = f.concat(v);
                                                            case 41:
                                                                t.next = 35;
                                                                break;
                                                            case 43:
                                                                t[A(518)] = 48;
                                                                break;
                                                            case 45:
                                                                t.prev = 45,
                                                                    t.t2 = t[A(493)](33),
                                                                    m.e(t.t2);
                                                            case 48:
                                                                return t[A(469)] = 48,
                                                                    m.f(),
                                                                    t.finish(48);
                                                            case 51:
                                                                _ = [],
                                                                    y = Bf(f),
                                                                    t[A(469)] = 53,
                                                                    y.s();
                                                            case 55:
                                                                if ((w = y.n())[A(576)]) {
                                                                    t[A(518)] = 79;
                                                                    break
                                                                }
                                                                x = w.value,
                                                                    b = Bf(p),
                                                                    t[A(469)] = 58,
                                                                    b.s();
                                                            case 60:
                                                                if ((w = b.n())[A(576)]) {
                                                                    t[A(518)] = 69;
                                                                    break
                                                                }
                                                                if (C = w[A(450)],
                                                                (S = C[A(540)]({
                                                                    name: x.id
                                                                })) && x[A(535)]) {
                                                                    t[A(518)] = 65;
                                                                    break
                                                                }
                                                                return t.abrupt("continue", 67);
                                                            case 65:
                                                                C = this[A(491)]({
                                                                    layerInfo: x,
                                                                    canvas: o,
                                                                    raster: S,
                                                                    wrapWidth: x[A(454)],
                                                                    wrapHeight: x[A(530)],
                                                                    layerName: x.id
                                                                }),
                                                                    _[A(467)](C);
                                                            case 67:
                                                                t.next = 60;
                                                                break;
                                                            case 69:
                                                                t[A(518)] = 74;
                                                                break;
                                                            case 71:
                                                                t[A(469)] = 71,
                                                                    t.t3 = t[A(493)](58),
                                                                    b.e(t.t3);
                                                            case 74:
                                                                return t[A(469)] = 74,
                                                                    b.f(),
                                                                    t[A(533)](74);
                                                            case 77:
                                                                t[A(518)] = 55;
                                                                break;
                                                            case 79:
                                                                t[A(518)] = 84;
                                                                break;
                                                            case 81:
                                                                t[A(469)] = 81,
                                                                    t.t4 = t[A(493)](53),
                                                                    y.e(t.t4);
                                                            case 84:
                                                                return t[A(469)] = 84,
                                                                    y.f(),
                                                                    t.finish(84);
                                                            case 87:
                                                                return a && Hf(this.token, this[A(570)], d[A(557)]),
                                                                    t[A(518)] = 90,
                                                                    Promise.all(_);
                                                            case 90:
                                                            case A(495):
                                                                return t[A(433)]()
                                                        }
                                                }
                                            ), t, this, [[33, 45, 48, 51], [53, 81, 84, 87], [58, 71, 74, 77]])
                                        }
                                    ))),
                                    function(t) {
                                        return Yf[Jf(537)](this, arguments)
                                    }
                            )
                        }, {
                            key: am(503),
                            value: (Xf = am,
                                    Zf = h(u()[Xf(456)]((function t(e) {
                                            var i, n, r, s, a, o, h;
                                            return u().wrap((function(t) {
                                                    for (var l = Ff; ; )
                                                        switch (t[l(469)] = t[l(518)]) {
                                                            case 0:
                                                                if (o = function(t) {
                                                                    var e, i = l, r = t[i(608)], s = t[i(473)];
                                                                    if ("{}" === JSON[i(501)](n))
                                                                        return !1;
                                                                    for (e in n)
                                                                        if (n[e] == s)
                                                                            return n[e + "," + r] = s,
                                                                                delete n[e],
                                                                                !0;
                                                                    return !1
                                                                }
                                                                    ,
                                                                    i = e[l(615)]) {
                                                                    t[l(518)] = 4;
                                                                    break
                                                                }
                                                                throw "参数data 不能为空";
                                                            case 4:
                                                                if (Array[l(569)](i)) {
                                                                    t[l(518)] = 6;
                                                                    break
                                                                }
                                                                throw l(614);
                                                            case 6:
                                                                n = {},
                                                                    r = Bf(i);
                                                                try {
                                                                    for (r.s(); !(s = r.n())[l(576)]; )
                                                                        (a = s[l(450)])[l(608)] && a[l(473)] && (o(a) || (n[a[l(608)]] = a[l(473)]))
                                                                } catch (t) {
                                                                    r.e(t)
                                                                } finally {
                                                                    r.f()
                                                                }
                                                                for (h in n)
                                                                    (this[l(519)][h] && this[l(519)][h] != n[h] || !this[l(519)][h]) && this[l(458)]({
                                                                        image: n[h],
                                                                        layers: h,
                                                                        jishu: !1
                                                                    });
                                                                Hf(this[l(531)], this[l(570)], 1);
                                                            case 11:
                                                            case "end":
                                                                return t[l(433)]()
                                                        }
                                                }
                                            ), t, this)
                                        }
                                    ))),
                                    function(t) {
                                        return Zf[Xf(537)](this, arguments)
                                    }
                            )
                        }, {
                            key: am(491),
                            value: function(t) {
                                var e = am
                                    , i = this
                                    , n = void 0 === (r = t[e(595)]) ? {} : r
                                    , r = t[e(550)]
                                    , s = t.raster
                                    , a = t[e(530)]
                                    , o = t[e(454)];
                                t = t.layerName;
                                if (jf(this[e(570)], this[e(531)])) {
                                    var h = {
                                        layer: {
                                            BoundingRect: n.BoundingRect[e(481)](),
                                            IsVisible: !0,
                                            Matrix3: n[e(555)],
                                            OriginalSize: n[e(500)],
                                            Points: n[e(494)],
                                            Type: "SmartObject",
                                            VectorMask: null,
                                            Height: n[e(527)][3],
                                            Width: n[e(527)][2],
                                            X: n[e(527)][0],
                                            Y: n[e(527)][1],
                                            layerName: t
                                        },
                                        cropDesignCanvas: r,
                                        psdWidth: o,
                                        psdHeight: a,
                                        webglCanvas: this[e(492)]
                                    };
                                    return new Promise((function(t) {
                                            var r = e;
                                            (new Sf)[r(514)](h, (function(e) {
                                                    var h, l, u, c, d, p, f = r;
                                                    s && (h = e,
                                                    (h = n[f(520)] ? i[f(599)](n[f(520)], e, o, a) : h)[f(442)] != h[f(573)] && ((p = document[f(431)](f(550)))[f(442)] = 1e3,
                                                        p.height = 1e3,
                                                        l = p[f(498)]("2d"),
                                                        u = p[f(442)],
                                                        (c = p[f(573)]) < u / (d = h[f(442)] / h[f(573)]) ? u = c * d : c = u / d,
                                                        e = (p[f(442)] - u) / 2,
                                                        d = (p[f(573)] - c) / 2,
                                                        l[f(559)](h, e, d, u, c),
                                                        h = p),
                                                        s.matrix = new om.paper.Matrix(1,0,0,0,1,0,0),
                                                        s[f(541)][f(442)] = s[f(583)][f(541)][f(442)],
                                                        s[f(541)][f(573)] = s[f(583)][f(541)][f(573)],
                                                        s[f(541)].left = 0,
                                                        s[f(541)][f(497)] = 0,
                                                        (p = s.getContext("2d"))[f(523)](0, 0, s[f(442)], s[f(573)]),
                                                        p[f(559)](h, 0, 0, s[f(442)], s[f(573)]),
                                                        s[f(583)].update()),
                                                        t(s)
                                                }
                                            ))
                                        }
                                    ))
                                }
                            }
                        }, {
                            key: am(599),
                            value: function(t, e, i, n) {
                                var r = am
                                    , s = this.clipCanvas;
                                s[r(442)] = i,
                                    s.height = n;
                                var a = s.getContext("2d");
                                return a[r(523)](0, 0, i, n),
                                    new Mf.Z(t)[r(587)]().beginPath().to(a),
                                    a[r(585)](),
                                    a[r(559)](e, 0, 0, i, n),
                                    s
                            }
                        }]),
                            S = om;
                        function om(t, i) {
                            var n = Ff
                                , r = i[n(526)]
                                , s = i.psdSkus
                                , a = i[n(570)]
                                , o = i[n(531)]
                                , h = void 0 === (l = i.zoomIn) || l
                                , l = i[n(612)];
                            i = i[n(552)];
                            if (e(this, om),
                                this.id = t,
                                this[n(432)] = document[n(594)](t),
                                this[n(432)][n(600)][n(478)] = "relative",
                                this[n(511)] = this[n(432)].offsetWidth,
                                this[n(565)] = document.createElement(n(584)),
                                this[n(565)].className = "foxpsd_wrap",
                                this[n(432)][n(611)][n(548)](this[n(565)]),
                                this[n(432)][n(611)][n(505)](this[n(432)]),
                                this[n(565)][n(548)](this[n(432)]),
                                !this[n(432)])
                                throw "没有指定element id";
                            if (i && (Wf = i),
                                this[n(597)] = [],
                            !r || !Array.isArray(r)) {
                                if (!s || !Array[n(569)](s))
                                    throw "请传入 list 或 psdSkus";
                                if (10 < s[n(557)])
                                    throw n(446);
                                this[n(507)] = s
                            }
                            if (!a)
                                throw n(438);
                            if (!o)
                                throw "请传入 token";
                            this[n(597)] = r || [],
                                this[n(570)] = a,
                                this[n(531)] = o,
                                this[n(551)] = "",
                                this.carousel = null,
                                this[n(579)] = document.createElement(n(550)),
                                this[n(536)] = h,
                                this[n(612)] = l,
                                this[n(480)] = !1,
                                this[n(577)] = null,
                                this[n(486)] = null,
                                this[n(519)] = {},
                                window[n(588)] ? this.webglCanvas = new OffscreenCanvas(1,1) : this[n(492)] = document[n(431)](n(550)),
                                this[n(492)][n(442)] = 0,
                                this[n(492)][n(573)] = 0,
                                this[n(598)]()
                        }
                        a(S, "paper", w());
                        const hm = S
                    }
                )(),
                    n.default
            }
        )()
    }
));
