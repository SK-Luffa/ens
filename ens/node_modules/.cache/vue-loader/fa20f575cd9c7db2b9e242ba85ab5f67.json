{"remainingRequest":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/ens/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/ens/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/ens/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/ens/src/components/BottomNavigation/xml/FAQ.vue?vue&type=template&id=2fcbf284&scoped=true&","dependencies":[{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/ens/src/components/BottomNavigation/xml/FAQ.vue","mtime":1661335178517},{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/ens/node_modules/cache-loader/dist/cjs.js","mtime":1665559060439},{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/ens/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1665559060933},{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/ens/node_modules/cache-loader/dist/cjs.js","mtime":1665559060439},{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/ens/node_modules/vue-loader/lib/index.js","mtime":1665559060829}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function () {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "Section0", staticStyle: { "layout-grid": "15.6000pt" } },
    [
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _c("font", { staticClass: "FAQ", attrs: { face: "Calibri" } }, [
              _vm._v("FAQ"),
            ]),
          ],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p", [_vm._v(" ")])],
          1
        ),
      ]),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: { "mso-list": "l1 level1 lfo1" },
        },
        [
          _vm._m(0),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v("What type of file will I receive?")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _c("font", { attrs: { face: "Calibri" } }, [
              _vm._v(
                "Over 95% download files are editable layered PSD/TIFF/AI/EPS file."
              ),
            ]),
          ],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _c("font", { attrs: { face: "Calibri" } }, [
              _vm._v(
                "About 5% download files are non-editable but high-resolution JPG/(non-layered) PSD files."
              ),
            ]),
          ],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _c("font", { attrs: { face: "Calibri" } }, [
              _vm._v(
                "Please read the description of the downloaded file before purchasing the design. "
              ),
            ]),
          ],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p", [_vm._v(" ")])],
          1
        ),
      ]),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: { "mso-list": "l1 level1 lfo1" },
        },
        [
          _vm._m(1),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _c("font", { attrs: { face: "Calibri" } }, [
                _vm._v(
                  "What should I do if the file cannot be downloaded / cannot be opened?"
                ),
              ]),
            ],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(
              "If you have any file issue after your purchase, which includes but not limits to, unable to download the file, unable to open the file or the file doesn’t meet the description on our website. Please contact contact@patternbuy.com. we can contact the designer to resolve any file or design problems. If we are now able to contact the designer and fix the file, we will give you the refund. "
            ),
          ]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c(
        "p",
        { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
        [
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _vm._v("If you download an extra large file"),
              _c("font", { attrs: { face: "宋体" } }, [_vm._v("，")]),
              _c("font", { attrs: { face: "Calibri" } }, [
                _vm._v("for example"),
              ]),
              _c("font", { attrs: { face: "宋体" } }, [_vm._v("，")]),
              _c("font", { attrs: { face: "Calibri" } }, [
                _vm._v(
                  "a 20G PSB file and unable to open for hardware or software reason, please contact@patternbuy.com"
                ),
              ]),
              _c("font", { attrs: { face: "宋体" } }, [_vm._v("，")]),
              _c("font", { attrs: { face: "Calibri" } }, [
                _vm._v("we are glad to send you a reduced dimension file."),
              ]),
            ],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p", [_vm._v(" ")])],
          1
        ),
      ]),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: { "mso-list": "l1 level1 lfo1" },
        },
        [
          _vm._m(2),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _vm._v(
                "What should I do when the files do not meet the description?"
              ),
            ]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("We cannot guarantee the description is 100% mistaken free.")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v(" ")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(
              "Although both the files and corresponding description has been thoroughly reviewed before listing, there might still be minor mistakes in the description due the complexity and uniqueness of each design. "
            ),
          ]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _c("font", { attrs: { face: "Calibri" } }, [
              _vm._v(
                "Please contact contact@patternbuy.com. we can contact the designer to resolve any file or design problems. If we are now able to contact the designer and fix the file, we will give you the refund. "
              ),
            ]),
          ],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p", [_vm._v(" ")])],
          1
        ),
      ]),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: { "mso-list": "l1 level1 lfo1" },
        },
        [
          _vm._m(3),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v("What ")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("does")])],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v(" a Layered ")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _c("font", { attrs: { face: "Calibri" } }, [
                _vm._v("PSD/TIFF/AI/EPS file mean"),
              ]),
            ],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v("?")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("Unless described in the design description, a layered")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(" "),
            _c("font", { attrs: { face: "Calibri" } }, [_vm._v("file ")]),
          ],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("generally ")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("means")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(
              " different elements in different layer rather than different colors in different layer. We do not provide color breakdown file unless specified. "
            ),
          ]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("Normally, ")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("a Layered ")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _c("font", { attrs: { face: "Calibri" } }, [
              _vm._v(
                "PSD/TIFF/AI/EPS file means an editable original file, it includes a separate background and several element layers. "
              ),
            ]),
          ],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(
              "Due to the uniqueness of each design, each designer may utilize more or less layers during the designing work, some work-in-process layers may be combined or even deleted. In some situation, the hand painting, for example, the electronic file is scanned directly from physical artworks, which means we are impossible to provide very detailed layers. "
            ),
          ]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _c("font", { attrs: { face: "Calibri" } }, [
              _vm._v(
                "The Licensed Design has not been created to meet your individual requirements and it is your sole responsibility to satisfy yourself prior to entering into this agreement that the Licensed Design will meet your requirements."
              ),
            ]),
          ],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p", [_vm._v(" ")])],
          1
        ),
      ]),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: { "mso-list": "l1 level1 lfo1" },
        },
        [
          _vm._m(4),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _vm._v(
                "Can I find the complete element from original file if only part of the element has been shown in the final design? "
              ),
            ]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(
              "Some designers will design and save the complete element in certain layers during their design work while some not, thus we do not guarantee you can find the complete elements from the files. But please be sure that the file will be the same to which has been shown in the description."
            ),
          ]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p", [_vm._v(" ")])],
          1
        ),
      ]),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: { "mso-list": "l1 level1 lfo1" },
        },
        [
          _vm._m(5),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _c("font", { attrs: { face: "Calibri" } }, [
                _vm._v("Can I download "),
              ]),
            ],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _c("font", { attrs: { face: "Calibri" } }, [
                _vm._v("Color separation"),
              ]),
            ],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _vm._v(" "),
              _c("font", { attrs: { face: "Calibri" } }, [_vm._v("file")]),
            ],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _c("font", { attrs: { face: "宋体" } }, [_vm._v("？")]),
              _c("font", { attrs: { face: "Calibri" } }, [_vm._v("If not")]),
              _c("font", { attrs: { face: "宋体" } }, [_vm._v("，")]),
              _c("font", { attrs: { face: "Calibri" } }, [
                _vm._v("Do you offer Color separation?"),
              ]),
            ],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("Unless described in the design description, a layered")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(" "),
            _c("font", { attrs: { face: "Calibri" } }, [_vm._v("file ")]),
          ],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("generally ")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("means")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(
              " different elements in different layer rather than different colors in different layer. We do not provide color "
            ),
          ]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("separatio")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("n")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v(" file unless specified.")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("We are also not able to provide the color ")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("separation")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(
              " service. We advise to enquire the factory or the painting service vender."
            ),
          ]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p", [_vm._v(" ")])],
          1
        ),
      ]),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: { "mso-list": "l1 level1 lfo1" },
        },
        [
          _vm._m(6),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("C")])],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v("an I easily change the color of the design")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v(" ")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v("?")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(
              "We do not provide color breakdown file unless specified which means it is not possible to change the color with one click. But you can still use the designing software to change the color."
            ),
          ]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p", [_vm._v(" ")])],
          1
        ),
      ]),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: { "mso-list": "l1 level1 lfo1" },
        },
        [
          _vm._m(7),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v("What ")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("does")])],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v(" Exclusive License")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _vm._v(" "),
              _c("font", { attrs: { face: "Calibri" } }, [_vm._v("mean?")]),
            ],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: {
            "margin-left": "10.5000pt",
            "text-indent": "-10.5000pt",
            "mso-char-indent-count": "-1.0000",
          },
        },
        [
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v("Exclusive License")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _vm._v(" "),
              _c("font", { attrs: { face: "Calibri" } }, [_vm._v("means ")]),
            ],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _vm._v(
                "the design will be delisted permanently from our website and you will "
              ),
            ]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: {
            "margin-left": "10.5000pt",
            "text-indent": "-10.5000pt",
            "mso-char-indent-count": "-1.0000",
          },
        },
        [
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v("the exclusive licensee of the design.")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: {
            "margin-left": "10.5000pt",
            "text-indent": "-10.5000pt",
            "mso-char-indent-count": "-1.0000",
          },
        },
        [
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p", [_vm._v(" ")])],
            1
          ),
        ]
      ),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p", [_vm._v(" ")])],
          1
        ),
      ]),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: { "mso-list": "l1 level1 lfo1" },
        },
        [
          _vm._m(8),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _c("font", { attrs: { face: "Calibri" } }, [
                _vm._v("What is the duration of each "),
              ]),
            ],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v("License")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("font", { attrs: { face: "宋体" } }, [_vm._v("？")])],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("All the License no matter what type")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(" "),
            _c("font", { attrs: { face: "Calibri" } }, [_vm._v("is ")]),
          ],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("permanent")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v(".")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p", [_vm._v(" ")])],
          1
        ),
      ]),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: { "mso-list": "l1 level1 lfo1" },
        },
        [
          _vm._m(9),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v("Can I make change of the purchased design")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("font", { attrs: { face: "宋体" } }, [_vm._v("？")])],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(
              "Yes. It is your decision to use the original design or make further changes. The license is same for both original design or your work based on our design.  "
            ),
          ]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p", [_vm._v(" ")])],
          1
        ),
      ]),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: { "mso-list": "l1 level1 lfo1" },
        },
        [
          _vm._m(10),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v("Do I need to credit ")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _c("font", { attrs: { face: "Calibri" } }, [
                _vm._v("Patternbuy"),
              ]),
            ],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v("/the artist when I use ")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("design")])],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _vm._v("s or footage?"),
              _c("font", { attrs: { face: "宋体" } }, [_vm._v("？ ")]),
            ],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("Use in Editorial Content ")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(
              "Editorial use is the use of content for stories or articles that are newsworthy or of public interest. Some examples include news articles, documentaries, and all books. Any visual content can be used in editorial contexts"
            ),
          ]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v(".")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("If you use any ")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("design")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(
              " for editorial pieces, you must include proper attribution. Using "
            ),
          ]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("Patternbuy")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v(" ")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("design")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(
              " in an editorial piece requires attribution to give credit."
            ),
          ]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("The correct format looks like this: \"Artist's Name")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _c("font", { attrs: { face: "Calibri" } }, [
              _vm._v("(if it shows)or Pattern ID"),
            ]),
          ],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("/")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("Patternbuy")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v('.com"')]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p", [_vm._v(" ")])],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("Use Related to Merchandise")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("Generally, you ")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _c("font", { attrs: { face: "Calibri" } }, [
              _vm._v("should, but not mandatory "),
            ]),
          ],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("credit ")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("Patternbuy")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v(" when using ")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("design")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(
              "s for merchandise as long as it's \"commercially reasonable.\" It can be challenging to figure out how to include this credit for some merchandise. However, the attribution doesn't have to be affixed directly to the image. For example, you could include the credit on the bottom of a promotional branded mousepad."
            ),
          ]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v('The attribution should be in this format: "')]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("Design")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("(s) used under license from ")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("Patternbuy")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v('.com."')]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p", [_vm._v(" ")])],
          1
        ),
      ]),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: { "mso-list": "l1 level1 lfo1" },
        },
        [
          _vm._m(11),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v("Can I do returns and do you give refunds?")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("Y")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_vm._v("es. But only when both conditions are met as below:")]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: {
            "margin-left": "18.0000pt",
            "text-indent": "-18.0000pt",
            "mso-char-indent-count": "0.0000",
            "mso-list": "l0 level1 lfo2",
          },
        },
        [
          _vm._m(12),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _vm._v(
                "You need to inform us in 15 days after the purchase. 2. Quality issues or the design is not in "
              ),
            ]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: { "mso-para-margin-left": "0.0000gd" },
        },
        [
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _vm._v(
                "correspond to the description which affects your business use."
              ),
            ]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(
              "We will firstly try to fix the issue, if not possible, we are glad to accept the return and give you refunds. For detailed information of refunding, please refer to "
            ),
          ]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _c("font", { attrs: { face: "宋体" } }, [_vm._v("《")]),
            _c("font", { attrs: { face: "Calibri" } }, [
              _vm._v("Returns Policy"),
            ]),
            _c("font", { attrs: { face: "宋体" } }, [_vm._v("》")]),
          ],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p", [_vm._v(" ")])],
          1
        ),
      ]),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: { "mso-list": "l1 level1 lfo1" },
        },
        [
          _vm._m(13),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "宋体",
                "mso-ascii-font-family": "Calibri",
                "mso-hansi-font-family": "Calibri",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [
              _c("font", { attrs: { face: "Calibri" } }, [
                _vm._v("Can I sell my designs on Patternbuy?"),
              ]),
            ],
            1
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(
              "We are not opening the online contributor portal at this moment. We are planning to open to online contributor between 2023 and 2024."
            ),
          ]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p", [_vm._v(" ")])],
          1
        ),
      ]),
      _c(
        "p",
        {
          staticClass: "MsoNormal",
          staticStyle: { "mso-list": "l1 level1 lfo1" },
        },
        [
          _vm._m(14),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_vm._v("Where does the design com from in Patternbuy?")]
          ),
          _c(
            "span",
            {
              staticStyle: {
                "mso-spacerun": "'yes'",
                "font-family": "Calibri",
                "mso-fareast-font-family": "宋体",
                "mso-bidi-font-family": "'Times New Roman'",
                "font-size": "10.5000pt",
                "mso-font-kerning": "1.0000pt",
              },
            },
            [_c("o:p")],
            1
          ),
        ]
      ),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("font", { attrs: { face: "Calibri" } }, [_vm._v("A")])],
          1
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [
            _vm._v(
              "bout half of the design are from our in-house design professionals, while the other half are from our design partners which include institutions, studios and freelancer designers. "
            ),
          ]
        ),
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "宋体",
              "mso-ascii-font-family": "Calibri",
              "mso-hansi-font-family": "Calibri",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p")],
          1
        ),
      ]),
      _c("p", { staticClass: "MsoNormal" }, [
        _c(
          "span",
          {
            staticStyle: {
              "mso-spacerun": "'yes'",
              "font-family": "Calibri",
              "mso-fareast-font-family": "宋体",
              "mso-bidi-font-family": "'Times New Roman'",
              "font-size": "10.5000pt",
              "mso-font-kerning": "1.0000pt",
            },
          },
          [_c("o:p", [_vm._v(" ")])],
          1
        ),
      ]),
    ]
  )
}
var staticRenderFns = [
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "Calibri",
          "mso-fareast-font-family": "宋体",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("1."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "宋体",
          "mso-ascii-font-family": "Calibri",
          "mso-hansi-font-family": "Calibri",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("2."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "Calibri",
          "mso-fareast-font-family": "宋体",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("3."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "Calibri",
          "mso-fareast-font-family": "宋体",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("4."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "Calibri",
          "mso-fareast-font-family": "宋体",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("5."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "宋体",
          "mso-ascii-font-family": "Calibri",
          "mso-hansi-font-family": "Calibri",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("6."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "宋体",
          "mso-ascii-font-family": "Calibri",
          "mso-hansi-font-family": "Calibri",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("7."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "Calibri",
          "mso-fareast-font-family": "宋体",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("8."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "宋体",
          "mso-ascii-font-family": "Calibri",
          "mso-hansi-font-family": "Calibri",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("9."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "Calibri",
          "mso-fareast-font-family": "宋体",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("10."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "Calibri",
          "mso-fareast-font-family": "宋体",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("11."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "Calibri",
          "mso-fareast-font-family": "宋体",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("12."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "Calibri",
          "mso-fareast-font-family": "宋体",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("1."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "宋体",
          "mso-ascii-font-family": "Calibri",
          "mso-hansi-font-family": "Calibri",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("13."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "Calibri",
          "mso-fareast-font-family": "宋体",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("14."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
]
render._withStripped = true

export { render, staticRenderFns }"}]}