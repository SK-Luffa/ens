{"remainingRequest":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/src/components/BottomNavigation/xml/Comparisons.vue?vue&type=template&id=0775ab32&scoped=true&","dependencies":[{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/src/components/BottomNavigation/xml/Comparisons.vue","mtime":1661335178534},{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/cache-loader/dist/cjs.js","mtime":1665559060439},{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1665559060933},{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/cache-loader/dist/cjs.js","mtime":1665559060439},{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/vue-loader/lib/index.js","mtime":1665559060829}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function () {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", [
    _c(
      "div",
      { staticClass: "Section0", staticStyle: { "layout-grid": "15.6000pt" } },
      [
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "Calibri",
                    "mso-hansi-font-family": "Calibri",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c(
                    "font",
                    { staticClass: "FAQ", attrs: { face: "Calibri" } },
                    [_vm._v("Patternbuy")]
                  ),
                ],
                1
              ),
            ]),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "Calibri",
                    "mso-hansi-font-family": "Calibri",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _vm._v(" "),
                  _c(
                    "font",
                    { staticClass: "FAQ", attrs: { face: "Calibri" } },
                    [_vm._v("License Agreement(s)")]
                  ),
                ],
                1
              ),
            ]),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "Calibri",
                    "mso-hansi-font-family": "Calibri",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Calibri Light'",
                  "mso-fareast-font-family": "宋体",
                  "mso-bidi-font-family": "'Times New Roman'",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _vm._m(0),
            _vm._m(1),
            _vm._m(2),
            _vm._m(3),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Calibri Light'",
                    "mso-hansi-font-family": "'Calibri Light'",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v("A"),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(4),
            _vm._m(5),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Calibri Light'",
                    "mso-hansi-font-family": "'Calibri Light'",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v("buy"),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(6),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Calibri Light'",
                    "mso-hansi-font-family": "'Calibri Light'",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v(","),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(7),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Calibri Light'",
                    "mso-hansi-font-family": "'Calibri Light'",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v("P"),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(8),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Calibri Light'",
                    "mso-hansi-font-family": "'Calibri Light'",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v("uy"),
                  ]),
                ],
                1
              ),
            ]),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "'Calibri Light'",
                    "mso-fareast-font-family": "宋体",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v("”)"),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(9),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "'Calibri Light'",
                    "mso-fareast-font-family": "宋体",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "'Calibri Light'",
                    "mso-fareast-font-family": "宋体",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [_c("o:p", [_vm._v(" ")])],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _vm._m(10),
            _vm._m(11),
            _vm._m(12),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Calibri Light'",
                    "mso-hansi-font-family": "'Calibri Light'",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v("P"),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(13),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Calibri Light'",
                    "mso-hansi-font-family": "'Calibri Light'",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v("uy"),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(14),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Calibri Light'",
                    "mso-hansi-font-family": "'Calibri Light'",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v("License Agreement"),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(15),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Calibri Light'",
                    "mso-hansi-font-family": "'Calibri Light'",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v("Patternbuy"),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(16),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Calibri Light'",
                    "mso-hansi-font-family": "'Calibri Light'",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v("Patternbuy"),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(17),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Calibri Light'",
                    "mso-hansi-font-family": "'Calibri Light'",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v("License Agreement"),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(18),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Calibri Light'",
                    "mso-hansi-font-family": "'Calibri Light'",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v("License Agreement"),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(19),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "'Calibri Light'",
                    "mso-fareast-font-family": "宋体",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "'Calibri Light'",
                    "mso-fareast-font-family": "宋体",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [_c("o:p", [_vm._v(" ")])],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _vm._m(20),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Calibri Light'",
                    "mso-hansi-font-family": "'Calibri Light'",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _vm._v(" "),
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v("or one legal subject"),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(21),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "'Calibri Light'",
                    "mso-fareast-font-family": "宋体",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "'Calibri Light'",
                    "mso-fareast-font-family": "宋体",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [_c("o:p", [_vm._v(" ")])],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _vm._m(22),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Calibri Light'",
                    "mso-hansi-font-family": "'Calibri Light'",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v("patternbuy"),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(23),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Calibri Light'",
                    "mso-hansi-font-family": "'Calibri Light'",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v("Patternbuy"),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(24),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "'Calibri Light'",
                    "mso-fareast-font-family": "宋体",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "'Calibri Light'",
                    "mso-fareast-font-family": "宋体",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [_c("o:p", [_vm._v(" ")])],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _vm._m(25),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Calibri Light'",
                    "mso-hansi-font-family": "'Calibri Light'",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [
                  _c("font", { attrs: { face: "Calibri Light" } }, [
                    _vm._v("patternbuy"),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(26),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "'Calibri Light'",
                    "mso-fareast-font-family": "宋体",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: { "text-align": "left", "mso-list": "l0 level1 lfo1" },
          },
          [
            _vm._m(27),
            _vm._m(28),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "'Calibri Light'",
                    "mso-fareast-font-family": "宋体",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Calibri Light'",
                  "mso-fareast-font-family": "宋体",
                  "mso-bidi-font-family": "'Times New Roman'",
                  "font-weight": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                },
              },
              [_c("font", { attrs: { face: "Calibri Light" } }, [_vm._v("“")])],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Calibri Light'",
                  "mso-hansi-font-family": "'Calibri Light'",
                  "mso-bidi-font-family": "'Times New Roman'",
                  "font-weight": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                },
              },
              [
                _c("font", { attrs: { face: "Calibri Light" } }, [
                  _vm._v("Design"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Calibri Light'",
                  "mso-fareast-font-family": "宋体",
                  "mso-bidi-font-family": "'Times New Roman'",
                  "font-weight": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                },
              },
              [_c("font", { attrs: { face: "Calibri Light" } }, [_vm._v("”")])],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Calibri Light'",
                  "mso-hansi-font-family": "'Calibri Light'",
                  "mso-bidi-font-family": "'Times New Roman'",
                  "font-weight": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                },
              },
              [
                _vm._v(" "),
                _c("font", { attrs: { face: "Calibri Light" } }, [
                  _vm._v(
                    "means include a print, pattern all metadata, or apparel graphic and shall keywords, descriptions and captions associated with that Design."
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Calibri Light'",
                  "mso-hansi-font-family": "'Calibri Light'",
                  "mso-bidi-font-family": "'Times New Roman'",
                  "font-weight": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Calibri Light'",
                  "mso-fareast-font-family": "宋体",
                  "mso-bidi-font-family": "'Times New Roman'",
                  "font-weight": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: { "text-align": "left", "mso-list": "l1 level1 lfo2" },
          },
          [
            _vm._m(29),
            _vm._m(30),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "'Calibri Light'",
                    "mso-fareast-font-family": "宋体",
                    "mso-bidi-font-family": "'Times New Roman'",
                    "font-weight": "bold",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Calibri Light'",
                  "mso-hansi-font-family": "'Calibri Light'",
                  "mso-bidi-font-family": "'Times New Roman'",
                  "font-weight": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                },
              },
              [
                _c("font", { attrs: { face: "Calibri Light" } }, [
                  _vm._v("Patternbuy"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Calibri Light'",
                  "mso-fareast-font-family": "宋体",
                  "mso-bidi-font-family": "'Times New Roman'",
                  "font-weight": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                },
              },
              [_vm._v(" hereby grants you a non-exclusive")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Calibri Light'",
                  "mso-hansi-font-family": "'Calibri Light'",
                  "mso-bidi-font-family": "'Times New Roman'",
                  "font-weight": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                },
              },
              [
                _c("font", { attrs: { face: "Calibri Light" } }, [
                  _vm._v("(except "),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("exclusive"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v(" license")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("font", { attrs: { face: "Segoe UI" } }, [_vm._v(")")])],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Calibri Light'",
                  "mso-hansi-font-family": "'Calibri Light'",
                  "mso-bidi-font-family": "'Times New Roman'",
                  "font-weight": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                },
              },
              [_vm._v(" ")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Calibri Light'",
                  "mso-fareast-font-family": "宋体",
                  "mso-bidi-font-family": "'Times New Roman'",
                  "font-weight": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                },
              },
              [
                _vm._v(
                  ", non-transferable right to use, modify (except as expressly prohibited herein) and reproduce "
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Calibri Light'",
                  "mso-hansi-font-family": "'Calibri Light'",
                  "mso-bidi-font-family": "'Times New Roman'",
                  "font-weight": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                },
              },
              [
                _c("font", { attrs: { face: "Calibri Light" } }, [
                  _vm._v("Design(s)"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Calibri Light'",
                  "mso-fareast-font-family": "宋体",
                  "mso-bidi-font-family": "'Times New Roman'",
                  "font-weight": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                },
              },
              [
                _vm._v(
                  " worldwide, in perpetuity, as expressly permitted by the applicable license and subject to the limitations set forth herein:"
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Calibri Light'",
                  "mso-fareast-font-family": "宋体",
                  "mso-bidi-font-family": "'Times New Roman'",
                  "font-weight": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("font", { attrs: { face: "Segoe UI" } }, [_vm._v("2.1 ")])],
              1
            ),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Segoe UI'",
                    "mso-hansi-font-family": "'Segoe UI'",
                    "mso-bidi-font-family": "'Segoe UI'",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [
                  _c("font", { attrs: { face: "Segoe UI" } }, [
                    _vm._v("Personal (Non-exclusive)"),
                  ]),
                ],
                1
              ),
            ]),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Segoe UI'",
                    "mso-hansi-font-family": "'Segoe UI'",
                    "mso-bidi-font-family": "'Segoe UI'",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("Our Personal License is for personal use only and "),
                ]),
              ],
              1
            ),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Segoe UI'",
                    "mso-hansi-font-family": "'Segoe UI'",
                    "mso-bidi-font-family": "'Segoe UI'",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [
                  _c("font", { attrs: { face: "Segoe UI" } }, [
                    _vm._v("not for use on end products for sale"),
                  ]),
                ],
                1
              ),
            ]),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    ". This allows you to use the design for items that are non-commercial, personal social media accounts and any personal use that is not commecially related. The supplied downloadable file is a hi-resolution flat JPEG file."
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("font", { attrs: { face: "Segoe UI" } }, [_vm._v("2.2 ")])],
              1
            ),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Segoe UI'",
                    "mso-hansi-font-family": "'Segoe UI'",
                    "mso-bidi-font-family": "'Segoe UI'",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [
                  _c("font", { attrs: { face: "Segoe UI" } }, [
                    _vm._v("Commercial (Non-exclusive)"),
                  ]),
                ],
                1
              ),
            ]),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Segoe UI'",
                    "mso-hansi-font-family": "'Segoe UI'",
                    "mso-bidi-font-family": "'Segoe UI'",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("A ")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("COMMERCIAL")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v(" LICENSE grants you the right to use")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(" "),
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("designs"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v(":")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "42.2500pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "-21.2500pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l2 level1 lfo3",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(31),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  'As a digital reproduction, including on websites, in online advertising, in social media, in mobile advertising, mobile "apps", software, e-cards, e-publications (e-books, e-magazines, blogs, etc.), email marketing and in online media (including on video-sharing services such as YouTube, Dailymotion, Vimeo, etc'
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "., subject to the budget limitations do not exceed USD $10,000"
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v(");")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "42.2500pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "-21.2500pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l2 level1 lfo3",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(32),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  "Printed in physical form as part of product packaging and labeling, letterhead and business cards, point of sale advertising, CD and DVD cover art, or in the advertising and copy of tangible media, including magazines, newspapers, and books provided no Image is reproduced more than 500,000 times in the aggregate;"
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "42.2500pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "-21.2500pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l2 level1 lfo3",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(33),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  'As part of an "Out-of-Home" advertising campaign, including on billboards, street furniture, etc., provided the intended audience for such campaign is less than 500,000 gross impressions.'
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "42.2500pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "-21.2500pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l2 level1 lfo3",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(34),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  "Incorporated into film, video, television series, advertisement, or other audio-visual productions for distribution in any medium now known or hereafter devised, without regard to audience size, provided the budget for any such production does not exceed USD $10,000;"
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "42.2500pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "-21.2500pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l2 level1 lfo3",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(35),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  "For your own personal, non-commercial use (not for resale, download, distribution, or any commercial use of any kind)"
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "mso-para-margin-left": "0.0000gd",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("font", { attrs: { face: "Segoe UI" } }, [_vm._v("2.3  ")])],
              1
            ),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Segoe UI'",
                    "mso-hansi-font-family": "'Segoe UI'",
                    "mso-bidi-font-family": "'Segoe UI'",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [
                  _c("font", { attrs: { face: "Segoe UI" } }, [
                    _vm._v("Commercial Unlimited(Non-exclusive)"),
                  ]),
                ],
                1
              ),
            ]),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Segoe UI'",
                    "mso-hansi-font-family": "'Segoe UI'",
                    "mso-bidi-font-family": "'Segoe UI'",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "21.0000pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("AN COMMERCIAL UNLIMITED LICENSE")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v(" grants you the right to use ")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("designs"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  " (which rights are in addition to 1-5 above and exclusive to Commercial Unlimited Licenses):"
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "42.2500pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "-21.2500pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l5 level1 lfo4",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(36),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  "In any manner permitted under a Commercial License, without any limitation on the number of reproductions, impressions, or budget;"
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "42.2500pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "-21.2500pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l5 level1 lfo4",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(37),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  'Incorporated into merchandise intended for sale or promotional distribution (collectively "Merchandise"), including, without limitation, textiles, artwork, magnets, wall-art, calendars, toys, stationery, greeting cards, and any other physical reproduction for resale or distribution, provided that such Merchandise incorporates material creative or functional elements apart from the '
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("font", { attrs: { face: "Segoe UI" } }, [_vm._v("design")])],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("(s).")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "42.2500pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "-21.2500pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l5 level1 lfo4",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(38),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  "In wall art (and without requiring further creative or functional elements) for decorative purposes in a commercial space owned by you or your client, and not for sale."
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "42.2500pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "-21.2500pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l5 level1 lfo4",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(39),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  "Incorporated as elements of digital templates for sale or distribution."
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("font", { attrs: { face: "Segoe UI" } }, [_vm._v("2.4  ")])],
              1
            ),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Segoe UI'",
                    "mso-hansi-font-family": "'Segoe UI'",
                    "mso-bidi-font-family": "'Segoe UI'",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [
                  _c("font", { attrs: { face: "Segoe UI" } }, [
                    _vm._v("Exclusive"),
                  ]),
                ],
                1
              ),
            ]),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Segoe UI'",
                    "mso-hansi-font-family": "'Segoe UI'",
                    "mso-bidi-font-family": "'Segoe UI'",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-indent": "21.0000pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("AN")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(" "),
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("EXCLUSIVE"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v(" LICENSE")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v(" grants you the right to use designs")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "42.2500pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "-21.2500pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l3 level1 lfo5",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(40),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("In any manner permitted under a Commercial Unlimited")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("font", { attrs: { face: "Segoe UI" } }, [_vm._v(".")])],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "42.2500pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "-21.2500pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l3 level1 lfo5",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(41),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("Designs will be r"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("emoved from the site once purchased")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("font", { attrs: { face: "Segoe UI" } }, [_vm._v(".")])],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-indent": "21.0000pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "2.5  You hereby undertake not to use the Licensed Design in any way which could reasonably be said to be competitive with or damage Patternbuy"
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("font", { attrs: { face: "Segoe UI" } }, [_vm._v("’")])],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("s business."),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("font", { attrs: { face: "Segoe UI" } }, [_vm._v("2.6 ")])],
              1
            ),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Segoe UI'",
                    "mso-hansi-font-family": "'Segoe UI'",
                    "mso-bidi-font-family": "'Segoe UI'",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [
                  _c("font", { attrs: { face: "Segoe UI" } }, [
                    _vm._v("RESTRICTIONS ON USE OF Designs"),
                  ]),
                ],
                1
              ),
            ]),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("YOU MAY NOT:")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "42.2500pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "-21.2500pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l4 level1 lfo6",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(42),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("Use ")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("Designs"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  " other than as expressly provided by the license you purchased with respect to such "
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("Designs"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v(".")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "42.2500pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "-21.2500pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l4 level1 lfo6",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(43),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    'Resell, redistribute, provide access to, share or transfer any Designs except as specifically provided herein. For example and not by way of limitation, the foregoing prohibits displaying Content as, or as part of, a "gallery" of content through which third parties may search and select from such content.'
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "42.2500pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "-21.2500pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l4 level1 lfo6",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(44),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "Use Designs in a manner that infringes upon any third party's trademark or other intellectual property, or would give rise to a claim of deceptive advertising or unfair competition. "
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "42.2500pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "-21.2500pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l4 level1 lfo6",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(45),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "Use any Designs (in whole or in part) as a trademark, service mark, logo, or other indication of origin, or as part thereof."
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "42.2500pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "-21.2500pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l4 level1 lfo6",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(46),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "Falsely represent, expressly or by way of reasonable implication, that any Designs was created by you or a person other than the copyright holder(s) of that Designs."
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "0.0000pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "0.0000pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l1 level1 lfo2",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(47),
            _vm._m(48),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "'Segoe UI'",
                    "mso-fareast-font-family": "宋体",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("3.1 Patternbuy warrants and represents that:")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("font", { attrs: { face: "Segoe UI" } }, [_vm._v("3.1.1 ")])],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  "Patternbuy's contributors have granted Patternbuy all necessary rights in and to the Content to grant the rights set forth in clause"
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(" "),
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("1 and 2"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v(" as applicable.")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("font", { attrs: { face: "Segoe UI" } }, [_vm._v("3.1.2 ")])],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  "Designs in its original unaltered form and used in full compliance with this "
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("License Agreement"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  " and applicable law, will not: i) infringe any copyright, trademark or other intellectual property right; ii) violate any third parties' rights of privacy or publicity; iii) violate any US law, statute, ordinance, or regulation; or iv) be defamatory, libelous, pornographic or obscene."
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  "3.2 While Patternbuy makes commercially reasonable efforts to ensure the accuracy of keywords and descriptions, Patternbuy MAKES NO WARRANTIES AND/OR REPRESENTATIONS REGARDING ANY: I) KEYWORD, TITLES OR DESCRIPTIONS; OR II) AUDIO IN VIDEO. For the sake of clarity, Patternbuy will not indemnify or have any liability in respect of any claims arising from inaccurate keyword, titles or descriptions, any audio in Video."
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  '3.3 Patternbuy MAKES NO REPRESENTATIONS OR WARRANTIES WHATSOEVER OTHER THAN THOSE EXPRESSLY MADE IN THIS "WARRANTIES AND REPRESENTATIONS" SECTION.'
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "0.0000pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "0.0000pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l1 level1 lfo2",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(49),
            _vm._m(50),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "'Segoe UI'",
                    "mso-fareast-font-family": "宋体",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "0.0000pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "0.0000pt",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l1 level2 lfo2",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(51),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  "The Licensed Design has not been created to meet your individual requirements and it is your sole responsibility to satisfy yourself prior to entering into this agreement that the Licensed Design will meet your requirements. "
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("Patternbuy"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  " makes no warranty or representation in that respect and no failure of any part or the whole of the Licensed Design to be suitable for your requirements shall entitle you not to accept the same or give rise to any right or claim against "
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("Patternbuy"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v(".")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "mso-para-margin-left": "0.0000gd",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "0.0000pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "0.0000pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l1 level2 lfo2",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(52),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("Whilst ")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("Patternbuy"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  " makes all reasonable attempts to exclude viruses from the Licensed Design, it cannot ensure such exclusion and no liability is accepted for viruses. Thus, you are recommended on receipt to thoroughly scan the Licensed Design and insure yourself against any associated risk."
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "mso-para-margin-left": "0.0000gd",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "0.0000pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "0.0000pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l1 level2 lfo2",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(53),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("To the fullest extent permitted by law, ")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("Patternbuy"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  " shall not be liable to you for any costs, expenses, loss or damage (whether direct, indirect or consequential and whether economic or other) arising from your exercise of the rights granted to you under this agreement."
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "mso-para-margin-left": "0.0000gd",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "0.0000pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "0.0000pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l1 level2 lfo2",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(54),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    'Subject to the terms hereof, and provided that you have not breached the terms of this or any other agreement with Patternbuy, Patternbuy will defend, indemnify, and hold you harmless up to the applicable "Limit of Liability" set forth below. Such indemnification is solely limited to Customer'
                  ),
                ]),
                _c("font", { attrs: { face: "宋体" } }, [_vm._v("’")]),
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "s direct damages arising from a third-party claim directly attributable to Patternbuy"
                  ),
                ]),
                _c("font", { attrs: { face: "宋体" } }, [_vm._v("’")]),
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "s breach of the express warranties and representations made in Part III hereof, together with associated expenses (including reasonable attorneys"
                  ),
                ]),
                _c("font", { attrs: { face: "宋体" } }, [_vm._v("’ ")]),
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "fees). Indemnification is conditioned upon you notifying Patternbuy, in writing, of any such claim or threatened claim, no later than five (5) business days from the date you know or reasonably should have known of the claim or threatened claim. Such notification must include all details of the claim then known to you (e.g., the use of Content at issue, the name and contact information of the person and/or entity making the claim, copies of any correspondence received and/or sent in connection with the claim). The notification must be emailed to Patternbuy at contact@Patternbuy.com. Patternbuy shall have the right to assume the handling, settlement or defense of any claim or litigation to which this indemnification applies. You agree to cooperate with Patternbuy in the defense of any such claim and shall have the right to participate in any litigation at your own expense. You agree that Patternbuy is not liable for any legal fees and/or other costs incurred by you or on your behalf prior to Patternbuy having a reasonable opportunity to analyze such claim"
                  ),
                ]),
                _c("font", { attrs: { face: "宋体" } }, [_vm._v("’")]),
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("s validity."),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "mso-para-margin-left": "0.0000gd",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "0.0000pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "0.0000pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l1 level2 lfo2",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(55),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "Patternbuy shall not be liable for any damages, costs or losses arising as a result of modifications made to the Content or due to the context in which you use the Content. "
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "mso-para-margin-left": "0.0000gd",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("4.6 Limit of Liability: N"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  "o matter how many claims are made and whatever the basis of such claims,"
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(" "),
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("Patternbuy"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    '’s total maximum aggregate obligation and liability (the "Limit of Liability") arising out of each of Customer’s:'
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("Commercial License")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v(" shall be USD $10,000.")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("Commercial Unlimited License")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v(" ")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("shall be USD $250,000.")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("Exclusive")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v(" ")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("License")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v(" shall be USD $")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("font", { attrs: { face: "Segoe UI" } }, [_vm._v("50")])],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("0,000.")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "4.7 You will indemnify and hold Patternbuy, its officers, employees, shareholders, directors, managers, members and suppliers, harmless against any damages or liability of any kind arising from any use of the Design(s) other than the uses expressly permitted by this License Agreement. You further agree to indemnify Patternbuy for all costs and expenses that Patternbuy incurs in the event that you breach any of the terms of this or any other agreement with Patternbuy. "
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "margin-left": "0.0000pt",
              "mso-para-margin-left": "0.0000gd",
              "text-indent": "0.0000pt",
              "mso-char-indent-count": "0.0000",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
              "mso-list": "l1 level1 lfo2",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(56),
            _vm._m(57),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "'Segoe UI'",
                    "mso-fareast-font-family": "宋体",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "mso-para-margin-left": "0.0000gd",
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    '5.1 "Non-transferable" as used herein means that except as specifically provided in this License Agreement, you may not sell, rent, load, give, sublicense, or otherwise transfer to anyone, Content or the right to use Content. You may however, make a one-time transfer of Content to a third party for the sole purpose of causing such third party to print and/or manufacture your goods incorporating Content subject to the terms and conditions herein. If you become aware that any social media website uses any Content in a manner that exceeds your license hereunder, you agree to remove all derivative works incorporating Content from such Social Media Site, and to promptly notify Patternbuy of each such social media website\'s use. You agree to take all commercially reasonable steps to prevent third parties from duplicating any Content. If you become aware of any unauthorized duplication of any Content please email contact@patternbuy.com.'
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "5.2 Upon notice from Patternbuy or if you learn that any Content is subject to a threatened or actual claim of infringement, violation of another right, or any other claim for which Patternbuy may be liable, or if Patternbuy removes any Content due to perceived business risk as determined in Patternbuy's reasonable discretion and gives you notice of such removal, you will remove the Content from your computer systems and storage devices (electronic or physical) and, if possible, cease any future use of the removed Content at your own expense. Patternbuy shall provide you with comparable Content (which comparability will be determined by Patternbuy in its reasonable commercial judgment) free of charge, but subject to the terms and conditions of this License Agreement."
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "5.3 If you use any Content as part of work product created for or delivered to a client or customer, you will disclose the identities of such clients or customers to Patternbuy, upon Patternbuy"
                  ),
                ]),
                _c("font", { attrs: { face: "宋体" } }, [_vm._v("’")]),
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("s reasonable request."),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "5.4 Neither party may assign this agreement, without the prior written approval of the other party, except that Patternbuy may assign this agreement to a subsidiary, an affiliated company within the Patternbuy group, the entity that results from a merger or other corporate reorganization involving Patternbuy, or an entity that acquires all or substantially all of Patternbuy"
                  ),
                ]),
                _c("font", { attrs: { face: "宋体" } }, [_vm._v("’")]),
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("s assets or capital stock."),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "5.5 If you are entering into this License Agreement on behalf of your employer or other entity, you warrant and represent that you have the full right and authority to do so. In the event that you do not have such authority, you agree that you will be personally liable to Patternbuy for any breaches of the terms of this License Agreement. You hereby grant Patternbuy a worldwide, non-exclusive, limited license to use your trademarks in Patternbuy's promotional materials, including a public customer list. Patternbuy's use of your trademarks shall at all times conform to your then-current trademark use policies as made available to Patternbuy and shall at all times inure to your benefit. Patternbuy further agrees that it will use commercially reasonable efforts to terminate any particular use of your trademark no later than thirty (30) days from the date of receipt by Patternbuy of your email request to contact@patternbuy.com."
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("font", { attrs: { face: "Segoe UI" } }, [_vm._v("5.6 ")])],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v("If any individual term of this ")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("License Agreement"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _vm._v(
                  " is found to be invalid or unenforceable by any legal or regulatory body of competent jurisdiction, such finding will be limited solely to such invalid or unenforceable part, without affecting the remaining parts of such individual term, or any other part of this "
                ),
              ]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("License Agreement"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v(", so that this ")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("License Agreement"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_vm._v(" shall otherwise remain in full force and effect.")]
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "5.7 Unless otherwise specified in the coupon, any coupon or discount code applied to a purchase hereunder shall apply only to the first payment made in connection with such purchase. "
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "5.8 All notices to be served in accordance with this agreement may be served by email. The email address of Patternbuy shall be as displayed on the Website from time to time and your email address shall be as submitted by you to the Website upon the purchase of the licence to use the Design."
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v("5.9 Download"),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "After purchase, you can download the file of your digital design from your account."
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "If for some instances that the design is not available for purchase and we are therefore not able to fulfill your order, you will be notified immediately."
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          { staticClass: "MsoNormal", staticStyle: { "text-align": "left" } },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [
                _c("font", { attrs: { face: "Segoe UI" } }, [
                  _vm._v(
                    "If also you have any problems at all with the download please email us in your first instance at contact@patternbuy.com"
                  ),
                ]),
              ],
              1
            ),
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "'Segoe UI'",
                  "mso-fareast-font-family": "宋体",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p")],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("o:p", [_vm._v(" ")])],
              1
            ),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c(
              "span",
              {
                staticStyle: {
                  "mso-spacerun": "'yes'",
                  "font-family": "宋体",
                  "mso-ascii-font-family": "'Segoe UI'",
                  "mso-hansi-font-family": "'Segoe UI'",
                  "mso-bidi-font-family": "'Segoe UI'",
                  color: "rgb(74,74,74)",
                  "letter-spacing": "0.0000pt",
                  "font-weight": "normal",
                  "text-transform": "none",
                  "font-style": "normal",
                  "font-size": "10.5000pt",
                  "mso-font-kerning": "1.0000pt",
                  background: "rgb(255,255,255)",
                  "mso-shading": "rgb(255,255,255)",
                },
              },
              [_c("font", { attrs: { face: "Segoe UI" } }, [_vm._v("5.10 ")])],
              1
            ),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Segoe UI'",
                    "mso-hansi-font-family": "'Segoe UI'",
                    "mso-bidi-font-family": "'Segoe UI'",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [
                  _c("font", { attrs: { face: "Segoe UI" } }, [
                    _vm._v(
                      "In the event that you breach any of the terms of this or any other agreement with Patternbuy, Patternbuy shall have the right to terminate your account without further notice, in addition to Patternbuy's other rights at law and/or equity. Patternbuy shall be under no obligation to refund any fees paid by you in the event that your account is terminated by reason of a breach."
                    ),
                  ]),
                ],
                1
              ),
            ]),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Segoe UI'",
                    "mso-hansi-font-family": "'Segoe UI'",
                    "mso-bidi-font-family": "'Segoe UI'",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Segoe UI'",
                    "mso-hansi-font-family": "'Segoe UI'",
                    "mso-bidi-font-family": "'Segoe UI'",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [_c("o:p", [_vm._v(" ")])],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Segoe UI'",
                    "mso-hansi-font-family": "'Segoe UI'",
                    "mso-bidi-font-family": "'Segoe UI'",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [_c("o:p", [_vm._v(" ")])],
                1
              ),
            ]),
          ]
        ),
        _c(
          "p",
          {
            staticClass: "MsoNormal",
            staticStyle: {
              "text-align": "justify",
              "text-justify": "inter-ideograph",
            },
            attrs: { align: "justify" },
          },
          [
            _vm._m(58),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "宋体",
                    "mso-ascii-font-family": "'Segoe UI'",
                    "mso-hansi-font-family": "'Segoe UI'",
                    "mso-bidi-font-family": "'Segoe UI'",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [
                  _c("font", { attrs: { face: "Segoe UI" } }, [
                    _vm._v("August"),
                  ]),
                ],
                1
              ),
            ]),
            _vm._m(59),
            _c("b", [
              _c(
                "span",
                {
                  staticStyle: {
                    "mso-spacerun": "'yes'",
                    "font-family": "'Segoe UI'",
                    "mso-fareast-font-family": "宋体",
                    color: "rgb(74,74,74)",
                    "letter-spacing": "0.0000pt",
                    "font-weight": "bold",
                    "text-transform": "none",
                    "font-style": "normal",
                    "font-size": "10.5000pt",
                    "mso-font-kerning": "1.0000pt",
                    background: "rgb(255,255,255)",
                    "mso-shading": "rgb(255,255,255)",
                  },
                },
                [_c("o:p")],
                1
              ),
            ]),
          ]
        ),
      ]
    ),
  ])
}
var staticRenderFns = [
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [
          _vm._v(
            "Important notice: Please read carefully before entering into this agreement. "
          ),
        ]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v("The following")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "宋体",
            "mso-ascii-font-family": "'Calibri Light'",
            "mso-hansi-font-family": "'Calibri Light'",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v(" ")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [
          _vm._v(
            "License Agreement is a legal agreement between you or the employer or other entity on whose behalf you are entering into this "
          ),
        ]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v('greement ("you" or "Customer") and ')]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v("pattern")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [
          _vm._v(
            " limited, incorporated and registered in room 06,13a/f,south tower, world finance centreharbour city,17 canton road,tsim sha tsui"
          ),
        ]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v("kowloon,hong kong (“")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v("atternb")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [
          _vm._v(
            "and sets forth the rights and obligations with respect to any Content licensed by you."
          ),
        ]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v("Please revisit this License Agreement")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "宋体",
            "mso-ascii-font-family": "'Calibri Light'",
            "mso-hansi-font-family": "'Calibri Light'",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v(" ")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v("when you purchase any Content licenses. ")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v("atternb")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v(" reserves the right to modify the ")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [
          _vm._v(
            " at any time in its sole discretion. Prior to such changes becoming effective, "
          ),
        ]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [
          _vm._v(
            " will use reasonable efforts to notify you of any such change. Such notice may be made by email to the email address on file in your "
          ),
        ]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [
          _vm._v(
            " account, an announcement on this page, your login page, and/or by other means. Modifications to this "
          ),
        ]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [
          _vm._v(
            " will only apply to prospective purchases (including any automated renewals). By licensing Content following any such modifications, you agree to be bound to the "
          ),
        ]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v(" as modified.")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v("This is a single seat license authorizing one natural person")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v(" to license, download and use content. ")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v("If you wish to order your chosen design from ")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [
          _vm._v(
            ".com you must indicate your acceptance of these terms and conditions by clicking the ‘i accept’ button below. "
          ),
        ]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [
          _vm._v(
            " will be deemed to have entered into this agreement with you once you have clicked ‘i accept’."
          ),
        ]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [
          _vm._v(
            "If you do not agree to the terms of this agreement, you will not have any right to use any design available to be licensed on "
          ),
        ]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v(".com.")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Calibri Light'",
          "mso-fareast-font-family": "宋体",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-weight": "bold",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("1."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v("Definitions")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Calibri Light'",
          "mso-fareast-font-family": "宋体",
          "mso-bidi-font-family": "'Times New Roman'",
          "font-weight": "bold",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("2."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Calibri Light'",
            "mso-fareast-font-family": "宋体",
            "mso-bidi-font-family": "'Times New Roman'",
            "font-weight": "bold",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
          },
        },
        [_vm._v("License Terms")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("1)"),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("2)"),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("3)"),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("4)"),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("5)"),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "normal",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("1)"),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "normal",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("2)"),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "normal",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("3)"),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "normal",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("4)"),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "normal",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("1)"),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "normal",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("2)"),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "normal",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("1)"),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "normal",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("2)"),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "normal",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("3)"),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "normal",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("4)"),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "normal",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("5)"),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "bold",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("3."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Segoe UI'",
            "mso-fareast-font-family": "宋体",
            color: "rgb(74,74,74)",
            "letter-spacing": "0.0000pt",
            "font-weight": "bold",
            "text-transform": "none",
            "font-style": "normal",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
            background: "rgb(255,255,255)",
            "mso-shading": "rgb(255,255,255)",
          },
        },
        [_vm._v("WARRANTIES AND REPRESENTATIONS")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "bold",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("4."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Segoe UI'",
            "mso-fareast-font-family": "宋体",
            color: "rgb(74,74,74)",
            "letter-spacing": "0.0000pt",
            "font-weight": "bold",
            "text-transform": "none",
            "font-style": "normal",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
            background: "rgb(255,255,255)",
            "mso-shading": "rgb(255,255,255)",
          },
        },
        [_vm._v("INDEMNIFICATION AND LIABILITY")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "normal",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("4.1."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "normal",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("4.2."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "normal",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("4.3."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "normal",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("4.4."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "normal",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("4.5."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "span",
      {
        staticStyle: {
          "font-family": "'Segoe UI'",
          "mso-fareast-font-family": "宋体",
          color: "rgb(74,74,74)",
          "letter-spacing": "0.0000pt",
          "font-weight": "bold",
          "text-transform": "none",
          "font-style": "normal",
          "font-size": "10.5000pt",
          "mso-font-kerning": "1.0000pt",
          background: "rgb(255,255,255)",
          "mso-shading": "rgb(255,255,255)",
        },
      },
      [
        _c("span", { staticStyle: { "mso-list": "Ignore" } }, [
          _vm._v("5."),
          _c("span", [_vm._v(" ")]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Segoe UI'",
            "mso-fareast-font-family": "宋体",
            color: "rgb(74,74,74)",
            "letter-spacing": "0.0000pt",
            "font-weight": "bold",
            "text-transform": "none",
            "font-style": "normal",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
            background: "rgb(255,255,255)",
            "mso-shading": "rgb(255,255,255)",
          },
        },
        [_vm._v("ADDITIONAL TERMS")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Segoe UI'",
            "mso-fareast-font-family": "宋体",
            color: "rgb(74,74,74)",
            "letter-spacing": "0.0000pt",
            "font-weight": "bold",
            "text-transform": "none",
            "font-style": "normal",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
            background: "rgb(255,255,255)",
            "mso-shading": "rgb(255,255,255)",
          },
        },
        [_vm._v("EFFECTIVE DATE: May ")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("b", [
      _c(
        "span",
        {
          staticStyle: {
            "mso-spacerun": "'yes'",
            "font-family": "'Segoe UI'",
            "mso-fareast-font-family": "宋体",
            color: "rgb(74,74,74)",
            "letter-spacing": "0.0000pt",
            "font-weight": "bold",
            "text-transform": "none",
            "font-style": "normal",
            "font-size": "10.5000pt",
            "mso-font-kerning": "1.0000pt",
            background: "rgb(255,255,255)",
            "mso-shading": "rgb(255,255,255)",
          },
        },
        [_vm._v(", 2022")]
      ),
    ])
  },
]
render._withStripped = true

export { render, staticRenderFns }"}]}