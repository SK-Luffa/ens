{"remainingRequest":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/src/components/BottomNavigation/xml/Privacy.vue?vue&type=template&id=3320dba0&scoped=true&","dependencies":[{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/src/components/BottomNavigation/xml/Privacy.vue","mtime":1661335178540},{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/cache-loader/dist/cjs.js","mtime":1665559060439},{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1665559060933},{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/cache-loader/dist/cjs.js","mtime":1665559060439},{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/vue-loader/lib/index.js","mtime":1665559060829}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}