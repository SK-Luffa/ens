{"remainingRequest":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/src/components/Shoppingcar/index.vue?vue&type=template&id=621cba22&scoped=true&","dependencies":[{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/src/components/Shoppingcar/index.vue","mtime":1665654356076},{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/cache-loader/dist/cjs.js","mtime":1665559060439},{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1665559060933},{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/cache-loader/dist/cjs.js","mtime":1665559060439},{"path":"/Users/dengzixu/WebstormProjects/vue/pattern100_en_web/en/node_modules/vue-loader/lib/index.js","mtime":1665559060829}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}